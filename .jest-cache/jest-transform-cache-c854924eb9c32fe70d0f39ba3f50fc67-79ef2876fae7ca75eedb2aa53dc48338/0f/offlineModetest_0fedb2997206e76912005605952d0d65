42dd8e462aef46b4a9a521e98dd8e893
_getJestObj().mock('../../../src/services/contactDatabaseService');
_getJestObj().mock('@react-native-async-storage/async-storage');
_getJestObj().mock('@react-native-community/netinfo', function () {
  return {
    fetch: jest.fn(function () {
      return Promise.resolve(mockNetInfo);
    }),
    addEventListener: jest.fn(function () {
      return jest.fn();
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _contactSyncService = require("../../../src/services/contactSyncService");
var _contactDatabaseService = require("../../../src/services/contactDatabaseService");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockNetInfo = {
  isConnected: true,
  type: 'wifi'
};
var createMockContact = function createMockContact(overrides) {
  return Object.assign({
    id: `contact-${Math.random().toString(36).substr(2, 9)}`,
    fields: [{
      id: 'field-name',
      type: 'name',
      label: 'Full Name',
      value: 'John Doe',
      isEditable: true
    }, {
      id: 'field-email',
      type: 'email',
      label: 'Email',
      value: 'john@example.com',
      isEditable: true
    }],
    source: 'manual',
    confidence: 0.85,
    createdAt: '2024-01-01T00:00:00.000Z',
    updatedAt: '2024-01-01T00:00:00.000Z',
    tags: ['business'],
    isVerified: true,
    needsReview: false,
    isFavorite: false,
    syncStatus: 'pending'
  }, overrides);
};
describe('ContactSyncService - Offline Mode', function () {
  var mockDb = _contactDatabaseService.contactDatabaseService;
  var mockStorage = _asyncStorage.default;
  beforeEach(function () {
    jest.clearAllMocks();
    mockNetInfo.isConnected = true;
    global.fetch = jest.fn();
  });
  describe('Offline Detection', function () {
    it('should detect when device goes offline', (0, _asyncToGenerator2.default)(function* () {
      mockNetInfo.isConnected = false;
      var isOnline = yield _contactSyncService.contactSyncService.checkConnectivity();
      expect(isOnline).toBe(false);
    }));
    it('should detect when device comes back online', (0, _asyncToGenerator2.default)(function* () {
      mockNetInfo.isConnected = true;
      var isOnline = yield _contactSyncService.contactSyncService.checkConnectivity();
      expect(isOnline).toBe(true);
    }));
    it('should handle network state changes', (0, _asyncToGenerator2.default)(function* () {
      var networkChangeHandler = jest.fn();
      _contactSyncService.contactSyncService.onNetworkStateChange(networkChangeHandler);
      mockNetInfo.isConnected = false;
      yield _contactSyncService.contactSyncService.handleNetworkChange(mockNetInfo);
      expect(networkChangeHandler).toHaveBeenCalledWith({
        isOnline: false,
        type: 'wifi'
      });
    }));
  });
  describe('Offline Queue Management', function () {
    it('should queue contact creation when offline', (0, _asyncToGenerator2.default)(function* () {
      mockNetInfo.isConnected = false;
      var newContact = createMockContact({
        id: 'offline-create-test',
        syncStatus: 'pending'
      });
      mockDb.createContact.mockResolvedValue(newContact);
      mockStorage.getItem.mockResolvedValue('[]');
      mockStorage.setItem.mockResolvedValue();
      var result = yield _contactSyncService.contactSyncService.createContactOffline(newContact);
      expect(result.syncStatus).toBe('pending');
      expect(mockStorage.setItem).toHaveBeenCalledWith('contact_sync_queue', expect.stringContaining('"action":"create"'));
    }));
    it('should queue contact updates when offline', (0, _asyncToGenerator2.default)(function* () {
      mockNetInfo.isConnected = false;
      var updatedContact = createMockContact({
        id: 'offline-update-test',
        fields: [{
          id: 'field-1',
          type: 'name',
          label: 'Name',
          value: 'Updated Name',
          isEditable: true
        }],
        syncStatus: 'pending'
      });
      mockDb.updateContact.mockResolvedValue(updatedContact);
      mockStorage.getItem.mockResolvedValue('[]');
      mockStorage.setItem.mockResolvedValue();
      var result = yield _contactSyncService.contactSyncService.updateContactOffline(updatedContact);
      expect(result.syncStatus).toBe('pending');
      expect(mockStorage.setItem).toHaveBeenCalledWith('contact_sync_queue', expect.stringContaining('"action":"update"'));
    }));
    it('should queue contact deletion when offline', (0, _asyncToGenerator2.default)(function* () {
      mockNetInfo.isConnected = false;
      var contactId = 'offline-delete-test';
      mockDb.deleteContact.mockResolvedValue(true);
      mockStorage.getItem.mockResolvedValue('[]');
      mockStorage.setItem.mockResolvedValue();
      var result = yield _contactSyncService.contactSyncService.deleteContactOffline(contactId);
      expect(result).toBe(true);
      expect(mockStorage.setItem).toHaveBeenCalledWith('contact_sync_queue', expect.stringContaining('"action":"delete"'));
    }));
    it('should maintain queue order for operations', (0, _asyncToGenerator2.default)(function* () {
      mockNetInfo.isConnected = false;
      var contact1 = createMockContact({
        id: 'queue-order-1'
      });
      var contact2 = createMockContact({
        id: 'queue-order-2'
      });
      var contact3 = createMockContact({
        id: 'queue-order-3'
      });
      mockDb.createContact.mockResolvedValue(contact1);
      mockDb.updateContact.mockResolvedValue(contact2);
      mockDb.deleteContact.mockResolvedValue(true);
      var queueData = [];
      mockStorage.getItem.mockImplementation(function () {
        return Promise.resolve(JSON.stringify(queueData));
      });
      mockStorage.setItem.mockImplementation(function (key, value) {
        queueData = JSON.parse(value);
        return Promise.resolve();
      });
      yield _contactSyncService.contactSyncService.createContactOffline(contact1);
      yield _contactSyncService.contactSyncService.updateContactOffline(contact2);
      yield _contactSyncService.contactSyncService.deleteContactOffline(contact3.id);
      expect(queueData).toHaveLength(3);
      expect(queueData[0].action).toBe('create');
      expect(queueData[1].action).toBe('update');
      expect(queueData[2].action).toBe('delete');
    }));
  });
  describe('Sync Queue Processing', function () {
    it('should process queued operations when coming online', (0, _asyncToGenerator2.default)(function* () {
      var queuedOperations = [{
        id: 'op-1',
        action: 'create',
        contact: createMockContact({
          id: 'queue-create'
        }),
        timestamp: '2024-01-01T10:00:00.000Z'
      }, {
        id: 'op-2',
        action: 'update',
        contact: createMockContact({
          id: 'queue-update'
        }),
        timestamp: '2024-01-01T10:01:00.000Z'
      }, {
        id: 'op-3',
        action: 'delete',
        contactId: 'queue-delete',
        timestamp: '2024-01-01T10:02:00.000Z'
      }];
      mockStorage.getItem.mockResolvedValue(JSON.stringify(queuedOperations));
      mockStorage.setItem.mockResolvedValue();
      global.fetch = jest.fn().mockResolvedValueOnce({
        ok: true,
        json: function json() {
          return Promise.resolve({
            success: true
          });
        }
      }).mockResolvedValueOnce({
        ok: true,
        json: function json() {
          return Promise.resolve({
            success: true
          });
        }
      }).mockResolvedValueOnce({
        ok: true,
        json: function json() {
          return Promise.resolve({
            success: true
          });
        }
      });
      mockNetInfo.isConnected = true;
      var result = yield _contactSyncService.contactSyncService.processSyncQueue();
      expect(result.processed).toBe(3);
      expect(result.successful).toBe(3);
      expect(result.failed).toBe(0);
      expect(mockStorage.setItem).toHaveBeenCalledWith('contact_sync_queue', '[]');
    }));
    it('should handle partial queue processing failures', (0, _asyncToGenerator2.default)(function* () {
      var queuedOperations = [{
        id: 'op-1',
        action: 'create',
        contact: createMockContact({
          id: 'success-create'
        }),
        timestamp: '2024-01-01T10:00:00.000Z'
      }, {
        id: 'op-2',
        action: 'update',
        contact: createMockContact({
          id: 'fail-update'
        }),
        timestamp: '2024-01-01T10:01:00.000Z'
      }];
      mockStorage.getItem.mockResolvedValue(JSON.stringify(queuedOperations));
      mockStorage.setItem.mockResolvedValue();
      global.fetch = jest.fn().mockResolvedValueOnce({
        ok: true,
        json: function json() {
          return Promise.resolve({
            success: true
          });
        }
      }).mockResolvedValueOnce({
        ok: false,
        status: 500,
        statusText: 'Internal Server Error'
      });
      var result = yield _contactSyncService.contactSyncService.processSyncQueue();
      expect(result.processed).toBe(2);
      expect(result.successful).toBe(1);
      expect(result.failed).toBe(1);
      expect(mockStorage.setItem).toHaveBeenCalledWith('contact_sync_queue', expect.stringContaining('fail-update'));
    }));
    it('should retry failed operations with exponential backoff', (0, _asyncToGenerator2.default)(function* () {
      var failedOperation = {
        id: 'retry-op',
        action: 'create',
        contact: createMockContact({
          id: 'retry-contact'
        }),
        timestamp: '2024-01-01T10:00:00.000Z',
        retryCount: 0,
        maxRetries: 3
      };
      mockStorage.getItem.mockResolvedValue(JSON.stringify([failedOperation]));
      mockStorage.setItem.mockResolvedValue();
      global.fetch = jest.fn().mockRejectedValueOnce(new Error('Network error')).mockRejectedValueOnce(new Error('Network error')).mockResolvedValueOnce({
        ok: true,
        json: function json() {
          return Promise.resolve({
            success: true
          });
        }
      });
      var result = yield _contactSyncService.contactSyncService.processSyncQueue();
      expect(result.failed).toBe(1);
      result = yield _contactSyncService.contactSyncService.processSyncQueue();
      expect(result.failed).toBe(1);
      result = yield _contactSyncService.contactSyncService.processSyncQueue();
      expect(result.successful).toBe(1);
    }));
  });
  describe('Data Consistency in Offline Mode', function () {
    it('should maintain data integrity during offline operations', (0, _asyncToGenerator2.default)(function* () {
      mockNetInfo.isConnected = false;
      var contact = createMockContact({
        id: 'integrity-test',
        updatedAt: '2024-01-01T10:00:00.000Z'
      });
      mockDb.createContact.mockResolvedValue(contact);
      mockDb.getContactById.mockResolvedValue(contact);
      mockStorage.getItem.mockResolvedValue('[]');
      mockStorage.setItem.mockResolvedValue();
      yield _contactSyncService.contactSyncService.createContactOffline(contact);
      var localContact = yield _contactSyncService.contactSyncService.getContactById(contact.id);
      expect(localContact).toBeDefined();
      expect(localContact == null ? void 0 : localContact.syncStatus).toBe('pending');
      var updatedContact = Object.assign({}, contact, {
        fields: [].concat((0, _toConsumableArray2.default)(contact.fields), [{
          id: 'new-field',
          type: 'phone',
          label: 'Phone',
          value: '+1-555-0123',
          isEditable: true
        }]),
        updatedAt: '2024-01-01T11:00:00.000Z'
      });
      mockDb.updateContact.mockResolvedValue(updatedContact);
      yield _contactSyncService.contactSyncService.updateContactOffline(updatedContact);
      var finalContact = yield _contactSyncService.contactSyncService.getContactById(contact.id);
      expect(finalContact == null ? void 0 : finalContact.fields).toHaveLength(3);
      expect(finalContact == null ? void 0 : finalContact.syncStatus).toBe('pending');
    }));
    it('should handle concurrent offline operations safely', (0, _asyncToGenerator2.default)(function* () {
      mockNetInfo.isConnected = false;
      var baseContact = createMockContact({
        id: 'concurrent-test'
      });
      mockDb.createContact.mockResolvedValue(baseContact);
      mockDb.updateContact.mockResolvedValue(baseContact);
      mockStorage.getItem.mockResolvedValue('[]');
      mockStorage.setItem.mockResolvedValue();
      var operations = [_contactSyncService.contactSyncService.createContactOffline(baseContact), _contactSyncService.contactSyncService.updateContactOffline(Object.assign({}, baseContact, {
        tags: [].concat((0, _toConsumableArray2.default)(baseContact.tags), ['updated'])
      })), _contactSyncService.contactSyncService.updateContactOffline(Object.assign({}, baseContact, {
        isFavorite: true
      }))];
      var results = yield Promise.allSettled(operations);
      expect(results.every(function (r) {
        return r.status === 'fulfilled';
      })).toBe(true);
    }));
    it('should preserve operation order across app restarts', (0, _asyncToGenerator2.default)(function* () {
      var existingQueue = [{
        id: 'existing-op-1',
        action: 'create',
        contact: createMockContact({
          id: 'existing-1'
        }),
        timestamp: '2024-01-01T09:00:00.000Z'
      }];
      mockStorage.getItem.mockResolvedValue(JSON.stringify(existingQueue));
      mockNetInfo.isConnected = false;
      var newContact = createMockContact({
        id: 'new-operation'
      });
      var currentQueue = existingQueue;
      mockStorage.setItem.mockImplementation(function (key, value) {
        currentQueue = JSON.parse(value);
        return Promise.resolve();
      });
      mockDb.createContact.mockResolvedValue(newContact);
      yield _contactSyncService.contactSyncService.createContactOffline(newContact);
      expect(currentQueue).toHaveLength(2);
      expect(currentQueue[0].id).toBe('existing-op-1');
      expect(currentQueue[1].contact.id).toBe('new-operation');
    }));
  });
  describe('Offline Storage Optimization', function () {
    it('should compress queue data for storage efficiency', (0, _asyncToGenerator2.default)(function* () {
      var largeQueue = Array.from({
        length: 100
      }, function (_, i) {
        return {
          id: `large-op-${i}`,
          action: 'create',
          contact: createMockContact({
            id: `large-contact-${i}`,
            fields: Array.from({
              length: 10
            }, function (_, j) {
              return {
                id: `field-${i}-${j}`,
                type: 'custom',
                label: `Custom Field ${j}`,
                value: `Value ${i}-${j}`.repeat(10),
                isEditable: true
              };
            })
          }),
          timestamp: new Date().toISOString()
        };
      });
      mockStorage.getItem.mockResolvedValue('[]');
      var storedData = '';
      mockStorage.setItem.mockImplementation(function (key, value) {
        storedData = value;
        return Promise.resolve();
      });
      yield _contactSyncService.contactSyncService.saveQueueToStorage(largeQueue);
      expect(storedData.length).toBeGreaterThan(0);
      var parsedData = JSON.parse(storedData);
      expect(parsedData).toHaveLength(100);
    }));
    it('should handle storage quota limits gracefully', (0, _asyncToGenerator2.default)(function* () {
      var oversizedOperation = {
        id: 'oversized-op',
        action: 'create',
        contact: createMockContact({
          id: 'oversized-contact',
          fields: Array.from({
            length: 1000
          }, function (_, i) {
            return {
              id: `huge-field-${i}`,
              type: 'custom',
              label: `Field ${i}`,
              value: 'x'.repeat(10000),
              isEditable: true
            };
          })
        }),
        timestamp: new Date().toISOString()
      };
      mockStorage.getItem.mockResolvedValue('[]');
      mockStorage.setItem.mockRejectedValue(new Error('QuotaExceededError'));
      var result = yield _contactSyncService.contactSyncService.addToSyncQueue(oversizedOperation);
      expect(result.success).toBe(false);
      expect(result.error).toContain('storage');
    }));
    it('should clean up old completed operations from queue', (0, _asyncToGenerator2.default)(function* () {
      var oldCompletedOps = Array.from({
        length: 50
      }, function (_, i) {
        return {
          id: `old-completed-${i}`,
          action: 'create',
          contact: createMockContact({
            id: `old-${i}`
          }),
          timestamp: '2024-01-01T00:00:00.000Z',
          status: 'completed',
          completedAt: '2024-01-01T01:00:00.000Z'
        };
      });
      var pendingOps = Array.from({
        length: 5
      }, function (_, i) {
        return {
          id: `pending-${i}`,
          action: 'update',
          contact: createMockContact({
            id: `pending-${i}`
          }),
          timestamp: '2024-01-02T00:00:00.000Z',
          status: 'pending'
        };
      });
      var allOps = [].concat(oldCompletedOps, pendingOps);
      mockStorage.getItem.mockResolvedValue(JSON.stringify(allOps));
      var cleanedQueue = [];
      mockStorage.setItem.mockImplementation(function (key, value) {
        cleanedQueue = JSON.parse(value);
        return Promise.resolve();
      });
      yield _contactSyncService.contactSyncService.cleanupSyncQueue(24 * 60 * 60 * 1000);
      expect(cleanedQueue.length).toBeLessThan(allOps.length);
      expect(cleanedQueue.every(function (op) {
        return op.status === 'pending' || new Date(op.completedAt || op.timestamp) > new Date('2024-01-01T12:00:00.000Z');
      })).toBe(true);
    }));
  });
  describe('Background Sync', function () {
    it('should schedule background sync when app goes to background', (0, _asyncToGenerator2.default)(function* () {
      var backgroundSyncScheduler = jest.fn();
      _contactSyncService.contactSyncService.setBackgroundSyncScheduler(backgroundSyncScheduler);
      yield _contactSyncService.contactSyncService.scheduleBackgroundSync();
      expect(backgroundSyncScheduler).toHaveBeenCalledWith({
        taskName: 'contact-sync',
        interval: expect.any(Number),
        requiredNetworkType: 'any'
      });
    }));
    it('should process sync queue during background sync', (0, _asyncToGenerator2.default)(function* () {
      var queuedOperations = [{
        id: 'bg-op-1',
        action: 'create',
        contact: createMockContact({
          id: 'bg-contact'
        }),
        timestamp: '2024-01-01T10:00:00.000Z'
      }];
      mockStorage.getItem.mockResolvedValue(JSON.stringify(queuedOperations));
      mockStorage.setItem.mockResolvedValue();
      global.fetch = jest.fn().mockResolvedValue({
        ok: true,
        json: function json() {
          return Promise.resolve({
            success: true
          });
        }
      });
      var result = yield _contactSyncService.contactSyncService.performBackgroundSync();
      expect(result.processed).toBe(1);
      expect(result.successful).toBe(1);
    }));
    it('should handle background sync timeout', (0, _asyncToGenerator2.default)(function* () {
      var longRunningQueue = Array.from({
        length: 1000
      }, function (_, i) {
        return {
          id: `timeout-op-${i}`,
          action: 'create',
          contact: createMockContact({
            id: `timeout-contact-${i}`
          }),
          timestamp: new Date().toISOString()
        };
      });
      mockStorage.getItem.mockResolvedValue(JSON.stringify(longRunningQueue));
      global.fetch = jest.fn().mockImplementation(function () {
        return new Promise(function (resolve) {
          return setTimeout(function () {
            return resolve({
              ok: true,
              json: function json() {
                return Promise.resolve({
                  success: true
                });
              }
            });
          }, 1000);
        });
      });
      var syncTimeout = 5000;
      var startTime = Date.now();
      var result = yield _contactSyncService.contactSyncService.performBackgroundSync({
        timeout: syncTimeout
      });
      var duration = Date.now() - startTime;
      expect(duration).toBeLessThan(syncTimeout + 1000);
      expect(result.processed).toBeLessThan(longRunningQueue.length);
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJmZXRjaCIsImplc3QiLCJmbiIsIlByb21pc2UiLCJyZXNvbHZlIiwibW9ja05ldEluZm8iLCJhZGRFdmVudExpc3RlbmVyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfdG9Db25zdW1hYmxlQXJyYXkyIiwiX2FzeW5jVG9HZW5lcmF0b3IyIiwiX2NvbnRhY3RTeW5jU2VydmljZSIsIl9jb250YWN0RGF0YWJhc2VTZXJ2aWNlIiwiX2FzeW5jU3RvcmFnZSIsIl9yZXF1aXJlIiwiaXNDb25uZWN0ZWQiLCJ0eXBlIiwiY3JlYXRlTW9ja0NvbnRhY3QiLCJvdmVycmlkZXMiLCJPYmplY3QiLCJhc3NpZ24iLCJpZCIsIk1hdGgiLCJyYW5kb20iLCJ0b1N0cmluZyIsInN1YnN0ciIsImZpZWxkcyIsImxhYmVsIiwidmFsdWUiLCJpc0VkaXRhYmxlIiwic291cmNlIiwiY29uZmlkZW5jZSIsImNyZWF0ZWRBdCIsInVwZGF0ZWRBdCIsInRhZ3MiLCJpc1ZlcmlmaWVkIiwibmVlZHNSZXZpZXciLCJpc0Zhdm9yaXRlIiwic3luY1N0YXR1cyIsImRlc2NyaWJlIiwibW9ja0RiIiwiY29udGFjdERhdGFiYXNlU2VydmljZSIsIm1vY2tTdG9yYWdlIiwiQXN5bmNTdG9yYWdlIiwiYmVmb3JlRWFjaCIsImNsZWFyQWxsTW9ja3MiLCJnbG9iYWwiLCJpdCIsImRlZmF1bHQiLCJpc09ubGluZSIsImNvbnRhY3RTeW5jU2VydmljZSIsImNoZWNrQ29ubmVjdGl2aXR5IiwiZXhwZWN0IiwidG9CZSIsIm5ldHdvcmtDaGFuZ2VIYW5kbGVyIiwib25OZXR3b3JrU3RhdGVDaGFuZ2UiLCJoYW5kbGVOZXR3b3JrQ2hhbmdlIiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiLCJuZXdDb250YWN0IiwiY3JlYXRlQ29udGFjdCIsIm1vY2tSZXNvbHZlZFZhbHVlIiwiZ2V0SXRlbSIsInNldEl0ZW0iLCJyZXN1bHQiLCJjcmVhdGVDb250YWN0T2ZmbGluZSIsInN0cmluZ0NvbnRhaW5pbmciLCJ1cGRhdGVkQ29udGFjdCIsInVwZGF0ZUNvbnRhY3QiLCJ1cGRhdGVDb250YWN0T2ZmbGluZSIsImNvbnRhY3RJZCIsImRlbGV0ZUNvbnRhY3QiLCJkZWxldGVDb250YWN0T2ZmbGluZSIsImNvbnRhY3QxIiwiY29udGFjdDIiLCJjb250YWN0MyIsInF1ZXVlRGF0YSIsIm1vY2tJbXBsZW1lbnRhdGlvbiIsIkpTT04iLCJzdHJpbmdpZnkiLCJrZXkiLCJwYXJzZSIsInRvSGF2ZUxlbmd0aCIsImFjdGlvbiIsInF1ZXVlZE9wZXJhdGlvbnMiLCJjb250YWN0IiwidGltZXN0YW1wIiwibW9ja1Jlc29sdmVkVmFsdWVPbmNlIiwib2siLCJqc29uIiwic3VjY2VzcyIsInByb2Nlc3NTeW5jUXVldWUiLCJwcm9jZXNzZWQiLCJzdWNjZXNzZnVsIiwiZmFpbGVkIiwic3RhdHVzIiwic3RhdHVzVGV4dCIsImZhaWxlZE9wZXJhdGlvbiIsInJldHJ5Q291bnQiLCJtYXhSZXRyaWVzIiwibW9ja1JlamVjdGVkVmFsdWVPbmNlIiwiRXJyb3IiLCJnZXRDb250YWN0QnlJZCIsImxvY2FsQ29udGFjdCIsInRvQmVEZWZpbmVkIiwiY29uY2F0IiwiZmluYWxDb250YWN0IiwiYmFzZUNvbnRhY3QiLCJvcGVyYXRpb25zIiwicmVzdWx0cyIsImFsbFNldHRsZWQiLCJldmVyeSIsInIiLCJleGlzdGluZ1F1ZXVlIiwiY3VycmVudFF1ZXVlIiwibGFyZ2VRdWV1ZSIsIkFycmF5IiwiZnJvbSIsImxlbmd0aCIsIl8iLCJpIiwiaiIsInJlcGVhdCIsIkRhdGUiLCJ0b0lTT1N0cmluZyIsInN0b3JlZERhdGEiLCJzYXZlUXVldWVUb1N0b3JhZ2UiLCJ0b0JlR3JlYXRlclRoYW4iLCJwYXJzZWREYXRhIiwib3ZlcnNpemVkT3BlcmF0aW9uIiwibW9ja1JlamVjdGVkVmFsdWUiLCJhZGRUb1N5bmNRdWV1ZSIsImVycm9yIiwidG9Db250YWluIiwib2xkQ29tcGxldGVkT3BzIiwiY29tcGxldGVkQXQiLCJwZW5kaW5nT3BzIiwiYWxsT3BzIiwiY2xlYW5lZFF1ZXVlIiwiY2xlYW51cFN5bmNRdWV1ZSIsInRvQmVMZXNzVGhhbiIsIm9wIiwiYmFja2dyb3VuZFN5bmNTY2hlZHVsZXIiLCJzZXRCYWNrZ3JvdW5kU3luY1NjaGVkdWxlciIsInNjaGVkdWxlQmFja2dyb3VuZFN5bmMiLCJ0YXNrTmFtZSIsImludGVydmFsIiwiYW55IiwiTnVtYmVyIiwicmVxdWlyZWROZXR3b3JrVHlwZSIsInBlcmZvcm1CYWNrZ3JvdW5kU3luYyIsImxvbmdSdW5uaW5nUXVldWUiLCJzZXRUaW1lb3V0Iiwic3luY1RpbWVvdXQiLCJzdGFydFRpbWUiLCJub3ciLCJ0aW1lb3V0IiwiZHVyYXRpb24iXSwic291cmNlcyI6WyJvZmZsaW5lTW9kZS50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29udGFjdCBTeW5jIFNlcnZpY2UgT2ZmbGluZSBNb2RlIFRlc3RzXG4gKiBcbiAqIFRlc3RzIGZvciBvZmZsaW5lIGZ1bmN0aW9uYWxpdHkgYW5kIHN5bmMgcXVldWUgbWFuYWdlbWVudFxuICovXG5cbmltcG9ydCB7IGNvbnRhY3RTeW5jU2VydmljZSB9IGZyb20gJy4uLy4uLy4uL3NyYy9zZXJ2aWNlcy9jb250YWN0U3luY1NlcnZpY2UnO1xuaW1wb3J0IHsgQ29udGFjdCwgQ29udGFjdFN5bmNDb25maWcgfSBmcm9tICcuLi8uLi8uLi9zcmMvdHlwZXMvY29udGFjdHMnO1xuaW1wb3J0IHsgY29udGFjdERhdGFiYXNlU2VydmljZSB9IGZyb20gJy4uLy4uLy4uL3NyYy9zZXJ2aWNlcy9jb250YWN0RGF0YWJhc2VTZXJ2aWNlJztcbmltcG9ydCBBc3luY1N0b3JhZ2UgZnJvbSAnQHJlYWN0LW5hdGl2ZS1hc3luYy1zdG9yYWdlL2FzeW5jLXN0b3JhZ2UnO1xuXG4vLyBNb2NrIGRlcGVuZGVuY2llc1xuamVzdC5tb2NrKCcuLi8uLi8uLi9zcmMvc2VydmljZXMvY29udGFjdERhdGFiYXNlU2VydmljZScpO1xuamVzdC5tb2NrKCdAcmVhY3QtbmF0aXZlLWFzeW5jLXN0b3JhZ2UvYXN5bmMtc3RvcmFnZScpO1xuXG4vLyBNb2NrIG5ldHdvcmsgY29ubmVjdGl2aXR5XG5jb25zdCBtb2NrTmV0SW5mbyA9IHtcbiAgaXNDb25uZWN0ZWQ6IHRydWUsXG4gIHR5cGU6ICd3aWZpJyxcbn07XG5cbmplc3QubW9jaygnQHJlYWN0LW5hdGl2ZS1jb21tdW5pdHkvbmV0aW5mbycsICgpID0+ICh7XG4gIGZldGNoOiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZShtb2NrTmV0SW5mbykpLFxuICBhZGRFdmVudExpc3RlbmVyOiBqZXN0LmZuKCgpID0+IGplc3QuZm4oKSksXG59KSk7XG5cbi8vIE1vY2sgZGF0YSBoZWxwZXJzXG5jb25zdCBjcmVhdGVNb2NrQ29udGFjdCA9IChvdmVycmlkZXM/OiBQYXJ0aWFsPENvbnRhY3Q+KTogQ29udGFjdCA9PiAoe1xuICBpZDogYGNvbnRhY3QtJHtNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwgOSl9YCxcbiAgZmllbGRzOiBbXG4gICAge1xuICAgICAgaWQ6ICdmaWVsZC1uYW1lJyxcbiAgICAgIHR5cGU6ICduYW1lJyxcbiAgICAgIGxhYmVsOiAnRnVsbCBOYW1lJyxcbiAgICAgIHZhbHVlOiAnSm9obiBEb2UnLFxuICAgICAgaXNFZGl0YWJsZTogdHJ1ZSxcbiAgICB9LFxuICAgIHtcbiAgICAgIGlkOiAnZmllbGQtZW1haWwnLFxuICAgICAgdHlwZTogJ2VtYWlsJyxcbiAgICAgIGxhYmVsOiAnRW1haWwnLFxuICAgICAgdmFsdWU6ICdqb2huQGV4YW1wbGUuY29tJyxcbiAgICAgIGlzRWRpdGFibGU6IHRydWUsXG4gICAgfSxcbiAgXSxcbiAgc291cmNlOiAnbWFudWFsJyxcbiAgY29uZmlkZW5jZTogMC44NSxcbiAgY3JlYXRlZEF0OiAnMjAyNC0wMS0wMVQwMDowMDowMC4wMDBaJyxcbiAgdXBkYXRlZEF0OiAnMjAyNC0wMS0wMVQwMDowMDowMC4wMDBaJyxcbiAgdGFnczogWydidXNpbmVzcyddLFxuICBpc1ZlcmlmaWVkOiB0cnVlLFxuICBuZWVkc1JldmlldzogZmFsc2UsXG4gIGlzRmF2b3JpdGU6IGZhbHNlLFxuICBzeW5jU3RhdHVzOiAncGVuZGluZycsXG4gIC4uLm92ZXJyaWRlcyxcbn0pO1xuXG5kZXNjcmliZSgnQ29udGFjdFN5bmNTZXJ2aWNlIC0gT2ZmbGluZSBNb2RlJywgKCkgPT4ge1xuICBjb25zdCBtb2NrRGIgPSBjb250YWN0RGF0YWJhc2VTZXJ2aWNlIGFzIGplc3QuTW9ja2VkPHR5cGVvZiBjb250YWN0RGF0YWJhc2VTZXJ2aWNlPjtcbiAgY29uc3QgbW9ja1N0b3JhZ2UgPSBBc3luY1N0b3JhZ2UgYXMgamVzdC5Nb2NrZWQ8dHlwZW9mIEFzeW5jU3RvcmFnZT47XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XG4gICAgbW9ja05ldEluZm8uaXNDb25uZWN0ZWQgPSB0cnVlO1xuICAgIGdsb2JhbC5mZXRjaCA9IGplc3QuZm4oKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ09mZmxpbmUgRGV0ZWN0aW9uJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgZGV0ZWN0IHdoZW4gZGV2aWNlIGdvZXMgb2ZmbGluZScsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tOZXRJbmZvLmlzQ29ubmVjdGVkID0gZmFsc2U7XG5cbiAgICAgIGNvbnN0IGlzT25saW5lID0gYXdhaXQgY29udGFjdFN5bmNTZXJ2aWNlLmNoZWNrQ29ubmVjdGl2aXR5KCk7XG4gICAgICBcbiAgICAgIGV4cGVjdChpc09ubGluZSkudG9CZShmYWxzZSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGRldGVjdCB3aGVuIGRldmljZSBjb21lcyBiYWNrIG9ubGluZScsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tOZXRJbmZvLmlzQ29ubmVjdGVkID0gdHJ1ZTtcblxuICAgICAgY29uc3QgaXNPbmxpbmUgPSBhd2FpdCBjb250YWN0U3luY1NlcnZpY2UuY2hlY2tDb25uZWN0aXZpdHkoKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KGlzT25saW5lKS50b0JlKHRydWUpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgbmV0d29yayBzdGF0ZSBjaGFuZ2VzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbmV0d29ya0NoYW5nZUhhbmRsZXIgPSBqZXN0LmZuKCk7XG4gICAgICBcbiAgICAgIGNvbnRhY3RTeW5jU2VydmljZS5vbk5ldHdvcmtTdGF0ZUNoYW5nZShuZXR3b3JrQ2hhbmdlSGFuZGxlcik7XG5cbiAgICAgIC8vIFNpbXVsYXRlIG5ldHdvcmsgY2hhbmdlXG4gICAgICBtb2NrTmV0SW5mby5pc0Nvbm5lY3RlZCA9IGZhbHNlO1xuICAgICAgXG4gICAgICAvLyBJbiByZWFsIGltcGxlbWVudGF0aW9uLCB0aGlzIHdvdWxkIGJlIHRyaWdnZXJlZCBieSBOZXRJbmZvXG4gICAgICBhd2FpdCBjb250YWN0U3luY1NlcnZpY2UuaGFuZGxlTmV0d29ya0NoYW5nZShtb2NrTmV0SW5mbyk7XG4gICAgICBcbiAgICAgIGV4cGVjdChuZXR3b3JrQ2hhbmdlSGFuZGxlcikudG9IYXZlQmVlbkNhbGxlZFdpdGgoe1xuICAgICAgICBpc09ubGluZTogZmFsc2UsXG4gICAgICAgIHR5cGU6ICd3aWZpJyxcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnT2ZmbGluZSBRdWV1ZSBNYW5hZ2VtZW50JywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgcXVldWUgY29udGFjdCBjcmVhdGlvbiB3aGVuIG9mZmxpbmUnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrTmV0SW5mby5pc0Nvbm5lY3RlZCA9IGZhbHNlO1xuICAgICAgXG4gICAgICBjb25zdCBuZXdDb250YWN0ID0gY3JlYXRlTW9ja0NvbnRhY3Qoe1xuICAgICAgICBpZDogJ29mZmxpbmUtY3JlYXRlLXRlc3QnLFxuICAgICAgICBzeW5jU3RhdHVzOiAncGVuZGluZycsXG4gICAgICB9KTtcblxuICAgICAgbW9ja0RiLmNyZWF0ZUNvbnRhY3QubW9ja1Jlc29sdmVkVmFsdWUobmV3Q29udGFjdCk7XG4gICAgICBtb2NrU3RvcmFnZS5nZXRJdGVtLm1vY2tSZXNvbHZlZFZhbHVlKCdbXScpOyAvLyBFbXB0eSBxdWV1ZVxuICAgICAgbW9ja1N0b3JhZ2Uuc2V0SXRlbS5tb2NrUmVzb2x2ZWRWYWx1ZSgpO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjb250YWN0U3luY1NlcnZpY2UuY3JlYXRlQ29udGFjdE9mZmxpbmUobmV3Q29udGFjdCk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQuc3luY1N0YXR1cykudG9CZSgncGVuZGluZycpO1xuICAgICAgZXhwZWN0KG1vY2tTdG9yYWdlLnNldEl0ZW0pLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgICAnY29udGFjdF9zeW5jX3F1ZXVlJyxcbiAgICAgICAgZXhwZWN0LnN0cmluZ0NvbnRhaW5pbmcoJ1wiYWN0aW9uXCI6XCJjcmVhdGVcIicpXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBxdWV1ZSBjb250YWN0IHVwZGF0ZXMgd2hlbiBvZmZsaW5lJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja05ldEluZm8uaXNDb25uZWN0ZWQgPSBmYWxzZTtcbiAgICAgIFxuICAgICAgY29uc3QgdXBkYXRlZENvbnRhY3QgPSBjcmVhdGVNb2NrQ29udGFjdCh7XG4gICAgICAgIGlkOiAnb2ZmbGluZS11cGRhdGUtdGVzdCcsXG4gICAgICAgIGZpZWxkczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlkOiAnZmllbGQtMScsXG4gICAgICAgICAgICB0eXBlOiAnbmFtZScsXG4gICAgICAgICAgICBsYWJlbDogJ05hbWUnLFxuICAgICAgICAgICAgdmFsdWU6ICdVcGRhdGVkIE5hbWUnLFxuICAgICAgICAgICAgaXNFZGl0YWJsZTogdHJ1ZSxcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBzeW5jU3RhdHVzOiAncGVuZGluZycsXG4gICAgICB9KTtcblxuICAgICAgbW9ja0RiLnVwZGF0ZUNvbnRhY3QubW9ja1Jlc29sdmVkVmFsdWUodXBkYXRlZENvbnRhY3QpO1xuICAgICAgbW9ja1N0b3JhZ2UuZ2V0SXRlbS5tb2NrUmVzb2x2ZWRWYWx1ZSgnW10nKTtcbiAgICAgIG1vY2tTdG9yYWdlLnNldEl0ZW0ubW9ja1Jlc29sdmVkVmFsdWUoKTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY29udGFjdFN5bmNTZXJ2aWNlLnVwZGF0ZUNvbnRhY3RPZmZsaW5lKHVwZGF0ZWRDb250YWN0KTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC5zeW5jU3RhdHVzKS50b0JlKCdwZW5kaW5nJyk7XG4gICAgICBleHBlY3QobW9ja1N0b3JhZ2Uuc2V0SXRlbSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgICdjb250YWN0X3N5bmNfcXVldWUnLFxuICAgICAgICBleHBlY3Quc3RyaW5nQ29udGFpbmluZygnXCJhY3Rpb25cIjpcInVwZGF0ZVwiJylcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHF1ZXVlIGNvbnRhY3QgZGVsZXRpb24gd2hlbiBvZmZsaW5lJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja05ldEluZm8uaXNDb25uZWN0ZWQgPSBmYWxzZTtcbiAgICAgIFxuICAgICAgY29uc3QgY29udGFjdElkID0gJ29mZmxpbmUtZGVsZXRlLXRlc3QnO1xuXG4gICAgICBtb2NrRGIuZGVsZXRlQ29udGFjdC5tb2NrUmVzb2x2ZWRWYWx1ZSh0cnVlKTtcbiAgICAgIG1vY2tTdG9yYWdlLmdldEl0ZW0ubW9ja1Jlc29sdmVkVmFsdWUoJ1tdJyk7XG4gICAgICBtb2NrU3RvcmFnZS5zZXRJdGVtLm1vY2tSZXNvbHZlZFZhbHVlKCk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNvbnRhY3RTeW5jU2VydmljZS5kZWxldGVDb250YWN0T2ZmbGluZShjb250YWN0SWQpO1xuXG4gICAgICBleHBlY3QocmVzdWx0KS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KG1vY2tTdG9yYWdlLnNldEl0ZW0pLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgICAnY29udGFjdF9zeW5jX3F1ZXVlJyxcbiAgICAgICAgZXhwZWN0LnN0cmluZ0NvbnRhaW5pbmcoJ1wiYWN0aW9uXCI6XCJkZWxldGVcIicpXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBtYWludGFpbiBxdWV1ZSBvcmRlciBmb3Igb3BlcmF0aW9ucycsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tOZXRJbmZvLmlzQ29ubmVjdGVkID0gZmFsc2U7XG4gICAgICBcbiAgICAgIGNvbnN0IGNvbnRhY3QxID0gY3JlYXRlTW9ja0NvbnRhY3QoeyBpZDogJ3F1ZXVlLW9yZGVyLTEnIH0pO1xuICAgICAgY29uc3QgY29udGFjdDIgPSBjcmVhdGVNb2NrQ29udGFjdCh7IGlkOiAncXVldWUtb3JkZXItMicgfSk7XG4gICAgICBjb25zdCBjb250YWN0MyA9IGNyZWF0ZU1vY2tDb250YWN0KHsgaWQ6ICdxdWV1ZS1vcmRlci0zJyB9KTtcblxuICAgICAgbW9ja0RiLmNyZWF0ZUNvbnRhY3QubW9ja1Jlc29sdmVkVmFsdWUoY29udGFjdDEpO1xuICAgICAgbW9ja0RiLnVwZGF0ZUNvbnRhY3QubW9ja1Jlc29sdmVkVmFsdWUoY29udGFjdDIpO1xuICAgICAgbW9ja0RiLmRlbGV0ZUNvbnRhY3QubW9ja1Jlc29sdmVkVmFsdWUodHJ1ZSk7XG5cbiAgICAgIGxldCBxdWV1ZURhdGE6IGFueVtdID0gW107XG4gICAgICBtb2NrU3RvcmFnZS5nZXRJdGVtLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiBQcm9taXNlLnJlc29sdmUoSlNPTi5zdHJpbmdpZnkocXVldWVEYXRhKSkpO1xuICAgICAgbW9ja1N0b3JhZ2Uuc2V0SXRlbS5tb2NrSW1wbGVtZW50YXRpb24oKGtleSwgdmFsdWUpID0+IHtcbiAgICAgICAgcXVldWVEYXRhID0gSlNPTi5wYXJzZSh2YWx1ZSk7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBQZXJmb3JtIG9wZXJhdGlvbnMgaW4gc2VxdWVuY2VcbiAgICAgIGF3YWl0IGNvbnRhY3RTeW5jU2VydmljZS5jcmVhdGVDb250YWN0T2ZmbGluZShjb250YWN0MSk7XG4gICAgICBhd2FpdCBjb250YWN0U3luY1NlcnZpY2UudXBkYXRlQ29udGFjdE9mZmxpbmUoY29udGFjdDIpO1xuICAgICAgYXdhaXQgY29udGFjdFN5bmNTZXJ2aWNlLmRlbGV0ZUNvbnRhY3RPZmZsaW5lKGNvbnRhY3QzLmlkKTtcblxuICAgICAgZXhwZWN0KHF1ZXVlRGF0YSkudG9IYXZlTGVuZ3RoKDMpO1xuICAgICAgZXhwZWN0KHF1ZXVlRGF0YVswXS5hY3Rpb24pLnRvQmUoJ2NyZWF0ZScpO1xuICAgICAgZXhwZWN0KHF1ZXVlRGF0YVsxXS5hY3Rpb24pLnRvQmUoJ3VwZGF0ZScpO1xuICAgICAgZXhwZWN0KHF1ZXVlRGF0YVsyXS5hY3Rpb24pLnRvQmUoJ2RlbGV0ZScpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnU3luYyBRdWV1ZSBQcm9jZXNzaW5nJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgcHJvY2VzcyBxdWV1ZWQgb3BlcmF0aW9ucyB3aGVuIGNvbWluZyBvbmxpbmUnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBxdWV1ZWRPcGVyYXRpb25zID0gW1xuICAgICAgICB7XG4gICAgICAgICAgaWQ6ICdvcC0xJyxcbiAgICAgICAgICBhY3Rpb246ICdjcmVhdGUnLFxuICAgICAgICAgIGNvbnRhY3Q6IGNyZWF0ZU1vY2tDb250YWN0KHsgaWQ6ICdxdWV1ZS1jcmVhdGUnIH0pLFxuICAgICAgICAgIHRpbWVzdGFtcDogJzIwMjQtMDEtMDFUMTA6MDA6MDAuMDAwWicsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBpZDogJ29wLTInLFxuICAgICAgICAgIGFjdGlvbjogJ3VwZGF0ZScsXG4gICAgICAgICAgY29udGFjdDogY3JlYXRlTW9ja0NvbnRhY3QoeyBpZDogJ3F1ZXVlLXVwZGF0ZScgfSksXG4gICAgICAgICAgdGltZXN0YW1wOiAnMjAyNC0wMS0wMVQxMDowMTowMC4wMDBaJyxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGlkOiAnb3AtMycsXG4gICAgICAgICAgYWN0aW9uOiAnZGVsZXRlJyxcbiAgICAgICAgICBjb250YWN0SWQ6ICdxdWV1ZS1kZWxldGUnLFxuICAgICAgICAgIHRpbWVzdGFtcDogJzIwMjQtMDEtMDFUMTA6MDI6MDAuMDAwWicsXG4gICAgICAgIH0sXG4gICAgICBdO1xuXG4gICAgICBtb2NrU3RvcmFnZS5nZXRJdGVtLm1vY2tSZXNvbHZlZFZhbHVlKEpTT04uc3RyaW5naWZ5KHF1ZXVlZE9wZXJhdGlvbnMpKTtcbiAgICAgIG1vY2tTdG9yYWdlLnNldEl0ZW0ubW9ja1Jlc29sdmVkVmFsdWUoKTtcblxuICAgICAgLy8gTW9jayBzdWNjZXNzZnVsIEFQSSByZXNwb25zZXNcbiAgICAgIGdsb2JhbC5mZXRjaCA9IGplc3QuZm4oKVxuICAgICAgICAubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgICBvazogdHJ1ZSxcbiAgICAgICAgICBqc29uOiAoKSA9PiBQcm9taXNlLnJlc29sdmUoeyBzdWNjZXNzOiB0cnVlIH0pLFxuICAgICAgICB9KVxuICAgICAgICAubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgICBvazogdHJ1ZSxcbiAgICAgICAgICBqc29uOiAoKSA9PiBQcm9taXNlLnJlc29sdmUoeyBzdWNjZXNzOiB0cnVlIH0pLFxuICAgICAgICB9KVxuICAgICAgICAubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgICBvazogdHJ1ZSxcbiAgICAgICAgICBqc29uOiAoKSA9PiBQcm9taXNlLnJlc29sdmUoeyBzdWNjZXNzOiB0cnVlIH0pLFxuICAgICAgICB9KTtcblxuICAgICAgbW9ja05ldEluZm8uaXNDb25uZWN0ZWQgPSB0cnVlO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjb250YWN0U3luY1NlcnZpY2UucHJvY2Vzc1N5bmNRdWV1ZSgpO1xuXG4gICAgICBleHBlY3QocmVzdWx0LnByb2Nlc3NlZCkudG9CZSgzKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuc3VjY2Vzc2Z1bCkudG9CZSgzKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuZmFpbGVkKS50b0JlKDApO1xuICAgICAgZXhwZWN0KG1vY2tTdG9yYWdlLnNldEl0ZW0pLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdjb250YWN0X3N5bmNfcXVldWUnLCAnW10nKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIHBhcnRpYWwgcXVldWUgcHJvY2Vzc2luZyBmYWlsdXJlcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHF1ZXVlZE9wZXJhdGlvbnMgPSBbXG4gICAgICAgIHtcbiAgICAgICAgICBpZDogJ29wLTEnLFxuICAgICAgICAgIGFjdGlvbjogJ2NyZWF0ZScsXG4gICAgICAgICAgY29udGFjdDogY3JlYXRlTW9ja0NvbnRhY3QoeyBpZDogJ3N1Y2Nlc3MtY3JlYXRlJyB9KSxcbiAgICAgICAgICB0aW1lc3RhbXA6ICcyMDI0LTAxLTAxVDEwOjAwOjAwLjAwMFonLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgaWQ6ICdvcC0yJyxcbiAgICAgICAgICBhY3Rpb246ICd1cGRhdGUnLFxuICAgICAgICAgIGNvbnRhY3Q6IGNyZWF0ZU1vY2tDb250YWN0KHsgaWQ6ICdmYWlsLXVwZGF0ZScgfSksXG4gICAgICAgICAgdGltZXN0YW1wOiAnMjAyNC0wMS0wMVQxMDowMTowMC4wMDBaJyxcbiAgICAgICAgfSxcbiAgICAgIF07XG5cbiAgICAgIG1vY2tTdG9yYWdlLmdldEl0ZW0ubW9ja1Jlc29sdmVkVmFsdWUoSlNPTi5zdHJpbmdpZnkocXVldWVkT3BlcmF0aW9ucykpO1xuICAgICAgbW9ja1N0b3JhZ2Uuc2V0SXRlbS5tb2NrUmVzb2x2ZWRWYWx1ZSgpO1xuXG4gICAgICAvLyBNb2NrIG1peGVkIEFQSSByZXNwb25zZXNcbiAgICAgIGdsb2JhbC5mZXRjaCA9IGplc3QuZm4oKVxuICAgICAgICAubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgICBvazogdHJ1ZSxcbiAgICAgICAgICBqc29uOiAoKSA9PiBQcm9taXNlLnJlc29sdmUoeyBzdWNjZXNzOiB0cnVlIH0pLFxuICAgICAgICB9KVxuICAgICAgICAubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgICBvazogZmFsc2UsXG4gICAgICAgICAgc3RhdHVzOiA1MDAsXG4gICAgICAgICAgc3RhdHVzVGV4dDogJ0ludGVybmFsIFNlcnZlciBFcnJvcicsXG4gICAgICAgIH0pO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjb250YWN0U3luY1NlcnZpY2UucHJvY2Vzc1N5bmNRdWV1ZSgpO1xuXG4gICAgICBleHBlY3QocmVzdWx0LnByb2Nlc3NlZCkudG9CZSgyKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuc3VjY2Vzc2Z1bCkudG9CZSgxKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuZmFpbGVkKS50b0JlKDEpO1xuICAgICAgXG4gICAgICAvLyBGYWlsZWQgb3BlcmF0aW9uIHNob3VsZCByZW1haW4gaW4gcXVldWVcbiAgICAgIGV4cGVjdChtb2NrU3RvcmFnZS5zZXRJdGVtKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgJ2NvbnRhY3Rfc3luY19xdWV1ZScsXG4gICAgICAgIGV4cGVjdC5zdHJpbmdDb250YWluaW5nKCdmYWlsLXVwZGF0ZScpXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZXRyeSBmYWlsZWQgb3BlcmF0aW9ucyB3aXRoIGV4cG9uZW50aWFsIGJhY2tvZmYnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBmYWlsZWRPcGVyYXRpb24gPSB7XG4gICAgICAgIGlkOiAncmV0cnktb3AnLFxuICAgICAgICBhY3Rpb246ICdjcmVhdGUnLFxuICAgICAgICBjb250YWN0OiBjcmVhdGVNb2NrQ29udGFjdCh7IGlkOiAncmV0cnktY29udGFjdCcgfSksXG4gICAgICAgIHRpbWVzdGFtcDogJzIwMjQtMDEtMDFUMTA6MDA6MDAuMDAwWicsXG4gICAgICAgIHJldHJ5Q291bnQ6IDAsXG4gICAgICAgIG1heFJldHJpZXM6IDMsXG4gICAgICB9O1xuXG4gICAgICBtb2NrU3RvcmFnZS5nZXRJdGVtLm1vY2tSZXNvbHZlZFZhbHVlKEpTT04uc3RyaW5naWZ5KFtmYWlsZWRPcGVyYXRpb25dKSk7XG4gICAgICBtb2NrU3RvcmFnZS5zZXRJdGVtLm1vY2tSZXNvbHZlZFZhbHVlKCk7XG5cbiAgICAgIC8vIE1vY2sgZmFpbGVkIHRoZW4gc3VjY2Vzc2Z1bCByZXNwb25zZVxuICAgICAgZ2xvYmFsLmZldGNoID0gamVzdC5mbigpXG4gICAgICAgIC5tb2NrUmVqZWN0ZWRWYWx1ZU9uY2UobmV3IEVycm9yKCdOZXR3b3JrIGVycm9yJykpXG4gICAgICAgIC5tb2NrUmVqZWN0ZWRWYWx1ZU9uY2UobmV3IEVycm9yKCdOZXR3b3JrIGVycm9yJykpXG4gICAgICAgIC5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2Uoe1xuICAgICAgICAgIG9rOiB0cnVlLFxuICAgICAgICAgIGpzb246ICgpID0+IFByb21pc2UucmVzb2x2ZSh7IHN1Y2Nlc3M6IHRydWUgfSksXG4gICAgICAgIH0pO1xuXG4gICAgICAvLyBGaXJzdCBhdHRlbXB0IC0gc2hvdWxkIGZhaWwgYW5kIHJldHJ5XG4gICAgICBsZXQgcmVzdWx0ID0gYXdhaXQgY29udGFjdFN5bmNTZXJ2aWNlLnByb2Nlc3NTeW5jUXVldWUoKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuZmFpbGVkKS50b0JlKDEpO1xuXG4gICAgICAvLyBTZWNvbmQgYXR0ZW1wdCAtIHNob3VsZCBmYWlsIGFuZCByZXRyeSBhZ2FpblxuICAgICAgcmVzdWx0ID0gYXdhaXQgY29udGFjdFN5bmNTZXJ2aWNlLnByb2Nlc3NTeW5jUXVldWUoKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuZmFpbGVkKS50b0JlKDEpO1xuXG4gICAgICAvLyBUaGlyZCBhdHRlbXB0IC0gc2hvdWxkIHN1Y2NlZWRcbiAgICAgIHJlc3VsdCA9IGF3YWl0IGNvbnRhY3RTeW5jU2VydmljZS5wcm9jZXNzU3luY1F1ZXVlKCk7XG4gICAgICBleHBlY3QocmVzdWx0LnN1Y2Nlc3NmdWwpLnRvQmUoMSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdEYXRhIENvbnNpc3RlbmN5IGluIE9mZmxpbmUgTW9kZScsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIG1haW50YWluIGRhdGEgaW50ZWdyaXR5IGR1cmluZyBvZmZsaW5lIG9wZXJhdGlvbnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrTmV0SW5mby5pc0Nvbm5lY3RlZCA9IGZhbHNlO1xuICAgICAgXG4gICAgICBjb25zdCBjb250YWN0ID0gY3JlYXRlTW9ja0NvbnRhY3Qoe1xuICAgICAgICBpZDogJ2ludGVncml0eS10ZXN0JyxcbiAgICAgICAgdXBkYXRlZEF0OiAnMjAyNC0wMS0wMVQxMDowMDowMC4wMDBaJyxcbiAgICAgIH0pO1xuXG4gICAgICBtb2NrRGIuY3JlYXRlQ29udGFjdC5tb2NrUmVzb2x2ZWRWYWx1ZShjb250YWN0KTtcbiAgICAgIG1vY2tEYi5nZXRDb250YWN0QnlJZC5tb2NrUmVzb2x2ZWRWYWx1ZShjb250YWN0KTtcbiAgICAgIG1vY2tTdG9yYWdlLmdldEl0ZW0ubW9ja1Jlc29sdmVkVmFsdWUoJ1tdJyk7XG4gICAgICBtb2NrU3RvcmFnZS5zZXRJdGVtLm1vY2tSZXNvbHZlZFZhbHVlKCk7XG5cbiAgICAgIC8vIENyZWF0ZSBjb250YWN0IG9mZmxpbmVcbiAgICAgIGF3YWl0IGNvbnRhY3RTeW5jU2VydmljZS5jcmVhdGVDb250YWN0T2ZmbGluZShjb250YWN0KTtcblxuICAgICAgLy8gVmVyaWZ5IGNvbnRhY3QgZXhpc3RzIGxvY2FsbHlcbiAgICAgIGNvbnN0IGxvY2FsQ29udGFjdCA9IGF3YWl0IGNvbnRhY3RTeW5jU2VydmljZS5nZXRDb250YWN0QnlJZChjb250YWN0LmlkKTtcbiAgICAgIGV4cGVjdChsb2NhbENvbnRhY3QpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QobG9jYWxDb250YWN0Py5zeW5jU3RhdHVzKS50b0JlKCdwZW5kaW5nJyk7XG5cbiAgICAgIC8vIFVwZGF0ZSBzYW1lIGNvbnRhY3Qgb2ZmbGluZVxuICAgICAgY29uc3QgdXBkYXRlZENvbnRhY3QgPSB7XG4gICAgICAgIC4uLmNvbnRhY3QsXG4gICAgICAgIGZpZWxkczogW1xuICAgICAgICAgIC4uLmNvbnRhY3QuZmllbGRzLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlkOiAnbmV3LWZpZWxkJyxcbiAgICAgICAgICAgIHR5cGU6ICdwaG9uZScsXG4gICAgICAgICAgICBsYWJlbDogJ1Bob25lJyxcbiAgICAgICAgICAgIHZhbHVlOiAnKzEtNTU1LTAxMjMnLFxuICAgICAgICAgICAgaXNFZGl0YWJsZTogdHJ1ZSxcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICB1cGRhdGVkQXQ6ICcyMDI0LTAxLTAxVDExOjAwOjAwLjAwMFonLFxuICAgICAgfTtcblxuICAgICAgbW9ja0RiLnVwZGF0ZUNvbnRhY3QubW9ja1Jlc29sdmVkVmFsdWUodXBkYXRlZENvbnRhY3QpO1xuICAgICAgYXdhaXQgY29udGFjdFN5bmNTZXJ2aWNlLnVwZGF0ZUNvbnRhY3RPZmZsaW5lKHVwZGF0ZWRDb250YWN0KTtcblxuICAgICAgLy8gVmVyaWZ5IHVwZGF0ZXMgYXJlIHByZXNlcnZlZFxuICAgICAgY29uc3QgZmluYWxDb250YWN0ID0gYXdhaXQgY29udGFjdFN5bmNTZXJ2aWNlLmdldENvbnRhY3RCeUlkKGNvbnRhY3QuaWQpO1xuICAgICAgZXhwZWN0KGZpbmFsQ29udGFjdD8uZmllbGRzKS50b0hhdmVMZW5ndGgoMyk7XG4gICAgICBleHBlY3QoZmluYWxDb250YWN0Py5zeW5jU3RhdHVzKS50b0JlKCdwZW5kaW5nJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBjb25jdXJyZW50IG9mZmxpbmUgb3BlcmF0aW9ucyBzYWZlbHknLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrTmV0SW5mby5pc0Nvbm5lY3RlZCA9IGZhbHNlO1xuICAgICAgXG4gICAgICBjb25zdCBiYXNlQ29udGFjdCA9IGNyZWF0ZU1vY2tDb250YWN0KHtcbiAgICAgICAgaWQ6ICdjb25jdXJyZW50LXRlc3QnLFxuICAgICAgfSk7XG5cbiAgICAgIG1vY2tEYi5jcmVhdGVDb250YWN0Lm1vY2tSZXNvbHZlZFZhbHVlKGJhc2VDb250YWN0KTtcbiAgICAgIG1vY2tEYi51cGRhdGVDb250YWN0Lm1vY2tSZXNvbHZlZFZhbHVlKGJhc2VDb250YWN0KTtcbiAgICAgIG1vY2tTdG9yYWdlLmdldEl0ZW0ubW9ja1Jlc29sdmVkVmFsdWUoJ1tdJyk7XG4gICAgICBtb2NrU3RvcmFnZS5zZXRJdGVtLm1vY2tSZXNvbHZlZFZhbHVlKCk7XG5cbiAgICAgIC8vIFNpbXVsYXRlIGNvbmN1cnJlbnQgb3BlcmF0aW9uc1xuICAgICAgY29uc3Qgb3BlcmF0aW9ucyA9IFtcbiAgICAgICAgY29udGFjdFN5bmNTZXJ2aWNlLmNyZWF0ZUNvbnRhY3RPZmZsaW5lKGJhc2VDb250YWN0KSxcbiAgICAgICAgY29udGFjdFN5bmNTZXJ2aWNlLnVwZGF0ZUNvbnRhY3RPZmZsaW5lKHtcbiAgICAgICAgICAuLi5iYXNlQ29udGFjdCxcbiAgICAgICAgICB0YWdzOiBbLi4uYmFzZUNvbnRhY3QudGFncywgJ3VwZGF0ZWQnXSxcbiAgICAgICAgfSksXG4gICAgICAgIGNvbnRhY3RTeW5jU2VydmljZS51cGRhdGVDb250YWN0T2ZmbGluZSh7XG4gICAgICAgICAgLi4uYmFzZUNvbnRhY3QsXG4gICAgICAgICAgaXNGYXZvcml0ZTogdHJ1ZSxcbiAgICAgICAgfSksXG4gICAgICBdO1xuXG4gICAgICBjb25zdCByZXN1bHRzID0gYXdhaXQgUHJvbWlzZS5hbGxTZXR0bGVkKG9wZXJhdGlvbnMpO1xuICAgICAgXG4gICAgICAvLyBBbGwgb3BlcmF0aW9ucyBzaG91bGQgY29tcGxldGUgd2l0aG91dCB0aHJvd2luZ1xuICAgICAgZXhwZWN0KHJlc3VsdHMuZXZlcnkociA9PiByLnN0YXR1cyA9PT0gJ2Z1bGZpbGxlZCcpKS50b0JlKHRydWUpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBwcmVzZXJ2ZSBvcGVyYXRpb24gb3JkZXIgYWNyb3NzIGFwcCByZXN0YXJ0cycsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIFNpbXVsYXRlIGV4aXN0aW5nIHF1ZXVlIGZyb20gcHJldmlvdXMgc2Vzc2lvblxuICAgICAgY29uc3QgZXhpc3RpbmdRdWV1ZSA9IFtcbiAgICAgICAge1xuICAgICAgICAgIGlkOiAnZXhpc3Rpbmctb3AtMScsXG4gICAgICAgICAgYWN0aW9uOiAnY3JlYXRlJyxcbiAgICAgICAgICBjb250YWN0OiBjcmVhdGVNb2NrQ29udGFjdCh7IGlkOiAnZXhpc3RpbmctMScgfSksXG4gICAgICAgICAgdGltZXN0YW1wOiAnMjAyNC0wMS0wMVQwOTowMDowMC4wMDBaJyxcbiAgICAgICAgfSxcbiAgICAgIF07XG5cbiAgICAgIG1vY2tTdG9yYWdlLmdldEl0ZW0ubW9ja1Jlc29sdmVkVmFsdWUoSlNPTi5zdHJpbmdpZnkoZXhpc3RpbmdRdWV1ZSkpO1xuICAgICAgXG4gICAgICAvLyBBZGQgbmV3IG9wZXJhdGlvblxuICAgICAgbW9ja05ldEluZm8uaXNDb25uZWN0ZWQgPSBmYWxzZTtcbiAgICAgIGNvbnN0IG5ld0NvbnRhY3QgPSBjcmVhdGVNb2NrQ29udGFjdCh7IGlkOiAnbmV3LW9wZXJhdGlvbicgfSk7XG4gICAgICBcbiAgICAgIGxldCBjdXJyZW50UXVldWUgPSBleGlzdGluZ1F1ZXVlO1xuICAgICAgbW9ja1N0b3JhZ2Uuc2V0SXRlbS5tb2NrSW1wbGVtZW50YXRpb24oKGtleSwgdmFsdWUpID0+IHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gSlNPTi5wYXJzZSh2YWx1ZSk7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgIH0pO1xuXG4gICAgICBtb2NrRGIuY3JlYXRlQ29udGFjdC5tb2NrUmVzb2x2ZWRWYWx1ZShuZXdDb250YWN0KTtcbiAgICAgIGF3YWl0IGNvbnRhY3RTeW5jU2VydmljZS5jcmVhdGVDb250YWN0T2ZmbGluZShuZXdDb250YWN0KTtcblxuICAgICAgLy8gVmVyaWZ5IG5ldyBvcGVyYXRpb24gaXMgYXBwZW5kZWQgdG8gZXhpc3RpbmcgcXVldWVcbiAgICAgIGV4cGVjdChjdXJyZW50UXVldWUpLnRvSGF2ZUxlbmd0aCgyKTtcbiAgICAgIGV4cGVjdChjdXJyZW50UXVldWVbMF0uaWQpLnRvQmUoJ2V4aXN0aW5nLW9wLTEnKTtcbiAgICAgIGV4cGVjdChjdXJyZW50UXVldWVbMV0uY29udGFjdC5pZCkudG9CZSgnbmV3LW9wZXJhdGlvbicpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnT2ZmbGluZSBTdG9yYWdlIE9wdGltaXphdGlvbicsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGNvbXByZXNzIHF1ZXVlIGRhdGEgZm9yIHN0b3JhZ2UgZWZmaWNpZW5jeScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGxhcmdlUXVldWUgPSBBcnJheS5mcm9tKHsgbGVuZ3RoOiAxMDAgfSwgKF8sIGkpID0+ICh7XG4gICAgICAgIGlkOiBgbGFyZ2Utb3AtJHtpfWAsXG4gICAgICAgIGFjdGlvbjogJ2NyZWF0ZScsXG4gICAgICAgIGNvbnRhY3Q6IGNyZWF0ZU1vY2tDb250YWN0KHtcbiAgICAgICAgICBpZDogYGxhcmdlLWNvbnRhY3QtJHtpfWAsXG4gICAgICAgICAgZmllbGRzOiBBcnJheS5mcm9tKHsgbGVuZ3RoOiAxMCB9LCAoXywgaikgPT4gKHtcbiAgICAgICAgICAgIGlkOiBgZmllbGQtJHtpfS0ke2p9YCxcbiAgICAgICAgICAgIHR5cGU6ICdjdXN0b20nLFxuICAgICAgICAgICAgbGFiZWw6IGBDdXN0b20gRmllbGQgJHtqfWAsXG4gICAgICAgICAgICB2YWx1ZTogYFZhbHVlICR7aX0tJHtqfWAucmVwZWF0KDEwKSwgLy8gTGFyZ2UgdmFsdWVcbiAgICAgICAgICAgIGlzRWRpdGFibGU6IHRydWUsXG4gICAgICAgICAgfSkpLFxuICAgICAgICB9KSxcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICB9KSk7XG5cbiAgICAgIG1vY2tTdG9yYWdlLmdldEl0ZW0ubW9ja1Jlc29sdmVkVmFsdWUoJ1tdJyk7XG4gICAgICBcbiAgICAgIGxldCBzdG9yZWREYXRhID0gJyc7XG4gICAgICBtb2NrU3RvcmFnZS5zZXRJdGVtLm1vY2tJbXBsZW1lbnRhdGlvbigoa2V5LCB2YWx1ZSkgPT4ge1xuICAgICAgICBzdG9yZWREYXRhID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgIH0pO1xuXG4gICAgICBhd2FpdCBjb250YWN0U3luY1NlcnZpY2Uuc2F2ZVF1ZXVlVG9TdG9yYWdlKGxhcmdlUXVldWUpO1xuXG4gICAgICAvLyBWZXJpZnkgZGF0YSBpcyBzdG9yZWQgKGluIHJlYWwgaW1wbGVtZW50YXRpb24sIHRoaXMgd291bGQgYmUgY29tcHJlc3NlZClcbiAgICAgIGV4cGVjdChzdG9yZWREYXRhLmxlbmd0aCkudG9CZUdyZWF0ZXJUaGFuKDApO1xuICAgICAgXG4gICAgICBjb25zdCBwYXJzZWREYXRhID0gSlNPTi5wYXJzZShzdG9yZWREYXRhKTtcbiAgICAgIGV4cGVjdChwYXJzZWREYXRhKS50b0hhdmVMZW5ndGgoMTAwKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIHN0b3JhZ2UgcXVvdGEgbGltaXRzIGdyYWNlZnVsbHknLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBvdmVyc2l6ZWRPcGVyYXRpb24gPSB7XG4gICAgICAgIGlkOiAnb3ZlcnNpemVkLW9wJyxcbiAgICAgICAgYWN0aW9uOiAnY3JlYXRlJyxcbiAgICAgICAgY29udGFjdDogY3JlYXRlTW9ja0NvbnRhY3Qoe1xuICAgICAgICAgIGlkOiAnb3ZlcnNpemVkLWNvbnRhY3QnLFxuICAgICAgICAgIGZpZWxkczogQXJyYXkuZnJvbSh7IGxlbmd0aDogMTAwMCB9LCAoXywgaSkgPT4gKHtcbiAgICAgICAgICAgIGlkOiBgaHVnZS1maWVsZC0ke2l9YCxcbiAgICAgICAgICAgIHR5cGU6ICdjdXN0b20nLFxuICAgICAgICAgICAgbGFiZWw6IGBGaWVsZCAke2l9YCxcbiAgICAgICAgICAgIHZhbHVlOiAneCcucmVwZWF0KDEwMDAwKSwgLy8gVmVyeSBsYXJnZSB2YWx1ZVxuICAgICAgICAgICAgaXNFZGl0YWJsZTogdHJ1ZSxcbiAgICAgICAgICB9KSksXG4gICAgICAgIH0pLFxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgIH07XG5cbiAgICAgIG1vY2tTdG9yYWdlLmdldEl0ZW0ubW9ja1Jlc29sdmVkVmFsdWUoJ1tdJyk7XG4gICAgICBtb2NrU3RvcmFnZS5zZXRJdGVtLm1vY2tSZWplY3RlZFZhbHVlKG5ldyBFcnJvcignUXVvdGFFeGNlZWRlZEVycm9yJykpO1xuXG4gICAgICAvLyBTaG91bGQgaGFuZGxlIHN0b3JhZ2UgZXJyb3IgZ3JhY2VmdWxseVxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY29udGFjdFN5bmNTZXJ2aWNlLmFkZFRvU3luY1F1ZXVlKG92ZXJzaXplZE9wZXJhdGlvbik7XG4gICAgICBcbiAgICAgIGV4cGVjdChyZXN1bHQuc3VjY2VzcykudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3QocmVzdWx0LmVycm9yKS50b0NvbnRhaW4oJ3N0b3JhZ2UnKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgY2xlYW4gdXAgb2xkIGNvbXBsZXRlZCBvcGVyYXRpb25zIGZyb20gcXVldWUnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBvbGRDb21wbGV0ZWRPcHMgPSBBcnJheS5mcm9tKHsgbGVuZ3RoOiA1MCB9LCAoXywgaSkgPT4gKHtcbiAgICAgICAgaWQ6IGBvbGQtY29tcGxldGVkLSR7aX1gLFxuICAgICAgICBhY3Rpb246ICdjcmVhdGUnLFxuICAgICAgICBjb250YWN0OiBjcmVhdGVNb2NrQ29udGFjdCh7IGlkOiBgb2xkLSR7aX1gIH0pLFxuICAgICAgICB0aW1lc3RhbXA6ICcyMDI0LTAxLTAxVDAwOjAwOjAwLjAwMFonLCAvLyBPbGQgdGltZXN0YW1wXG4gICAgICAgIHN0YXR1czogJ2NvbXBsZXRlZCcsXG4gICAgICAgIGNvbXBsZXRlZEF0OiAnMjAyNC0wMS0wMVQwMTowMDowMC4wMDBaJyxcbiAgICAgIH0pKTtcblxuICAgICAgY29uc3QgcGVuZGluZ09wcyA9IEFycmF5LmZyb20oeyBsZW5ndGg6IDUgfSwgKF8sIGkpID0+ICh7XG4gICAgICAgIGlkOiBgcGVuZGluZy0ke2l9YCxcbiAgICAgICAgYWN0aW9uOiAndXBkYXRlJyxcbiAgICAgICAgY29udGFjdDogY3JlYXRlTW9ja0NvbnRhY3QoeyBpZDogYHBlbmRpbmctJHtpfWAgfSksXG4gICAgICAgIHRpbWVzdGFtcDogJzIwMjQtMDEtMDJUMDA6MDA6MDAuMDAwWicsIC8vIFJlY2VudCB0aW1lc3RhbXBcbiAgICAgICAgc3RhdHVzOiAncGVuZGluZycsXG4gICAgICB9KSk7XG5cbiAgICAgIGNvbnN0IGFsbE9wcyA9IFsuLi5vbGRDb21wbGV0ZWRPcHMsIC4uLnBlbmRpbmdPcHNdO1xuICAgICAgbW9ja1N0b3JhZ2UuZ2V0SXRlbS5tb2NrUmVzb2x2ZWRWYWx1ZShKU09OLnN0cmluZ2lmeShhbGxPcHMpKTtcbiAgICAgIFxuICAgICAgbGV0IGNsZWFuZWRRdWV1ZTogYW55W10gPSBbXTtcbiAgICAgIG1vY2tTdG9yYWdlLnNldEl0ZW0ubW9ja0ltcGxlbWVudGF0aW9uKChrZXksIHZhbHVlKSA9PiB7XG4gICAgICAgIGNsZWFuZWRRdWV1ZSA9IEpTT04ucGFyc2UodmFsdWUpO1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICB9KTtcblxuICAgICAgYXdhaXQgY29udGFjdFN5bmNTZXJ2aWNlLmNsZWFudXBTeW5jUXVldWUoMjQgKiA2MCAqIDYwICogMTAwMCk7IC8vIDI0IGhvdXJzXG5cbiAgICAgIC8vIFNob3VsZCBvbmx5IGtlZXAgcGVuZGluZyBvcGVyYXRpb25zIGFuZCByZWNlbnQgY29tcGxldGVkIG9uZXNcbiAgICAgIGV4cGVjdChjbGVhbmVkUXVldWUubGVuZ3RoKS50b0JlTGVzc1RoYW4oYWxsT3BzLmxlbmd0aCk7XG4gICAgICBleHBlY3QoY2xlYW5lZFF1ZXVlLmV2ZXJ5KG9wID0+IFxuICAgICAgICBvcC5zdGF0dXMgPT09ICdwZW5kaW5nJyB8fCBcbiAgICAgICAgbmV3IERhdGUob3AuY29tcGxldGVkQXQgfHwgb3AudGltZXN0YW1wKSA+IG5ldyBEYXRlKCcyMDI0LTAxLTAxVDEyOjAwOjAwLjAwMFonKVxuICAgICAgKSkudG9CZSh0cnVlKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0JhY2tncm91bmQgU3luYycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHNjaGVkdWxlIGJhY2tncm91bmQgc3luYyB3aGVuIGFwcCBnb2VzIHRvIGJhY2tncm91bmQnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBiYWNrZ3JvdW5kU3luY1NjaGVkdWxlciA9IGplc3QuZm4oKTtcbiAgICAgIGNvbnRhY3RTeW5jU2VydmljZS5zZXRCYWNrZ3JvdW5kU3luY1NjaGVkdWxlcihiYWNrZ3JvdW5kU3luY1NjaGVkdWxlcik7XG5cbiAgICAgIGF3YWl0IGNvbnRhY3RTeW5jU2VydmljZS5zY2hlZHVsZUJhY2tncm91bmRTeW5jKCk7XG5cbiAgICAgIGV4cGVjdChiYWNrZ3JvdW5kU3luY1NjaGVkdWxlcikudG9IYXZlQmVlbkNhbGxlZFdpdGgoe1xuICAgICAgICB0YXNrTmFtZTogJ2NvbnRhY3Qtc3luYycsXG4gICAgICAgIGludGVydmFsOiBleHBlY3QuYW55KE51bWJlciksXG4gICAgICAgIHJlcXVpcmVkTmV0d29ya1R5cGU6ICdhbnknLFxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHByb2Nlc3Mgc3luYyBxdWV1ZSBkdXJpbmcgYmFja2dyb3VuZCBzeW5jJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcXVldWVkT3BlcmF0aW9ucyA9IFtcbiAgICAgICAge1xuICAgICAgICAgIGlkOiAnYmctb3AtMScsXG4gICAgICAgICAgYWN0aW9uOiAnY3JlYXRlJyxcbiAgICAgICAgICBjb250YWN0OiBjcmVhdGVNb2NrQ29udGFjdCh7IGlkOiAnYmctY29udGFjdCcgfSksXG4gICAgICAgICAgdGltZXN0YW1wOiAnMjAyNC0wMS0wMVQxMDowMDowMC4wMDBaJyxcbiAgICAgICAgfSxcbiAgICAgIF07XG5cbiAgICAgIG1vY2tTdG9yYWdlLmdldEl0ZW0ubW9ja1Jlc29sdmVkVmFsdWUoSlNPTi5zdHJpbmdpZnkocXVldWVkT3BlcmF0aW9ucykpO1xuICAgICAgbW9ja1N0b3JhZ2Uuc2V0SXRlbS5tb2NrUmVzb2x2ZWRWYWx1ZSgpO1xuXG4gICAgICBnbG9iYWwuZmV0Y2ggPSBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoe1xuICAgICAgICBvazogdHJ1ZSxcbiAgICAgICAganNvbjogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHsgc3VjY2VzczogdHJ1ZSB9KSxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjb250YWN0U3luY1NlcnZpY2UucGVyZm9ybUJhY2tncm91bmRTeW5jKCk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQucHJvY2Vzc2VkKS50b0JlKDEpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5zdWNjZXNzZnVsKS50b0JlKDEpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgYmFja2dyb3VuZCBzeW5jIHRpbWVvdXQnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBsb25nUnVubmluZ1F1ZXVlID0gQXJyYXkuZnJvbSh7IGxlbmd0aDogMTAwMCB9LCAoXywgaSkgPT4gKHtcbiAgICAgICAgaWQ6IGB0aW1lb3V0LW9wLSR7aX1gLFxuICAgICAgICBhY3Rpb246ICdjcmVhdGUnLFxuICAgICAgICBjb250YWN0OiBjcmVhdGVNb2NrQ29udGFjdCh7IGlkOiBgdGltZW91dC1jb250YWN0LSR7aX1gIH0pLFxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgIH0pKTtcblxuICAgICAgbW9ja1N0b3JhZ2UuZ2V0SXRlbS5tb2NrUmVzb2x2ZWRWYWx1ZShKU09OLnN0cmluZ2lmeShsb25nUnVubmluZ1F1ZXVlKSk7XG5cbiAgICAgIC8vIE1vY2sgc2xvdyBBUEkgcmVzcG9uc2VzXG4gICAgICBnbG9iYWwuZmV0Y2ggPSBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKFxuICAgICAgICAoKSA9PiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IFxuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gcmVzb2x2ZSh7XG4gICAgICAgICAgICBvazogdHJ1ZSxcbiAgICAgICAgICAgIGpzb246ICgpID0+IFByb21pc2UucmVzb2x2ZSh7IHN1Y2Nlc3M6IHRydWUgfSksXG4gICAgICAgICAgfSksIDEwMDApIC8vIDEgc2Vjb25kIHBlciByZXF1ZXN0XG4gICAgICAgIClcbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IHN5bmNUaW1lb3V0ID0gNTAwMDsgLy8gNSBzZWNvbmQgdGltZW91dFxuICAgICAgY29uc3Qgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgIFxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY29udGFjdFN5bmNTZXJ2aWNlLnBlcmZvcm1CYWNrZ3JvdW5kU3luYyh7IHRpbWVvdXQ6IHN5bmNUaW1lb3V0IH0pO1xuICAgICAgXG4gICAgICBjb25zdCBkdXJhdGlvbiA9IERhdGUubm93KCkgLSBzdGFydFRpbWU7XG5cbiAgICAgIGV4cGVjdChkdXJhdGlvbikudG9CZUxlc3NUaGFuKHN5bmNUaW1lb3V0ICsgMTAwMCk7IC8vIEFsbG93IHNvbWUgYnVmZmVyXG4gICAgICBleHBlY3QocmVzdWx0LnByb2Nlc3NlZCkudG9CZUxlc3NUaGFuKGxvbmdSdW5uaW5nUXVldWUubGVuZ3RoKTsgLy8gU2hvdWxkIG5vdCBwcm9jZXNzIGFsbFxuICAgIH0pO1xuICB9KTtcbn0pOyJdLCJtYXBwaW5ncyI6IkFBWUFBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLDhDQUE4QyxDQUFDO0FBQ3pERCxXQUFBLEdBQUtDLElBQUksQ0FBQywyQ0FBMkMsQ0FBQztBQVF0REQsV0FBQSxHQUFLQyxJQUFJLENBQUMsaUNBQWlDLEVBQUU7RUFBQSxPQUFPO0lBQ2xEQyxLQUFLLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxDQUFDO01BQUEsT0FBTUMsT0FBTyxDQUFDQyxPQUFPLENBQUNDLFdBQVcsQ0FBQztJQUFBLEVBQUM7SUFDbERDLGdCQUFnQixFQUFFTCxJQUFJLENBQUNDLEVBQUUsQ0FBQztNQUFBLE9BQU1ELElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7SUFBQTtFQUMzQyxDQUFDO0FBQUEsQ0FBQyxDQUFDO0FBQUMsSUFBQUssc0JBQUEsR0FBQUMsT0FBQTtBQUFBLElBQUFDLG1CQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFBQSxJQUFBRSxrQkFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBbEJKLElBQUFHLG1CQUFBLEdBQUFILE9BQUE7QUFFQSxJQUFBSSx1QkFBQSxHQUFBSixPQUFBO0FBQ0EsSUFBQUssYUFBQSxHQUFBTixzQkFBQSxDQUFBQyxP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