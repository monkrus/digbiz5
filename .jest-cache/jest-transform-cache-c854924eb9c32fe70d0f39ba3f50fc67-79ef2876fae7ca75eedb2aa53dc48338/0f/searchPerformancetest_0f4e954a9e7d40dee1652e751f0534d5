7730cce187fb27dcfad7273933ffa496
_getJestObj().mock('../../src/services/contactDatabaseService');
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _contactManagementService = require("../../src/services/contactManagementService");
var _contactDatabaseService = require("../../src/services/contactDatabaseService");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var createMockContact = function createMockContact(overrides) {
  return Object.assign({
    id: `contact-${Math.random().toString(36).substr(2, 9)}`,
    fields: [{
      id: 'field-name',
      type: 'name',
      label: 'Full Name',
      value: 'John Doe',
      isEditable: true,
      confidence: 0.9
    }, {
      id: 'field-email',
      type: 'email',
      label: 'Email',
      value: 'john@example.com',
      isEditable: true,
      confidence: 0.8
    }, {
      id: 'field-phone',
      type: 'phone',
      label: 'Phone',
      value: '+1-555-0123',
      isEditable: true,
      confidence: 0.85
    }],
    source: 'manual',
    confidence: 0.85,
    createdAt: '2024-01-01T00:00:00.000Z',
    updatedAt: '2024-01-01T00:00:00.000Z',
    tags: ['business'],
    isVerified: true,
    needsReview: false,
    isFavorite: false
  }, overrides);
};
describe('ContactManagementService - Search Performance', function () {
  var mockDb = _contactDatabaseService.contactDatabaseService;
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe('Search Algorithm Performance', function () {
    it('should perform simple text search efficiently', (0, _asyncToGenerator2.default)(function* () {
      var mockContacts = Array.from({
        length: 10000
      }, function (_, i) {
        return createMockContact({
          id: `contact-${i}`,
          fields: [{
            id: `name-${i}`,
            type: 'name',
            label: 'Name',
            value: `User ${i}`,
            isEditable: true
          }]
        });
      });
      var matchingContacts = mockContacts.filter(function (_, i) {
        return i % 100 === 0;
      });
      mockDb.searchContacts.mockResolvedValue({
        contacts: matchingContacts,
        totalCount: matchingContacts.length,
        facets: {
          tags: [],
          categories: [],
          sources: []
        }
      });
      var startTime = Date.now();
      var result = yield _contactManagementService.contactManagementService.searchContacts({
        query: 'User'
      });
      var searchTime = Date.now() - startTime;
      expect(result.contacts).toHaveLength(100);
      expect(searchTime).toBeLessThan(1000);
      expect(mockDb.searchContacts).toHaveBeenCalledWith({
        query: 'User'
      });
    }));
    it('should handle complex multi-field search efficiently', (0, _asyncToGenerator2.default)(function* () {
      var complexFilters = {
        query: 'John',
        tags: ['business', 'client'],
        isVerified: true,
        hasNotes: true,
        dateRange: {
          start: '2024-01-01T00:00:00.000Z',
          end: '2024-12-31T23:59:59.999Z',
          field: 'createdAt'
        },
        confidenceRange: {
          min: 0.8,
          max: 1.0
        }
      };
      mockDb.searchContacts.mockResolvedValue({
        contacts: [createMockContact()],
        totalCount: 1,
        facets: {
          tags: [{
            name: 'business',
            count: 5
          }, {
            name: 'client',
            count: 3
          }],
          categories: [],
          sources: [{
            source: 'manual',
            count: 8
          }]
        }
      });
      var startTime = Date.now();
      var result = yield _contactManagementService.contactManagementService.searchContacts(complexFilters);
      var searchTime = Date.now() - startTime;
      expect(result.contacts).toHaveLength(1);
      expect(searchTime).toBeLessThan(2000);
      expect(mockDb.searchContacts).toHaveBeenCalledWith(complexFilters);
    }));
    it('should optimize fuzzy search performance', (0, _asyncToGenerator2.default)(function* () {
      var fuzzyMatches = Array.from({
        length: 50
      }, function (_, i) {
        return createMockContact({
          id: `fuzzy-${i}`,
          fields: [{
            id: `name-${i}`,
            type: 'name',
            label: 'Name',
            value: `Johnathan Smith ${i}`,
            isEditable: true
          }]
        });
      });
      mockDb.searchContacts.mockResolvedValue({
        contacts: fuzzyMatches,
        totalCount: fuzzyMatches.length,
        facets: {
          tags: [],
          categories: [],
          sources: []
        }
      });
      var startTime = Date.now();
      var result = yield _contactManagementService.contactManagementService.searchContacts({
        query: 'Jon Smth'
      });
      var searchTime = Date.now() - startTime;
      expect(result.contacts.length).toBeGreaterThan(0);
      expect(searchTime).toBeLessThan(1500);
    }));
    it('should handle pagination efficiently for large result sets', (0, _asyncToGenerator2.default)(function* () {
      var totalContacts = 5000;
      var pageSize = 50;
      var _loop = function* _loop(page) {
        var pageContacts = Array.from({
          length: pageSize
        }, function (_, i) {
          return createMockContact({
            id: `page-${page}-contact-${i}`
          });
        });
        mockDb.searchContacts.mockResolvedValueOnce({
          contacts: pageContacts,
          totalCount: totalContacts,
          facets: {
            tags: [],
            categories: [],
            sources: []
          }
        });
        var startTime = Date.now();
        var result = yield _contactManagementService.contactManagementService.searchContacts({
          query: 'User'
        });
        var pageTime = Date.now() - startTime;
        expect(result.contacts).toHaveLength(pageSize);
        expect(result.totalCount).toBe(totalContacts);
        expect(pageTime).toBeLessThan(500);
      };
      for (var page = 0; page < 10; page++) {
        yield* _loop(page);
      }
    }));
    it('should cache frequent searches for better performance', (0, _asyncToGenerator2.default)(function* () {
      var searchQuery = {
        query: 'Popular Search'
      };
      var mockResult = {
        contacts: [createMockContact()],
        totalCount: 1,
        facets: {
          tags: [],
          categories: [],
          sources: []
        }
      };
      mockDb.searchContacts.mockResolvedValue(mockResult);
      var startTime1 = Date.now();
      yield _contactManagementService.contactManagementService.searchContacts(searchQuery);
      var firstSearchTime = Date.now() - startTime1;
      var startTime2 = Date.now();
      yield _contactManagementService.contactManagementService.searchContacts(searchQuery);
      var secondSearchTime = Date.now() - startTime2;
      expect(mockDb.searchContacts).toHaveBeenCalledTimes(2);
    }));
  });
  describe('Advanced Search Features', function () {
    it('should perform field-specific searches', (0, _asyncToGenerator2.default)(function* () {
      var emailSearchContacts = [createMockContact({
        fields: [{
          id: 'e1',
          type: 'email',
          label: 'Email',
          value: 'john@acme.com',
          isEditable: true
        }]
      })];
      mockDb.searchContacts.mockResolvedValue({
        contacts: emailSearchContacts,
        totalCount: 1,
        facets: {
          tags: [],
          categories: [],
          sources: []
        }
      });
      var result = yield _contactManagementService.contactManagementService.searchContacts({
        query: 'acme.com'
      });
      expect(result.contacts).toHaveLength(1);
      expect(mockDb.searchContacts).toHaveBeenCalledWith({
        query: 'acme.com'
      });
    }));
    it('should support wildcard and regex patterns', (0, _asyncToGenerator2.default)(function* () {
      var patternMatches = [createMockContact({
        fields: [{
          id: 'p1',
          type: 'phone',
          label: 'Phone',
          value: '+1-555-0123',
          isEditable: true
        }, {
          id: 'p2',
          type: 'phone',
          label: 'Phone',
          value: '+1-555-0456',
          isEditable: true
        }]
      })];
      mockDb.searchContacts.mockResolvedValue({
        contacts: patternMatches,
        totalCount: patternMatches.length,
        facets: {
          tags: [],
          categories: [],
          sources: []
        }
      });
      var result = yield _contactManagementService.contactManagementService.searchContacts({
        query: '+1-555-*'
      });
      expect(result.contacts.length).toBeGreaterThan(0);
    }));
    it('should rank search results by relevance', (0, _asyncToGenerator2.default)(function* () {
      var rankedContacts = [createMockContact({
        id: 'exact-match',
        fields: [{
          id: 'n1',
          type: 'name',
          label: 'Name',
          value: 'John Smith',
          isEditable: true
        }],
        confidence: 1.0
      }), createMockContact({
        id: 'partial-match',
        fields: [{
          id: 'n2',
          type: 'name',
          label: 'Name',
          value: 'John Doe',
          isEditable: true
        }],
        confidence: 0.8
      }), createMockContact({
        id: 'fuzzy-match',
        fields: [{
          id: 'n3',
          type: 'name',
          label: 'Name',
          value: 'Jonathan Smith',
          isEditable: true
        }],
        confidence: 0.6
      })];
      mockDb.searchContacts.mockResolvedValue({
        contacts: rankedContacts,
        totalCount: rankedContacts.length,
        facets: {
          tags: [],
          categories: [],
          sources: []
        }
      });
      var result = yield _contactManagementService.contactManagementService.searchContacts({
        query: 'John Smith'
      });
      expect(result.contacts).toHaveLength(3);
      expect(result.contacts[0].id).toBe('exact-match');
    }));
  });
  describe('Search Analytics and Metrics', function () {
    it('should track search performance metrics', (0, _asyncToGenerator2.default)(function* () {
      var largeMockResult = {
        contacts: Array.from({
          length: 1000
        }, function (_, i) {
          return createMockContact({
            id: `metric-${i}`
          });
        }),
        totalCount: 1000,
        facets: {
          tags: [],
          categories: [],
          sources: []
        }
      };
      mockDb.searchContacts.mockResolvedValue(largeMockResult);
      var startTime = Date.now();
      var result = yield _contactManagementService.contactManagementService.searchContacts({
        query: 'performance test'
      });
      var endTime = Date.now();
      var searchDuration = endTime - startTime;
      expect(result.contacts).toHaveLength(1000);
      expect(searchDuration).toBeDefined();
      expect(searchDuration).toBeGreaterThan(0);
      var metrics = {
        searchQuery: 'performance test',
        resultCount: result.totalCount,
        duration: searchDuration,
        timestamp: new Date().toISOString()
      };
      expect(metrics.resultCount).toBe(1000);
      expect(metrics.duration).toBeLessThan(3000);
    }));
    it('should provide search suggestions based on history', (0, _asyncToGenerator2.default)(function* () {
      var searchHistory = ['John Smith', 'john@example.com', 'Acme Corp', 'business contact'];
      var suggestions = searchHistory.filter(function (term) {
        return term.toLowerCase().includes('john');
      });
      expect(suggestions).toContain('John Smith');
      expect(suggestions).toContain('john@example.com');
      expect(suggestions).toHaveLength(2);
    }));
  });
  describe('Search Error Handling', function () {
    it('should handle database errors gracefully', (0, _asyncToGenerator2.default)(function* () {
      mockDb.searchContacts.mockRejectedValue(new Error('Database connection failed'));
      var result = yield _contactManagementService.contactManagementService.searchContacts({
        query: 'test'
      });
      expect(result.contacts).toHaveLength(0);
      expect(result.totalCount).toBe(0);
    }));
    it('should handle malformed search queries', (0, _asyncToGenerator2.default)(function* () {
      var malformedQueries = ['', '   ', 'a'.repeat(1000), 'special chars: !@#$%^&*()'];
      for (var query of malformedQueries) {
        mockDb.searchContacts.mockResolvedValue({
          contacts: [],
          totalCount: 0,
          facets: {
            tags: [],
            categories: [],
            sources: []
          }
        });
        var result = yield _contactManagementService.contactManagementService.searchContacts({
          query: query
        });
        expect(result).toBeDefined();
        expect(Array.isArray(result.contacts)).toBe(true);
      }
    }));
    it('should timeout long-running searches', (0, _asyncToGenerator2.default)(function* () {
      mockDb.searchContacts.mockImplementation(function () {
        return new Promise(function (resolve) {
          return setTimeout(function () {
            return resolve({
              contacts: [],
              totalCount: 0,
              facets: {
                tags: [],
                categories: [],
                sources: []
              }
            });
          }, 10000);
        });
      });
      var startTime = Date.now();
      var result = yield _contactManagementService.contactManagementService.searchContacts({
        query: 'timeout test'
      });
      var searchTime = Date.now() - startTime;
      expect(searchTime).toBeLessThan(5000);
      expect(result.contacts).toHaveLength(0);
    }));
  });
  describe('Load Testing', function () {
    it('should handle concurrent search requests', (0, _asyncToGenerator2.default)(function* () {
      var concurrentSearches = 20;
      var searchPromises = [];
      mockDb.searchContacts.mockResolvedValue({
        contacts: [createMockContact()],
        totalCount: 1,
        facets: {
          tags: [],
          categories: [],
          sources: []
        }
      });
      for (var i = 0; i < concurrentSearches; i++) {
        searchPromises.push(_contactManagementService.contactManagementService.searchContacts({
          query: `concurrent search ${i}`
        }));
      }
      var startTime = Date.now();
      var results = yield Promise.all(searchPromises);
      var totalTime = Date.now() - startTime;
      expect(results).toHaveLength(concurrentSearches);
      expect(results.every(function (r) {
        return r.contacts.length === 1;
      })).toBe(true);
      expect(totalTime).toBeLessThan(5000);
    }));
    it('should maintain performance under memory pressure', (0, _asyncToGenerator2.default)(function* () {
      var largeDataSets = [];
      var _loop2 = function* _loop2(i) {
        var largeDataSet = Array.from({
          length: 1000
        }, function (_, j) {
          return createMockContact({
            id: `memory-test-${i}-${j}`
          });
        });
        largeDataSets.push(largeDataSet);
        mockDb.searchContacts.mockResolvedValueOnce({
          contacts: largeDataSet.slice(0, 50),
          totalCount: largeDataSet.length,
          facets: {
            tags: [],
            categories: [],
            sources: []
          }
        });
        var startTime = Date.now();
        var result = yield _contactManagementService.contactManagementService.searchContacts({
          query: `memory test ${i}`
        });
        var searchTime = Date.now() - startTime;
        expect(result.contacts).toHaveLength(50);
        expect(searchTime).toBeLessThan(2000);
      };
      for (var i = 0; i < 10; i++) {
        yield* _loop2(i);
      }
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,