e74534b004626f2194d8a7e6ef922919
var _businessCardValidation = require("../../../src/utils/businessCardValidation");
describe('Business Card Creation - All Field Types', function () {
  var validBasicInfo = {
    name: 'John Smith',
    title: 'CEO & Founder',
    company: 'TechStart Inc.',
    email: 'john@techstart.com',
    phone: '+1-555-123-4567',
    location: 'San Francisco, CA',
    bio: 'Experienced entrepreneur with a passion for innovative technology solutions.',
    profilePhoto: 'https://example.com/profile.jpg',
    companyLogo: 'https://example.com/logo.png'
  };
  var validStartupInfo = {
    fundingStage: 'seed',
    fundingAmount: '$2M',
    fundingRound: 'Seed Round A',
    teamSize: '11-25',
    foundedYear: 2023,
    industry: ['Technology', 'SaaS', 'AI'],
    businessModel: 'b2b',
    revenue: '0-10k',
    customers: '50+ early adopters',
    growth: '20% MoM',
    seekingFunding: true,
    seekingTalent: true,
    seekingPartners: false,
    seekingMentors: true
  };
  var validSocialLinks = {
    linkedin: 'https://linkedin.com/in/johnsmith',
    twitter: 'https://twitter.com/johnsmith',
    website: 'https://techstart.com',
    github: 'https://github.com/johnsmith',
    gitlab: 'https://gitlab.com/johnsmith',
    stackoverflow: 'https://stackoverflow.com/users/123456/johnsmith',
    instagram: 'https://instagram.com/johnsmith',
    facebook: 'https://facebook.com/johnsmith',
    youtube: 'https://youtube.com/c/johnsmith',
    tiktok: 'https://tiktok.com/@johnsmith',
    telegram: 'https://t.me/johnsmith',
    whatsapp: 'https://wa.me/15551234567',
    discord: 'https://discord.gg/johnsmith',
    slack: 'https://techstart.slack.com/team/U123456',
    medium: 'https://medium.com/@johnsmith',
    behance: 'https://behance.net/johnsmith',
    dribbble: 'https://dribbble.com/johnsmith',
    producthunt: 'https://producthunt.com/@johnsmith',
    angellist: 'https://angellist.com/johnsmith',
    crunchbase: 'https://crunchbase.com/person/john-smith'
  };
  var validCustomFields = [{
    id: '1',
    label: 'Investment Focus',
    value: 'B2B SaaS, AI, Fintech',
    type: 'text',
    icon: 'üíº',
    isPublic: true,
    order: 1
  }, {
    id: '2',
    label: 'Portfolio Website',
    value: 'https://portfolio.johnsmith.com',
    type: 'url',
    icon: 'üåê',
    isPublic: true,
    order: 2
  }, {
    id: '3',
    label: 'Secondary Email',
    value: 'john.personal@email.com',
    type: 'email',
    icon: 'üìß',
    isPublic: false,
    order: 3
  }, {
    id: '4',
    label: 'Mobile Number',
    value: '+1-555-987-6543',
    type: 'phone',
    icon: 'üì±',
    isPublic: true,
    order: 4
  }, {
    id: '5',
    label: 'Years of Experience',
    value: '15',
    type: 'number',
    icon: 'üìà',
    isPublic: true,
    order: 5
  }, {
    id: '6',
    label: 'Next Funding Date',
    value: '2024-12-31',
    type: 'date',
    icon: 'üìÖ',
    isPublic: false,
    order: 6
  }, {
    id: '7',
    label: 'Looking for Investors',
    value: 'true',
    type: 'boolean',
    icon: 'üí∞',
    isPublic: true,
    order: 7
  }];
  var validFormData = {
    basicInfo: validBasicInfo,
    startupInfo: validStartupInfo,
    socialLinks: validSocialLinks,
    customFields: validCustomFields,
    themeId: 'professional-theme-1',
    templateId: 'startup-template-1',
    isDefault: false,
    isPublic: true
  };
  describe('Basic Information Validation', function () {
    test('should validate complete basic info successfully', function () {
      var errors = (0, _businessCardValidation.validateBasicInfo)(validBasicInfo);
      expect(Object.keys(errors)).toHaveLength(0);
    });
    test('should require name field', function () {
      var invalidInfo = Object.assign({}, validBasicInfo, {
        name: ''
      });
      var errors = (0, _businessCardValidation.validateBasicInfo)(invalidInfo);
      expect(errors.name).toBe('Name is required');
    });
    test('should require title field', function () {
      var invalidInfo = Object.assign({}, validBasicInfo, {
        title: ''
      });
      var errors = (0, _businessCardValidation.validateBasicInfo)(invalidInfo);
      expect(errors.title).toBe('Title is required');
    });
    test('should require company field', function () {
      var invalidInfo = Object.assign({}, validBasicInfo, {
        company: ''
      });
      var errors = (0, _businessCardValidation.validateBasicInfo)(invalidInfo);
      expect(errors.company).toBe('Company is required');
    });
    test('should require email field', function () {
      var invalidInfo = Object.assign({}, validBasicInfo, {
        email: ''
      });
      var errors = (0, _businessCardValidation.validateBasicInfo)(invalidInfo);
      expect(errors.email).toBe('Email is required');
    });
    test('should validate email format', function () {
      var invalidInfo = Object.assign({}, validBasicInfo, {
        email: 'invalid-email'
      });
      var errors = (0, _businessCardValidation.validateBasicInfo)(invalidInfo);
      expect(errors.email).toBe('Please enter a valid email address');
    });
    test('should validate phone format when provided', function () {
      var invalidInfo = Object.assign({}, validBasicInfo, {
        phone: 'invalid-phone'
      });
      var errors = (0, _businessCardValidation.validateBasicInfo)(invalidInfo);
      expect(errors.phone).toBe('Please enter a valid phone number');
    });
    test('should enforce name length limits', function () {
      var shortName = Object.assign({}, validBasicInfo, {
        name: 'A'
      });
      var longName = Object.assign({}, validBasicInfo, {
        name: 'A'.repeat(51)
      });
      expect((0, _businessCardValidation.validateBasicInfo)(shortName).name).toContain('at least 2 characters');
      expect((0, _businessCardValidation.validateBasicInfo)(longName).name).toContain('less than 50 characters');
    });
  });
  describe('Startup Information Validation', function () {
    test('should validate complete startup info successfully', function () {
      var errors = (0, _businessCardValidation.validateStartupInfo)(validStartupInfo);
      expect(Object.keys(errors)).toHaveLength(0);
    });
    test('should validate funding stages', function () {
      var validStages = ['idea', 'pre-seed', 'seed', 'series-a', 'series-b', 'series-c', 'series-d+', 'ipo', 'acquired', 'bootstrapped'];
      validStages.forEach(function (stage) {
        var info = Object.assign({}, validStartupInfo, {
          fundingStage: stage
        });
        var errors = (0, _businessCardValidation.validateStartupInfo)(info);
        expect(errors.fundingStage).toBeUndefined();
      });
    });
    test('should validate team sizes', function () {
      var validSizes = ['solo', '2-5', '6-10', '11-25', '26-50', '51-100', '101-250', '250+'];
      validSizes.forEach(function (size) {
        var info = Object.assign({}, validStartupInfo, {
          teamSize: size
        });
        var errors = (0, _businessCardValidation.validateStartupInfo)(info);
        expect(errors.teamSize).toBeUndefined();
      });
    });
    test('should validate business models', function () {
      var validModels = ['b2b', 'b2c', 'b2b2c', 'marketplace', 'saas', 'subscription', 'freemium', 'advertising', 'commission', 'licensing', 'hardware', 'other'];
      validModels.forEach(function (model) {
        var info = Object.assign({}, validStartupInfo, {
          businessModel: model
        });
        var errors = (0, _businessCardValidation.validateStartupInfo)(info);
        expect(errors.fundingStage).toBeUndefined();
      });
    });
    test('should validate founded year', function () {
      var currentYear = new Date().getFullYear();
      var validYear = Object.assign({}, validStartupInfo, {
        foundedYear: currentYear
      });
      var oldYear = Object.assign({}, validStartupInfo, {
        foundedYear: 1800
      });
      var futureYear = Object.assign({}, validStartupInfo, {
        foundedYear: currentYear + 2
      });
      expect((0, _businessCardValidation.validateStartupInfo)(validYear).fundingStage).toBeUndefined();
      expect((0, _businessCardValidation.validateStartupInfo)(oldYear).fundingStage).toContain('valid founded year');
      expect((0, _businessCardValidation.validateStartupInfo)(futureYear).fundingStage).toContain('valid founded year');
    });
  });
  describe('Social Links Validation', function () {
    test('should validate all social links successfully', function () {
      var errors = (0, _businessCardValidation.validateSocialLinks)(validSocialLinks);
      expect(Object.keys(errors)).toHaveLength(0);
    });
    test('should validate LinkedIn URLs', function () {
      var validLinkedIn = ['https://linkedin.com/in/user', 'https://www.linkedin.com/company/company'];
      var invalidLinkedIn = ['https://facebook.com/user', 'not-a-url'];
      validLinkedIn.forEach(function (url) {
        var links = {
          linkedin: url
        };
        var errors = (0, _businessCardValidation.validateSocialLinks)(links);
        expect(errors.linkedin).toBeUndefined();
      });
      invalidLinkedIn.forEach(function (url) {
        var links = {
          linkedin: url
        };
        var errors = (0, _businessCardValidation.validateSocialLinks)(links);
        expect(errors.linkedin).toBeDefined();
      });
    });
    test('should validate Twitter URLs', function () {
      var validTwitter = ['https://twitter.com/user', 'https://x.com/user'];
      var invalidTwitter = ['https://facebook.com/user', 'not-a-url'];
      validTwitter.forEach(function (url) {
        var links = {
          twitter: url
        };
        var errors = (0, _businessCardValidation.validateSocialLinks)(links);
        expect(errors.twitter).toBeUndefined();
      });
      invalidTwitter.forEach(function (url) {
        var links = {
          twitter: url
        };
        var errors = (0, _businessCardValidation.validateSocialLinks)(links);
        expect(errors.twitter).toBeDefined();
      });
    });
    test('should validate GitHub URLs', function () {
      var validGitHub = ['https://github.com/user', 'https://www.github.com/user'];
      var invalidGitHub = ['https://gitlab.com/user', 'not-a-url'];
      validGitHub.forEach(function (url) {
        var links = {
          github: url
        };
        var errors = (0, _businessCardValidation.validateSocialLinks)(links);
        expect(errors.github).toBeUndefined();
      });
      invalidGitHub.forEach(function (url) {
        var links = {
          github: url
        };
        var errors = (0, _businessCardValidation.validateSocialLinks)(links);
        expect(errors.github).toBeDefined();
      });
    });
    test('should validate general URLs for non-specific platforms', function () {
      var validWebsite = 'https://example.com';
      var invalidWebsite = 'not-a-url';
      var validLinks = {
        website: validWebsite
      };
      var invalidLinks = {
        website: invalidWebsite
      };
      expect((0, _businessCardValidation.validateSocialLinks)(validLinks).website).toBeUndefined();
      expect((0, _businessCardValidation.validateSocialLinks)(invalidLinks).website).toBeDefined();
    });
  });
  describe('Custom Fields Validation', function () {
    test('should validate all custom field types successfully', function () {
      var errors = (0, _businessCardValidation.validateCustomFields)(validCustomFields);
      expect(Object.keys(errors)).toHaveLength(0);
    });
    test('should enforce maximum custom fields limit', function () {
      var tooManyFields = Array.from({
        length: 12
      }, function (_, i) {
        return {
          id: String(i),
          label: `Field ${i}`,
          value: `Value ${i}`,
          type: 'text',
          isPublic: true,
          order: i
        };
      });
      var errors = (0, _businessCardValidation.validateCustomFields)(tooManyFields);
      expect(errors.general).toContain('up to 10 custom fields');
    });
    test('should require field labels and values', function () {
      var invalidFields = [{
        id: '1',
        label: '',
        value: 'Valid Value',
        type: 'text',
        isPublic: true,
        order: 1
      }, {
        id: '2',
        label: 'Valid Label',
        value: '',
        type: 'text',
        isPublic: true,
        order: 2
      }];
      var errors = (0, _businessCardValidation.validateCustomFields)(invalidFields);
      expect(errors.field_0).toContain('Label is required');
      expect(errors.field_1).toContain('Value is required');
    });
    test('should validate email custom fields', function () {
      var emailField = [{
        id: '1',
        label: 'Email',
        value: 'invalid-email',
        type: 'email',
        isPublic: true,
        order: 1
      }];
      var errors = (0, _businessCardValidation.validateCustomFields)(emailField);
      expect(errors.field_0).toContain('valid email address');
    });
    test('should validate phone custom fields', function () {
      var phoneField = [{
        id: '1',
        label: 'Phone',
        value: 'invalid-phone',
        type: 'phone',
        isPublic: true,
        order: 1
      }];
      var errors = (0, _businessCardValidation.validateCustomFields)(phoneField);
      expect(errors.field_0).toContain('valid phone number');
    });
    test('should validate URL custom fields', function () {
      var urlField = [{
        id: '1',
        label: 'Website',
        value: 'not-a-url',
        type: 'url',
        isPublic: true,
        order: 1
      }];
      var errors = (0, _businessCardValidation.validateCustomFields)(urlField);
      expect(errors.field_0).toContain('valid URL');
    });
    test('should validate number custom fields', function () {
      var numberField = [{
        id: '1',
        label: 'Count',
        value: 'not-a-number',
        type: 'number',
        isPublic: true,
        order: 1
      }];
      var errors = (0, _businessCardValidation.validateCustomFields)(numberField);
      expect(errors.field_0).toContain('valid number');
    });
    test('should validate date custom fields', function () {
      var dateField = [{
        id: '1',
        label: 'Date',
        value: 'not-a-date',
        type: 'date',
        isPublic: true,
        order: 1
      }];
      var errors = (0, _businessCardValidation.validateCustomFields)(dateField);
      expect(errors.field_0).toContain('valid date');
    });
    test('should prevent duplicate field labels', function () {
      var duplicateFields = [{
        id: '1',
        label: 'Website',
        value: 'https://site1.com',
        type: 'url',
        isPublic: true,
        order: 1
      }, {
        id: '2',
        label: 'website',
        value: 'https://site2.com',
        type: 'url',
        isPublic: true,
        order: 2
      }];
      var errors = (0, _businessCardValidation.validateCustomFields)(duplicateFields);
      expect(errors.general).toContain('must be unique');
    });
  });
  describe('Complete Form Validation', function () {
    test('should validate complete form successfully', function () {
      var errors = (0, _businessCardValidation.validateBusinessCardForm)(validFormData);
      expect(Object.keys(errors)).toHaveLength(0);
    });
    test('should require theme selection', function () {
      var invalidForm = Object.assign({}, validFormData, {
        themeId: ''
      });
      var errors = (0, _businessCardValidation.validateBusinessCardForm)(invalidForm);
      expect(errors.theme).toBe('Please select a theme');
    });
    test('should require template selection', function () {
      var invalidForm = Object.assign({}, validFormData, {
        templateId: ''
      });
      var errors = (0, _businessCardValidation.validateBusinessCardForm)(invalidForm);
      expect(errors.template).toBe('Please select a template');
    });
    test('should check form validity correctly', function () {
      var validErrors = (0, _businessCardValidation.validateBusinessCardForm)(validFormData);
      expect((0, _businessCardValidation.isBusinessCardFormValid)(validFormData, validErrors)).toBe(true);
      var invalidForm = Object.assign({}, validFormData, {
        basicInfo: Object.assign({}, validBasicInfo, {
          name: ''
        })
      });
      var invalidErrors = (0, _businessCardValidation.validateBusinessCardForm)(invalidForm);
      expect((0, _businessCardValidation.isBusinessCardFormValid)(invalidForm, invalidErrors)).toBe(false);
    });
  });
  describe('Form Completion and Suggestions', function () {
    test('should calculate completion percentage', function () {
      var completion = (0, _businessCardValidation.getBusinessCardCompletionPercentage)(validFormData);
      expect(completion).toBeGreaterThan(80);
      expect(completion).toBeLessThanOrEqual(100);
    });
    test('should provide helpful suggestions', function () {
      var minimalForm = {
        basicInfo: {
          name: 'John Smith',
          title: 'CEO',
          company: 'TechStart',
          email: 'john@techstart.com'
        },
        socialLinks: {},
        customFields: [],
        themeId: 'theme-1',
        templateId: 'template-1'
      };
      var suggestions = (0, _businessCardValidation.getBusinessCardSuggestions)(minimalForm);
      expect(suggestions.length).toBeGreaterThan(0);
      expect(suggestions.some(function (s) {
        return s.includes('phone');
      })).toBe(true);
      expect(suggestions.some(function (s) {
        return s.includes('LinkedIn');
      })).toBe(true);
    });
    test('should suggest profile photo when missing', function () {
      var noPhotoForm = Object.assign({}, validFormData, {
        basicInfo: Object.assign({}, validBasicInfo, {
          profilePhoto: ''
        })
      });
      var suggestions = (0, _businessCardValidation.getBusinessCardSuggestions)(noPhotoForm);
      expect(suggestions.some(function (s) {
        return s.includes('profile photo');
      })).toBe(true);
    });
    test('should suggest bio when missing or too short', function () {
      var noBioForm = Object.assign({}, validFormData, {
        basicInfo: Object.assign({}, validBasicInfo, {
          bio: ''
        })
      });
      var shortBioForm = Object.assign({}, validFormData, {
        basicInfo: Object.assign({}, validBasicInfo, {
          bio: 'Short'
        })
      });
      expect((0, _businessCardValidation.getBusinessCardSuggestions)(noBioForm).some(function (s) {
        return s.includes('bio');
      })).toBe(true);
      expect((0, _businessCardValidation.getBusinessCardSuggestions)(shortBioForm).some(function (s) {
        return s.includes('bio');
      })).toBe(true);
    });
  });
  describe('Edge Cases and Error Handling', function () {
    test('should handle null and undefined values gracefully', function () {
      var nullForm = {
        basicInfo: {
          name: null,
          title: null,
          company: null,
          email: null
        },
        socialLinks: {},
        customFields: [],
        themeId: '',
        templateId: ''
      };
      expect(function () {
        return (0, _businessCardValidation.validateBusinessCardForm)(nullForm);
      }).not.toThrow();
    });
    test('should handle empty arrays and objects', function () {
      var emptyForm = {
        basicInfo: {},
        socialLinks: {},
        customFields: [],
        themeId: '',
        templateId: ''
      };
      expect(function () {
        return (0, _businessCardValidation.validateBusinessCardForm)(emptyForm);
      }).not.toThrow();
    });
    test('should handle very long input values', function () {
      var _errors$basicInfo;
      var longStringForm = Object.assign({}, validFormData, {
        basicInfo: Object.assign({}, validBasicInfo, {
          name: 'A'.repeat(1000),
          bio: 'B'.repeat(1000)
        })
      });
      var errors = (0, _businessCardValidation.validateBusinessCardForm)(longStringForm);
      expect((_errors$basicInfo = errors.basicInfo) == null ? void 0 : _errors$basicInfo.name).toBeDefined();
    });
    test('should handle special characters in fields', function () {
      var specialCharForm = Object.assign({}, validFormData, {
        basicInfo: Object.assign({}, validBasicInfo, {
          name: 'Jos√© Mar√≠a Aznar-L√≥pez',
          company: 'Company‚Ñ¢ & Co.'
        })
      });
      var errors = (0, _businessCardValidation.validateBusinessCardForm)(specialCharForm);
      expect(Object.keys(errors)).toHaveLength(0);
    });
  });
  describe('Real-world Scenarios', function () {
    test('should handle typical startup founder profile', function () {
      var founderProfile = {
        basicInfo: {
          name: 'Sarah Chen',
          title: 'Co-Founder & CTO',
          company: 'AI Vision Labs',
          email: 'sarah@aivisionlabs.ai',
          phone: '+1-415-555-0123',
          location: 'Palo Alto, CA',
          bio: 'Building the future of computer vision with deep learning. Former Google AI researcher with 8 years in ML.'
        },
        startupInfo: {
          fundingStage: 'series-a',
          teamSize: '11-25',
          industry: ['AI', 'Computer Vision', 'B2B'],
          businessModel: 'b2b',
          revenue: '100k-1m',
          seekingFunding: false,
          seekingTalent: true,
          seekingPartners: true,
          seekingMentors: false
        },
        socialLinks: {
          linkedin: 'https://linkedin.com/in/sarahchen',
          twitter: 'https://twitter.com/sarahchen_ai',
          github: 'https://github.com/sarahchen',
          website: 'https://aivisionlabs.ai'
        },
        customFields: [{
          id: '1',
          label: 'Patents Filed',
          value: '3',
          type: 'number',
          isPublic: true,
          order: 1
        }, {
          id: '2',
          label: 'Research Papers',
          value: '12',
          type: 'number',
          isPublic: true,
          order: 2
        }],
        themeId: 'tech-theme',
        templateId: 'modern-template',
        isDefault: true,
        isPublic: true
      };
      var errors = (0, _businessCardValidation.validateBusinessCardForm)(founderProfile);
      expect(Object.keys(errors)).toHaveLength(0);
      var completion = (0, _businessCardValidation.getBusinessCardCompletionPercentage)(founderProfile);
      expect(completion).toBeGreaterThan(85);
    });
    test('should handle investor profile', function () {
      var investorProfile = {
        basicInfo: {
          name: 'Michael Rodriguez',
          title: 'Managing Partner',
          company: 'Venture Capital Partners',
          email: 'michael@vcpartners.com',
          phone: '+1-212-555-0987',
          location: 'New York, NY',
          bio: 'Investing in early-stage B2B SaaS companies. $500M+ AUM. Former entrepreneur with 3 exits.'
        },
        startupInfo: {
          fundingStage: 'acquired',
          teamSize: '51-100',
          industry: ['Venture Capital', 'B2B', 'SaaS'],
          businessModel: 'commission',
          revenue: '10m-100m',
          seekingFunding: false,
          seekingTalent: false,
          seekingPartners: true,
          seekingMentors: false
        },
        socialLinks: {
          linkedin: 'https://linkedin.com/in/michaelrodriguez',
          twitter: 'https://twitter.com/mrodriguez_vc',
          website: 'https://vcpartners.com',
          angellist: 'https://angellist.com/michaelrodriguez',
          crunchbase: 'https://crunchbase.com/person/michael-rodriguez'
        },
        customFields: [{
          id: '1',
          label: 'Investment Range',
          value: '$500K - $5M',
          type: 'text',
          isPublic: true,
          order: 1
        }, {
          id: '2',
          label: 'Check Size',
          value: '$1M',
          type: 'text',
          isPublic: true,
          order: 2
        }, {
          id: '3',
          label: 'Portfolio Companies',
          value: '45',
          type: 'number',
          isPublic: true,
          order: 3
        }],
        themeId: 'professional-theme',
        templateId: 'executive-template',
        isDefault: true,
        isPublic: true
      };
      var errors = (0, _businessCardValidation.validateBusinessCardForm)(investorProfile);
      expect(Object.keys(errors)).toHaveLength(0);
      var completion = (0, _businessCardValidation.getBusinessCardCompletionPercentage)(investorProfile);
      expect(completion).toBeGreaterThan(90);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,