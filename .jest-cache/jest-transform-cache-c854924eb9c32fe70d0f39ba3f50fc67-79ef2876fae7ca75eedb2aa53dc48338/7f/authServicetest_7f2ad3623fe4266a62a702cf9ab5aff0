52bf0fa911faf4058f16f25ddbb4192c
_getJestObj().mock('../../../src/services/tokenStorage');
_getJestObj().mock('../../../src/utils/tokenUtils');
_getJestObj().mock('../../../src/utils/config', function () {
  return {
    AppConfig: {
      apiUrl: 'https://api.test.com'
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _authService = require("../../../src/services/authService");
var _tokenStorage = require("../../../src/services/tokenStorage");
var _tokenUtils = require("../../../src/utils/tokenUtils");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
global.fetch = jest.fn();
describe('Phase 1: Authentication Service Tests', function () {
  var authServiceInstance;
  beforeEach(function () {
    jest.clearAllMocks();
    authServiceInstance = new _authService.AuthenticationService();
    global.fetch.mockResolvedValue({
      ok: true,
      json: function json() {
        return Promise.resolve({
          success: true
        });
      },
      status: 200,
      statusText: 'OK'
    });
    _tokenStorage.tokenStorage.getTokens.mockResolvedValue(null);
    _tokenStorage.tokenStorage.setTokens.mockResolvedValue();
    _tokenStorage.tokenStorage.removeTokens.mockResolvedValue();
    _tokenStorage.tokenStorage.hasValidTokens.mockResolvedValue(false);
    _tokenUtils.validateTokens.mockReturnValue({
      isValid: true,
      isExpired: false,
      shouldRefresh: false
    });
    _tokenUtils.isRefreshTokenValid.mockReturnValue(true);
  });
  afterEach(function () {
    jest.clearAllMocks();
  });
  describe('Service Initialization', function () {
    test('should create AuthenticationService instance', function () {
      expect(authServiceInstance).toBeInstanceOf(_authService.AuthenticationService);
    });
    test('should initialize with correct default state', function () {
      expect(_authService.authService).toBeDefined();
      expect(typeof _authService.authService.login).toBe('function');
      expect(typeof _authService.authService.register).toBe('function');
      expect(typeof _authService.authService.logout).toBe('function');
    });
    test('should initialize auth state from stored tokens', (0, _asyncToGenerator2.default)(function* () {
      var mockTokens = {
        accessToken: 'mock-access-token',
        refreshToken: 'mock-refresh-token',
        expiresIn: 3600,
        tokenType: 'Bearer'
      };
      _tokenStorage.tokenStorage.getTokens.mockResolvedValueOnce(mockTokens);
      _tokenStorage.tokenStorage.hasValidTokens.mockResolvedValueOnce(true);
      var service = new _authService.AuthenticationService();
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 0);
      });
      expect(_tokenStorage.tokenStorage.getTokens).toHaveBeenCalled();
      expect(_tokenStorage.tokenStorage.hasValidTokens).toHaveBeenCalled();
    }));
  });
  describe('Email/Password Authentication', function () {
    test('should login with valid credentials', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        user: {
          id: '123',
          email: 'test@example.com',
          name: 'Test User',
          provider: 'email',
          verified: true
        },
        tokens: {
          accessToken: 'mock-access-token',
          refreshToken: 'mock-refresh-token',
          expiresIn: 3600,
          tokenType: 'Bearer'
        }
      };
      global.fetch.mockResolvedValueOnce({
        ok: true,
        json: function json() {
          return Promise.resolve(mockResponse);
        }
      });
      var credentials = {
        email: 'test@example.com',
        password: 'password123'
      };
      var result = yield authServiceInstance.login(credentials);
      expect(fetch).toHaveBeenCalledWith('https://api.test.com/auth/login', expect.objectContaining({
        method: 'POST',
        body: JSON.stringify({
          email: 'test@example.com',
          password: 'password123'
        }),
        headers: expect.objectContaining({
          'Content-Type': 'application/json'
        })
      }));
      expect(result).toEqual(mockResponse);
      expect(_tokenStorage.tokenStorage.setTokens).toHaveBeenCalledWith(mockResponse.tokens);
    }));
    test('should handle login failure', (0, _asyncToGenerator2.default)(function* () {
      global.fetch.mockResolvedValueOnce({
        ok: false,
        status: 401,
        statusText: 'Unauthorized',
        json: function json() {
          return Promise.resolve({
            message: 'Invalid credentials'
          });
        }
      });
      var credentials = {
        email: 'test@example.com',
        password: 'wrongpassword'
      };
      yield expect(authServiceInstance.login(credentials)).rejects.toThrow('Invalid credentials');
      expect(_tokenStorage.tokenStorage.setTokens).not.toHaveBeenCalled();
    }));
    test('should register new user successfully', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        user: {
          id: '456',
          email: 'newuser@example.com',
          name: 'New User',
          provider: 'email',
          verified: false
        },
        tokens: {
          accessToken: 'new-access-token',
          refreshToken: 'new-refresh-token',
          expiresIn: 3600,
          tokenType: 'Bearer'
        }
      };
      global.fetch.mockResolvedValueOnce({
        ok: true,
        json: function json() {
          return Promise.resolve(mockResponse);
        }
      });
      var registerData = {
        email: 'newuser@example.com',
        password: 'password123',
        name: 'New User',
        confirmPassword: 'password123'
      };
      var result = yield authServiceInstance.register(registerData);
      expect(fetch).toHaveBeenCalledWith('https://api.test.com/auth/register', expect.objectContaining({
        method: 'POST',
        body: JSON.stringify({
          email: 'newuser@example.com',
          password: 'password123',
          name: 'New User'
        })
      }));
      expect(result).toEqual(mockResponse);
      expect(_tokenStorage.tokenStorage.setTokens).toHaveBeenCalledWith(mockResponse.tokens);
    }));
    test('should validate password confirmation during registration', (0, _asyncToGenerator2.default)(function* () {
      var registerData = {
        email: 'test@example.com',
        password: 'password123',
        name: 'Test User',
        confirmPassword: 'different-password'
      };
      yield expect(authServiceInstance.register(registerData)).rejects.toThrow('Passwords do not match');
      expect(fetch).not.toHaveBeenCalled();
    }));
    test('should trim and lowercase email inputs', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        tokens: {}
      };
      global.fetch.mockResolvedValueOnce({
        ok: true,
        json: function json() {
          return Promise.resolve(mockResponse);
        }
      });
      yield authServiceInstance.login({
        email: '  TEST@EXAMPLE.COM  ',
        password: 'password123'
      });
      expect(fetch).toHaveBeenCalledWith('https://api.test.com/auth/login', expect.objectContaining({
        body: JSON.stringify({
          email: 'test@example.com',
          password: 'password123'
        })
      }));
    }));
  });
  describe('Social Authentication', function () {
    test('should login with Google successfully', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        user: {
          id: '789',
          email: 'google@example.com',
          name: 'Google User',
          provider: 'google',
          verified: true
        },
        tokens: {
          accessToken: 'google-access-token',
          refreshToken: 'google-refresh-token',
          expiresIn: 3600,
          tokenType: 'Bearer'
        }
      };
      global.fetch.mockResolvedValueOnce({
        ok: true,
        json: function json() {
          return Promise.resolve(mockResponse);
        }
      });
      var googleData = {
        provider: 'google',
        accessToken: 'google-token',
        idToken: 'google-id-token',
        profile: {
          id: 'google-user-id',
          email: 'google@example.com',
          name: 'Google User',
          avatar: 'https://example.com/avatar.jpg'
        }
      };
      var result = yield authServiceInstance.loginWithGoogle(googleData);
      expect(fetch).toHaveBeenCalledWith('https://api.test.com/auth/oauth/google', expect.objectContaining({
        method: 'POST',
        body: JSON.stringify({
          accessToken: 'google-token',
          idToken: 'google-id-token',
          profile: googleData.profile
        })
      }));
      expect(result).toEqual(mockResponse);
      expect(_tokenStorage.tokenStorage.setTokens).toHaveBeenCalledWith(mockResponse.tokens);
    }));
    test('should login with LinkedIn successfully', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        user: {
          id: '101',
          email: 'linkedin@example.com',
          name: 'LinkedIn User',
          provider: 'linkedin',
          verified: true
        },
        tokens: {
          accessToken: 'linkedin-access-token',
          refreshToken: 'linkedin-refresh-token',
          expiresIn: 3600,
          tokenType: 'Bearer'
        }
      };
      global.fetch.mockResolvedValueOnce({
        ok: true,
        json: function json() {
          return Promise.resolve(mockResponse);
        }
      });
      var linkedinData = {
        provider: 'linkedin',
        accessToken: 'linkedin-token',
        profile: {
          id: 'linkedin-user-id',
          email: 'linkedin@example.com',
          name: 'LinkedIn User'
        }
      };
      var result = yield authServiceInstance.loginWithLinkedIn(linkedinData);
      expect(fetch).toHaveBeenCalledWith('https://api.test.com/auth/oauth/linkedin', expect.objectContaining({
        method: 'POST',
        body: JSON.stringify({
          accessToken: 'linkedin-token',
          profile: linkedinData.profile
        })
      }));
      expect(result).toEqual(mockResponse);
    }));
    test('should handle social login failures', (0, _asyncToGenerator2.default)(function* () {
      global.fetch.mockResolvedValueOnce({
        ok: false,
        status: 400,
        statusText: 'Bad Request',
        json: function json() {
          return Promise.resolve({
            message: 'Invalid social token'
          });
        }
      });
      var googleData = {
        provider: 'google',
        accessToken: 'invalid-token',
        profile: {
          id: 'user-id',
          email: 'test@example.com',
          name: 'Test User'
        }
      };
      yield expect(authServiceInstance.loginWithGoogle(googleData)).rejects.toThrow('Invalid social token');
    }));
  });
  describe('Token Management', function () {
    test('should refresh tokens successfully', (0, _asyncToGenerator2.default)(function* () {
      var existingTokens = {
        accessToken: 'old-access-token',
        refreshToken: 'valid-refresh-token',
        expiresIn: 3600,
        tokenType: 'Bearer'
      };
      var newTokens = {
        accessToken: 'new-access-token',
        refreshToken: 'new-refresh-token',
        expiresIn: 3600,
        tokenType: 'Bearer'
      };
      var mockResponse = {
        success: true,
        tokens: newTokens
      };
      _tokenStorage.tokenStorage.getTokens.mockResolvedValueOnce(existingTokens);
      _tokenUtils.isRefreshTokenValid.mockReturnValueOnce(true);
      global.fetch.mockResolvedValueOnce({
        ok: true,
        json: function json() {
          return Promise.resolve(mockResponse);
        }
      });
      var result = yield authServiceInstance.refreshTokens();
      expect(fetch).toHaveBeenCalledWith('https://api.test.com/auth/refresh', expect.objectContaining({
        method: 'POST',
        body: JSON.stringify({
          refreshToken: 'valid-refresh-token'
        })
      }));
      expect(result).toEqual(mockResponse);
      expect(_tokenStorage.tokenStorage.setTokens).toHaveBeenCalledWith(newTokens);
    }));
    test('should handle invalid refresh token', (0, _asyncToGenerator2.default)(function* () {
      _tokenStorage.tokenStorage.getTokens.mockResolvedValueOnce(null);
      yield expect(authServiceInstance.refreshTokens()).rejects.toThrow('Session expired. Please login again.');
      expect(_tokenStorage.tokenStorage.removeTokens).toHaveBeenCalled();
    }));
    test('should prevent concurrent refresh attempts', (0, _asyncToGenerator2.default)(function* () {
      var mockTokens = {
        accessToken: 'token',
        refreshToken: 'refresh-token',
        expiresIn: 3600,
        tokenType: 'Bearer'
      };
      _tokenStorage.tokenStorage.getTokens.mockResolvedValue(mockTokens);
      _tokenUtils.isRefreshTokenValid.mockReturnValue(true);
      global.fetch.mockImplementation(function () {
        return new Promise(function (resolve) {
          return setTimeout(function () {
            return resolve({
              ok: true,
              json: function json() {
                return Promise.resolve({
                  success: true,
                  tokens: mockTokens
                });
              }
            });
          }, 100);
        });
      });
      var promise1 = authServiceInstance.refreshTokens();
      var promise2 = authServiceInstance.refreshTokens();
      yield Promise.all([promise1, promise2]);
      expect(fetch).toHaveBeenCalledTimes(1);
    }));
    test('should validate token with server', (0, _asyncToGenerator2.default)(function* () {
      global.fetch.mockResolvedValueOnce({
        ok: true,
        json: function json() {
          return Promise.resolve({
            valid: true
          });
        }
      });
      var result = yield authServiceInstance.validateToken('test-token');
      expect(fetch).toHaveBeenCalledWith('https://api.test.com/auth/validate', expect.objectContaining({
        method: 'POST',
        body: JSON.stringify({
          token: 'test-token'
        })
      }));
      expect(result).toBe(true);
    }));
    test('should return false for invalid token validation', (0, _asyncToGenerator2.default)(function* () {
      global.fetch.mockRejectedValueOnce(new Error('Network error'));
      var result = yield authServiceInstance.validateToken('invalid-token');
      expect(result).toBe(false);
    }));
  });
  describe('User Management', function () {
    test('should get current user successfully', (0, _asyncToGenerator2.default)(function* () {
      var mockTokens = {
        accessToken: 'valid-token',
        refreshToken: 'refresh-token',
        expiresIn: 3600,
        tokenType: 'Bearer'
      };
      var mockUser = {
        id: '123',
        email: 'user@example.com',
        name: 'Current User',
        provider: 'email',
        verified: true
      };
      _tokenStorage.tokenStorage.getTokens.mockResolvedValueOnce(mockTokens);
      _tokenUtils.validateTokens.mockReturnValueOnce({
        isValid: true,
        isExpired: false,
        shouldRefresh: false
      });
      global.fetch.mockResolvedValueOnce({
        ok: true,
        json: function json() {
          return Promise.resolve({
            user: mockUser
          });
        }
      });
      var result = yield authServiceInstance.getCurrentUser();
      expect(fetch).toHaveBeenCalledWith('https://api.test.com/auth/me', expect.objectContaining({
        method: 'GET'
      }));
      expect(result).toEqual(mockUser);
    }));
    test('should return null when no tokens exist', (0, _asyncToGenerator2.default)(function* () {
      _tokenStorage.tokenStorage.getTokens.mockResolvedValueOnce(null);
      var result = yield authServiceInstance.getCurrentUser();
      expect(result).toBeNull();
      expect(fetch).not.toHaveBeenCalled();
    }));
    test('should refresh tokens when needed for getCurrentUser', (0, _asyncToGenerator2.default)(function* () {
      var mockTokens = {
        accessToken: 'expiring-token',
        refreshToken: 'refresh-token',
        expiresIn: 3600,
        tokenType: 'Bearer'
      };
      _tokenStorage.tokenStorage.getTokens.mockResolvedValue(mockTokens);
      _tokenUtils.validateTokens.mockReturnValueOnce({
        isValid: true,
        isExpired: false,
        shouldRefresh: true
      });
      _tokenUtils.isRefreshTokenValid.mockReturnValue(true);
      global.fetch.mockResolvedValueOnce({
        ok: true,
        json: function json() {
          return Promise.resolve({
            success: true,
            tokens: mockTokens
          });
        }
      }).mockResolvedValueOnce({
        ok: true,
        json: function json() {
          return Promise.resolve({
            user: {
              id: '123'
            }
          });
        }
      });
      yield authServiceInstance.getCurrentUser();
      expect(fetch).toHaveBeenCalledWith('https://api.test.com/auth/refresh', expect.anything());
    }));
    test('should update user profile successfully', (0, _asyncToGenerator2.default)(function* () {
      var updatedUser = {
        id: '123',
        email: 'user@example.com',
        name: 'Updated Name',
        provider: 'email',
        verified: true
      };
      global.fetch.mockResolvedValueOnce({
        ok: true,
        json: function json() {
          return Promise.resolve({
            user: updatedUser
          });
        }
      });
      var updateData = {
        name: 'Updated Name'
      };
      var result = yield authServiceInstance.updateProfile(updateData);
      expect(fetch).toHaveBeenCalledWith('https://api.test.com/auth/profile', expect.objectContaining({
        method: 'PUT',
        body: JSON.stringify(updateData)
      }));
      expect(result).toEqual(updatedUser);
    }));
  });
  describe('Logout Functionality', function () {
    test('should logout successfully', (0, _asyncToGenerator2.default)(function* () {
      var mockTokens = {
        accessToken: 'token',
        refreshToken: 'refresh-token',
        expiresIn: 3600,
        tokenType: 'Bearer'
      };
      _tokenStorage.tokenStorage.getTokens.mockResolvedValueOnce(mockTokens);
      global.fetch.mockResolvedValueOnce({
        ok: true,
        json: function json() {
          return Promise.resolve({
            success: true
          });
        }
      });
      yield authServiceInstance.logout();
      expect(fetch).toHaveBeenCalledWith('https://api.test.com/auth/logout', expect.objectContaining({
        method: 'POST',
        body: JSON.stringify({
          refreshToken: 'refresh-token'
        })
      }));
      expect(_tokenStorage.tokenStorage.removeTokens).toHaveBeenCalled();
    }));
    test('should clear local state even if logout API fails', (0, _asyncToGenerator2.default)(function* () {
      var mockTokens = {
        refreshToken: 'refresh-token'
      };
      _tokenStorage.tokenStorage.getTokens.mockResolvedValueOnce(mockTokens);
      global.fetch.mockRejectedValueOnce(new Error('Network error'));
      yield authServiceInstance.logout();
      expect(_tokenStorage.tokenStorage.removeTokens).toHaveBeenCalled();
    }));
    test('should handle logout without tokens', (0, _asyncToGenerator2.default)(function* () {
      _tokenStorage.tokenStorage.getTokens.mockResolvedValueOnce(null);
      yield authServiceInstance.logout();
      expect(_tokenStorage.tokenStorage.removeTokens).toHaveBeenCalled();
    }));
  });
  describe('Password Management', function () {
    test('should request password reset successfully', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        message: 'Password reset email sent'
      };
      global.fetch.mockResolvedValueOnce({
        ok: true,
        json: function json() {
          return Promise.resolve(mockResponse);
        }
      });
      var result = yield authServiceInstance.requestPasswordReset({
        email: 'user@example.com'
      });
      expect(fetch).toHaveBeenCalledWith('https://api.test.com/auth/password/reset-request', expect.objectContaining({
        method: 'POST',
        body: JSON.stringify({
          email: 'user@example.com'
        })
      }));
      expect(result).toEqual(mockResponse);
    }));
    test('should update password with reset token', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        message: 'Password updated successfully'
      };
      global.fetch.mockResolvedValueOnce({
        ok: true,
        json: function json() {
          return Promise.resolve(mockResponse);
        }
      });
      var passwordData = {
        token: 'reset-token',
        newPassword: 'newpassword123',
        confirmPassword: 'newpassword123'
      };
      var result = yield authServiceInstance.updatePassword(passwordData);
      expect(fetch).toHaveBeenCalledWith('https://api.test.com/auth/password/reset-confirm', expect.objectContaining({
        method: 'POST',
        body: JSON.stringify({
          token: 'reset-token',
          newPassword: 'newpassword123'
        })
      }));
      expect(result).toEqual(mockResponse);
    }));
    test('should validate password confirmation for reset', (0, _asyncToGenerator2.default)(function* () {
      var passwordData = {
        token: 'reset-token',
        newPassword: 'password123',
        confirmPassword: 'different-password'
      };
      yield expect(authServiceInstance.updatePassword(passwordData)).rejects.toThrow('Passwords do not match');
      expect(fetch).not.toHaveBeenCalled();
    }));
  });
  describe('Authentication State', function () {
    test('should check if user is authenticated', (0, _asyncToGenerator2.default)(function* () {
      _tokenStorage.tokenStorage.hasValidTokens.mockResolvedValueOnce(true);
      var result = yield authServiceInstance.isAuthenticated();
      expect(result).toBe(true);
      expect(_tokenStorage.tokenStorage.hasValidTokens).toHaveBeenCalled();
    }));
    test('should get stored tokens', (0, _asyncToGenerator2.default)(function* () {
      var mockTokens = {
        accessToken: 'token',
        refreshToken: 'refresh-token',
        expiresIn: 3600,
        tokenType: 'Bearer'
      };
      _tokenStorage.tokenStorage.getTokens.mockResolvedValueOnce(mockTokens);
      var result = yield authServiceInstance.getStoredTokens();
      expect(result).toEqual(mockTokens);
      expect(_tokenStorage.tokenStorage.getTokens).toHaveBeenCalled();
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,