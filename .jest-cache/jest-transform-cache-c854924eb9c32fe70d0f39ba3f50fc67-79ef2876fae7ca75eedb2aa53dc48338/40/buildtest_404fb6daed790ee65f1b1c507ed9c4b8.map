{"version":3,"names":["_require","require","execSync","fs","path","describe","projectRoot","resolve","__dirname","beforeAll","process","chdir","test","requiredFiles","forEach","file","filePath","join","expect","existsSync","toBe","srcPath","srcDirs","readdirSync","withFileTypes","dirNames","filter","dirent","isDirectory","map","name","expectedDirs","dir","toContain","nodeModulesPath","packageJsonPath","packageJson","JSON","parse","readFileSync","criticalDeps","dep","dependencies","toBeDefined","criticalDevDeps","devDependencies","result","encoding","stdio","cwd","not","toMatch","error","stdout","version","scripts","android","ios","babelConfigPath","babelConfig","presets","metroConfigPath","metroConfig","androidPath","requiredAndroidFiles","buildGradlePath","buildGradleContent","iosPath","requiredIosFiles","podfilePath","podfileContent","appPath","appContent","indexPath","indexContent"],"sources":["build.test.js"],"sourcesContent":["/**\n * Phase 0 Tests: Build Verification\n * \n * Tests that verify the project builds successfully for iOS and Android\n * and all dependencies are properly installed.\n */\n\nconst { execSync } = require('child_process');\nconst fs = require('fs');\nconst path = require('path');\n\ndescribe('Phase 0: Build Verification', () => {\n  const projectRoot = path.resolve(__dirname, '../../..');\n  \n  beforeAll(() => {\n    // Ensure we're in the right directory\n    process.chdir(projectRoot);\n  });\n\n  describe('Project Structure', () => {\n    test('should have all required build files', () => {\n      const requiredFiles = [\n        'package.json',\n        'babel.config.js',\n        'metro.config.js',\n        'App.tsx',\n        'index.js',\n        'android/build.gradle',\n        'android/app/build.gradle',\n        'ios/digbiz5.xcodeproj/project.pbxproj',\n        'tsconfig.json'\n      ];\n\n      requiredFiles.forEach(file => {\n        const filePath = path.join(projectRoot, file);\n        expect(fs.existsSync(filePath)).toBe(true);\n      });\n    });\n\n    test('should have src directory structure', () => {\n      const srcPath = path.join(projectRoot, 'src');\n      expect(fs.existsSync(srcPath)).toBe(true);\n      \n      const srcDirs = fs.readdirSync(srcPath, { withFileTypes: true });\n      const dirNames = srcDirs.filter(dirent => dirent.isDirectory()).map(dirent => dirent.name);\n      \n      // Should have at least these directories\n      const expectedDirs = ['components', 'services', 'store', 'types'];\n      expectedDirs.forEach(dir => {\n        expect(dirNames).toContain(dir);\n      });\n    });\n  });\n\n  describe('Dependency Installation', () => {\n    test('should have node_modules directory', () => {\n      const nodeModulesPath = path.join(projectRoot, 'node_modules');\n      expect(fs.existsSync(nodeModulesPath)).toBe(true);\n    });\n\n    test('should have all critical dependencies installed', () => {\n      const packageJsonPath = path.join(projectRoot, 'package.json');\n      const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));\n      \n      const criticalDeps = [\n        'react',\n        'react-native',\n        '@react-navigation/native',\n        '@reduxjs/toolkit',\n        'react-redux',\n        'react-native-mmkv'\n      ];\n\n      criticalDeps.forEach(dep => {\n        expect(packageJson.dependencies[dep]).toBeDefined();\n      });\n    });\n\n    test('should have all dev dependencies installed', () => {\n      const packageJsonPath = path.join(projectRoot, 'package.json');\n      const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));\n      \n      const criticalDevDeps = [\n        '@react-native-community/cli',\n        '@testing-library/react-native',\n        'jest',\n        'typescript',\n        'eslint',\n        'detox'\n      ];\n\n      criticalDevDeps.forEach(dep => {\n        expect(packageJson.devDependencies[dep]).toBeDefined();\n      });\n    });\n\n    test('should be able to resolve all dependencies', () => {\n      try {\n        const result = execSync('npm ls --depth=0', { \n          encoding: 'utf8', \n          stdio: 'pipe',\n          cwd: projectRoot \n        });\n        \n        // npm ls should not report any missing dependencies\n        expect(result).not.toMatch(/UNMET DEPENDENCY/);\n        expect(result).not.toMatch(/missing:/);\n      } catch (error) {\n        // npm ls exits with code 1 if there are issues, but we can still check the output\n        if (error.stdout) {\n          expect(error.stdout).not.toMatch(/UNMET DEPENDENCY/);\n          expect(error.stdout).not.toMatch(/missing:/);\n        }\n      }\n    });\n  });\n\n  describe('Build Configuration', () => {\n    test('should have valid package.json', () => {\n      const packageJsonPath = path.join(projectRoot, 'package.json');\n      const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));\n      \n      expect(packageJson.name).toBeDefined();\n      expect(packageJson.version).toBeDefined();\n      expect(packageJson.scripts).toBeDefined();\n      expect(packageJson.scripts.android).toBeDefined();\n      expect(packageJson.scripts.ios).toBeDefined();\n    });\n\n    test('should have valid babel configuration', () => {\n      const babelConfigPath = path.join(projectRoot, 'babel.config.js');\n      expect(fs.existsSync(babelConfigPath)).toBe(true);\n      \n      const babelConfig = require(babelConfigPath);\n      expect(babelConfig.presets).toBeDefined();\n      expect(babelConfig.presets).toContain('module:@react-native/babel-preset');\n    });\n\n    test('should have valid metro configuration', () => {\n      const metroConfigPath = path.join(projectRoot, 'metro.config.js');\n      expect(fs.existsSync(metroConfigPath)).toBe(true);\n      \n      const metroConfig = require(metroConfigPath);\n      expect(metroConfig).toBeDefined();\n    });\n  });\n\n  describe('Android Build Setup', () => {\n    test('should have Android project structure', () => {\n      const androidPath = path.join(projectRoot, 'android');\n      expect(fs.existsSync(androidPath)).toBe(true);\n      \n      const requiredAndroidFiles = [\n        'android/build.gradle',\n        'android/settings.gradle',\n        'android/app/build.gradle',\n        'android/app/src/main/AndroidManifest.xml'\n      ];\n\n      requiredAndroidFiles.forEach(file => {\n        const filePath = path.join(projectRoot, file);\n        expect(fs.existsSync(filePath)).toBe(true);\n      });\n    });\n\n    test('should have correct Android configuration', () => {\n      const buildGradlePath = path.join(projectRoot, 'android/app/build.gradle');\n      const buildGradleContent = fs.readFileSync(buildGradlePath, 'utf8');\n      \n      expect(buildGradleContent).toMatch(/com\\.android\\.application/);\n      expect(buildGradleContent).toMatch(/applicationId/);\n      expect(buildGradleContent).toMatch(/versionCode/);\n      expect(buildGradleContent).toMatch(/versionName/);\n    });\n  });\n\n  describe('iOS Build Setup', () => {\n    test('should have iOS project structure', () => {\n      const iosPath = path.join(projectRoot, 'ios');\n      expect(fs.existsSync(iosPath)).toBe(true);\n      \n      const requiredIosFiles = [\n        'ios/digbiz5.xcodeproj',\n        'ios/digbiz5/Info.plist'\n      ];\n\n      requiredIosFiles.forEach(file => {\n        const filePath = path.join(projectRoot, file);\n        expect(fs.existsSync(filePath)).toBe(true);\n      });\n    });\n\n    test('should have Podfile for iOS dependencies', () => {\n      const podfilePath = path.join(projectRoot, 'ios/Podfile');\n      expect(fs.existsSync(podfilePath)).toBe(true);\n      \n      const podfileContent = fs.readFileSync(podfilePath, 'utf8');\n      expect(podfileContent).toMatch(/platform :ios/);\n      expect(podfileContent).toMatch(/target 'digbiz5'/);\n    });\n  });\n\n  describe('React Native Setup', () => {\n    test('should have valid App.tsx entry point', () => {\n      const appPath = path.join(projectRoot, 'App.tsx');\n      expect(fs.existsSync(appPath)).toBe(true);\n      \n      const appContent = fs.readFileSync(appPath, 'utf8');\n      expect(appContent).toMatch(/import.*react|import.*React/);\n      expect(appContent).toMatch(/export default/);\n    });\n\n    test('should have valid index.js entry point', () => {\n      const indexPath = path.join(projectRoot, 'index.js');\n      expect(fs.existsSync(indexPath)).toBe(true);\n      \n      const indexContent = fs.readFileSync(indexPath, 'utf8');\n      expect(indexContent).toMatch(/AppRegistry/);\n      expect(indexContent).toMatch(/registerComponent/);\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}