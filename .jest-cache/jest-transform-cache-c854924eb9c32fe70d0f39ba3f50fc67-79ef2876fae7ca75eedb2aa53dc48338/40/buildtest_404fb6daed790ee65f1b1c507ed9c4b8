d8b0562c1cec83746d8a02bbef89afdd
var _require = require('child_process'),
  execSync = _require.execSync;
var fs = require('fs');
var path = require('path');
describe('Phase 0: Build Verification', function () {
  var projectRoot = path.resolve(__dirname, '../../..');
  beforeAll(function () {
    process.chdir(projectRoot);
  });
  describe('Project Structure', function () {
    test('should have all required build files', function () {
      var requiredFiles = ['package.json', 'babel.config.js', 'metro.config.js', 'App.tsx', 'index.js', 'android/build.gradle', 'android/app/build.gradle', 'ios/digbiz5.xcodeproj/project.pbxproj', 'tsconfig.json'];
      requiredFiles.forEach(function (file) {
        var filePath = path.join(projectRoot, file);
        expect(fs.existsSync(filePath)).toBe(true);
      });
    });
    test('should have src directory structure', function () {
      var srcPath = path.join(projectRoot, 'src');
      expect(fs.existsSync(srcPath)).toBe(true);
      var srcDirs = fs.readdirSync(srcPath, {
        withFileTypes: true
      });
      var dirNames = srcDirs.filter(function (dirent) {
        return dirent.isDirectory();
      }).map(function (dirent) {
        return dirent.name;
      });
      var expectedDirs = ['components', 'services', 'store', 'types'];
      expectedDirs.forEach(function (dir) {
        expect(dirNames).toContain(dir);
      });
    });
  });
  describe('Dependency Installation', function () {
    test('should have node_modules directory', function () {
      var nodeModulesPath = path.join(projectRoot, 'node_modules');
      expect(fs.existsSync(nodeModulesPath)).toBe(true);
    });
    test('should have all critical dependencies installed', function () {
      var packageJsonPath = path.join(projectRoot, 'package.json');
      var packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
      var criticalDeps = ['react', 'react-native', '@react-navigation/native', '@reduxjs/toolkit', 'react-redux', 'react-native-mmkv'];
      criticalDeps.forEach(function (dep) {
        expect(packageJson.dependencies[dep]).toBeDefined();
      });
    });
    test('should have all dev dependencies installed', function () {
      var packageJsonPath = path.join(projectRoot, 'package.json');
      var packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
      var criticalDevDeps = ['@react-native-community/cli', '@testing-library/react-native', 'jest', 'typescript', 'eslint', 'detox'];
      criticalDevDeps.forEach(function (dep) {
        expect(packageJson.devDependencies[dep]).toBeDefined();
      });
    });
    test('should be able to resolve all dependencies', function () {
      try {
        var result = execSync('npm ls --depth=0', {
          encoding: 'utf8',
          stdio: 'pipe',
          cwd: projectRoot
        });
        expect(result).not.toMatch(/UNMET DEPENDENCY/);
        expect(result).not.toMatch(/missing:/);
      } catch (error) {
        if (error.stdout) {
          expect(error.stdout).not.toMatch(/UNMET DEPENDENCY/);
          expect(error.stdout).not.toMatch(/missing:/);
        }
      }
    });
  });
  describe('Build Configuration', function () {
    test('should have valid package.json', function () {
      var packageJsonPath = path.join(projectRoot, 'package.json');
      var packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
      expect(packageJson.name).toBeDefined();
      expect(packageJson.version).toBeDefined();
      expect(packageJson.scripts).toBeDefined();
      expect(packageJson.scripts.android).toBeDefined();
      expect(packageJson.scripts.ios).toBeDefined();
    });
    test('should have valid babel configuration', function () {
      var babelConfigPath = path.join(projectRoot, 'babel.config.js');
      expect(fs.existsSync(babelConfigPath)).toBe(true);
      var babelConfig = require(babelConfigPath);
      expect(babelConfig.presets).toBeDefined();
      expect(babelConfig.presets).toContain('module:@react-native/babel-preset');
    });
    test('should have valid metro configuration', function () {
      var metroConfigPath = path.join(projectRoot, 'metro.config.js');
      expect(fs.existsSync(metroConfigPath)).toBe(true);
      var metroConfig = require(metroConfigPath);
      expect(metroConfig).toBeDefined();
    });
  });
  describe('Android Build Setup', function () {
    test('should have Android project structure', function () {
      var androidPath = path.join(projectRoot, 'android');
      expect(fs.existsSync(androidPath)).toBe(true);
      var requiredAndroidFiles = ['android/build.gradle', 'android/settings.gradle', 'android/app/build.gradle', 'android/app/src/main/AndroidManifest.xml'];
      requiredAndroidFiles.forEach(function (file) {
        var filePath = path.join(projectRoot, file);
        expect(fs.existsSync(filePath)).toBe(true);
      });
    });
    test('should have correct Android configuration', function () {
      var buildGradlePath = path.join(projectRoot, 'android/app/build.gradle');
      var buildGradleContent = fs.readFileSync(buildGradlePath, 'utf8');
      expect(buildGradleContent).toMatch(/com\.android\.application/);
      expect(buildGradleContent).toMatch(/applicationId/);
      expect(buildGradleContent).toMatch(/versionCode/);
      expect(buildGradleContent).toMatch(/versionName/);
    });
  });
  describe('iOS Build Setup', function () {
    test('should have iOS project structure', function () {
      var iosPath = path.join(projectRoot, 'ios');
      expect(fs.existsSync(iosPath)).toBe(true);
      var requiredIosFiles = ['ios/digbiz5.xcodeproj', 'ios/digbiz5/Info.plist'];
      requiredIosFiles.forEach(function (file) {
        var filePath = path.join(projectRoot, file);
        expect(fs.existsSync(filePath)).toBe(true);
      });
    });
    test('should have Podfile for iOS dependencies', function () {
      var podfilePath = path.join(projectRoot, 'ios/Podfile');
      expect(fs.existsSync(podfilePath)).toBe(true);
      var podfileContent = fs.readFileSync(podfilePath, 'utf8');
      expect(podfileContent).toMatch(/platform :ios/);
      expect(podfileContent).toMatch(/target 'digbiz5'/);
    });
  });
  describe('React Native Setup', function () {
    test('should have valid App.tsx entry point', function () {
      var appPath = path.join(projectRoot, 'App.tsx');
      expect(fs.existsSync(appPath)).toBe(true);
      var appContent = fs.readFileSync(appPath, 'utf8');
      expect(appContent).toMatch(/import.*react|import.*React/);
      expect(appContent).toMatch(/export default/);
    });
    test('should have valid index.js entry point', function () {
      var indexPath = path.join(projectRoot, 'index.js');
      expect(fs.existsSync(indexPath)).toBe(true);
      var indexContent = fs.readFileSync(indexPath, 'utf8');
      expect(indexContent).toMatch(/AppRegistry/);
      expect(indexContent).toMatch(/registerComponent/);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,