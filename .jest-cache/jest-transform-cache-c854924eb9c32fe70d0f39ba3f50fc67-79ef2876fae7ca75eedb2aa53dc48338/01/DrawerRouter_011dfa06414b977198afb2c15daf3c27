aab1da9e5b581f2847a260836a7070d5
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DrawerActions = void 0;
exports.DrawerRouter = DrawerRouter;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _nonSecure = require("nanoid/non-secure");
var _TabRouter = require("./TabRouter.js");
var _excluded = ["defaultStatus"];
var DrawerActions = exports.DrawerActions = Object.assign({}, _TabRouter.TabActions, {
  openDrawer: function openDrawer() {
    return {
      type: 'OPEN_DRAWER'
    };
  },
  closeDrawer: function closeDrawer() {
    return {
      type: 'CLOSE_DRAWER'
    };
  },
  toggleDrawer: function toggleDrawer() {
    return {
      type: 'TOGGLE_DRAWER'
    };
  }
});
function DrawerRouter(_ref) {
  var _ref$defaultStatus = _ref.defaultStatus,
    defaultStatus = _ref$defaultStatus === void 0 ? 'closed' : _ref$defaultStatus,
    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var router = (0, _TabRouter.TabRouter)(rest);
  var isDrawerInHistory = function isDrawerInHistory(state) {
    var _state$history;
    return Boolean((_state$history = state.history) == null ? void 0 : _state$history.some(function (it) {
      return it.type === 'drawer';
    }));
  };
  var addDrawerToHistory = function addDrawerToHistory(state) {
    if (isDrawerInHistory(state)) {
      return state;
    }
    return Object.assign({}, state, {
      history: [].concat((0, _toConsumableArray2.default)(state.history), [{
        type: 'drawer',
        status: defaultStatus === 'open' ? 'closed' : 'open'
      }])
    });
  };
  var removeDrawerFromHistory = function removeDrawerFromHistory(state) {
    if (!isDrawerInHistory(state)) {
      return state;
    }
    return Object.assign({}, state, {
      history: state.history.filter(function (it) {
        return it.type !== 'drawer';
      })
    });
  };
  var openDrawer = function openDrawer(state) {
    if (defaultStatus === 'open') {
      return removeDrawerFromHistory(state);
    }
    return addDrawerToHistory(state);
  };
  var closeDrawer = function closeDrawer(state) {
    if (defaultStatus === 'open') {
      return addDrawerToHistory(state);
    }
    return removeDrawerFromHistory(state);
  };
  return Object.assign({}, router, {
    type: 'drawer',
    getInitialState: function getInitialState(_ref2) {
      var routeNames = _ref2.routeNames,
        routeParamList = _ref2.routeParamList,
        routeGetIdList = _ref2.routeGetIdList;
      var state = router.getInitialState({
        routeNames: routeNames,
        routeParamList: routeParamList,
        routeGetIdList: routeGetIdList
      });
      return Object.assign({}, state, {
        default: defaultStatus,
        stale: false,
        type: 'drawer',
        key: `drawer-${(0, _nonSecure.nanoid)()}`
      });
    },
    getRehydratedState: function getRehydratedState(partialState, _ref3) {
      var routeNames = _ref3.routeNames,
        routeParamList = _ref3.routeParamList,
        routeGetIdList = _ref3.routeGetIdList;
      if (partialState.stale === false) {
        return partialState;
      }
      var state = router.getRehydratedState(partialState, {
        routeNames: routeNames,
        routeParamList: routeParamList,
        routeGetIdList: routeGetIdList
      });
      if (isDrawerInHistory(partialState)) {
        state = removeDrawerFromHistory(state);
        state = addDrawerToHistory(state);
      }
      return Object.assign({}, state, {
        default: defaultStatus,
        type: 'drawer',
        key: `drawer-${(0, _nonSecure.nanoid)()}`
      });
    },
    getStateForRouteFocus: function getStateForRouteFocus(state, key) {
      var result = router.getStateForRouteFocus(state, key);
      return closeDrawer(result);
    },
    getStateForAction: function getStateForAction(state, action, options) {
      switch (action.type) {
        case 'OPEN_DRAWER':
          return openDrawer(state);
        case 'CLOSE_DRAWER':
          return closeDrawer(state);
        case 'TOGGLE_DRAWER':
          if (isDrawerInHistory(state)) {
            return removeDrawerFromHistory(state);
          }
          return addDrawerToHistory(state);
        case 'JUMP_TO':
        case 'NAVIGATE':
        case 'NAVIGATE_DEPRECATED':
          {
            var result = router.getStateForAction(state, action, options);
            if (result != null && result.index !== state.index) {
              return closeDrawer(result);
            }
            return result;
          }
        case 'GO_BACK':
          if (isDrawerInHistory(state)) {
            return removeDrawerFromHistory(state);
          }
          return router.getStateForAction(state, action, options);
        default:
          return router.getStateForAction(state, action, options);
      }
    },
    actionCreators: DrawerActions
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbm9uU2VjdXJlIiwicmVxdWlyZSIsIl9UYWJSb3V0ZXIiLCJfZXhjbHVkZWQiLCJEcmF3ZXJBY3Rpb25zIiwiZXhwb3J0cyIsIk9iamVjdCIsImFzc2lnbiIsIlRhYkFjdGlvbnMiLCJvcGVuRHJhd2VyIiwidHlwZSIsImNsb3NlRHJhd2VyIiwidG9nZ2xlRHJhd2VyIiwiRHJhd2VyUm91dGVyIiwiX3JlZiIsIl9yZWYkZGVmYXVsdFN0YXR1cyIsImRlZmF1bHRTdGF0dXMiLCJyZXN0IiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiIsImRlZmF1bHQiLCJyb3V0ZXIiLCJUYWJSb3V0ZXIiLCJpc0RyYXdlckluSGlzdG9yeSIsInN0YXRlIiwiX3N0YXRlJGhpc3RvcnkiLCJCb29sZWFuIiwiaGlzdG9yeSIsInNvbWUiLCJpdCIsImFkZERyYXdlclRvSGlzdG9yeSIsImNvbmNhdCIsIl90b0NvbnN1bWFibGVBcnJheTIiLCJzdGF0dXMiLCJyZW1vdmVEcmF3ZXJGcm9tSGlzdG9yeSIsImZpbHRlciIsImdldEluaXRpYWxTdGF0ZSIsIl9yZWYyIiwicm91dGVOYW1lcyIsInJvdXRlUGFyYW1MaXN0Iiwicm91dGVHZXRJZExpc3QiLCJzdGFsZSIsImtleSIsIm5hbm9pZCIsImdldFJlaHlkcmF0ZWRTdGF0ZSIsInBhcnRpYWxTdGF0ZSIsIl9yZWYzIiwiZ2V0U3RhdGVGb3JSb3V0ZUZvY3VzIiwicmVzdWx0IiwiZ2V0U3RhdGVGb3JBY3Rpb24iLCJhY3Rpb24iLCJvcHRpb25zIiwiaW5kZXgiLCJhY3Rpb25DcmVhdG9ycyJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9EcmF3ZXJSb3V0ZXIudHN4Il0sInNvdXJjZXNDb250ZW50IjpbbnVsbF0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsSUFBQUEsVUFBQSxHQUFBQyxPQUFBO0FBRUEsSUFBQUMsVUFBQSxHQUFBRCxPQUFBO0FBT29CLElBQUFFLFNBQUE7QUE0RGIsSUFBTUMsYUFBYSxHQUFBQyxPQUFBLENBQUFELGFBQUEsR0FBQUUsTUFBQSxDQUFBQyxNQUFBLEtBQ3JCQyxxQkFBVTtFQUNiQyxVQUFVLFdBQVZBLFVBQVVBLENBQUEsRUFBRztJQUNYLE9BQU87TUFBRUMsSUFBSSxFQUFFO0lBQWMsQ0FBQztFQUNoQyxDQUFDO0VBQ0RDLFdBQVcsV0FBWEEsV0FBV0EsQ0FBQSxFQUFHO0lBQ1osT0FBTztNQUFFRCxJQUFJLEVBQUU7SUFBZSxDQUFDO0VBQ2pDLENBQUM7RUFDREUsWUFBWSxXQUFaQSxZQUFZQSxDQUFBLEVBQUc7SUFDYixPQUFPO01BQUVGLElBQUksRUFBRTtJQUFnQixDQUFDO0VBQ2xDO0FBQUEsRUFDRDtBQUVNLFNBQVNHLFlBQVlBLENBQUFDLElBQUEsRUFNMUI7RUFBQSxJQUFBQyxrQkFBQSxHQUFBRCxJQUFBLENBTEFFLGFBQWE7SUFBYkEsYUFBYSxHQUFBRCxrQkFBQSxjQUFHLFFBQVEsR0FBQUEsa0JBQUE7SUFDckJFLElBQUEsT0FBQUMseUJBQUEsQ0FBQUMsT0FBQSxFQUFBTCxJQUFBLEVBQUFYLFNBQUE7RUFLSCxJQUFNaUIsTUFBTSxHQUFHLElBQUFDLG9CQUFTLEVBQUNKLElBQUksQ0FHNUI7RUFFRCxJQUFNSyxpQkFBaUIsR0FDckIsU0FESUEsaUJBQWlCQSxDQUNyQkMsS0FFc0Q7SUFBQSxJQUFBQyxjQUFBO0lBQUEsT0FDbkRDLE9BQU8sRUFBQUQsY0FBQSxHQUFDRCxLQUFLLENBQUNHLE9BQU8scUJBQWJGLGNBQUEsQ0FBZUcsSUFBSSxDQUFFLFVBQUFDLEVBQUU7TUFBQSxPQUFLQSxFQUFFLENBQUNsQixJQUFJLEtBQUssUUFBUTtJQUFBLEVBQUMsQ0FBQztFQUFBO0VBRS9ELElBQU1tQixrQkFBa0IsR0FDdEIsU0FESUEsa0JBQWtCQSxDQUN0Qk4sS0FBMkMsRUFDRjtJQUN6QyxJQUFJRCxpQkFBaUIsQ0FBQ0MsS0FBSyxDQUFDLEVBQUU7TUFDNUIsT0FBT0EsS0FBSztJQUNkO0lBRUEsT0FBQWpCLE1BQUEsQ0FBQUMsTUFBQSxLQUNLZ0IsS0FBSztNQUNSRyxPQUFPLEtBQUFJLE1BQUEsS0FBQUMsbUJBQUEsQ0FBQVosT0FBQSxFQUNGSSxLQUFLLENBQUNHLE9BQU8sSUFDaEI7UUFDRWhCLElBQUksRUFBRSxRQUFRO1FBQ2RzQixNQUFNLEVBQUVoQixhQUFhLEtBQUssTUFBTSxHQUFHLFFBQVEsR0FBRztNQUNoRCxDQUFDO0lBQUE7RUFHUCxDQUFDO0VBRUQsSUFBTWlCLHVCQUF1QixHQUMzQixTQURJQSx1QkFBdUJBLENBQzNCVixLQUEyQyxFQUNGO0lBQ3pDLElBQUksQ0FBQ0QsaUJBQWlCLENBQUNDLEtBQUssQ0FBQyxFQUFFO01BQzdCLE9BQU9BLEtBQUs7SUFDZDtJQUVBLE9BQUFqQixNQUFBLENBQUFDLE1BQUEsS0FDS2dCLEtBQUs7TUFDUkcsT0FBTyxFQUFFSCxLQUFLLENBQUNHLE9BQU8sQ0FBQ1EsTUFBTSxDQUFFLFVBQUFOLEVBQUU7UUFBQSxPQUFLQSxFQUFFLENBQUNsQixJQUFJLEtBQUssUUFBUTtNQUFBO0lBQUE7RUFFOUQsQ0FBQztFQUVELElBQU1ELFVBQVUsR0FDZCxTQURJQSxVQUFVQSxDQUNkYyxLQUEyQyxFQUNGO0lBQ3pDLElBQUlQLGFBQWEsS0FBSyxNQUFNLEVBQUU7TUFDNUIsT0FBT2lCLHVCQUF1QixDQUFDVixLQUFLLENBQUM7SUFDdkM7SUFFQSxPQUFPTSxrQkFBa0IsQ0FBQ04sS0FBSyxDQUFDO0VBQ2xDLENBQUM7RUFFRCxJQUFNWixXQUFXLEdBQ2YsU0FESUEsV0FBV0EsQ0FDZlksS0FBMkMsRUFDRjtJQUN6QyxJQUFJUCxhQUFhLEtBQUssTUFBTSxFQUFFO01BQzVCLE9BQU9hLGtCQUFrQixDQUFDTixLQUFLLENBQUM7SUFDbEM7SUFFQSxPQUFPVSx1QkFBdUIsQ0FBQ1YsS0FBSyxDQUFDO0VBQ3ZDLENBQUM7RUFFRCxPQUFBakIsTUFBQSxDQUFBQyxNQUFBLEtBQ0thLE1BQU07SUFFVFYsSUFBSSxFQUFFLFFBQVE7SUFFZHlCLGVBQWUsV0FBZkEsZUFBZUEsQ0FBQUMsS0FBQSxFQUFpRDtNQUFBLElBQTlDQyxVQUFVLEdBQUFELEtBQUEsQ0FBVkMsVUFBVTtRQUFFQyxjQUFjLEdBQUFGLEtBQUEsQ0FBZEUsY0FBYztRQUFFQyxjQUFBLEdBQUFILEtBQUEsQ0FBQUcsY0FBQTtNQUM1QyxJQUFNaEIsS0FBSyxHQUFHSCxNQUFNLENBQUNlLGVBQWUsQ0FBQztRQUNuQ0UsVUFBVSxFQUFWQSxVQUFVO1FBQ1ZDLGNBQWMsRUFBZEEsY0FBYztRQUNkQyxjQUFBLEVBQUFBO01BQ0YsQ0FBQyxDQUFDO01BRUYsT0FBQWpDLE1BQUEsQ0FBQUMsTUFBQSxLQUNLZ0IsS0FBSztRQUNSSixPQUFPLEVBQUVILGFBQWE7UUFDdEJ3QixLQUFLLEVBQUUsS0FBSztRQUNaOUIsSUFBSSxFQUFFLFFBQVE7UUFDZCtCLEdBQUcsRUFBRSxVQUFVLElBQUFDLGlCQUFNLEVBQUMsQ0FBQztNQUFBO0lBRTNCLENBQUM7SUFFREMsa0JBQWtCLFdBQWxCQSxrQkFBa0JBLENBQ2hCQyxZQUFZLEVBQUFDLEtBQUEsRUFFWjtNQUFBLElBREVSLFVBQVUsR0FBQVEsS0FBQSxDQUFWUixVQUFVO1FBQUVDLGNBQWMsR0FBQU8sS0FBQSxDQUFkUCxjQUFjO1FBQUVDLGNBQUEsR0FBQU0sS0FBQSxDQUFBTixjQUFBO01BRTlCLElBQUlLLFlBQVksQ0FBQ0osS0FBSyxLQUFLLEtBQUssRUFBRTtRQUNoQyxPQUFPSSxZQUFZO01BQ3JCO01BRUEsSUFBSXJCLEtBQUssR0FBR0gsTUFBTSxDQUFDdUIsa0JBQWtCLENBQUNDLFlBQVksRUFBRTtRQUNsRFAsVUFBVSxFQUFWQSxVQUFVO1FBQ1ZDLGNBQWMsRUFBZEEsY0FBYztRQUNkQyxjQUFBLEVBQUFBO01BQ0YsQ0FBQyxDQUFDO01BRUYsSUFBSWpCLGlCQUFpQixDQUFDc0IsWUFBWSxDQUFDLEVBQUU7UUFFbkNyQixLQUFLLEdBQUdVLHVCQUF1QixDQUFDVixLQUFLLENBQUM7UUFDdENBLEtBQUssR0FBR00sa0JBQWtCLENBQUNOLEtBQUssQ0FBQztNQUNuQztNQUVBLE9BQUFqQixNQUFBLENBQUFDLE1BQUEsS0FDS2dCLEtBQUs7UUFDUkosT0FBTyxFQUFFSCxhQUFhO1FBQ3RCTixJQUFJLEVBQUUsUUFBUTtRQUNkK0IsR0FBRyxFQUFFLFVBQVUsSUFBQUMsaUJBQU0sRUFBQyxDQUFDO01BQUE7SUFFM0IsQ0FBQztJQUVESSxxQkFBcUIsV0FBckJBLHFCQUFxQkEsQ0FBQ3ZCLEtBQUssRUFBRWtCLEdBQUcsRUFBRTtNQUNoQyxJQUFNTSxNQUFNLEdBQUczQixNQUFNLENBQUMwQixxQkFBcUIsQ0FBQ3ZCLEtBQUssRUFBRWtCLEdBQUcsQ0FBQztNQUV2RCxPQUFPOUIsV0FBVyxDQUFDb0MsTUFBTSxDQUFDO0lBQzVCLENBQUM7SUFFREMsaUJBQWlCLFdBQWpCQSxpQkFBaUJBLENBQUN6QixLQUFLLEVBQUUwQixNQUFNLEVBQUVDLE9BQU8sRUFBRTtNQUN4QyxRQUFRRCxNQUFNLENBQUN2QyxJQUFJO1FBQ2pCLEtBQUssYUFBYTtVQUNoQixPQUFPRCxVQUFVLENBQUNjLEtBQUssQ0FBQztRQUUxQixLQUFLLGNBQWM7VUFDakIsT0FBT1osV0FBVyxDQUFDWSxLQUFLLENBQUM7UUFFM0IsS0FBSyxlQUFlO1VBQ2xCLElBQUlELGlCQUFpQixDQUFDQyxLQUFLLENBQUMsRUFBRTtZQUM1QixPQUFPVSx1QkFBdUIsQ0FBQ1YsS0FBSyxDQUFDO1VBQ3ZDO1VBRUEsT0FBT00sa0JBQWtCLENBQUNOLEtBQUssQ0FBQztRQUVsQyxLQUFLLFNBQVM7UUFDZCxLQUFLLFVBQVU7UUFDZixLQUFLLHFCQUFxQjtVQUFFO1lBQzFCLElBQU13QixNQUFNLEdBQUczQixNQUFNLENBQUM0QixpQkFBaUIsQ0FBQ3pCLEtBQUssRUFBRTBCLE1BQU0sRUFBRUMsT0FBTyxDQUFDO1lBRS9ELElBQUlILE1BQU0sSUFBSSxJQUFJLElBQUlBLE1BQU0sQ0FBQ0ksS0FBSyxLQUFLNUIsS0FBSyxDQUFDNEIsS0FBSyxFQUFFO2NBQ2xELE9BQU94QyxXQUFXLENBQUNvQyxNQUE4QyxDQUFDO1lBQ3BFO1lBRUEsT0FBT0EsTUFBTTtVQUNmO1FBRUEsS0FBSyxTQUFTO1VBQ1osSUFBSXpCLGlCQUFpQixDQUFDQyxLQUFLLENBQUMsRUFBRTtZQUM1QixPQUFPVSx1QkFBdUIsQ0FBQ1YsS0FBSyxDQUFDO1VBQ3ZDO1VBRUEsT0FBT0gsTUFBTSxDQUFDNEIsaUJBQWlCLENBQUN6QixLQUFLLEVBQUUwQixNQUFNLEVBQUVDLE9BQU8sQ0FBQztRQUV6RDtVQUNFLE9BQU85QixNQUFNLENBQUM0QixpQkFBaUIsQ0FBQ3pCLEtBQUssRUFBRTBCLE1BQU0sRUFBRUMsT0FBTyxDQUFDO01BQzNEO0lBQ0YsQ0FBQztJQUVERSxjQUFjLEVBQUVoRDtFQUFBO0FBRXBCIiwiaWdub3JlTGlzdCI6W119