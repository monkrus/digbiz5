eed9ed1225304345a4a36622fa59f471
_getJestObj().mock('react-native', function () {
  return {
    Platform: {
      OS: 'ios',
      select: jest.fn(function (options) {
        return options.ios;
      })
    },
    Linking: {
      openURL: jest.fn(),
      canOpenURL: jest.fn()
    },
    Alert: {
      alert: jest.fn()
    }
  };
});
_getJestObj().mock('react-native-share', function () {
  return {
    open: jest.fn()
  };
});
_getJestObj().mock('react-native-fs', function () {
  return {
    CachesDirectoryPath: '/mock/cache',
    DocumentDirectoryPath: '/mock/documents',
    DownloadDirectoryPath: '/mock/downloads',
    writeFile: jest.fn(),
    moveFile: jest.fn()
  };
});
_getJestObj().mock('@react-native-clipboard/clipboard', function () {
  return {
    Clipboard: {
      setString: jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("react-native");
var _reactNativeShare = _interopRequireDefault(require("react-native-share"));
var _reactNativeFs = _interopRequireDefault(require("react-native-fs"));
var _sharingUtils = require("../../../src/utils/sharingUtils");
function _getJestObj() {
  var _require3 = require("@jest/globals"),
    jest = _require3.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('Share Functionality', function () {
  var mockBusinessCard = {
    id: 'card-123',
    userId: 'user-456',
    basicInfo: {
      name: 'John Smith',
      title: 'CEO & Founder',
      company: 'TechStart Inc.',
      email: 'john@techstart.com',
      phone: '+1-555-123-4567',
      location: 'San Francisco, CA',
      bio: 'Building innovative tech solutions.',
      profilePhoto: 'https://example.com/profile.jpg',
      companyLogo: 'https://example.com/logo.png'
    },
    startupInfo: {
      fundingStage: 'seed',
      teamSize: '11-25',
      industry: ['Technology', 'SaaS'],
      businessModel: 'b2b',
      revenue: '0-10k',
      seekingFunding: true,
      seekingTalent: true,
      seekingPartners: false,
      seekingMentors: true
    },
    socialLinks: {
      linkedin: 'https://linkedin.com/in/johnsmith',
      twitter: 'https://twitter.com/johnsmith',
      website: 'https://techstart.com',
      github: 'https://github.com/johnsmith'
    },
    customFields: [],
    theme: {
      id: 'professional-theme-1',
      name: 'Professional Blue',
      primaryColor: '#3b82f6',
      secondaryColor: '#1e40af',
      backgroundColor: '#ffffff',
      textColor: '#1f2937',
      accentColor: '#10b981',
      fontFamily: 'Inter',
      headerFontSize: 24,
      bodyFontSize: 14,
      borderRadius: 8,
      padding: 16,
      spacing: 8
    },
    template: {
      id: 'startup-template-1',
      name: 'Modern Startup',
      category: 'startup',
      layout: 'standard',
      elements: [],
      isPopular: true,
      isPremium: false,
      previewImage: 'https://example.com/template-preview.png'
    },
    isDefault: false,
    isPublic: true,
    isActive: true,
    shareCode: 'abc123def456',
    createdAt: '2024-01-15T10:30:00Z',
    updatedAt: '2024-01-15T10:30:00Z',
    lastSharedAt: '2024-01-15T15:45:00Z'
  };
  beforeEach(function () {
    jest.clearAllMocks();
    _reactNative.Platform.OS = 'ios';
  });
  describe('Share Data Generation', function () {
    test('should generate complete share data', (0, _asyncToGenerator2.default)(function* () {
      var shareData = yield (0, _sharingUtils.generateShareData)(mockBusinessCard);
      expect(shareData.title).toBe('John Smith - Business Card');
      expect(shareData.message).toContain('John Smith');
      expect(shareData.message).toContain('CEO & Founder');
      expect(shareData.message).toContain('TechStart Inc.');
      expect(shareData.url).toContain('card-123');
    }));
    test('should generate share data with share code', (0, _asyncToGenerator2.default)(function* () {
      var shareData = yield (0, _sharingUtils.generateShareData)(mockBusinessCard);
      expect(shareData.url).toContain('abc123def456');
    }));
    test('should create vCard file', (0, _asyncToGenerator2.default)(function* () {
      var shareData = yield (0, _sharingUtils.generateShareData)(mockBusinessCard);
      expect(_reactNativeFs.default.writeFile).toHaveBeenCalled();
      expect(shareData.vCardUri).toContain('John_Smith.vcf');
    }));
    test('should handle vCard generation errors', (0, _asyncToGenerator2.default)(function* () {
      _reactNativeFs.default.writeFile.mockRejectedValue(new Error('Write failed'));
      var shareData = yield (0, _sharingUtils.generateShareData)(mockBusinessCard);
      expect(shareData.vCardUri).toBeUndefined();
    }));
  });
  describe('Native Share Sheet', function () {
    test('should open native share sheet on iOS', (0, _asyncToGenerator2.default)(function* () {
      _reactNative.Platform.OS = 'ios';
      _reactNativeShare.default.open.mockResolvedValue({
        success: true
      });
      var result = yield (0, _sharingUtils.shareCardNative)(mockBusinessCard);
      expect(_reactNativeShare.default.open).toHaveBeenCalledWith(expect.objectContaining({
        title: 'John Smith - Business Card',
        message: expect.stringContaining('John Smith'),
        url: expect.stringContaining('card')
      }));
      expect(result).toBe(true);
    }));
    test('should open native share sheet on Android', (0, _asyncToGenerator2.default)(function* () {
      _reactNative.Platform.OS = 'android';
      _reactNativeShare.default.open.mockResolvedValue({
        success: true
      });
      var result = yield (0, _sharingUtils.shareCardNative)(mockBusinessCard);
      expect(_reactNativeShare.default.open).toHaveBeenCalled();
      expect(result).toBe(true);
    }));
    test('should handle share cancellation', (0, _asyncToGenerator2.default)(function* () {
      _reactNativeShare.default.open.mockRejectedValue(new Error('User did not share'));
      var result = yield (0, _sharingUtils.shareCardNative)(mockBusinessCard);
      expect(result).toBe(false);
      expect(_reactNative.Alert.alert).not.toHaveBeenCalled();
    }));
    test('should handle share errors', (0, _asyncToGenerator2.default)(function* () {
      _reactNativeShare.default.open.mockRejectedValue(new Error('Share failed'));
      var result = yield (0, _sharingUtils.shareCardNative)(mockBusinessCard);
      expect(result).toBe(false);
      expect(_reactNative.Alert.alert).toHaveBeenCalledWith('Share Error', expect.any(String));
    }));
    test('should include custom message when provided', (0, _asyncToGenerator2.default)(function* () {
      _reactNativeShare.default.open.mockResolvedValue({
        success: true
      });
      var customMessage = 'Check out my updated business card!';
      yield (0, _sharingUtils.shareCardNative)(mockBusinessCard, {
        message: customMessage,
        method: 'native'
      });
      expect(_reactNativeShare.default.open).toHaveBeenCalledWith(expect.objectContaining({
        message: expect.stringContaining(customMessage)
      }));
    }));
  });
  describe('Email Sharing', function () {
    test('should open email with card details', (0, _asyncToGenerator2.default)(function* () {
      _reactNative.Linking.canOpenURL.mockResolvedValue(true);
      _reactNative.Linking.openURL.mockResolvedValue(true);
      var result = yield (0, _sharingUtils.shareCardEmail)(mockBusinessCard, 'recipient@example.com');
      expect(_reactNative.Linking.canOpenURL).toHaveBeenCalled();
      expect(_reactNative.Linking.openURL).toHaveBeenCalledWith(expect.stringContaining('mailto:recipient@example.com'));
      expect(result).toBe(true);
    }));
    test('should handle missing email app', (0, _asyncToGenerator2.default)(function* () {
      _reactNative.Linking.canOpenURL.mockResolvedValue(false);
      var result = yield (0, _sharingUtils.shareCardEmail)(mockBusinessCard);
      expect(_reactNative.Alert.alert).toHaveBeenCalledWith('Email Error', 'No email app available');
      expect(result).toBe(false);
    }));
    test('should include custom message in email', (0, _asyncToGenerator2.default)(function* () {
      _reactNative.Linking.canOpenURL.mockResolvedValue(true);
      var customMessage = 'Here is my business card!';
      yield (0, _sharingUtils.shareCardEmail)(mockBusinessCard, undefined, customMessage);
      expect(_reactNative.Linking.openURL).toHaveBeenCalledWith(expect.stringContaining(encodeURIComponent(customMessage)));
    }));
    test('should handle email sharing errors', (0, _asyncToGenerator2.default)(function* () {
      _reactNative.Linking.canOpenURL.mockRejectedValue(new Error('Email failed'));
      var result = yield (0, _sharingUtils.shareCardEmail)(mockBusinessCard);
      expect(result).toBe(false);
      expect(_reactNative.Alert.alert).toHaveBeenCalledWith('Email Error', expect.any(String));
    }));
  });
  describe('SMS Sharing', function () {
    test('should open SMS with card link on iOS', (0, _asyncToGenerator2.default)(function* () {
      _reactNative.Platform.OS = 'ios';
      _reactNative.Linking.canOpenURL.mockResolvedValue(true);
      var result = yield (0, _sharingUtils.shareCardSMS)(mockBusinessCard, '+1234567890');
      expect(_reactNative.Linking.openURL).toHaveBeenCalledWith(expect.stringContaining('sms:+1234567890&body='));
      expect(result).toBe(true);
    }));
    test('should open SMS with card link on Android', (0, _asyncToGenerator2.default)(function* () {
      _reactNative.Platform.OS = 'android';
      _reactNative.Linking.canOpenURL.mockResolvedValue(true);
      var result = yield (0, _sharingUtils.shareCardSMS)(mockBusinessCard, '+1234567890');
      expect(_reactNative.Linking.openURL).toHaveBeenCalledWith(expect.stringContaining('sms:+1234567890?body='));
      expect(result).toBe(true);
    }));
    test('should handle SMS not available', (0, _asyncToGenerator2.default)(function* () {
      _reactNative.Linking.canOpenURL.mockResolvedValue(false);
      var result = yield (0, _sharingUtils.shareCardSMS)(mockBusinessCard);
      expect(_reactNative.Alert.alert).toHaveBeenCalledWith('SMS Error', 'SMS not available');
      expect(result).toBe(false);
    }));
    test('should include custom message in SMS', (0, _asyncToGenerator2.default)(function* () {
      _reactNative.Linking.canOpenURL.mockResolvedValue(true);
      var customMessage = 'My business card link';
      yield (0, _sharingUtils.shareCardSMS)(mockBusinessCard, undefined, customMessage);
      expect(_reactNative.Linking.openURL).toHaveBeenCalledWith(expect.stringContaining(encodeURIComponent(customMessage)));
    }));
  });
  describe('WhatsApp Sharing', function () {
    test('should open WhatsApp with card link', (0, _asyncToGenerator2.default)(function* () {
      _reactNative.Linking.canOpenURL.mockResolvedValue(true);
      var result = yield (0, _sharingUtils.shareCardWhatsApp)(mockBusinessCard);
      expect(_reactNative.Linking.canOpenURL).toHaveBeenCalledWith(expect.stringContaining('whatsapp://send?text='));
      expect(_reactNative.Linking.openURL).toHaveBeenCalled();
      expect(result).toBe(true);
    }));
    test('should handle WhatsApp not installed', (0, _asyncToGenerator2.default)(function* () {
      _reactNative.Linking.canOpenURL.mockResolvedValue(false);
      var result = yield (0, _sharingUtils.shareCardWhatsApp)(mockBusinessCard);
      expect(_reactNative.Alert.alert).toHaveBeenCalledWith('WhatsApp Error', 'WhatsApp not installed');
      expect(result).toBe(false);
    }));
    test('should include custom message in WhatsApp', (0, _asyncToGenerator2.default)(function* () {
      _reactNative.Linking.canOpenURL.mockResolvedValue(true);
      var customMessage = 'Check out my card';
      yield (0, _sharingUtils.shareCardWhatsApp)(mockBusinessCard, customMessage);
      expect(_reactNative.Linking.openURL).toHaveBeenCalledWith(expect.stringContaining(encodeURIComponent(customMessage)));
    }));
  });
  describe('Social Media Sharing', function () {
    test('should share to LinkedIn', (0, _asyncToGenerator2.default)(function* () {
      _reactNative.Linking.canOpenURL.mockResolvedValue(true);
      var result = yield (0, _sharingUtils.shareCardLinkedIn)(mockBusinessCard);
      expect(_reactNative.Linking.openURL).toHaveBeenCalledWith(expect.stringContaining('linkedin.com/sharing/share-offsite'));
      expect(result).toBe(true);
    }));
    test('should share to Twitter', (0, _asyncToGenerator2.default)(function* () {
      _reactNative.Linking.canOpenURL.mockResolvedValue(true);
      var result = yield (0, _sharingUtils.shareCardTwitter)(mockBusinessCard);
      expect(_reactNative.Linking.openURL).toHaveBeenCalledWith(expect.stringContaining('twitter.com/intent/tweet'));
      expect(result).toBe(true);
    }));
    test('should handle social media app not available', (0, _asyncToGenerator2.default)(function* () {
      _reactNative.Linking.canOpenURL.mockResolvedValue(false);
      var linkedInResult = yield (0, _sharingUtils.shareCardLinkedIn)(mockBusinessCard);
      var twitterResult = yield (0, _sharingUtils.shareCardTwitter)(mockBusinessCard);
      expect(linkedInResult).toBe(false);
      expect(twitterResult).toBe(false);
      expect(_reactNative.Alert.alert).toHaveBeenCalledTimes(2);
    }));
    test('should include custom messages for social media', (0, _asyncToGenerator2.default)(function* () {
      _reactNative.Linking.canOpenURL.mockResolvedValue(true);
      var customMessage = 'New business card!';
      yield (0, _sharingUtils.shareCardLinkedIn)(mockBusinessCard, customMessage);
      yield (0, _sharingUtils.shareCardTwitter)(mockBusinessCard, customMessage);
      expect(_reactNative.Linking.openURL).toHaveBeenCalledWith(expect.stringContaining(encodeURIComponent(customMessage)));
    }));
  });
  describe('Generic Share Method Routing', function () {
    test('should route to native share by default', (0, _asyncToGenerator2.default)(function* () {
      _reactNativeShare.default.open.mockResolvedValue({
        success: true
      });
      var result = yield (0, _sharingUtils.shareCard)(mockBusinessCard, {
        method: 'native'
      });
      expect(_reactNativeShare.default.open).toHaveBeenCalled();
      expect(result).toBe(true);
    }));
    test('should route to email share', (0, _asyncToGenerator2.default)(function* () {
      _reactNative.Linking.canOpenURL.mockResolvedValue(true);
      var result = yield (0, _sharingUtils.shareCard)(mockBusinessCard, {
        method: 'email'
      });
      expect(_reactNative.Linking.canOpenURL).toHaveBeenCalled();
      expect(result).toBe(true);
    }));
    test('should route to SMS share', (0, _asyncToGenerator2.default)(function* () {
      _reactNative.Linking.canOpenURL.mockResolvedValue(true);
      var result = yield (0, _sharingUtils.shareCard)(mockBusinessCard, {
        method: 'sms'
      });
      expect(_reactNative.Linking.canOpenURL).toHaveBeenCalled();
      expect(result).toBe(true);
    }));
    test('should route to WhatsApp share', (0, _asyncToGenerator2.default)(function* () {
      _reactNative.Linking.canOpenURL.mockResolvedValue(true);
      var result = yield (0, _sharingUtils.shareCard)(mockBusinessCard, {
        method: 'whatsapp'
      });
      expect(_reactNative.Linking.canOpenURL).toHaveBeenCalled();
      expect(result).toBe(true);
    }));
    test('should fall back to native share for unknown methods', (0, _asyncToGenerator2.default)(function* () {
      _reactNativeShare.default.open.mockResolvedValue({
        success: true
      });
      var result = yield (0, _sharingUtils.shareCard)(mockBusinessCard, {
        method: 'unknown'
      });
      expect(_reactNativeShare.default.open).toHaveBeenCalled();
      expect(result).toBe(true);
    }));
  });
  describe('URL Copying', function () {
    test('should copy card URL to clipboard', (0, _asyncToGenerator2.default)(function* () {
      var _require = require('@react-native-clipboard/clipboard'),
        Clipboard = _require.Clipboard;
      Clipboard.setString.mockResolvedValue(true);
      var result = yield (0, _sharingUtils.copyCardUrl)(mockBusinessCard);
      expect(Clipboard.setString).toHaveBeenCalledWith(expect.stringContaining('abc123def456'));
      expect(_reactNative.Alert.alert).toHaveBeenCalledWith('Copied!', expect.any(String));
      expect(result).toBe(true);
    }));
    test('should handle clipboard copy failure', (0, _asyncToGenerator2.default)(function* () {
      var _require2 = require('@react-native-clipboard/clipboard'),
        Clipboard = _require2.Clipboard;
      Clipboard.setString.mockRejectedValue(new Error('Copy failed'));
      var result = yield (0, _sharingUtils.copyCardUrl)(mockBusinessCard);
      expect(result).toBe(false);
      expect(_reactNative.Alert.alert).toHaveBeenCalledWith('Copy Error', expect.any(String));
    }));
  });
  describe('vCard Saving', function () {
    test('should save vCard on iOS', (0, _asyncToGenerator2.default)(function* () {
      _reactNative.Platform.OS = 'ios';
      _reactNativeFs.default.writeFile.mockResolvedValue(true);
      _reactNativeShare.default.open.mockResolvedValue({
        success: true
      });
      var result = yield (0, _sharingUtils.saveVCard)(mockBusinessCard);
      expect(_reactNativeFs.default.writeFile).toHaveBeenCalledWith(expect.stringContaining('John_Smith.vcf'), expect.stringContaining('BEGIN:VCARD'), 'utf8');
      expect(_reactNativeShare.default.open).toHaveBeenCalledWith(expect.objectContaining({
        type: 'text/vcard'
      }));
      expect(result).toBe(true);
    }));
    test('should save vCard on Android', (0, _asyncToGenerator2.default)(function* () {
      _reactNative.Platform.OS = 'android';
      _reactNativeFs.default.writeFile.mockResolvedValue(true);
      var result = yield (0, _sharingUtils.saveVCard)(mockBusinessCard);
      expect(_reactNativeFs.default.writeFile).toHaveBeenCalledWith(expect.stringContaining('/mock/downloads/John_Smith.vcf'), expect.stringContaining('BEGIN:VCARD'), 'utf8');
      expect(_reactNative.Alert.alert).toHaveBeenCalledWith('Saved!', expect.any(String));
      expect(result).toBe(true);
    }));
    test('should handle vCard save failure', (0, _asyncToGenerator2.default)(function* () {
      _reactNativeFs.default.writeFile.mockRejectedValue(new Error('Write failed'));
      var result = yield (0, _sharingUtils.saveVCard)(mockBusinessCard);
      expect(result).toBe(false);
      expect(_reactNative.Alert.alert).toHaveBeenCalledWith('Save Error', expect.any(String));
    }));
    test('should sanitize filename for vCard', (0, _asyncToGenerator2.default)(function* () {
      var cardWithSpecialChars = Object.assign({}, mockBusinessCard, {
        basicInfo: Object.assign({}, mockBusinessCard.basicInfo, {
          name: 'José María / Aznar'
        })
      });
      yield (0, _sharingUtils.saveVCard)(cardWithSpecialChars);
      expect(_reactNativeFs.default.writeFile).toHaveBeenCalledWith(expect.stringContaining('José_María___Aznar.vcf'), expect.any(String), 'utf8');
    }));
  });
  describe('Available Sharing Methods', function () {
    test('should return basic methods always available', (0, _asyncToGenerator2.default)(function* () {
      var methods = yield (0, _sharingUtils.getAvailableSharingMethods)();
      expect(methods).toContain('native');
      expect(methods).toContain('email');
      expect(methods).toContain('sms');
      expect(methods).toContain('linkedin');
      expect(methods).toContain('twitter');
    }));
    test('should include WhatsApp when available', (0, _asyncToGenerator2.default)(function* () {
      _reactNative.Linking.canOpenURL.mockImplementation(function (url) {
        return Promise.resolve(url.startsWith('whatsapp://'));
      });
      var methods = yield (0, _sharingUtils.getAvailableSharingMethods)();
      expect(methods).toContain('whatsapp');
    }));
    test('should exclude WhatsApp when not available', (0, _asyncToGenerator2.default)(function* () {
      _reactNative.Linking.canOpenURL.mockResolvedValue(false);
      var methods = yield (0, _sharingUtils.getAvailableSharingMethods)();
      expect(methods).not.toContain('whatsapp');
    }));
    test('should handle method detection errors gracefully', (0, _asyncToGenerator2.default)(function* () {
      _reactNative.Linking.canOpenURL.mockRejectedValue(new Error('Detection failed'));
      var methods = yield (0, _sharingUtils.getAvailableSharingMethods)();
      expect(methods).toContain('native');
      expect(methods).toContain('email');
      expect(methods).toContain('sms');
    }));
  });
  describe('Analytics and Tracking', function () {
    test('should track sharing events', function () {
      var consoleSpy = jest.spyOn(console, 'log');
      (0, _sharingUtils.trackSharingEvent)('card-123', 'native', true);
      expect(consoleSpy).toHaveBeenCalledWith('Share event:', {
        cardId: 'card-123',
        method: 'native',
        success: true,
        timestamp: expect.any(Date)
      });
      consoleSpy.mockRestore();
    });
    test('should track failed sharing attempts', function () {
      var consoleSpy = jest.spyOn(console, 'log');
      (0, _sharingUtils.trackSharingEvent)('card-123', 'whatsapp', false);
      expect(consoleSpy).toHaveBeenCalledWith('Share event:', {
        cardId: 'card-123',
        method: 'whatsapp',
        success: false,
        timestamp: expect.any(Date)
      });
      consoleSpy.mockRestore();
    });
  });
  describe('Error Handling and Edge Cases', function () {
    test('should handle missing card data gracefully', (0, _asyncToGenerator2.default)(function* () {
      var minimalCard = Object.assign({}, mockBusinessCard, {
        basicInfo: {
          name: 'Test User',
          title: '',
          company: '',
          email: ''
        }
      });
      var result = yield (0, _sharingUtils.shareCardNative)(minimalCard);
      expect(_reactNativeShare.default.open).toHaveBeenCalled();
    }));
    test('should handle very long card data', (0, _asyncToGenerator2.default)(function* () {
      var longCard = Object.assign({}, mockBusinessCard, {
        basicInfo: Object.assign({}, mockBusinessCard.basicInfo, {
          name: 'A'.repeat(1000),
          bio: 'B'.repeat(2000)
        })
      });
      expect(function () {
        return (0, _sharingUtils.shareCardNative)(longCard);
      }).not.toThrow();
    }));
    test('should handle special characters in sharing data', (0, _asyncToGenerator2.default)(function* () {
      var specialCharsCard = Object.assign({}, mockBusinessCard, {
        basicInfo: Object.assign({}, mockBusinessCard.basicInfo, {
          name: 'José María Ñoño',
          company: 'Café & Tés™'
        })
      });
      var result = yield (0, _sharingUtils.shareCardNative)(specialCharsCard);
      expect(_reactNativeShare.default.open).toHaveBeenCalled();
    }));
    test('should handle network errors gracefully', (0, _asyncToGenerator2.default)(function* () {
      _reactNativeFs.default.writeFile.mockRejectedValue(new Error('Network error'));
      var shareData = yield (0, _sharingUtils.generateShareData)(mockBusinessCard);
      expect(shareData.vCardUri).toBeUndefined();
    }));
  });
  describe('Platform-Specific Behavior', function () {
    test('should use iOS-specific sharing options', (0, _asyncToGenerator2.default)(function* () {
      _reactNative.Platform.OS = 'ios';
      _reactNativeShare.default.open.mockResolvedValue({
        success: true
      });
      yield (0, _sharingUtils.shareCardNative)(mockBusinessCard);
      expect(_reactNativeShare.default.open).toHaveBeenCalledWith(expect.objectContaining({
        title: expect.any(String),
        message: expect.any(String),
        url: expect.any(String)
      }));
    }));
    test('should use Android-specific sharing options', (0, _asyncToGenerator2.default)(function* () {
      _reactNative.Platform.OS = 'android';
      _reactNativeShare.default.open.mockResolvedValue({
        success: true
      });
      yield (0, _sharingUtils.shareCardNative)(mockBusinessCard);
      expect(_reactNativeShare.default.open).toHaveBeenCalled();
    }));
    test('should handle platform selection for URLs', function () {
      _reactNative.Platform.OS = 'ios';
      _reactNative.Platform.select = jest.fn(function (options) {
        return options.ios;
      });
      var result = _reactNative.Platform.select({
        ios: 'sms:123&body=test',
        android: 'sms:123?body=test'
      });
      expect(result).toBe('sms:123&body=test');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,