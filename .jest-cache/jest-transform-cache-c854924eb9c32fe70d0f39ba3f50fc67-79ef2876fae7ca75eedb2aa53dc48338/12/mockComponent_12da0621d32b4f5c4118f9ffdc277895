c22a25139b04b0505166beca6a4b0922
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = mockComponent;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _react = _interopRequireWildcard(require("react"));
var React = _react;
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function mockComponent(moduleName, instanceMethods, isESModule) {
  var _ref, _RealComponent$displa, _RealComponent$render, _Class;
  var RealComponent = isESModule ? jest.requireActual(moduleName).default : jest.requireActual(moduleName);
  var SuperClass = typeof RealComponent === 'function' && RealComponent.prototype.constructor instanceof React.Component ? RealComponent : React.Component;
  var name = (_ref = (_RealComponent$displa = RealComponent.displayName) != null ? _RealComponent$displa : RealComponent.name) != null ? _ref : RealComponent.render == null ? 'Unknown' : (_RealComponent$render = RealComponent.render.displayName) != null ? _RealComponent$render : RealComponent.render.name;
  var nameWithoutPrefix = name.replace(/^(RCT|RK)/, '');
  var Component = (_Class = function (_SuperClass) {
    function Component() {
      (0, _classCallCheck2.default)(this, Component);
      return _callSuper(this, Component, arguments);
    }
    (0, _inherits2.default)(Component, _SuperClass);
    return (0, _createClass2.default)(Component, [{
      key: "render",
      value: function render() {
        var _this = this;
        var props = Object.assign({}, RealComponent.defaultProps);
        if (this.props) {
          Object.keys(this.props).forEach(function (prop) {
            if (_this.props[prop] !== undefined) {
              props[prop] = _this.props[prop];
            }
          });
        }
        return (0, _react.createElement)(nameWithoutPrefix, props, this.props.children);
      }
    }]);
  }(SuperClass), _Class.displayName = 'Component', _Class);
  Object.defineProperty(Component, 'name', {
    value: name,
    writable: false,
    enumerable: false,
    configurable: true
  });
  Component.displayName = nameWithoutPrefix;
  Object.keys(RealComponent).forEach(function (classStatic) {
    Component[classStatic] = RealComponent[classStatic];
  });
  if (instanceMethods != null) {
    Object.assign(Component.prototype, instanceMethods);
  }
  return Component;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,