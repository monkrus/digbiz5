b567dc4117292beb32d5371fff0de85b
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _ocrScannerService = require("../../src/services/ocrScannerService");
describe('OCRScannerService', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe('Business Card Scanning', function () {
    it('should scan business card and extract contact information', (0, _asyncToGenerator2.default)(function* () {
      var options = {
        enableAutoCorrection: true,
        minConfidence: 0.7
      };
      var result = yield _ocrScannerService.ocrScannerService.scanBusinessCard('file:///test-card.jpg', options);
      expect(result.success).toBe(true);
      expect(result.results).toHaveLength(1);
      var parsedData = result.results[0];
      expect(parsedData.name).toBe('John Doe');
      expect(parsedData.company).toBe('Acme Corp');
      expect(parsedData.email).toBe('john@example.com');
      expect(parsedData.phone).toBe('+1-555-0123');
      expect(parsedData.confidence).toBeGreaterThan(0.7);
    }));
    it('should handle low quality images with reduced confidence', (0, _asyncToGenerator2.default)(function* () {
      var _require = require('@react-native-ml-kit/text-recognition'),
        TextRecognition = _require.TextRecognition;
      TextRecognition.recognize.mockResolvedValueOnce({
        text: 'John D\nSoft Eng\njhn@exam.com\n555-012',
        blocks: [{
          text: 'John D',
          frame: {
            x: 10,
            y: 10,
            width: 50,
            height: 20
          }
        }, {
          text: 'Soft Eng',
          frame: {
            x: 10,
            y: 35,
            width: 60,
            height: 15
          }
        }, {
          text: 'jhn@exam.com',
          frame: {
            x: 10,
            y: 55,
            width: 90,
            height: 15
          }
        }, {
          text: '555-012',
          frame: {
            x: 10,
            y: 75,
            width: 50,
            height: 15
          }
        }]
      });
      var result = yield _ocrScannerService.ocrScannerService.scanBusinessCard('file:///low-quality-card.jpg');
      expect(result.success).toBe(true);
      var parsedData = result.results[0];
      expect(parsedData.confidence).toBeLessThan(0.8);
      expect(parsedData.name).toBe('John D');
      expect(parsedData.email).toBe('jhn@exam.com');
    }));
    it('should detect multiple contacts on single card', (0, _asyncToGenerator2.default)(function* () {
      var _require2 = require('@react-native-ml-kit/text-recognition'),
        TextRecognition = _require2.TextRecognition;
      TextRecognition.recognize.mockResolvedValueOnce({
        text: 'John Doe\njohn@acme.com\n+1-555-0123\n\nJane Smith\njane@acme.com\n+1-555-0124',
        blocks: [{
          text: 'John Doe',
          frame: {
            x: 10,
            y: 10,
            width: 100,
            height: 20
          }
        }, {
          text: 'john@acme.com',
          frame: {
            x: 10,
            y: 35,
            width: 120,
            height: 15
          }
        }, {
          text: '+1-555-0123',
          frame: {
            x: 10,
            y: 55,
            width: 100,
            height: 15
          }
        }, {
          text: 'Jane Smith',
          frame: {
            x: 10,
            y: 90,
            width: 100,
            height: 20
          }
        }, {
          text: 'jane@acme.com',
          frame: {
            x: 10,
            y: 115,
            width: 120,
            height: 15
          }
        }, {
          text: '+1-555-0124',
          frame: {
            x: 10,
            y: 135,
            width: 100,
            height: 15
          }
        }]
      });
      var result = yield _ocrScannerService.ocrScannerService.scanBusinessCard('file:///multi-contact-card.jpg');
      expect(result.success).toBe(true);
      expect(result.results).toHaveLength(2);
      expect(result.results[0].name).toBe('John Doe');
      expect(result.results[1].name).toBe('Jane Smith');
    }));
    it('should handle foreign language cards', (0, _asyncToGenerator2.default)(function* () {
      var _require3 = require('@react-native-ml-kit/text-recognition'),
        TextRecognition = _require3.TextRecognition;
      TextRecognition.recognize.mockResolvedValueOnce({
        text: '田中太郎\nソフトウェアエンジニア\ntanaka@example.jp\n+81-90-1234-5678',
        blocks: [{
          text: '田中太郎',
          frame: {
            x: 10,
            y: 10,
            width: 100,
            height: 20
          }
        }, {
          text: 'ソフトウェアエンジニア',
          frame: {
            x: 10,
            y: 35,
            width: 150,
            height: 15
          }
        }, {
          text: 'tanaka@example.jp',
          frame: {
            x: 10,
            y: 55,
            width: 130,
            height: 15
          }
        }, {
          text: '+81-90-1234-5678',
          frame: {
            x: 10,
            y: 75,
            width: 120,
            height: 15
          }
        }]
      });
      var result = yield _ocrScannerService.ocrScannerService.scanBusinessCard('file:///japanese-card.jpg');
      expect(result.success).toBe(true);
      var parsedData = result.results[0];
      expect(parsedData.name).toBe('田中太郎');
      expect(parsedData.email).toBe('tanaka@example.jp');
      expect(parsedData.phone).toBe('+81-90-1234-5678');
    }));
  });
  describe('Field Extraction Accuracy', function () {
    it('should correctly identify email addresses', (0, _asyncToGenerator2.default)(function* () {
      var _require4 = require('@react-native-ml-kit/text-recognition'),
        TextRecognition = _require4.TextRecognition;
      TextRecognition.recognize.mockResolvedValueOnce({
        text: 'Contact: test@domain.com, backup@company.org, invalid.email',
        blocks: [{
          text: 'Contact: test@domain.com, backup@company.org, invalid.email',
          frame: {
            x: 10,
            y: 10,
            width: 300,
            height: 20
          }
        }]
      });
      var result = yield _ocrScannerService.ocrScannerService.scanBusinessCard('file:///email-test-card.jpg');
      var parsedData = result.results[0];
      expect(parsedData.email).toMatch(/@/);
    }));
    it('should correctly identify phone numbers', (0, _asyncToGenerator2.default)(function* () {
      var _require5 = require('@react-native-ml-kit/text-recognition'),
        TextRecognition = _require5.TextRecognition;
      TextRecognition.recognize.mockResolvedValueOnce({
        text: '+1-555-123-4567\n(555) 987-6543\n555.111.2222\n12345',
        blocks: [{
          text: '+1-555-123-4567',
          frame: {
            x: 10,
            y: 10,
            width: 120,
            height: 15
          }
        }, {
          text: '(555) 987-6543',
          frame: {
            x: 10,
            y: 30,
            width: 120,
            height: 15
          }
        }, {
          text: '555.111.2222',
          frame: {
            x: 10,
            y: 50,
            width: 100,
            height: 15
          }
        }, {
          text: '12345',
          frame: {
            x: 10,
            y: 70,
            width: 50,
            height: 15
          }
        }]
      });
      var result = yield _ocrScannerService.ocrScannerService.scanBusinessCard('file:///phone-test-card.jpg');
      var parsedData = result.results[0];
      expect(parsedData.phone).toBe('+1-555-123-4567');
    }));
    it('should correctly identify websites', (0, _asyncToGenerator2.default)(function* () {
      var _require6 = require('@react-native-ml-kit/text-recognition'),
        TextRecognition = _require6.TextRecognition;
      TextRecognition.recognize.mockResolvedValueOnce({
        text: 'Visit us at www.company.com or https://secure.site.org',
        blocks: [{
          text: 'Visit us at www.company.com or https://secure.site.org',
          frame: {
            x: 10,
            y: 10,
            width: 300,
            height: 20
          }
        }]
      });
      var result = yield _ocrScannerService.ocrScannerService.scanBusinessCard('file:///website-test-card.jpg');
      var parsedData = result.results[0];
      expect(parsedData.website).toMatch(/^(https?:\/\/)?(www\.)?/);
    }));
  });
  describe('Performance Tests', function () {
    it('should process image within acceptable time limit', (0, _asyncToGenerator2.default)(function* () {
      var startTime = Date.now();
      yield _ocrScannerService.ocrScannerService.scanBusinessCard('file:///performance-test-card.jpg');
      var processingTime = Date.now() - startTime;
      expect(processingTime).toBeLessThan(5000);
    }));
    it('should handle large images efficiently', (0, _asyncToGenerator2.default)(function* () {
      var options = {
        maxImageSize: 1024
      };
      var result = yield _ocrScannerService.ocrScannerService.scanBusinessCard('file:///large-card.jpg', options);
      expect(result.success).toBe(true);
      expect(result.duration).toBeLessThan(10000);
    }));
    it('should process batch of images concurrently', (0, _asyncToGenerator2.default)(function* () {
      var imageUris = ['file:///card1.jpg', 'file:///card2.jpg', 'file:///card3.jpg'];
      var startTime = Date.now();
      var promises = imageUris.map(function (uri) {
        return _ocrScannerService.ocrScannerService.scanBusinessCard(uri);
      });
      var results = yield Promise.all(promises);
      var totalTime = Date.now() - startTime;
      expect(results).toHaveLength(3);
      expect(results.every(function (r) {
        return r.success;
      })).toBe(true);
      expect(totalTime).toBeLessThan(15000);
    }));
  });
  describe('Error Handling', function () {
    it('should handle invalid image paths gracefully', (0, _asyncToGenerator2.default)(function* () {
      var result = yield _ocrScannerService.ocrScannerService.scanBusinessCard('invalid://path/to/image.jpg');
      expect(result.success).toBe(false);
      expect(result.error).toBeDefined();
      expect(result.results).toHaveLength(0);
    }));
    it('should handle OCR service failures', (0, _asyncToGenerator2.default)(function* () {
      var _require7 = require('@react-native-ml-kit/text-recognition'),
        TextRecognition = _require7.TextRecognition;
      TextRecognition.recognize.mockRejectedValueOnce(new Error('OCR Service unavailable'));
      var result = yield _ocrScannerService.ocrScannerService.scanBusinessCard('file:///test-card.jpg');
      expect(result.success).toBe(false);
      expect(result.error).toContain('OCR Service unavailable');
    }));
    it('should handle corrupted image files', (0, _asyncToGenerator2.default)(function* () {
      var _require8 = require('@react-native-ml-kit/text-recognition'),
        TextRecognition = _require8.TextRecognition;
      TextRecognition.recognize.mockRejectedValueOnce(new Error('Invalid image format'));
      var result = yield _ocrScannerService.ocrScannerService.scanBusinessCard('file:///corrupted.jpg');
      expect(result.success).toBe(false);
      expect(result.error).toBeDefined();
    }));
  });
  describe('Contact Conversion', function () {
    it('should convert parsed data to contact format correctly', function () {
      var parsedData = {
        name: 'John Doe',
        company: 'Acme Corp',
        title: 'Software Engineer',
        email: 'john@acme.com',
        phone: '+1-555-0123',
        website: 'www.acme.com',
        address: '123 Main St, Anytown, ST 12345',
        confidence: 0.85,
        rawText: 'John Doe\nSoftware Engineer\nAcme Corp\njohn@acme.com\n+1-555-0123'
      };
      var contact = _ocrScannerService.ocrScannerService.convertToContact(parsedData);
      expect(contact.id).toBeDefined();
      expect(contact.source).toBe('ocr_scan');
      expect(contact.confidence).toBe(0.85);
      expect(contact.rawText).toBe(parsedData.rawText);
      expect(contact.isVerified).toBe(false);
      expect(contact.needsReview).toBe(true);
      var nameField = contact.fields.find(function (f) {
        return f.type === 'name';
      });
      expect(nameField == null ? void 0 : nameField.value).toBe('John Doe');
      var emailField = contact.fields.find(function (f) {
        return f.type === 'email';
      });
      expect(emailField == null ? void 0 : emailField.value).toBe('john@acme.com');
      var phoneField = contact.fields.find(function (f) {
        return f.type === 'phone';
      });
      expect(phoneField == null ? void 0 : phoneField.value).toBe('+1-555-0123');
    });
    it('should mark low confidence contacts for review', function () {
      var lowConfidenceData = {
        name: 'J. D.',
        email: 'unclear@text',
        confidence: 0.4,
        rawText: 'Blurry text...'
      };
      var contact = _ocrScannerService.ocrScannerService.convertToContact(lowConfidenceData);
      expect(contact.needsReview).toBe(true);
      expect(contact.isVerified).toBe(false);
      expect(contact.confidence).toBe(0.4);
    });
    it('should handle partial data extraction', function () {
      var partialData = {
        name: 'Jane Smith',
        confidence: 0.6,
        rawText: 'Jane Smith\n[Illegible text]'
      };
      var contact = _ocrScannerService.ocrScannerService.convertToContact(partialData);
      expect(contact.fields).toHaveLength(1);
      expect(contact.needsReview).toBe(true);
      var nameField = contact.fields[0];
      expect(nameField.type).toBe('name');
      expect(nameField.value).toBe('Jane Smith');
    });
  });
  describe('Configuration and Options', function () {
    it('should respect minimum confidence threshold', (0, _asyncToGenerator2.default)(function* () {
      var options = {
        minConfidence: 0.9
      };
      var _require9 = require('@react-native-ml-kit/text-recognition'),
        TextRecognition = _require9.TextRecognition;
      TextRecognition.recognize.mockResolvedValueOnce({
        text: 'Blurry Name\nunclear@email',
        blocks: [{
          text: 'Blurry Name',
          frame: {
            x: 10,
            y: 10,
            width: 80,
            height: 20
          }
        }, {
          text: 'unclear@email',
          frame: {
            x: 10,
            y: 35,
            width: 90,
            height: 15
          }
        }]
      });
      var result = yield _ocrScannerService.ocrScannerService.scanBusinessCard('file:///blurry-card.jpg', options);
      expect(result.results.length).toBeLessThanOrEqual(1);
      if (result.results.length > 0) {
        expect(result.results[0].confidence).toBeGreaterThanOrEqual(0.9);
      }
    }));
    it('should apply auto-correction when enabled', (0, _asyncToGenerator2.default)(function* () {
      var options = {
        enableAutoCorrection: true
      };
      var _require0 = require('@react-native-ml-kit/text-recognition'),
        TextRecognition = _require0.TextRecognition;
      TextRecognition.recognize.mockResolvedValueOnce({
        text: 'J0hn D0e\nS0ftware Eng1neer\nj0hn@exam1ple.c0m',
        blocks: [{
          text: 'J0hn D0e',
          frame: {
            x: 10,
            y: 10,
            width: 80,
            height: 20
          }
        }, {
          text: 'S0ftware Eng1neer',
          frame: {
            x: 10,
            y: 35,
            width: 120,
            height: 15
          }
        }, {
          text: 'j0hn@exam1ple.c0m',
          frame: {
            x: 10,
            y: 55,
            width: 130,
            height: 15
          }
        }]
      });
      var result = yield _ocrScannerService.ocrScannerService.scanBusinessCard('file:///error-card.jpg', options);
      expect(result.success).toBe(true);
      var parsedData = result.results[0];
      expect(parsedData.name).not.toContain('0');
      expect(parsedData.email).not.toContain('1');
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,