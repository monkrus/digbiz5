{"version":3,"names":["_child_process","require","fs","_interopRequireWildcard","path","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","_t","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","describe","projectRoot","resolve","__dirname","test","eslintConfigPath","join","expect","existsSync","toBe","execSync","cwd","stdio","not","toThrow","packageJsonPath","packageJson","JSON","parse","readFileSync","devDependencies","toBeDefined","eslint","prettierConfigPath","husky","scripts","prepare","gitHooksPath","statSync","isDirectory","appPath","appContent","lines","split","importLines","filter","line","trim","startsWith","length","toBeGreaterThan","toMatch","singleQuoteCount","match"],"sources":["linting.test.ts"],"sourcesContent":["/**\n * Code Quality and Linting Tests\n *\n * This test suite validates code quality tools, linting configuration, and code formatting\n * setup for the React Native project. It ensures that ESLint, Prettier, and pre-commit\n * hooks are properly configured to maintain consistent code quality and style.\n *\n * What these tests verify:\n * - ESLint configuration and rule enforcement\n * - Prettier code formatting setup and compliance\n * - Husky git hooks configuration for automated quality checks\n * - lint-staged setup for efficient pre-commit linting\n * - Code style consistency across the project\n * - Integration between quality tools and development workflow\n *\n * These tests help maintain high code quality standards and catch style issues early.\n */\n\nimport { execSync } from 'child_process';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\ndescribe('Code Quality and Linting', () => {\n  const projectRoot = path.resolve(__dirname, '../..');\n\n  // Test Group: ESLint Configuration\n  // Validates ESLint setup and configuration for code quality enforcement\n  describe('ESLint Configuration', () => {\n    // Test: ESLint Configuration File\n    // Checks that .eslintrc.js exists with project linting rules\n    test('should have ESLint configuration file', () => {\n      const eslintConfigPath = path.join(projectRoot, '.eslintrc.js');\n      expect(fs.existsSync(eslintConfigPath)).toBe(true);\n    });\n\n    // Test: ESLint Execution\n    // Runs the lint script to ensure all code passes ESLint rules\n    // This catches syntax errors, style violations, and potential bugs\n    test('should pass ESLint checks', () => {\n      expect(() => {\n        execSync('npm run lint', {\n          cwd: projectRoot,\n          stdio: 'pipe',\n        });\n      }).not.toThrow();\n    });\n\n    // Test: React Native ESLint Dependencies\n    // Verifies that React Native specific ESLint configuration is installed\n    test('should have React Native ESLint configuration', () => {\n      const packageJsonPath = path.join(projectRoot, 'package.json');\n      const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));\n\n      expect(\n        packageJson.devDependencies['@react-native/eslint-config'],\n      ).toBeDefined();\n      expect(packageJson.devDependencies.eslint).toBeDefined();\n    });\n  });\n\n  // Test Group: Prettier Configuration\n  // Validates code formatting setup and compliance\n  describe('Prettier Configuration', () => {\n    // Test: Prettier Configuration File\n    // Checks that .prettierrc.js exists with code formatting rules\n    test('should have Prettier configuration', () => {\n      const prettierConfigPath = path.join(projectRoot, '.prettierrc.js');\n      expect(fs.existsSync(prettierConfigPath)).toBe(true);\n    });\n\n    // Test: Prettier Code Formatting\n    // Runs prettier --check to ensure all source code is properly formatted\n    test('should format code according to Prettier rules', () => {\n      expect(() => {\n        execSync('npx prettier --check \"src/**/*.{js,jsx,ts,tsx}\"', {\n          cwd: projectRoot,\n          stdio: 'pipe',\n        });\n      }).not.toThrow();\n    });\n  });\n\n  // Test Group: Husky and Lint-staged\n  // Validates git hooks setup for automated code quality checks\n  describe('Husky and Lint-staged', () => {\n    // Test: Husky Configuration\n    // Checks that Husky is configured for git hooks automation\n    test('should have Husky configuration', () => {\n      const packageJsonPath = path.join(projectRoot, 'package.json');\n      const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));\n\n      expect(packageJson.devDependencies.husky).toBeDefined();\n      expect(packageJson.scripts.prepare).toBe('husky');\n    });\n\n    // Test: Lint-staged Configuration\n    // Verifies that lint-staged is configured for efficient pre-commit linting\n    test('should have lint-staged configuration', () => {\n      const packageJsonPath = path.join(projectRoot, 'package.json');\n      const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));\n\n      expect(packageJson.devDependencies['lint-staged']).toBeDefined();\n      expect(packageJson['lint-staged']).toBeDefined();\n    });\n\n    // Test: Git Hooks Directory\n    // Checks for .husky directory (created after first git commit)\n    // This directory contains the actual git hook scripts\n    test('should have git hooks directory', () => {\n      const gitHooksPath = path.join(projectRoot, '.husky');\n      // Note: .husky might not exist until after first commit, so this is optional\n      if (fs.existsSync(gitHooksPath)) {\n        expect(fs.statSync(gitHooksPath).isDirectory()).toBe(true);\n      }\n    });\n  });\n\n  // Test Group: Code Style Consistency\n  // Validates consistent code style patterns across the project\n  describe('Code Style Consistency', () => {\n    // Test: Import Order Consistency\n    // Checks that imports follow a consistent ordering pattern (React first, then third-party, then local)\n    test('should maintain consistent import ordering', () => {\n      const appPath = path.join(projectRoot, 'App.tsx');\n      const appContent = fs.readFileSync(appPath, 'utf8');\n\n      // Check that React imports come first, then third-party, then local\n      const lines = appContent.split('\\n');\n      const importLines = lines.filter(line =>\n        line.trim().startsWith('import'),\n      );\n\n      expect(importLines.length).toBeGreaterThan(0);\n\n      // First import should be from React Navigation or React ecosystem\n      expect(importLines[0]).toMatch(/@react-navigation|react/);\n    });\n\n    // Test: Quotation Mark Consistency\n    // Validates consistent use of single quotes as per React Native convention\n    test('should use consistent quotation marks', () => {\n      const appPath = path.join(projectRoot, 'App.tsx');\n      const appContent = fs.readFileSync(appPath, 'utf8');\n\n      // Should use single quotes as per React Native convention\n      const singleQuoteCount = (appContent.match(/'/g) || []).length;\n\n      // Single quotes should be more prevalent (accounting for JSX attributes)\n      expect(singleQuoteCount).toBeGreaterThan(0);\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}