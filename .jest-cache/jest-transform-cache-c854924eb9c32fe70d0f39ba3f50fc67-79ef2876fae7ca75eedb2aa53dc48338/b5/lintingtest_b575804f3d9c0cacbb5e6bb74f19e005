a26c5c508043b334ef93410e98218f55
var _child_process = require("child_process");
var fs = _interopRequireWildcard(require("fs"));
var path = _interopRequireWildcard(require("path"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
describe('Code Quality and Linting', function () {
  var projectRoot = path.resolve(__dirname, '../..');
  describe('ESLint Configuration', function () {
    test('should have ESLint configuration file', function () {
      var eslintConfigPath = path.join(projectRoot, '.eslintrc.js');
      expect(fs.existsSync(eslintConfigPath)).toBe(true);
    });
    test('should pass ESLint checks', function () {
      expect(function () {
        (0, _child_process.execSync)('npm run lint', {
          cwd: projectRoot,
          stdio: 'pipe'
        });
      }).not.toThrow();
    });
    test('should have React Native ESLint configuration', function () {
      var packageJsonPath = path.join(projectRoot, 'package.json');
      var packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
      expect(packageJson.devDependencies['@react-native/eslint-config']).toBeDefined();
      expect(packageJson.devDependencies.eslint).toBeDefined();
    });
  });
  describe('Prettier Configuration', function () {
    test('should have Prettier configuration', function () {
      var prettierConfigPath = path.join(projectRoot, '.prettierrc.js');
      expect(fs.existsSync(prettierConfigPath)).toBe(true);
    });
    test('should format code according to Prettier rules', function () {
      expect(function () {
        (0, _child_process.execSync)('npx prettier --check "src/**/*.{js,jsx,ts,tsx}"', {
          cwd: projectRoot,
          stdio: 'pipe'
        });
      }).not.toThrow();
    });
  });
  describe('Husky and Lint-staged', function () {
    test('should have Husky configuration', function () {
      var packageJsonPath = path.join(projectRoot, 'package.json');
      var packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
      expect(packageJson.devDependencies.husky).toBeDefined();
      expect(packageJson.scripts.prepare).toBe('husky');
    });
    test('should have lint-staged configuration', function () {
      var packageJsonPath = path.join(projectRoot, 'package.json');
      var packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
      expect(packageJson.devDependencies['lint-staged']).toBeDefined();
      expect(packageJson['lint-staged']).toBeDefined();
    });
    test('should have git hooks directory', function () {
      var gitHooksPath = path.join(projectRoot, '.husky');
      if (fs.existsSync(gitHooksPath)) {
        expect(fs.statSync(gitHooksPath).isDirectory()).toBe(true);
      }
    });
  });
  describe('Code Style Consistency', function () {
    test('should maintain consistent import ordering', function () {
      var appPath = path.join(projectRoot, 'App.tsx');
      var appContent = fs.readFileSync(appPath, 'utf8');
      var lines = appContent.split('\n');
      var importLines = lines.filter(function (line) {
        return line.trim().startsWith('import');
      });
      expect(importLines.length).toBeGreaterThan(0);
      expect(importLines[0]).toMatch(/@react-navigation|react/);
    });
    test('should use consistent quotation marks', function () {
      var appPath = path.join(projectRoot, 'App.tsx');
      var appContent = fs.readFileSync(appPath, 'utf8');
      var singleQuoteCount = (appContent.match(/'/g) || []).length;
      expect(singleQuoteCount).toBeGreaterThan(0);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,