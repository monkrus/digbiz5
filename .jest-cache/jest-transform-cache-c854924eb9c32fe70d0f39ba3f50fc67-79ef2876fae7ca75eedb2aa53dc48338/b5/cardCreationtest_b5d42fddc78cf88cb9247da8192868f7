8345690f0240f25701128b600196f07b
_getJestObj().mock('react-native-image-picker', function () {
  return {
    launchImageLibrary: jest.fn(),
    launchCamera: jest.fn()
  };
});
_getJestObj().mock('react-native-permissions', function () {
  return {
    request: jest.fn(function () {
      return Promise.resolve('granted');
    }),
    PERMISSIONS: {
      IOS: {
        CAMERA: 'ios.permission.CAMERA',
        PHOTO_LIBRARY: 'ios.permission.PHOTO_LIBRARY'
      },
      ANDROID: {
        CAMERA: 'android.permission.CAMERA',
        READ_EXTERNAL_STORAGE: 'android.permission.READ_EXTERNAL_STORAGE'
      }
    },
    RESULTS: {
      GRANTED: 'granted',
      DENIED: 'denied'
    }
  };
});
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: function useNavigation() {
      return {
        navigate: jest.fn(),
        goBack: jest.fn()
      };
    },
    useFocusEffect: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactRedux = require("react-redux");
var _toolkit = require("@reduxjs/toolkit");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require3 = require("@jest/globals"),
    jest = _require3.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('Phase 2: Digital Card Creation', function () {
  var store;
  var navigation;
  beforeEach(function () {
    store = (0, _toolkit.configureStore)({
      reducer: {
        businessCard: function businessCard() {
          var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
            cards: [],
            currentCard: null
          };
          var action = arguments.length > 1 ? arguments[1] : undefined;
          return state;
        }
      }
    });
    navigation = {
      navigate: jest.fn(),
      goBack: jest.fn()
    };
    jest.clearAllMocks();
  });
  describe('Basic Card Information', function () {
    test('should create card with basic information fields', (0, _asyncToGenerator2.default)(function* () {
      var MockBasicInfoForm = function MockBasicInfoForm(_ref2) {
        var onSubmit = _ref2.onSubmit,
          initialData = _ref2.initialData,
          errors = _ref2.errors;
        return (0, _jsxRuntime.jsxs)("div", {
          testID: "basic-info-form",
          children: [(0, _jsxRuntime.jsx)("input", {
            testID: "full-name-input",
            placeholder: "Full Name",
            defaultValue: (initialData == null ? void 0 : initialData.fullName) || ''
          }), (errors == null ? void 0 : errors.fullName) && (0, _jsxRuntime.jsx)("div", {
            testID: "full-name-error",
            children: errors.fullName
          }), (0, _jsxRuntime.jsx)("input", {
            testID: "job-title-input",
            placeholder: "Job Title",
            defaultValue: (initialData == null ? void 0 : initialData.jobTitle) || ''
          }), (0, _jsxRuntime.jsx)("input", {
            testID: "company-input",
            placeholder: "Company",
            defaultValue: (initialData == null ? void 0 : initialData.company) || ''
          }), (0, _jsxRuntime.jsx)("input", {
            testID: "email-input",
            placeholder: "Email",
            defaultValue: (initialData == null ? void 0 : initialData.email) || ''
          }), (errors == null ? void 0 : errors.email) && (0, _jsxRuntime.jsx)("div", {
            testID: "email-error",
            children: errors.email
          }), (0, _jsxRuntime.jsx)("input", {
            testID: "phone-input",
            placeholder: "Phone Number",
            defaultValue: (initialData == null ? void 0 : initialData.phone) || ''
          }), (0, _jsxRuntime.jsx)("input", {
            testID: "website-input",
            placeholder: "Website",
            defaultValue: (initialData == null ? void 0 : initialData.website) || ''
          }), (0, _jsxRuntime.jsx)("textarea", {
            testID: "bio-input",
            placeholder: "Brief description...",
            defaultValue: (initialData == null ? void 0 : initialData.bio) || ''
          }), (0, _jsxRuntime.jsx)("button", {
            testID: "save-basic-info",
            onPress: function onPress() {
              return onSubmit({
                fullName: 'John Doe',
                jobTitle: 'Senior Developer',
                company: 'Tech Corp',
                email: 'john@techcorp.com',
                phone: '+1234567890',
                website: 'https://johndoe.com',
                bio: 'Experienced software developer specializing in mobile applications.'
              });
            },
            children: "Save Basic Info"
          })]
        });
      };
      var TestCardCreation = function TestCardCreation() {
        var _React$useState = _react.default.useState({}),
          _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
          cardData = _React$useState2[0],
          setCardData = _React$useState2[1];
        var _React$useState3 = _react.default.useState({}),
          _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),
          errors = _React$useState4[0],
          setErrors = _React$useState4[1];
        var handleBasicInfoSubmit = function handleBasicInfoSubmit(data) {
          var _data$fullName, _data$email;
          var validationErrors = {};
          if (!((_data$fullName = data.fullName) != null && _data$fullName.trim())) {
            validationErrors.fullName = 'Full name is required';
          }
          if (!((_data$email = data.email) != null && _data$email.trim())) {
            validationErrors.email = 'Email is required';
          } else if (!/\S+@\S+\.\S+/.test(data.email)) {
            validationErrors.email = 'Invalid email format';
          }
          if (Object.keys(validationErrors).length > 0) {
            setErrors(validationErrors);
            return;
          }
          setErrors({});
          setCardData(function (prev) {
            return Object.assign({}, prev, data);
          });
          navigation.navigate('SocialLinks');
        };
        return (0, _jsxRuntime.jsx)(_reactRedux.Provider, {
          store: store,
          children: (0, _jsxRuntime.jsx)(MockBasicInfoForm, {
            onSubmit: handleBasicInfoSubmit,
            initialData: cardData,
            errors: errors
          })
        });
      };
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestCardCreation, {})),
        getByTestId = _render.getByTestId;
      var saveButton = getByTestId('save-basic-info');
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(saveButton);
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(navigation.navigate).toHaveBeenCalledWith('SocialLinks');
      });
    }));
    test('should validate required basic information fields', (0, _asyncToGenerator2.default)(function* () {
      var MockBasicInfoForm = function MockBasicInfoForm(_ref5) {
        var onSubmit = _ref5.onSubmit,
          errors = _ref5.errors;
        return (0, _jsxRuntime.jsxs)("div", {
          testID: "basic-info-form",
          children: [(0, _jsxRuntime.jsx)("input", {
            testID: "full-name-input",
            placeholder: "Full Name"
          }), (errors == null ? void 0 : errors.fullName) && (0, _jsxRuntime.jsx)("div", {
            testID: "full-name-error",
            children: errors.fullName
          }), (0, _jsxRuntime.jsx)("input", {
            testID: "email-input",
            placeholder: "Email"
          }), (errors == null ? void 0 : errors.email) && (0, _jsxRuntime.jsx)("div", {
            testID: "email-error",
            children: errors.email
          }), (0, _jsxRuntime.jsx)("button", {
            testID: "save-button",
            onPress: function onPress() {
              return onSubmit({
                fullName: '',
                email: 'invalid-email'
              });
            },
            children: "Save"
          })]
        });
      };
      var TestValidation = function TestValidation() {
        var _React$useState5 = _react.default.useState({}),
          _React$useState6 = (0, _slicedToArray2.default)(_React$useState5, 2),
          errors = _React$useState6[0],
          setErrors = _React$useState6[1];
        var handleSubmit = function handleSubmit(data) {
          var _data$fullName2, _data$email2;
          var validationErrors = {};
          if (!((_data$fullName2 = data.fullName) != null && _data$fullName2.trim())) {
            validationErrors.fullName = 'Full name is required';
          }
          if (!((_data$email2 = data.email) != null && _data$email2.trim())) {
            validationErrors.email = 'Email is required';
          } else if (!/\S+@\S+\.\S+/.test(data.email)) {
            validationErrors.email = 'Invalid email format';
          }
          setErrors(validationErrors);
        };
        return (0, _jsxRuntime.jsx)(_reactRedux.Provider, {
          store: store,
          children: (0, _jsxRuntime.jsx)(MockBasicInfoForm, {
            onSubmit: handleSubmit,
            errors: errors
          })
        });
      };
      var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestValidation, {})),
        getByTestId = _render2.getByTestId;
      var saveButton = getByTestId('save-button');
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(saveButton);
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('full-name-error')).toBeTruthy();
        expect(getByTestId('email-error')).toBeTruthy();
      });
    }));
  });
  describe('Social Media Links', function () {
    test('should add and manage social media links', (0, _asyncToGenerator2.default)(function* () {
      var MockSocialLinksForm = function MockSocialLinksForm(_ref8) {
        var onSubmit = _ref8.onSubmit,
          socialLinks = _ref8.socialLinks,
          onAddLink = _ref8.onAddLink,
          onRemoveLink = _ref8.onRemoveLink;
        return (0, _jsxRuntime.jsxs)("div", {
          testID: "social-links-form",
          children: [(0, _jsxRuntime.jsx)("div", {
            testID: "social-links-list",
            children: socialLinks.map(function (link, index) {
              return (0, _jsxRuntime.jsxs)("div", {
                testID: `social-link-${index}`,
                children: [(0, _jsxRuntime.jsxs)("select", {
                  testID: `platform-select-${index}`,
                  defaultValue: link.platform,
                  children: [(0, _jsxRuntime.jsx)("option", {
                    value: "linkedin",
                    children: "LinkedIn"
                  }), (0, _jsxRuntime.jsx)("option", {
                    value: "twitter",
                    children: "Twitter"
                  }), (0, _jsxRuntime.jsx)("option", {
                    value: "facebook",
                    children: "Facebook"
                  }), (0, _jsxRuntime.jsx)("option", {
                    value: "instagram",
                    children: "Instagram"
                  }), (0, _jsxRuntime.jsx)("option", {
                    value: "github",
                    children: "GitHub"
                  })]
                }), (0, _jsxRuntime.jsx)("input", {
                  testID: `url-input-${index}`,
                  placeholder: "Profile URL",
                  defaultValue: link.url
                }), (0, _jsxRuntime.jsx)("button", {
                  testID: `remove-link-${index}`,
                  onPress: function onPress() {
                    return onRemoveLink(index);
                  },
                  children: "Remove"
                })]
              }, index);
            })
          }), (0, _jsxRuntime.jsx)("button", {
            testID: "add-link-button",
            onPress: function onPress() {
              return onAddLink({
                platform: 'linkedin',
                url: ''
              });
            },
            children: "Add Social Link"
          }), (0, _jsxRuntime.jsx)("button", {
            testID: "save-social-links",
            onPress: function onPress() {
              return onSubmit(socialLinks);
            },
            children: "Save Social Links"
          })]
        });
      };
      var TestSocialLinks = function TestSocialLinks() {
        var _React$useState7 = _react.default.useState([{
            platform: 'linkedin',
            url: 'https://linkedin.com/in/johndoe'
          }, {
            platform: 'twitter',
            url: 'https://twitter.com/johndoe'
          }]),
          _React$useState8 = (0, _slicedToArray2.default)(_React$useState7, 2),
          socialLinks = _React$useState8[0],
          setSocialLinks = _React$useState8[1];
        var handleAddLink = function handleAddLink(newLink) {
          setSocialLinks(function (prev) {
            return [].concat((0, _toConsumableArray2.default)(prev), [newLink]);
          });
        };
        var handleRemoveLink = function handleRemoveLink(index) {
          setSocialLinks(function (prev) {
            return prev.filter(function (_, i) {
              return i !== index;
            });
          });
        };
        var handleSubmit = function handleSubmit(links) {
          var validLinks = links.filter(function (link) {
            return link.url && link.url.startsWith('http');
          });
          console.log('Saving social links:', validLinks);
          navigation.navigate('CardPreview');
        };
        return (0, _jsxRuntime.jsx)(_reactRedux.Provider, {
          store: store,
          children: (0, _jsxRuntime.jsx)(MockSocialLinksForm, {
            onSubmit: handleSubmit,
            socialLinks: socialLinks,
            onAddLink: handleAddLink,
            onRemoveLink: handleRemoveLink
          })
        });
      };
      var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestSocialLinks, {})),
        getByTestId = _render3.getByTestId;
      expect(getByTestId('social-link-0')).toBeTruthy();
      expect(getByTestId('social-link-1')).toBeTruthy();
      var addButton = getByTestId('add-link-button');
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(addButton);
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('social-link-2')).toBeTruthy();
      });
      var removeButton = getByTestId('remove-link-1');
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(removeButton);
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(function () {
          return getByTestId('social-link-2');
        }).toThrow();
      });
      var saveButton = getByTestId('save-social-links');
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(saveButton);
      }));
      expect(navigation.navigate).toHaveBeenCalledWith('CardPreview');
    }));
    test('should validate social media URLs', (0, _asyncToGenerator2.default)(function* () {
      var MockSocialValidation = function MockSocialValidation(_ref11) {
        var onValidate = _ref11.onValidate,
          validationErrors = _ref11.validationErrors;
        return (0, _jsxRuntime.jsxs)("div", {
          testID: "social-validation",
          children: [(0, _jsxRuntime.jsx)("input", {
            testID: "linkedin-url",
            placeholder: "LinkedIn URL",
            defaultValue: "invalid-url"
          }), (validationErrors == null ? void 0 : validationErrors.linkedin) && (0, _jsxRuntime.jsx)("div", {
            testID: "linkedin-error",
            children: validationErrors.linkedin
          }), (0, _jsxRuntime.jsx)("input", {
            testID: "twitter-url",
            placeholder: "Twitter URL",
            defaultValue: ""
          }), (validationErrors == null ? void 0 : validationErrors.twitter) && (0, _jsxRuntime.jsx)("div", {
            testID: "twitter-error",
            children: validationErrors.twitter
          }), (0, _jsxRuntime.jsx)("button", {
            testID: "validate-button",
            onPress: function onPress() {
              return onValidate({
                linkedin: 'invalid-url',
                twitter: ''
              });
            },
            children: "Validate"
          })]
        });
      };
      var TestSocialValidation = function TestSocialValidation() {
        var _React$useState9 = _react.default.useState({}),
          _React$useState0 = (0, _slicedToArray2.default)(_React$useState9, 2),
          validationErrors = _React$useState0[0],
          setValidationErrors = _React$useState0[1];
        var handleValidate = function handleValidate(data) {
          var errors = {};
          if (data.linkedin && !data.linkedin.startsWith('http')) {
            errors.linkedin = 'Please enter a valid URL starting with http or https';
          }
          if (data.twitter && !data.twitter.includes('twitter.com')) {
            errors.twitter = 'Please enter a valid Twitter URL';
          }
          setValidationErrors(errors);
        };
        return (0, _jsxRuntime.jsx)(_reactRedux.Provider, {
          store: store,
          children: (0, _jsxRuntime.jsx)(MockSocialValidation, {
            onValidate: handleValidate,
            validationErrors: validationErrors
          })
        });
      };
      var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestSocialValidation, {})),
        getByTestId = _render4.getByTestId;
      var validateButton = getByTestId('validate-button');
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(validateButton);
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('linkedin-error')).toBeTruthy();
      });
    }));
  });
  describe('Photo Upload', function () {
    test('should upload and preview profile photo', (0, _asyncToGenerator2.default)(function* () {
      var _require = require('react-native-image-picker'),
        launchImageLibrary = _require.launchImageLibrary;
      launchImageLibrary.mockImplementation(function (options, callback) {
        callback({
          didCancel: false,
          assets: [{
            uri: 'file:///path/to/photo.jpg',
            type: 'image/jpeg',
            fileName: 'profile.jpg',
            fileSize: 1024000
          }]
        });
      });
      var MockPhotoUpload = function MockPhotoUpload(_ref14) {
        var onPhotoSelect = _ref14.onPhotoSelect,
          photo = _ref14.photo,
          onRemovePhoto = _ref14.onRemovePhoto;
        return (0, _jsxRuntime.jsx)("div", {
          testID: "photo-upload",
          children: photo ? (0, _jsxRuntime.jsxs)("div", {
            testID: "photo-preview",
            children: [(0, _jsxRuntime.jsx)("img", {
              testID: "profile-image",
              src: photo,
              alt: "Profile"
            }), (0, _jsxRuntime.jsx)("button", {
              testID: "remove-photo",
              onPress: onRemovePhoto,
              children: "Remove Photo"
            })]
          }) : (0, _jsxRuntime.jsxs)("div", {
            testID: "photo-placeholder",
            children: [(0, _jsxRuntime.jsx)("div", {
              children: "No photo selected"
            }), (0, _jsxRuntime.jsx)("button", {
              testID: "select-photo",
              onPress: onPhotoSelect,
              children: "Select Photo"
            })]
          })
        });
      };
      var TestPhotoUpload = function TestPhotoUpload() {
        var _React$useState1 = _react.default.useState(null),
          _React$useState10 = (0, _slicedToArray2.default)(_React$useState1, 2),
          photo = _React$useState10[0],
          setPhoto = _React$useState10[1];
        var handlePhotoSelect = function handlePhotoSelect() {
          launchImageLibrary({
            mediaType: 'photo',
            quality: 0.8
          }, function (response) {
            var _response$assets;
            if (!response.didCancel && (_response$assets = response.assets) != null && _response$assets[0]) {
              var asset = response.assets[0];
              setPhoto(asset.uri);
            }
          });
        };
        var handleRemovePhoto = function handleRemovePhoto() {
          setPhoto(null);
        };
        return (0, _jsxRuntime.jsx)(_reactRedux.Provider, {
          store: store,
          children: (0, _jsxRuntime.jsx)(MockPhotoUpload, {
            onPhotoSelect: handlePhotoSelect,
            photo: photo,
            onRemovePhoto: handleRemovePhoto
          })
        });
      };
      var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestPhotoUpload, {})),
        getByTestId = _render5.getByTestId;
      expect(getByTestId('photo-placeholder')).toBeTruthy();
      var selectButton = getByTestId('select-photo');
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(selectButton);
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('photo-preview')).toBeTruthy();
        expect(getByTestId('profile-image')).toBeTruthy();
      });
      var removeButton = getByTestId('remove-photo');
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(removeButton);
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('photo-placeholder')).toBeTruthy();
      });
    }));
    test('should handle camera capture for profile photo', (0, _asyncToGenerator2.default)(function* () {
      var _require2 = require('react-native-image-picker'),
        launchCamera = _require2.launchCamera;
      launchCamera.mockImplementation(function (options, callback) {
        callback({
          didCancel: false,
          assets: [{
            uri: 'file:///path/to/camera-photo.jpg',
            type: 'image/jpeg',
            fileName: 'camera.jpg'
          }]
        });
      });
      var MockCameraCapture = function MockCameraCapture(_ref18) {
        var onTakePhoto = _ref18.onTakePhoto,
          photo = _ref18.photo;
        return (0, _jsxRuntime.jsxs)("div", {
          testID: "camera-capture",
          children: [(0, _jsxRuntime.jsx)("button", {
            testID: "take-photo",
            onPress: onTakePhoto,
            children: "Take Photo"
          }), photo && (0, _jsxRuntime.jsx)("img", {
            testID: "captured-photo",
            src: photo,
            alt: "Captured"
          })]
        });
      };
      var TestCameraCapture = function TestCameraCapture() {
        var _React$useState11 = _react.default.useState(null),
          _React$useState12 = (0, _slicedToArray2.default)(_React$useState11, 2),
          photo = _React$useState12[0],
          setPhoto = _React$useState12[1];
        var handleTakePhoto = function handleTakePhoto() {
          launchCamera({
            mediaType: 'photo',
            quality: 0.8
          }, function (response) {
            var _response$assets2;
            if (!response.didCancel && (_response$assets2 = response.assets) != null && _response$assets2[0]) {
              setPhoto(response.assets[0].uri);
            }
          });
        };
        return (0, _jsxRuntime.jsx)(_reactRedux.Provider, {
          store: store,
          children: (0, _jsxRuntime.jsx)(MockCameraCapture, {
            onTakePhoto: handleTakePhoto,
            photo: photo
          })
        });
      };
      var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestCameraCapture, {})),
        getByTestId = _render6.getByTestId;
      var takePhotoButton = getByTestId('take-photo');
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(takePhotoButton);
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('captured-photo')).toBeTruthy();
      });
    }));
  });
  describe('Template Selection', function () {
    test('should select and preview different card templates', (0, _asyncToGenerator2.default)(function* () {
      var templates = [{
        id: 'modern',
        name: 'Modern',
        preview: 'modern-preview.jpg'
      }, {
        id: 'classic',
        name: 'Classic',
        preview: 'classic-preview.jpg'
      }, {
        id: 'minimal',
        name: 'Minimal',
        preview: 'minimal-preview.jpg'
      }];
      var MockTemplateSelector = function MockTemplateSelector(_ref21) {
        var _templates$find;
        var templates = _ref21.templates,
          selectedTemplate = _ref21.selectedTemplate,
          onSelectTemplate = _ref21.onSelectTemplate;
        return (0, _jsxRuntime.jsxs)("div", {
          testID: "template-selector",
          children: [(0, _jsxRuntime.jsx)("div", {
            testID: "template-grid",
            children: templates.map(function (template) {
              return (0, _jsxRuntime.jsxs)("div", {
                testID: `template-${template.id}`,
                className: selectedTemplate === template.id ? 'selected' : '',
                children: [(0, _jsxRuntime.jsx)("img", {
                  testID: `template-preview-${template.id}`,
                  src: template.preview,
                  alt: template.name
                }), (0, _jsxRuntime.jsx)("div", {
                  testID: `template-name-${template.id}`,
                  children: template.name
                }), (0, _jsxRuntime.jsx)("button", {
                  testID: `select-template-${template.id}`,
                  onPress: function onPress() {
                    return onSelectTemplate(template.id);
                  },
                  children: "Select"
                })]
              }, template.id);
            })
          }), selectedTemplate && (0, _jsxRuntime.jsxs)("div", {
            testID: "selected-template",
            children: ["Selected: ", (_templates$find = templates.find(function (t) {
              return t.id === selectedTemplate;
            })) == null ? void 0 : _templates$find.name]
          })]
        });
      };
      var TestTemplateSelection = function TestTemplateSelection() {
        var _React$useState13 = _react.default.useState(null),
          _React$useState14 = (0, _slicedToArray2.default)(_React$useState13, 2),
          selectedTemplate = _React$useState14[0],
          setSelectedTemplate = _React$useState14[1];
        var handleSelectTemplate = function handleSelectTemplate(templateId) {
          setSelectedTemplate(templateId);
        };
        return (0, _jsxRuntime.jsx)(_reactRedux.Provider, {
          store: store,
          children: (0, _jsxRuntime.jsx)(MockTemplateSelector, {
            templates: templates,
            selectedTemplate: selectedTemplate,
            onSelectTemplate: handleSelectTemplate
          })
        });
      };
      var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestTemplateSelection, {})),
        getByTestId = _render7.getByTestId;
      expect(getByTestId('template-modern')).toBeTruthy();
      expect(getByTestId('template-classic')).toBeTruthy();
      expect(getByTestId('template-minimal')).toBeTruthy();
      var selectModernButton = getByTestId('select-template-modern');
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(selectModernButton);
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('selected-template')).toBeTruthy();
        expect(getByTestId('selected-template').children[0]).toBe('Selected: Modern');
      });
    }));
  });
  describe('Complete Card Creation Flow', function () {
    test('should create complete business card with all fields', (0, _asyncToGenerator2.default)(function* () {
      var MockCardWizard = function MockCardWizard(_ref24) {
        var currentStep = _ref24.currentStep,
          cardData = _ref24.cardData,
          onNextStep = _ref24.onNextStep,
          onPreviousStep = _ref24.onPreviousStep,
          onUpdateData = _ref24.onUpdateData;
        return (0, _jsxRuntime.jsxs)("div", {
          testID: "card-wizard",
          children: [(0, _jsxRuntime.jsxs)("div", {
            testID: "progress-indicator",
            children: ["Step ", currentStep, " of 4"]
          }), currentStep === 1 && (0, _jsxRuntime.jsxs)("div", {
            testID: "step-basic-info",
            children: [(0, _jsxRuntime.jsx)("h3", {
              children: "Basic Information"
            }), (0, _jsxRuntime.jsx)("button", {
              testID: "next-from-basic",
              onPress: function onPress() {
                onUpdateData({
                  fullName: 'John Doe',
                  jobTitle: 'Senior Developer',
                  company: 'Tech Corp',
                  email: 'john@techcorp.com',
                  phone: '+1234567890'
                });
                onNextStep();
              },
              children: "Next"
            })]
          }), currentStep === 2 && (0, _jsxRuntime.jsxs)("div", {
            testID: "step-social-links",
            children: [(0, _jsxRuntime.jsx)("h3", {
              children: "Social Links"
            }), (0, _jsxRuntime.jsx)("button", {
              testID: "back-button",
              onPress: onPreviousStep,
              children: "Back"
            }), (0, _jsxRuntime.jsx)("button", {
              testID: "next-from-social",
              onPress: function onPress() {
                onUpdateData(Object.assign({}, cardData, {
                  socialLinks: [{
                    platform: 'linkedin',
                    url: 'https://linkedin.com/in/johndoe'
                  }]
                }));
                onNextStep();
              },
              children: "Next"
            })]
          }), currentStep === 3 && (0, _jsxRuntime.jsxs)("div", {
            testID: "step-template",
            children: [(0, _jsxRuntime.jsx)("h3", {
              children: "Choose Template"
            }), (0, _jsxRuntime.jsx)("button", {
              testID: "back-button",
              onPress: onPreviousStep,
              children: "Back"
            }), (0, _jsxRuntime.jsx)("button", {
              testID: "next-from-template",
              onPress: function onPress() {
                onUpdateData(Object.assign({}, cardData, {
                  template: 'modern'
                }));
                onNextStep();
              },
              children: "Next"
            })]
          }), currentStep === 4 && (0, _jsxRuntime.jsxs)("div", {
            testID: "step-review",
            children: [(0, _jsxRuntime.jsx)("h3", {
              children: "Review & Save"
            }), (0, _jsxRuntime.jsxs)("div", {
              testID: "card-preview",
              children: [(0, _jsxRuntime.jsxs)("div", {
                children: ["Name: ", cardData.fullName]
              }), (0, _jsxRuntime.jsxs)("div", {
                children: ["Title: ", cardData.jobTitle]
              }), (0, _jsxRuntime.jsxs)("div", {
                children: ["Company: ", cardData.company]
              }), (0, _jsxRuntime.jsxs)("div", {
                children: ["Email: ", cardData.email]
              }), (0, _jsxRuntime.jsxs)("div", {
                children: ["Phone: ", cardData.phone]
              }), (0, _jsxRuntime.jsxs)("div", {
                children: ["Template: ", cardData.template]
              })]
            }), (0, _jsxRuntime.jsx)("button", {
              testID: "back-button",
              onPress: onPreviousStep,
              children: "Back"
            }), (0, _jsxRuntime.jsx)("button", {
              testID: "save-card",
              onPress: function onPress() {
                return navigation.navigate('CardList');
              },
              children: "Save Card"
            })]
          })]
        });
      };
      var TestCompleteCardCreation = function TestCompleteCardCreation() {
        var _React$useState15 = _react.default.useState(1),
          _React$useState16 = (0, _slicedToArray2.default)(_React$useState15, 2),
          currentStep = _React$useState16[0],
          setCurrentStep = _React$useState16[1];
        var _React$useState17 = _react.default.useState({}),
          _React$useState18 = (0, _slicedToArray2.default)(_React$useState17, 2),
          cardData = _React$useState18[0],
          setCardData = _React$useState18[1];
        var handleNextStep = function handleNextStep() {
          setCurrentStep(function (prev) {
            return Math.min(prev + 1, 4);
          });
        };
        var handlePreviousStep = function handlePreviousStep() {
          setCurrentStep(function (prev) {
            return Math.max(prev - 1, 1);
          });
        };
        var handleUpdateData = function handleUpdateData(data) {
          setCardData(function (prev) {
            return Object.assign({}, prev, data);
          });
        };
        return (0, _jsxRuntime.jsx)(_reactRedux.Provider, {
          store: store,
          children: (0, _jsxRuntime.jsx)(MockCardWizard, {
            currentStep: currentStep,
            cardData: cardData,
            onNextStep: handleNextStep,
            onPreviousStep: handlePreviousStep,
            onUpdateData: handleUpdateData
          })
        });
      };
      var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestCompleteCardCreation, {})),
        getByTestId = _render8.getByTestId;
      expect(getByTestId('step-basic-info')).toBeTruthy();
      var nextFromBasic = getByTestId('next-from-basic');
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(nextFromBasic);
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('step-social-links')).toBeTruthy();
      });
      var nextFromSocial = getByTestId('next-from-social');
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(nextFromSocial);
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('step-template')).toBeTruthy();
      });
      var nextFromTemplate = getByTestId('next-from-template');
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(nextFromTemplate);
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('step-review')).toBeTruthy();
        expect(getByTestId('card-preview')).toBeTruthy();
      });
      var saveCard = getByTestId('save-card');
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(saveCard);
      }));
      expect(navigation.navigate).toHaveBeenCalledWith('CardList');
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,