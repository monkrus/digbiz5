5ccad8370712fb41694c7c4a5f9b42b6
var _tokenUtils = require("../../../src/utils/tokenUtils");
var createMockToken = function createMockToken(payload) {
  var header = {
    alg: 'HS256',
    typ: 'JWT'
  };
  var encodedHeader = Buffer.from(JSON.stringify(header)).toString('base64');
  var encodedPayload = Buffer.from(JSON.stringify(payload)).toString('base64');
  var signature = 'mock-signature';
  return `${encodedHeader}.${encodedPayload}.${signature}`;
};
var futureTime = Math.floor(Date.now() / 1000) + 3600;
var pastTime = Math.floor(Date.now() / 1000) - 3600;
var nearFutureTime = Math.floor(Date.now() / 1000) + 60;
describe('Token Utilities', function () {
  describe('decodeJWTPayload', function () {
    it('should decode valid JWT payload', function () {
      var payload = {
        sub: '123',
        email: 'test@example.com',
        exp: futureTime
      };
      var token = createMockToken(payload);
      var decoded = (0, _tokenUtils.decodeJWTPayload)(token);
      expect(decoded).toEqual(payload);
    });
    it('should return null for invalid token format', function () {
      var invalidToken = 'invalid.token';
      var decoded = (0, _tokenUtils.decodeJWTPayload)(invalidToken);
      expect(decoded).toBeNull();
    });
    it('should return null for malformed token', function () {
      var malformedToken = 'header.invalid-base64.signature';
      var decoded = (0, _tokenUtils.decodeJWTPayload)(malformedToken);
      expect(decoded).toBeNull();
    });
  });
  describe('isTokenExpired', function () {
    it('should return false for valid token', function () {
      var payload = {
        exp: futureTime
      };
      var token = createMockToken(payload);
      expect((0, _tokenUtils.isTokenExpired)(token)).toBe(false);
    });
    it('should return true for expired token', function () {
      var payload = {
        exp: pastTime
      };
      var token = createMockToken(payload);
      expect((0, _tokenUtils.isTokenExpired)(token)).toBe(true);
    });
    it('should return true for token without expiration', function () {
      var payload = {
        sub: '123'
      };
      var token = createMockToken(payload);
      expect((0, _tokenUtils.isTokenExpired)(token)).toBe(true);
    });
  });
  describe('getTokenExpirationTime', function () {
    it('should return expiration time for valid token', function () {
      var payload = {
        exp: futureTime
      };
      var token = createMockToken(payload);
      expect((0, _tokenUtils.getTokenExpirationTime)(token)).toBe(futureTime);
    });
    it('should return null for token without expiration', function () {
      var payload = {
        sub: '123'
      };
      var token = createMockToken(payload);
      expect((0, _tokenUtils.getTokenExpirationTime)(token)).toBeNull();
    });
  });
  describe('getTokenTimeRemaining', function () {
    it('should return remaining time for valid token', function () {
      var payload = {
        exp: futureTime
      };
      var token = createMockToken(payload);
      var remaining = (0, _tokenUtils.getTokenTimeRemaining)(token);
      expect(remaining).toBeGreaterThan(0);
      expect(remaining).toBeLessThanOrEqual(3600);
    });
    it('should return 0 for expired token', function () {
      var payload = {
        exp: pastTime
      };
      var token = createMockToken(payload);
      expect((0, _tokenUtils.getTokenTimeRemaining)(token)).toBe(0);
    });
  });
  describe('validateTokens', function () {
    var mockTokens = {
      accessToken: '',
      refreshToken: '',
      expiresIn: 3600,
      tokenType: 'Bearer'
    };
    it('should validate tokens correctly for valid token', function () {
      var payload = {
        exp: futureTime
      };
      var token = createMockToken(payload);
      var tokens = Object.assign({}, mockTokens, {
        accessToken: token
      });
      var validation = (0, _tokenUtils.validateTokens)(tokens);
      expect(validation.isValid).toBe(true);
      expect(validation.isExpired).toBe(false);
      expect(validation.shouldRefresh).toBe(false);
    });
    it('should suggest refresh for token expiring soon', function () {
      var payload = {
        exp: nearFutureTime
      };
      var token = createMockToken(payload);
      var tokens = Object.assign({}, mockTokens, {
        accessToken: token
      });
      var validation = (0, _tokenUtils.validateTokens)(tokens);
      expect(validation.isValid).toBe(true);
      expect(validation.shouldRefresh).toBe(true);
    });
    it('should handle expired tokens', function () {
      var payload = {
        exp: pastTime
      };
      var token = createMockToken(payload);
      var tokens = Object.assign({}, mockTokens, {
        accessToken: token
      });
      var validation = (0, _tokenUtils.validateTokens)(tokens);
      expect(validation.isValid).toBe(false);
      expect(validation.isExpired).toBe(true);
    });
  });
  describe('getUserIdFromToken', function () {
    it('should extract user ID from sub field', function () {
      var payload = {
        sub: 'user123'
      };
      var token = createMockToken(payload);
      expect((0, _tokenUtils.getUserIdFromToken)(token)).toBe('user123');
    });
    it('should extract user ID from userId field', function () {
      var payload = {
        userId: 'user456'
      };
      var token = createMockToken(payload);
      expect((0, _tokenUtils.getUserIdFromToken)(token)).toBe('user456');
    });
    it('should return null if no user ID found', function () {
      var payload = {
        email: 'test@example.com'
      };
      var token = createMockToken(payload);
      expect((0, _tokenUtils.getUserIdFromToken)(token)).toBeNull();
    });
  });
  describe('getEmailFromToken', function () {
    it('should extract email from token', function () {
      var payload = {
        email: 'test@example.com'
      };
      var token = createMockToken(payload);
      expect((0, _tokenUtils.getEmailFromToken)(token)).toBe('test@example.com');
    });
    it('should return null if no email found', function () {
      var payload = {
        sub: 'user123'
      };
      var token = createMockToken(payload);
      expect((0, _tokenUtils.getEmailFromToken)(token)).toBeNull();
    });
  });
  describe('getRolesFromToken', function () {
    it('should extract roles from token', function () {
      var payload = {
        roles: ['admin', 'user']
      };
      var token = createMockToken(payload);
      expect((0, _tokenUtils.getRolesFromToken)(token)).toEqual(['admin', 'user']);
    });
    it('should return empty array if no roles found', function () {
      var payload = {
        sub: 'user123'
      };
      var token = createMockToken(payload);
      expect((0, _tokenUtils.getRolesFromToken)(token)).toEqual([]);
    });
  });
  describe('formatAuthHeader', function () {
    it('should format Bearer token header', function () {
      var token = 'abc123';
      expect((0, _tokenUtils.formatAuthHeader)(token)).toBe('Bearer abc123');
    });
    it('should format custom token type', function () {
      var token = 'abc123';
      expect((0, _tokenUtils.formatAuthHeader)(token, 'Basic')).toBe('Basic abc123');
    });
  });
  describe('getOptimalRefreshTime', function () {
    it('should calculate optimal refresh time', function () {
      var payload = {
        exp: futureTime
      };
      var token = createMockToken(payload);
      var tokens = {
        accessToken: token,
        refreshToken: '',
        expiresIn: 3600,
        tokenType: 'Bearer'
      };
      var refreshTime = (0, _tokenUtils.getOptimalRefreshTime)(tokens);
      expect(refreshTime).toBeGreaterThan(60);
      expect(refreshTime).toBeLessThan(3600);
    });
  });
  describe('isRefreshTokenValid', function () {
    it('should validate refresh token without expiration', function () {
      var payload = {
        type: 'refresh'
      };
      var token = createMockToken(payload);
      var tokens = {
        accessToken: '',
        refreshToken: token,
        expiresIn: 3600,
        tokenType: 'Bearer'
      };
      expect((0, _tokenUtils.isRefreshTokenValid)(tokens)).toBe(true);
    });
    it('should validate refresh token with future expiration', function () {
      var payload = {
        exp: futureTime
      };
      var token = createMockToken(payload);
      var tokens = {
        accessToken: '',
        refreshToken: token,
        expiresIn: 3600,
        tokenType: 'Bearer'
      };
      expect((0, _tokenUtils.isRefreshTokenValid)(tokens)).toBe(true);
    });
    it('should reject expired refresh token', function () {
      var payload = {
        exp: pastTime
      };
      var token = createMockToken(payload);
      var tokens = {
        accessToken: '',
        refreshToken: token,
        expiresIn: 3600,
        tokenType: 'Bearer'
      };
      expect((0, _tokenUtils.isRefreshTokenValid)(tokens)).toBe(false);
    });
  });
  describe('getTokenInfo', function () {
    it('should extract comprehensive token information', function () {
      var issuedAt = Math.floor(Date.now() / 1000) - 1800;
      var payload = {
        sub: 'user123',
        email: 'test@example.com',
        roles: ['user'],
        iat: issuedAt,
        exp: futureTime
      };
      var token = createMockToken(payload);
      var info = (0, _tokenUtils.getTokenInfo)(token);
      expect(info).toEqual({
        userId: 'user123',
        email: 'test@example.com',
        roles: ['user'],
        issuedAt: new Date(issuedAt * 1000),
        expiresAt: new Date(futureTime * 1000),
        timeRemaining: expect.any(Number),
        isExpired: false
      });
    });
    it('should return null for invalid token', function () {
      var invalidToken = 'invalid.token';
      expect((0, _tokenUtils.getTokenInfo)(invalidToken)).toBeNull();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,