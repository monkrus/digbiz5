{"version":3,"names":["_tokenUtils","require","createMockToken","payload","header","alg","typ","encodedHeader","Buffer","from","JSON","stringify","toString","encodedPayload","signature","futureTime","Math","floor","Date","now","pastTime","nearFutureTime","describe","it","sub","email","exp","token","decoded","decodeJWTPayload","expect","toEqual","invalidToken","toBeNull","malformedToken","isTokenExpired","toBe","getTokenExpirationTime","remaining","getTokenTimeRemaining","toBeGreaterThan","toBeLessThanOrEqual","mockTokens","accessToken","refreshToken","expiresIn","tokenType","tokens","Object","assign","validation","validateTokens","isValid","isExpired","shouldRefresh","getUserIdFromToken","userId","getEmailFromToken","roles","getRolesFromToken","formatAuthHeader","refreshTime","getOptimalRefreshTime","toBeLessThan","type","isRefreshTokenValid","issuedAt","iat","info","getTokenInfo","expiresAt","timeRemaining","any","Number"],"sources":["tokenUtils.test.ts"],"sourcesContent":["/**\n * Token Utilities Test Suite\n *\n * Tests JWT token validation, parsing, and management utilities.\n * Validates token expiration, payload extraction, and timing calculations.\n */\n\nimport {\n  decodeJWTPayload,\n  isTokenExpired,\n  getTokenExpirationTime,\n  getTokenTimeRemaining,\n  validateTokens,\n  getUserIdFromToken,\n  getEmailFromToken,\n  getRolesFromToken,\n  formatAuthHeader,\n  getOptimalRefreshTime,\n  isRefreshTokenValid,\n  getTokenInfo,\n} from '../../../src/utils/tokenUtils';\nimport { JWTTokens } from '../../../src/types/auth';\n\n// Mock JWT tokens for testing\nconst createMockToken = (payload: any): string => {\n  const header = { alg: 'HS256', typ: 'JWT' };\n  const encodedHeader = Buffer.from(JSON.stringify(header)).toString('base64');\n  const encodedPayload = Buffer.from(JSON.stringify(payload)).toString(\n    'base64',\n  );\n  const signature = 'mock-signature';\n  return `${encodedHeader}.${encodedPayload}.${signature}`;\n};\n\nconst futureTime = Math.floor(Date.now() / 1000) + 3600; // 1 hour from now\nconst pastTime = Math.floor(Date.now() / 1000) - 3600; // 1 hour ago\nconst nearFutureTime = Math.floor(Date.now() / 1000) + 60; // 1 minute from now\n\ndescribe('Token Utilities', () => {\n  describe('decodeJWTPayload', () => {\n    it('should decode valid JWT payload', () => {\n      const payload = {\n        sub: '123',\n        email: 'test@example.com',\n        exp: futureTime,\n      };\n      const token = createMockToken(payload);\n\n      const decoded = decodeJWTPayload(token);\n\n      expect(decoded).toEqual(payload);\n    });\n\n    it('should return null for invalid token format', () => {\n      const invalidToken = 'invalid.token';\n      const decoded = decodeJWTPayload(invalidToken);\n\n      expect(decoded).toBeNull();\n    });\n\n    it('should return null for malformed token', () => {\n      const malformedToken = 'header.invalid-base64.signature';\n      const decoded = decodeJWTPayload(malformedToken);\n\n      expect(decoded).toBeNull();\n    });\n  });\n\n  describe('isTokenExpired', () => {\n    it('should return false for valid token', () => {\n      const payload = { exp: futureTime };\n      const token = createMockToken(payload);\n\n      expect(isTokenExpired(token)).toBe(false);\n    });\n\n    it('should return true for expired token', () => {\n      const payload = { exp: pastTime };\n      const token = createMockToken(payload);\n\n      expect(isTokenExpired(token)).toBe(true);\n    });\n\n    it('should return true for token without expiration', () => {\n      const payload = { sub: '123' };\n      const token = createMockToken(payload);\n\n      expect(isTokenExpired(token)).toBe(true);\n    });\n  });\n\n  describe('getTokenExpirationTime', () => {\n    it('should return expiration time for valid token', () => {\n      const payload = { exp: futureTime };\n      const token = createMockToken(payload);\n\n      expect(getTokenExpirationTime(token)).toBe(futureTime);\n    });\n\n    it('should return null for token without expiration', () => {\n      const payload = { sub: '123' };\n      const token = createMockToken(payload);\n\n      expect(getTokenExpirationTime(token)).toBeNull();\n    });\n  });\n\n  describe('getTokenTimeRemaining', () => {\n    it('should return remaining time for valid token', () => {\n      const payload = { exp: futureTime };\n      const token = createMockToken(payload);\n\n      const remaining = getTokenTimeRemaining(token);\n      expect(remaining).toBeGreaterThan(0);\n      expect(remaining).toBeLessThanOrEqual(3600);\n    });\n\n    it('should return 0 for expired token', () => {\n      const payload = { exp: pastTime };\n      const token = createMockToken(payload);\n\n      expect(getTokenTimeRemaining(token)).toBe(0);\n    });\n  });\n\n  describe('validateTokens', () => {\n    const mockTokens: JWTTokens = {\n      accessToken: '',\n      refreshToken: '',\n      expiresIn: 3600,\n      tokenType: 'Bearer',\n    };\n\n    it('should validate tokens correctly for valid token', () => {\n      const payload = { exp: futureTime };\n      const token = createMockToken(payload);\n      const tokens = { ...mockTokens, accessToken: token };\n\n      const validation = validateTokens(tokens);\n\n      expect(validation.isValid).toBe(true);\n      expect(validation.isExpired).toBe(false);\n      expect(validation.shouldRefresh).toBe(false);\n    });\n\n    it('should suggest refresh for token expiring soon', () => {\n      const payload = { exp: nearFutureTime };\n      const token = createMockToken(payload);\n      const tokens = { ...mockTokens, accessToken: token };\n\n      const validation = validateTokens(tokens);\n\n      expect(validation.isValid).toBe(true);\n      expect(validation.shouldRefresh).toBe(true);\n    });\n\n    it('should handle expired tokens', () => {\n      const payload = { exp: pastTime };\n      const token = createMockToken(payload);\n      const tokens = { ...mockTokens, accessToken: token };\n\n      const validation = validateTokens(tokens);\n\n      expect(validation.isValid).toBe(false);\n      expect(validation.isExpired).toBe(true);\n    });\n  });\n\n  describe('getUserIdFromToken', () => {\n    it('should extract user ID from sub field', () => {\n      const payload = { sub: 'user123' };\n      const token = createMockToken(payload);\n\n      expect(getUserIdFromToken(token)).toBe('user123');\n    });\n\n    it('should extract user ID from userId field', () => {\n      const payload = { userId: 'user456' };\n      const token = createMockToken(payload);\n\n      expect(getUserIdFromToken(token)).toBe('user456');\n    });\n\n    it('should return null if no user ID found', () => {\n      const payload = { email: 'test@example.com' };\n      const token = createMockToken(payload);\n\n      expect(getUserIdFromToken(token)).toBeNull();\n    });\n  });\n\n  describe('getEmailFromToken', () => {\n    it('should extract email from token', () => {\n      const payload = { email: 'test@example.com' };\n      const token = createMockToken(payload);\n\n      expect(getEmailFromToken(token)).toBe('test@example.com');\n    });\n\n    it('should return null if no email found', () => {\n      const payload = { sub: 'user123' };\n      const token = createMockToken(payload);\n\n      expect(getEmailFromToken(token)).toBeNull();\n    });\n  });\n\n  describe('getRolesFromToken', () => {\n    it('should extract roles from token', () => {\n      const payload = { roles: ['admin', 'user'] };\n      const token = createMockToken(payload);\n\n      expect(getRolesFromToken(token)).toEqual(['admin', 'user']);\n    });\n\n    it('should return empty array if no roles found', () => {\n      const payload = { sub: 'user123' };\n      const token = createMockToken(payload);\n\n      expect(getRolesFromToken(token)).toEqual([]);\n    });\n  });\n\n  describe('formatAuthHeader', () => {\n    it('should format Bearer token header', () => {\n      const token = 'abc123';\n\n      expect(formatAuthHeader(token)).toBe('Bearer abc123');\n    });\n\n    it('should format custom token type', () => {\n      const token = 'abc123';\n\n      expect(formatAuthHeader(token, 'Basic')).toBe('Basic abc123');\n    });\n  });\n\n  describe('getOptimalRefreshTime', () => {\n    it('should calculate optimal refresh time', () => {\n      const payload = { exp: futureTime };\n      const token = createMockToken(payload);\n      const tokens: JWTTokens = {\n        accessToken: token,\n        refreshToken: '',\n        expiresIn: 3600,\n        tokenType: 'Bearer',\n      };\n\n      const refreshTime = getOptimalRefreshTime(tokens);\n\n      expect(refreshTime).toBeGreaterThan(60); // At least 60 seconds\n      expect(refreshTime).toBeLessThan(3600); // Less than full token lifetime\n    });\n  });\n\n  describe('isRefreshTokenValid', () => {\n    it('should validate refresh token without expiration', () => {\n      const payload = { type: 'refresh' };\n      const token = createMockToken(payload);\n      const tokens: JWTTokens = {\n        accessToken: '',\n        refreshToken: token,\n        expiresIn: 3600,\n        tokenType: 'Bearer',\n      };\n\n      expect(isRefreshTokenValid(tokens)).toBe(true);\n    });\n\n    it('should validate refresh token with future expiration', () => {\n      const payload = { exp: futureTime };\n      const token = createMockToken(payload);\n      const tokens: JWTTokens = {\n        accessToken: '',\n        refreshToken: token,\n        expiresIn: 3600,\n        tokenType: 'Bearer',\n      };\n\n      expect(isRefreshTokenValid(tokens)).toBe(true);\n    });\n\n    it('should reject expired refresh token', () => {\n      const payload = { exp: pastTime };\n      const token = createMockToken(payload);\n      const tokens: JWTTokens = {\n        accessToken: '',\n        refreshToken: token,\n        expiresIn: 3600,\n        tokenType: 'Bearer',\n      };\n\n      expect(isRefreshTokenValid(tokens)).toBe(false);\n    });\n  });\n\n  describe('getTokenInfo', () => {\n    it('should extract comprehensive token information', () => {\n      const issuedAt = Math.floor(Date.now() / 1000) - 1800; // 30 minutes ago\n      const payload = {\n        sub: 'user123',\n        email: 'test@example.com',\n        roles: ['user'],\n        iat: issuedAt,\n        exp: futureTime,\n      };\n      const token = createMockToken(payload);\n\n      const info = getTokenInfo(token);\n\n      expect(info).toEqual({\n        userId: 'user123',\n        email: 'test@example.com',\n        roles: ['user'],\n        issuedAt: new Date(issuedAt * 1000),\n        expiresAt: new Date(futureTime * 1000),\n        timeRemaining: expect.any(Number),\n        isExpired: false,\n      });\n    });\n\n    it('should return null for invalid token', () => {\n      const invalidToken = 'invalid.token';\n\n      expect(getTokenInfo(invalidToken)).toBeNull();\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}