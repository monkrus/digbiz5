262de9435f012b520802c577b5c9fd3f
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = processBoxShadow;
var _processColor = _interopRequireDefault(require("./processColor"));
function processBoxShadow(rawBoxShadows) {
  var result = [];
  if (rawBoxShadows == null) {
    return result;
  }
  var boxShadowList = typeof rawBoxShadows === 'string' ? parseBoxShadowString(rawBoxShadows.replace(/\n/g, ' ')) : rawBoxShadows;
  for (var rawBoxShadow of boxShadowList) {
    var parsedBoxShadow = {
      offsetX: 0,
      offsetY: 0
    };
    var value = void 0;
    for (var arg in rawBoxShadow) {
      switch (arg) {
        case 'offsetX':
          value = typeof rawBoxShadow.offsetX === 'string' ? parseLength(rawBoxShadow.offsetX) : rawBoxShadow.offsetX;
          if (value == null) {
            return [];
          }
          parsedBoxShadow.offsetX = value;
          break;
        case 'offsetY':
          value = typeof rawBoxShadow.offsetY === 'string' ? parseLength(rawBoxShadow.offsetY) : rawBoxShadow.offsetY;
          if (value == null) {
            return [];
          }
          parsedBoxShadow.offsetY = value;
          break;
        case 'spreadDistance':
          value = typeof rawBoxShadow.spreadDistance === 'string' ? parseLength(rawBoxShadow.spreadDistance) : rawBoxShadow.spreadDistance;
          if (value == null) {
            return [];
          }
          parsedBoxShadow.spreadDistance = value;
          break;
        case 'blurRadius':
          value = typeof rawBoxShadow.blurRadius === 'string' ? parseLength(rawBoxShadow.blurRadius) : rawBoxShadow.blurRadius;
          if (value == null || value < 0) {
            return [];
          }
          parsedBoxShadow.blurRadius = value;
          break;
        case 'color':
          var color = (0, _processColor.default)(rawBoxShadow.color);
          if (color == null) {
            return [];
          }
          parsedBoxShadow.color = color;
          break;
        case 'inset':
          parsedBoxShadow.inset = rawBoxShadow.inset;
      }
    }
    result.push(parsedBoxShadow);
  }
  return result;
}
function parseBoxShadowString(rawBoxShadows) {
  var result = [];
  for (var rawBoxShadow of rawBoxShadows.split(/,(?![^()]*\))/).map(function (bS) {
    return bS.trim();
  }).filter(function (bS) {
    return bS !== '';
  })) {
    var boxShadow = {
      offsetX: 0,
      offsetY: 0
    };
    var offsetX = void 0;
    var offsetY = void 0;
    var keywordDetectedAfterLength = false;
    var lengthCount = 0;
    var args = rawBoxShadow.split(/\s+(?![^(]*\))/);
    for (var arg of args) {
      var processedColor = (0, _processColor.default)(arg);
      if (processedColor != null) {
        if (boxShadow.color != null) {
          return [];
        }
        if (offsetX != null) {
          keywordDetectedAfterLength = true;
        }
        boxShadow.color = arg;
        continue;
      }
      if (arg === 'inset') {
        if (boxShadow.inset != null) {
          return [];
        }
        if (offsetX != null) {
          keywordDetectedAfterLength = true;
        }
        boxShadow.inset = true;
        continue;
      }
      switch (lengthCount) {
        case 0:
          offsetX = arg;
          lengthCount++;
          break;
        case 1:
          if (keywordDetectedAfterLength) {
            return [];
          }
          offsetY = arg;
          lengthCount++;
          break;
        case 2:
          if (keywordDetectedAfterLength) {
            return [];
          }
          boxShadow.blurRadius = arg;
          lengthCount++;
          break;
        case 3:
          if (keywordDetectedAfterLength) {
            return [];
          }
          boxShadow.spreadDistance = arg;
          lengthCount++;
          break;
        default:
          return [];
      }
    }
    if (offsetX == null || offsetY == null) {
      return [];
    }
    boxShadow.offsetX = offsetX;
    boxShadow.offsetY = offsetY;
    result.push(boxShadow);
  }
  return result;
}
function parseLength(length) {
  var argsWithUnitsRegex = /([+-]?\d*(\.\d+)?)([\w\W]+)?/g;
  var match = argsWithUnitsRegex.exec(length);
  if (!match || Number.isNaN(match[1])) {
    return null;
  }
  if (match[3] != null && match[3] !== 'px') {
    return null;
  }
  if (match[3] == null && match[1] !== '0') {
    return null;
  }
  return Number(match[1]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,