45f24ae6da17a1ae52bbdd3092d22f4a
_getJestObj().mock('../../src/services/tokenStorage');
_getJestObj().mock('../../src/config', function () {
  return {
    Config: {
      LINKEDIN_CLIENT_ID: 'test-linkedin-client-id',
      LINKEDIN_CLIENT_SECRET: 'test-linkedin-client-secret',
      LINKEDIN_REDIRECT_URI: 'https://app.example.com/auth/linkedin/callback'
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _linkedinAuthService = require("../../src/services/linkedinAuthService");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
global.fetch = jest.fn();
describe('LinkedInAuthService', function () {
  var linkedinAuthService;
  var mockFetch = global.fetch;
  var mockProfile = {
    sub: 'linkedin-123',
    name: 'John Doe',
    email: 'john@linkedin.com',
    picture: 'https://example.com/profile.jpg',
    given_name: 'John',
    family_name: 'Doe'
  };
  var mockTokenResponse = {
    access_token: 'linkedin-access-token',
    token_type: 'Bearer',
    expires_in: 5184000,
    scope: 'profile email'
  };
  beforeEach(function () {
    jest.clearAllMocks();
    linkedinAuthService = new _linkedinAuthService.LinkedInAuthService();
    mockFetch.mockResolvedValue({
      ok: true,
      json: function json() {
        return Promise.resolve({});
      },
      status: 200,
      statusText: 'OK'
    });
  });
  describe('Authorization URL Generation', function () {
    it('should generate correct authorization URL', function () {
      var authUrl = linkedinAuthService.getAuthorizationUrl();
      expect(authUrl).toContain('https://www.linkedin.com/oauth/v2/authorization');
      expect(authUrl).toContain('response_type=code');
      expect(authUrl).toContain('client_id=test-linkedin-client-id');
      expect(authUrl).toContain('redirect_uri=https://app.example.com/auth/linkedin/callback');
      expect(authUrl).toContain('scope=profile%20email');
      expect(authUrl).toContain('state=');
    });
    it('should generate different state parameter each time', function () {
      var authUrl1 = linkedinAuthService.getAuthorizationUrl();
      var authUrl2 = linkedinAuthService.getAuthorizationUrl();
      var state1 = new URLSearchParams(authUrl1.split('?')[1]).get('state');
      var state2 = new URLSearchParams(authUrl2.split('?')[1]).get('state');
      expect(state1).not.toEqual(state2);
      expect(state1).toHaveLength(32);
      expect(state2).toHaveLength(32);
    });
    it('should URL encode redirect URI properly', function () {
      var authUrl = linkedinAuthService.getAuthorizationUrl();
      var urlParams = new URLSearchParams(authUrl.split('?')[1]);
      var redirectUri = urlParams.get('redirect_uri');
      expect(redirectUri).toBe('https://app.example.com/auth/linkedin/callback');
    });
    it('should include correct scope parameter', function () {
      var authUrl = linkedinAuthService.getAuthorizationUrl();
      var urlParams = new URLSearchParams(authUrl.split('?')[1]);
      var scope = urlParams.get('scope');
      expect(scope).toBe('profile email');
    });
  });
  describe('Authorization Code Exchange', function () {
    it('should exchange authorization code for access token successfully', (0, _asyncToGenerator2.default)(function* () {
      var _call$;
      mockFetch.mockResolvedValue({
        ok: true,
        json: function json() {
          return Promise.resolve(mockTokenResponse);
        }
      });
      var result = yield linkedinAuthService.exchangeCodeForToken('auth-code', 'test-state');
      expect(mockFetch).toHaveBeenCalledWith('https://www.linkedin.com/oauth/v2/accessToken', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
          Accept: 'application/json'
        },
        body: expect.stringContaining('grant_type=authorization_code')
      });
      var call = mockFetch.mock.calls[0];
      var body = (_call$ = call[1]) == null ? void 0 : _call$.body;
      expect(body).toContain('code=auth-code');
      expect(body).toContain('client_id=test-linkedin-client-id');
      expect(body).toContain('client_secret=test-linkedin-client-secret');
      expect(body).toContain('redirect_uri=https://app.example.com/auth/linkedin/callback');
      expect(result).toEqual(mockTokenResponse);
    }));
    it('should handle token exchange errors', (0, _asyncToGenerator2.default)(function* () {
      var errorResponse = {
        error: 'invalid_grant',
        error_description: 'Authorization code is invalid'
      };
      mockFetch.mockResolvedValue({
        ok: false,
        status: 400,
        statusText: 'Bad Request',
        json: function json() {
          return Promise.resolve(errorResponse);
        }
      });
      yield expect(linkedinAuthService.exchangeCodeForToken('invalid-code', 'test-state')).rejects.toThrow('Authorization code is invalid');
    }));
    it('should handle network errors during token exchange', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockRejectedValue(new Error('Network error'));
      yield expect(linkedinAuthService.exchangeCodeForToken('auth-code', 'test-state')).rejects.toThrow('LinkedIn token exchange failed');
    }));
    it('should handle invalid JSON response', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockResolvedValue({
        ok: true,
        json: function json() {
          return Promise.reject(new Error('Invalid JSON'));
        }
      });
      yield expect(linkedinAuthService.exchangeCodeForToken('auth-code', 'test-state')).rejects.toThrow('LinkedIn token exchange failed');
    }));
  });
  describe('User Profile Retrieval', function () {
    it('should get user profile successfully', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockResolvedValue({
        ok: true,
        json: function json() {
          return Promise.resolve(mockProfile);
        }
      });
      var result = yield linkedinAuthService.getUserProfile('access-token');
      expect(mockFetch).toHaveBeenCalledWith('https://api.linkedin.com/v2/userinfo', {
        method: 'GET',
        headers: {
          Authorization: 'Bearer access-token',
          Accept: 'application/json'
        }
      });
      expect(result).toEqual(mockProfile);
    }));
    it('should handle profile retrieval errors', (0, _asyncToGenerator2.default)(function* () {
      var consoleSpy = jest.spyOn(console, 'error').mockImplementation();
      mockFetch.mockResolvedValue({
        ok: false,
        status: 401,
        statusText: 'Unauthorized',
        json: function json() {
          return Promise.resolve({
            message: 'Invalid token'
          });
        }
      });
      yield expect(linkedinAuthService.getUserProfile('invalid-token')).rejects.toThrow('Failed to get LinkedIn profile');
      expect(consoleSpy).toHaveBeenCalledWith('LinkedIn profile retrieval failed:', expect.any(Error));
      consoleSpy.mockRestore();
    }));
    it('should handle network errors during profile retrieval', (0, _asyncToGenerator2.default)(function* () {
      var consoleSpy = jest.spyOn(console, 'error').mockImplementation();
      mockFetch.mockRejectedValue(new Error('Network error'));
      yield expect(linkedinAuthService.getUserProfile('access-token')).rejects.toThrow('Failed to get LinkedIn profile');
      expect(consoleSpy).toHaveBeenCalledWith('LinkedIn profile retrieval failed:', expect.any(Error));
      consoleSpy.mockRestore();
    }));
  });
  describe('Complete Authentication Flow', function () {
    it('should complete authentication flow successfully', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: function json() {
          return Promise.resolve(mockTokenResponse);
        }
      }).mockResolvedValueOnce({
        ok: true,
        json: function json() {
          return Promise.resolve(mockProfile);
        }
      });
      var result = yield linkedinAuthService.authenticate('auth-code', 'test-state');
      expect(mockFetch).toHaveBeenCalledTimes(2);
      expect(mockFetch).toHaveBeenNthCalledWith(1, 'https://www.linkedin.com/oauth/v2/accessToken', expect.objectContaining({
        method: 'POST'
      }));
      expect(mockFetch).toHaveBeenNthCalledWith(2, 'https://api.linkedin.com/v2/userinfo', expect.objectContaining({
        method: 'GET',
        headers: expect.objectContaining({
          Authorization: 'Bearer linkedin-access-token'
        })
      }));
      var expectedResult = {
        accessToken: 'linkedin-access-token',
        profile: {
          id: 'linkedin-123',
          email: 'john@linkedin.com',
          name: 'John Doe',
          avatar: 'https://example.com/profile.jpg'
        }
      };
      expect(result).toEqual(expectedResult);
    }));
    it('should handle authentication flow failure during token exchange', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockResolvedValue({
        ok: false,
        status: 400,
        statusText: 'Bad Request',
        json: function json() {
          return Promise.resolve({
            error_description: 'Invalid code'
          });
        }
      });
      yield expect(linkedinAuthService.authenticate('invalid-code', 'test-state')).rejects.toThrow('Invalid code');
    }));
    it('should handle authentication flow failure during profile retrieval', (0, _asyncToGenerator2.default)(function* () {
      var consoleSpy = jest.spyOn(console, 'error').mockImplementation();
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: function json() {
          return Promise.resolve(mockTokenResponse);
        }
      }).mockResolvedValueOnce({
        ok: false,
        status: 401,
        statusText: 'Unauthorized',
        json: function json() {
          return Promise.resolve({
            message: 'Token expired'
          });
        }
      });
      yield expect(linkedinAuthService.authenticate('auth-code', 'test-state')).rejects.toThrow('Failed to get LinkedIn profile');
      consoleSpy.mockRestore();
    }));
    it('should transform profile data correctly', (0, _asyncToGenerator2.default)(function* () {
      var profileWithoutPicture = Object.assign({}, mockProfile, {
        picture: undefined
      });
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: function json() {
          return Promise.resolve(mockTokenResponse);
        }
      }).mockResolvedValueOnce({
        ok: true,
        json: function json() {
          return Promise.resolve(profileWithoutPicture);
        }
      });
      var result = yield linkedinAuthService.authenticate('auth-code', 'test-state');
      expect(result.profile.avatar).toBeNull();
    }));
    it('should use email as fallback name when name is not provided', (0, _asyncToGenerator2.default)(function* () {
      var profileWithoutName = Object.assign({}, mockProfile, {
        name: undefined
      });
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: function json() {
          return Promise.resolve(mockTokenResponse);
        }
      }).mockResolvedValueOnce({
        ok: true,
        json: function json() {
          return Promise.resolve(profileWithoutName);
        }
      });
      var result = yield linkedinAuthService.authenticate('auth-code', 'test-state');
      expect(result.profile.name).toBe('john@linkedin.com');
    }));
    it('should construct name from given and family names when name is not provided', (0, _asyncToGenerator2.default)(function* () {
      var profileWithNames = Object.assign({}, mockProfile, {
        name: undefined,
        given_name: 'Jane',
        family_name: 'Smith'
      });
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: function json() {
          return Promise.resolve(mockTokenResponse);
        }
      }).mockResolvedValueOnce({
        ok: true,
        json: function json() {
          return Promise.resolve(profileWithNames);
        }
      });
      var result = yield linkedinAuthService.authenticate('auth-code', 'test-state');
      expect(result.profile.name).toBe('Jane Smith');
    }));
  });
  describe('State Management', function () {
    it('should validate state parameter during authentication', (0, _asyncToGenerator2.default)(function* () {
      var authUrl = linkedinAuthService.getAuthorizationUrl();
      var urlParams = new URLSearchParams(authUrl.split('?')[1]);
      var originalState = urlParams.get('state');
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: function json() {
          return Promise.resolve(mockTokenResponse);
        }
      }).mockResolvedValueOnce({
        ok: true,
        json: function json() {
          return Promise.resolve(mockProfile);
        }
      });
      yield expect(linkedinAuthService.authenticate('auth-code', originalState)).resolves.toBeDefined();
    }));
    it('should generate cryptographically secure state', function () {
      var states = new Set();
      for (var i = 0; i < 100; i++) {
        var authUrl = linkedinAuthService.getAuthorizationUrl();
        var urlParams = new URLSearchParams(authUrl.split('?')[1]);
        var state = urlParams.get('state');
        expect(state).toHaveLength(32);
        expect(states.has(state)).toBe(false);
        states.add(state);
      }
    });
  });
  describe('URL Parameter Encoding', function () {
    it('should properly encode all URL parameters', function () {
      var authUrl = linkedinAuthService.getAuthorizationUrl();
      expect(authUrl).not.toMatch(/[^a-zA-Z0-9\-_.~:/?#[\]@!$&'()*+,;=%]/);
      expect(authUrl).toContain('response_type=code');
      expect(authUrl).toContain('scope=profile%20email');
    });
    it('should handle special characters in configuration', (0, _asyncToGenerator2.default)(function* () {
      var service = new _linkedinAuthService.LinkedInAuthService();
      var authUrl = service.getAuthorizationUrl();
      expect(authUrl).toContain('client_id=test-linkedin-client-id');
      expect(authUrl).toContain('redirect_uri=https://app.example.com/auth/linkedin/callback');
    }));
  });
  describe('Error Handling', function () {
    it('should provide meaningful error messages', (0, _asyncToGenerator2.default)(function* () {
      var errorResponse = {
        error: 'access_denied',
        error_description: 'User cancelled authorization'
      };
      mockFetch.mockResolvedValue({
        ok: false,
        status: 400,
        statusText: 'Bad Request',
        json: function json() {
          return Promise.resolve(errorResponse);
        }
      });
      yield expect(linkedinAuthService.exchangeCodeForToken('auth-code', 'state')).rejects.toThrow('User cancelled authorization');
    }));
    it('should handle missing error description', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockResolvedValue({
        ok: false,
        status: 500,
        statusText: 'Internal Server Error',
        json: function json() {
          return Promise.resolve({});
        }
      });
      yield expect(linkedinAuthService.exchangeCodeForToken('auth-code', 'state')).rejects.toThrow('HTTP 500: Internal Server Error');
    }));
    it('should handle JSON parsing errors', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockResolvedValue({
        ok: false,
        status: 400,
        statusText: 'Bad Request',
        json: function json() {
          return Promise.reject(new Error('Invalid JSON'));
        }
      });
      yield expect(linkedinAuthService.exchangeCodeForToken('auth-code', 'state')).rejects.toThrow('HTTP 400: Bad Request');
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,