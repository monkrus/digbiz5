2a2d53c73daf7c0660f60c6b5f5de3a1
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.virtualViewPrerenderRatio = exports.utilizeTokensInIntersectionObserver = exports.useTurboModules = exports.useTurboModuleInterop = exports.useShadowNodeStateOnClone = exports.useRawPropsJsiValue = exports.useOptimizedEventBatchingOnAndroid = exports.useNativeViewConfigsInBridgelessMode = exports.useFabricInterop = exports.useAlwaysAvailableJSErrorHandling = exports.updateRuntimeShadowNodeReferencesOnCommit = exports.traceTurboModulePromiseRejectionsOnAndroid = exports.shouldUseSetNativePropsInFabric = exports.shouldUseRemoveClippedSubviewsAsDefaultOnIOS = exports.shouldUseAnimatedObjectForTransform = exports.scheduleAnimatedCleanupInMicrotask = exports.reduceDefaultPropsInView = exports.preventShadowTreeCommitExhaustion = exports.preparedTextCacheSize = exports.override = exports.jsOnlyTestFlag = exports.isLayoutAnimationEnabled = exports.hideOffscreenVirtualViewsOnIOS = exports.fuseboxNetworkInspectionEnabled = exports.fuseboxEnabledRelease = exports.fixVirtualizeListCollapseWindowSize = exports.fixMappingOfEventPrioritiesBetweenFabricAndReact = exports.enableVirtualViewWindowFocusDetection = exports.enableVirtualViewRenderState = exports.enableVirtualViewDebugFeatures = exports.enableViewRecyclingForView = exports.enableViewRecyclingForText = exports.enableViewRecycling = exports.enableViewCulling = exports.enableSynchronousStateUpdates = exports.enableResourceTimingAPI = exports.enablePropsUpdateReconciliationAndroid = exports.enablePreparedTextLayout = exports.enableNewBackgroundAndBorderDrawables = exports.enableNetworkEventReporting = exports.enableNativeCSSParsing = exports.enableModuleArgumentNSNullConversionIOS = exports.enableMainQueueModulesOnIOS = exports.enableMainQueueCoordinatorOnIOS = exports.enableLayoutAnimationsOnIOS = exports.enableLayoutAnimationsOnAndroid = exports.enableInteropViewManagerClassLookUpOptimizationIOS = exports.enableIOSViewClipToPaddingBox = exports.enableIOSTextBaselineOffsetPerLine = exports.enableFontScaleChangesUpdatingLayout = exports.enableFixForParentTagDuringReparenting = exports.enableFabricRenderer = exports.enableFabricLogs = exports.enableEagerRootViewAttachment = exports.enableDoubleMeasurementFixAndroid = exports.enableDestroyShadowTreeRevisionAsync = exports.enableCustomFocusSearchOnClippedElementsAndroid = exports.enableCppPropsIteratorSetter = exports.enableBridgelessArchitecture = exports.enableAndroidTextMeasurementOptimizations = exports.enableAccumulatedUpdatesInRawPropsAndroid = exports.enableAccessibilityOrder = exports.enableAccessToHostTreeInFabric = exports.disableTextLayoutManagerCacheAndroid = exports.disableMountItemReorderingAndroid = exports.disableMainQueueSyncDispatchIOS = exports.disableInteractionManager = exports.deferFlatListFocusChangeRenderUpdate = exports.cxxNativeAnimatedRemoveJsSync = exports.cxxNativeAnimatedEnabled = exports.commonTestFlagWithoutNativeImplementation = exports.commonTestFlag = exports.avoidStateUpdateInAnimatedPropsMemo = exports.animatedShouldUseSingleOp = exports.animatedShouldSignalBatch = exports.animatedShouldDebounceQueueFlush = exports.alwaysFlattenAnimatedStyles = void 0;
var _ReactNativeFeatureFlagsBase = require("./ReactNativeFeatureFlagsBase");
var jsOnlyTestFlag = exports.jsOnlyTestFlag = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('jsOnlyTestFlag', false);
var alwaysFlattenAnimatedStyles = exports.alwaysFlattenAnimatedStyles = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('alwaysFlattenAnimatedStyles', false);
var animatedShouldDebounceQueueFlush = exports.animatedShouldDebounceQueueFlush = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('animatedShouldDebounceQueueFlush', false);
var animatedShouldUseSingleOp = exports.animatedShouldUseSingleOp = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('animatedShouldUseSingleOp', false);
var avoidStateUpdateInAnimatedPropsMemo = exports.avoidStateUpdateInAnimatedPropsMemo = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('avoidStateUpdateInAnimatedPropsMemo', true);
var deferFlatListFocusChangeRenderUpdate = exports.deferFlatListFocusChangeRenderUpdate = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('deferFlatListFocusChangeRenderUpdate', false);
var disableInteractionManager = exports.disableInteractionManager = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('disableInteractionManager', true);
var enableAccessToHostTreeInFabric = exports.enableAccessToHostTreeInFabric = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('enableAccessToHostTreeInFabric', false);
var fixVirtualizeListCollapseWindowSize = exports.fixVirtualizeListCollapseWindowSize = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('fixVirtualizeListCollapseWindowSize', false);
var isLayoutAnimationEnabled = exports.isLayoutAnimationEnabled = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('isLayoutAnimationEnabled', true);
var reduceDefaultPropsInView = exports.reduceDefaultPropsInView = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('reduceDefaultPropsInView', true);
var scheduleAnimatedCleanupInMicrotask = exports.scheduleAnimatedCleanupInMicrotask = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('scheduleAnimatedCleanupInMicrotask', true);
var shouldUseAnimatedObjectForTransform = exports.shouldUseAnimatedObjectForTransform = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('shouldUseAnimatedObjectForTransform', false);
var shouldUseRemoveClippedSubviewsAsDefaultOnIOS = exports.shouldUseRemoveClippedSubviewsAsDefaultOnIOS = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('shouldUseRemoveClippedSubviewsAsDefaultOnIOS', false);
var shouldUseSetNativePropsInFabric = exports.shouldUseSetNativePropsInFabric = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('shouldUseSetNativePropsInFabric', true);
var utilizeTokensInIntersectionObserver = exports.utilizeTokensInIntersectionObserver = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('utilizeTokensInIntersectionObserver', true);
var commonTestFlag = exports.commonTestFlag = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('commonTestFlag', false);
var commonTestFlagWithoutNativeImplementation = exports.commonTestFlagWithoutNativeImplementation = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('commonTestFlagWithoutNativeImplementation', false);
var animatedShouldSignalBatch = exports.animatedShouldSignalBatch = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('animatedShouldSignalBatch', false);
var cxxNativeAnimatedEnabled = exports.cxxNativeAnimatedEnabled = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('cxxNativeAnimatedEnabled', false);
var cxxNativeAnimatedRemoveJsSync = exports.cxxNativeAnimatedRemoveJsSync = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('cxxNativeAnimatedRemoveJsSync', false);
var disableMainQueueSyncDispatchIOS = exports.disableMainQueueSyncDispatchIOS = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('disableMainQueueSyncDispatchIOS', false);
var disableMountItemReorderingAndroid = exports.disableMountItemReorderingAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('disableMountItemReorderingAndroid', false);
var disableTextLayoutManagerCacheAndroid = exports.disableTextLayoutManagerCacheAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('disableTextLayoutManagerCacheAndroid', false);
var enableAccessibilityOrder = exports.enableAccessibilityOrder = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableAccessibilityOrder', false);
var enableAccumulatedUpdatesInRawPropsAndroid = exports.enableAccumulatedUpdatesInRawPropsAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableAccumulatedUpdatesInRawPropsAndroid', false);
var enableAndroidTextMeasurementOptimizations = exports.enableAndroidTextMeasurementOptimizations = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableAndroidTextMeasurementOptimizations', false);
var enableBridgelessArchitecture = exports.enableBridgelessArchitecture = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableBridgelessArchitecture', false);
var enableCppPropsIteratorSetter = exports.enableCppPropsIteratorSetter = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableCppPropsIteratorSetter', false);
var enableCustomFocusSearchOnClippedElementsAndroid = exports.enableCustomFocusSearchOnClippedElementsAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableCustomFocusSearchOnClippedElementsAndroid', true);
var enableDestroyShadowTreeRevisionAsync = exports.enableDestroyShadowTreeRevisionAsync = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableDestroyShadowTreeRevisionAsync', false);
var enableDoubleMeasurementFixAndroid = exports.enableDoubleMeasurementFixAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableDoubleMeasurementFixAndroid', false);
var enableEagerRootViewAttachment = exports.enableEagerRootViewAttachment = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableEagerRootViewAttachment', false);
var enableFabricLogs = exports.enableFabricLogs = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableFabricLogs', false);
var enableFabricRenderer = exports.enableFabricRenderer = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableFabricRenderer', false);
var enableFixForParentTagDuringReparenting = exports.enableFixForParentTagDuringReparenting = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableFixForParentTagDuringReparenting', false);
var enableFontScaleChangesUpdatingLayout = exports.enableFontScaleChangesUpdatingLayout = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableFontScaleChangesUpdatingLayout', false);
var enableIOSTextBaselineOffsetPerLine = exports.enableIOSTextBaselineOffsetPerLine = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableIOSTextBaselineOffsetPerLine', false);
var enableIOSViewClipToPaddingBox = exports.enableIOSViewClipToPaddingBox = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableIOSViewClipToPaddingBox', false);
var enableInteropViewManagerClassLookUpOptimizationIOS = exports.enableInteropViewManagerClassLookUpOptimizationIOS = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableInteropViewManagerClassLookUpOptimizationIOS', false);
var enableLayoutAnimationsOnAndroid = exports.enableLayoutAnimationsOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableLayoutAnimationsOnAndroid', false);
var enableLayoutAnimationsOnIOS = exports.enableLayoutAnimationsOnIOS = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableLayoutAnimationsOnIOS', true);
var enableMainQueueCoordinatorOnIOS = exports.enableMainQueueCoordinatorOnIOS = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableMainQueueCoordinatorOnIOS', false);
var enableMainQueueModulesOnIOS = exports.enableMainQueueModulesOnIOS = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableMainQueueModulesOnIOS', false);
var enableModuleArgumentNSNullConversionIOS = exports.enableModuleArgumentNSNullConversionIOS = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableModuleArgumentNSNullConversionIOS', false);
var enableNativeCSSParsing = exports.enableNativeCSSParsing = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableNativeCSSParsing', false);
var enableNetworkEventReporting = exports.enableNetworkEventReporting = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableNetworkEventReporting', false);
var enableNewBackgroundAndBorderDrawables = exports.enableNewBackgroundAndBorderDrawables = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableNewBackgroundAndBorderDrawables', true);
var enablePreparedTextLayout = exports.enablePreparedTextLayout = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enablePreparedTextLayout', false);
var enablePropsUpdateReconciliationAndroid = exports.enablePropsUpdateReconciliationAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enablePropsUpdateReconciliationAndroid', false);
var enableResourceTimingAPI = exports.enableResourceTimingAPI = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableResourceTimingAPI', false);
var enableSynchronousStateUpdates = exports.enableSynchronousStateUpdates = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableSynchronousStateUpdates', false);
var enableViewCulling = exports.enableViewCulling = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableViewCulling', false);
var enableViewRecycling = exports.enableViewRecycling = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableViewRecycling', false);
var enableViewRecyclingForText = exports.enableViewRecyclingForText = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableViewRecyclingForText', true);
var enableViewRecyclingForView = exports.enableViewRecyclingForView = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableViewRecyclingForView', true);
var enableVirtualViewDebugFeatures = exports.enableVirtualViewDebugFeatures = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableVirtualViewDebugFeatures', false);
var enableVirtualViewRenderState = exports.enableVirtualViewRenderState = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableVirtualViewRenderState', false);
var enableVirtualViewWindowFocusDetection = exports.enableVirtualViewWindowFocusDetection = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableVirtualViewWindowFocusDetection', false);
var fixMappingOfEventPrioritiesBetweenFabricAndReact = exports.fixMappingOfEventPrioritiesBetweenFabricAndReact = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('fixMappingOfEventPrioritiesBetweenFabricAndReact', false);
var fuseboxEnabledRelease = exports.fuseboxEnabledRelease = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('fuseboxEnabledRelease', false);
var fuseboxNetworkInspectionEnabled = exports.fuseboxNetworkInspectionEnabled = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('fuseboxNetworkInspectionEnabled', false);
var hideOffscreenVirtualViewsOnIOS = exports.hideOffscreenVirtualViewsOnIOS = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('hideOffscreenVirtualViewsOnIOS', false);
var preparedTextCacheSize = exports.preparedTextCacheSize = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('preparedTextCacheSize', 200);
var preventShadowTreeCommitExhaustion = exports.preventShadowTreeCommitExhaustion = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('preventShadowTreeCommitExhaustion', false);
var traceTurboModulePromiseRejectionsOnAndroid = exports.traceTurboModulePromiseRejectionsOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('traceTurboModulePromiseRejectionsOnAndroid', false);
var updateRuntimeShadowNodeReferencesOnCommit = exports.updateRuntimeShadowNodeReferencesOnCommit = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('updateRuntimeShadowNodeReferencesOnCommit', false);
var useAlwaysAvailableJSErrorHandling = exports.useAlwaysAvailableJSErrorHandling = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useAlwaysAvailableJSErrorHandling', false);
var useFabricInterop = exports.useFabricInterop = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useFabricInterop', true);
var useNativeViewConfigsInBridgelessMode = exports.useNativeViewConfigsInBridgelessMode = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useNativeViewConfigsInBridgelessMode', false);
var useOptimizedEventBatchingOnAndroid = exports.useOptimizedEventBatchingOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useOptimizedEventBatchingOnAndroid', false);
var useRawPropsJsiValue = exports.useRawPropsJsiValue = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useRawPropsJsiValue', false);
var useShadowNodeStateOnClone = exports.useShadowNodeStateOnClone = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useShadowNodeStateOnClone', false);
var useTurboModuleInterop = exports.useTurboModuleInterop = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useTurboModuleInterop', false);
var useTurboModules = exports.useTurboModules = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useTurboModules', false);
var virtualViewPrerenderRatio = exports.virtualViewPrerenderRatio = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('virtualViewPrerenderRatio', 5);
var override = exports.override = _ReactNativeFeatureFlagsBase.setOverrides;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfUmVhY3ROYXRpdmVGZWF0dXJlRmxhZ3NCYXNlIiwicmVxdWlyZSIsImpzT25seVRlc3RGbGFnIiwiZXhwb3J0cyIsImNyZWF0ZUphdmFTY3JpcHRGbGFnR2V0dGVyIiwiYWx3YXlzRmxhdHRlbkFuaW1hdGVkU3R5bGVzIiwiYW5pbWF0ZWRTaG91bGREZWJvdW5jZVF1ZXVlRmx1c2giLCJhbmltYXRlZFNob3VsZFVzZVNpbmdsZU9wIiwiYXZvaWRTdGF0ZVVwZGF0ZUluQW5pbWF0ZWRQcm9wc01lbW8iLCJkZWZlckZsYXRMaXN0Rm9jdXNDaGFuZ2VSZW5kZXJVcGRhdGUiLCJkaXNhYmxlSW50ZXJhY3Rpb25NYW5hZ2VyIiwiZW5hYmxlQWNjZXNzVG9Ib3N0VHJlZUluRmFicmljIiwiZml4VmlydHVhbGl6ZUxpc3RDb2xsYXBzZVdpbmRvd1NpemUiLCJpc0xheW91dEFuaW1hdGlvbkVuYWJsZWQiLCJyZWR1Y2VEZWZhdWx0UHJvcHNJblZpZXciLCJzY2hlZHVsZUFuaW1hdGVkQ2xlYW51cEluTWljcm90YXNrIiwic2hvdWxkVXNlQW5pbWF0ZWRPYmplY3RGb3JUcmFuc2Zvcm0iLCJzaG91bGRVc2VSZW1vdmVDbGlwcGVkU3Vidmlld3NBc0RlZmF1bHRPbklPUyIsInNob3VsZFVzZVNldE5hdGl2ZVByb3BzSW5GYWJyaWMiLCJ1dGlsaXplVG9rZW5zSW5JbnRlcnNlY3Rpb25PYnNlcnZlciIsImNvbW1vblRlc3RGbGFnIiwiY3JlYXRlTmF0aXZlRmxhZ0dldHRlciIsImNvbW1vblRlc3RGbGFnV2l0aG91dE5hdGl2ZUltcGxlbWVudGF0aW9uIiwiYW5pbWF0ZWRTaG91bGRTaWduYWxCYXRjaCIsImN4eE5hdGl2ZUFuaW1hdGVkRW5hYmxlZCIsImN4eE5hdGl2ZUFuaW1hdGVkUmVtb3ZlSnNTeW5jIiwiZGlzYWJsZU1haW5RdWV1ZVN5bmNEaXNwYXRjaElPUyIsImRpc2FibGVNb3VudEl0ZW1SZW9yZGVyaW5nQW5kcm9pZCIsImRpc2FibGVUZXh0TGF5b3V0TWFuYWdlckNhY2hlQW5kcm9pZCIsImVuYWJsZUFjY2Vzc2liaWxpdHlPcmRlciIsImVuYWJsZUFjY3VtdWxhdGVkVXBkYXRlc0luUmF3UHJvcHNBbmRyb2lkIiwiZW5hYmxlQW5kcm9pZFRleHRNZWFzdXJlbWVudE9wdGltaXphdGlvbnMiLCJlbmFibGVCcmlkZ2VsZXNzQXJjaGl0ZWN0dXJlIiwiZW5hYmxlQ3BwUHJvcHNJdGVyYXRvclNldHRlciIsImVuYWJsZUN1c3RvbUZvY3VzU2VhcmNoT25DbGlwcGVkRWxlbWVudHNBbmRyb2lkIiwiZW5hYmxlRGVzdHJveVNoYWRvd1RyZWVSZXZpc2lvbkFzeW5jIiwiZW5hYmxlRG91YmxlTWVhc3VyZW1lbnRGaXhBbmRyb2lkIiwiZW5hYmxlRWFnZXJSb290Vmlld0F0dGFjaG1lbnQiLCJlbmFibGVGYWJyaWNMb2dzIiwiZW5hYmxlRmFicmljUmVuZGVyZXIiLCJlbmFibGVGaXhGb3JQYXJlbnRUYWdEdXJpbmdSZXBhcmVudGluZyIsImVuYWJsZUZvbnRTY2FsZUNoYW5nZXNVcGRhdGluZ0xheW91dCIsImVuYWJsZUlPU1RleHRCYXNlbGluZU9mZnNldFBlckxpbmUiLCJlbmFibGVJT1NWaWV3Q2xpcFRvUGFkZGluZ0JveCIsImVuYWJsZUludGVyb3BWaWV3TWFuYWdlckNsYXNzTG9va1VwT3B0aW1pemF0aW9uSU9TIiwiZW5hYmxlTGF5b3V0QW5pbWF0aW9uc09uQW5kcm9pZCIsImVuYWJsZUxheW91dEFuaW1hdGlvbnNPbklPUyIsImVuYWJsZU1haW5RdWV1ZUNvb3JkaW5hdG9yT25JT1MiLCJlbmFibGVNYWluUXVldWVNb2R1bGVzT25JT1MiLCJlbmFibGVNb2R1bGVBcmd1bWVudE5TTnVsbENvbnZlcnNpb25JT1MiLCJlbmFibGVOYXRpdmVDU1NQYXJzaW5nIiwiZW5hYmxlTmV0d29ya0V2ZW50UmVwb3J0aW5nIiwiZW5hYmxlTmV3QmFja2dyb3VuZEFuZEJvcmRlckRyYXdhYmxlcyIsImVuYWJsZVByZXBhcmVkVGV4dExheW91dCIsImVuYWJsZVByb3BzVXBkYXRlUmVjb25jaWxpYXRpb25BbmRyb2lkIiwiZW5hYmxlUmVzb3VyY2VUaW1pbmdBUEkiLCJlbmFibGVTeW5jaHJvbm91c1N0YXRlVXBkYXRlcyIsImVuYWJsZVZpZXdDdWxsaW5nIiwiZW5hYmxlVmlld1JlY3ljbGluZyIsImVuYWJsZVZpZXdSZWN5Y2xpbmdGb3JUZXh0IiwiZW5hYmxlVmlld1JlY3ljbGluZ0ZvclZpZXciLCJlbmFibGVWaXJ0dWFsVmlld0RlYnVnRmVhdHVyZXMiLCJlbmFibGVWaXJ0dWFsVmlld1JlbmRlclN0YXRlIiwiZW5hYmxlVmlydHVhbFZpZXdXaW5kb3dGb2N1c0RldGVjdGlvbiIsImZpeE1hcHBpbmdPZkV2ZW50UHJpb3JpdGllc0JldHdlZW5GYWJyaWNBbmRSZWFjdCIsImZ1c2Vib3hFbmFibGVkUmVsZWFzZSIsImZ1c2Vib3hOZXR3b3JrSW5zcGVjdGlvbkVuYWJsZWQiLCJoaWRlT2Zmc2NyZWVuVmlydHVhbFZpZXdzT25JT1MiLCJwcmVwYXJlZFRleHRDYWNoZVNpemUiLCJwcmV2ZW50U2hhZG93VHJlZUNvbW1pdEV4aGF1c3Rpb24iLCJ0cmFjZVR1cmJvTW9kdWxlUHJvbWlzZVJlamVjdGlvbnNPbkFuZHJvaWQiLCJ1cGRhdGVSdW50aW1lU2hhZG93Tm9kZVJlZmVyZW5jZXNPbkNvbW1pdCIsInVzZUFsd2F5c0F2YWlsYWJsZUpTRXJyb3JIYW5kbGluZyIsInVzZUZhYnJpY0ludGVyb3AiLCJ1c2VOYXRpdmVWaWV3Q29uZmlnc0luQnJpZGdlbGVzc01vZGUiLCJ1c2VPcHRpbWl6ZWRFdmVudEJhdGNoaW5nT25BbmRyb2lkIiwidXNlUmF3UHJvcHNKc2lWYWx1ZSIsInVzZVNoYWRvd05vZGVTdGF0ZU9uQ2xvbmUiLCJ1c2VUdXJib01vZHVsZUludGVyb3AiLCJ1c2VUdXJib01vZHVsZXMiLCJ2aXJ0dWFsVmlld1ByZXJlbmRlclJhdGlvIiwib3ZlcnJpZGUiLCJzZXRPdmVycmlkZXMiXSwic291cmNlcyI6WyJSZWFjdE5hdGl2ZUZlYXR1cmVGbGFncy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGdlbmVyYXRlZCBTaWduZWRTb3VyY2U8PDk5OWE4ZDMyOWNkYWIyNThhYzY0YzAzYjI0ZjFhNTE2Pj5cbiAqIEBmbG93IHN0cmljdFxuICogQG5vZm9ybWF0XG4gKi9cblxuLyoqXG4gKiBJTVBPUlRBTlQ6IERvIE5PVCBtb2RpZnkgdGhpcyBmaWxlIGRpcmVjdGx5LlxuICpcbiAqIFRvIGNoYW5nZSB0aGUgZGVmaW5pdGlvbiBvZiB0aGUgZmxhZ3MsIGVkaXRcbiAqICAgcGFja2FnZXMvcmVhY3QtbmF0aXZlL3NjcmlwdHMvZmVhdHVyZWZsYWdzL1JlYWN0TmF0aXZlRmVhdHVyZUZsYWdzLmNvbmZpZy5qcy5cbiAqXG4gKiBUbyByZWdlbmVyYXRlIHRoaXMgY29kZSwgcnVuIHRoZSBmb2xsb3dpbmcgc2NyaXB0IGZyb20gdGhlIHJlcG8gcm9vdDpcbiAqICAgeWFybiBmZWF0dXJlZmxhZ3MgLS11cGRhdGVcbiAqL1xuXG5pbXBvcnQge1xuICB0eXBlIEdldHRlcixcbiAgdHlwZSBPdmVycmlkZXNGb3IsXG4gIGNyZWF0ZUphdmFTY3JpcHRGbGFnR2V0dGVyLFxuICBjcmVhdGVOYXRpdmVGbGFnR2V0dGVyLFxuICBzZXRPdmVycmlkZXMsXG59IGZyb20gJy4vUmVhY3ROYXRpdmVGZWF0dXJlRmxhZ3NCYXNlJztcblxuZXhwb3J0IHR5cGUgUmVhY3ROYXRpdmVGZWF0dXJlRmxhZ3NKc09ubHkgPSAkUmVhZE9ubHk8e1xuICBqc09ubHlUZXN0RmxhZzogR2V0dGVyPGJvb2xlYW4+LFxuICBhbHdheXNGbGF0dGVuQW5pbWF0ZWRTdHlsZXM6IEdldHRlcjxib29sZWFuPixcbiAgYW5pbWF0ZWRTaG91bGREZWJvdW5jZVF1ZXVlRmx1c2g6IEdldHRlcjxib29sZWFuPixcbiAgYW5pbWF0ZWRTaG91bGRVc2VTaW5nbGVPcDogR2V0dGVyPGJvb2xlYW4+LFxuICBhdm9pZFN0YXRlVXBkYXRlSW5BbmltYXRlZFByb3BzTWVtbzogR2V0dGVyPGJvb2xlYW4+LFxuICBkZWZlckZsYXRMaXN0Rm9jdXNDaGFuZ2VSZW5kZXJVcGRhdGU6IEdldHRlcjxib29sZWFuPixcbiAgZGlzYWJsZUludGVyYWN0aW9uTWFuYWdlcjogR2V0dGVyPGJvb2xlYW4+LFxuICBlbmFibGVBY2Nlc3NUb0hvc3RUcmVlSW5GYWJyaWM6IEdldHRlcjxib29sZWFuPixcbiAgZml4VmlydHVhbGl6ZUxpc3RDb2xsYXBzZVdpbmRvd1NpemU6IEdldHRlcjxib29sZWFuPixcbiAgaXNMYXlvdXRBbmltYXRpb25FbmFibGVkOiBHZXR0ZXI8Ym9vbGVhbj4sXG4gIHJlZHVjZURlZmF1bHRQcm9wc0luVmlldzogR2V0dGVyPGJvb2xlYW4+LFxuICBzY2hlZHVsZUFuaW1hdGVkQ2xlYW51cEluTWljcm90YXNrOiBHZXR0ZXI8Ym9vbGVhbj4sXG4gIHNob3VsZFVzZUFuaW1hdGVkT2JqZWN0Rm9yVHJhbnNmb3JtOiBHZXR0ZXI8Ym9vbGVhbj4sXG4gIHNob3VsZFVzZVJlbW92ZUNsaXBwZWRTdWJ2aWV3c0FzRGVmYXVsdE9uSU9TOiBHZXR0ZXI8Ym9vbGVhbj4sXG4gIHNob3VsZFVzZVNldE5hdGl2ZVByb3BzSW5GYWJyaWM6IEdldHRlcjxib29sZWFuPixcbiAgdXRpbGl6ZVRva2Vuc0luSW50ZXJzZWN0aW9uT2JzZXJ2ZXI6IEdldHRlcjxib29sZWFuPixcbn0+O1xuXG5leHBvcnQgdHlwZSBSZWFjdE5hdGl2ZUZlYXR1cmVGbGFnc0pzT25seU92ZXJyaWRlcyA9IE92ZXJyaWRlc0ZvcjxSZWFjdE5hdGl2ZUZlYXR1cmVGbGFnc0pzT25seT47XG5cbmV4cG9ydCB0eXBlIFJlYWN0TmF0aXZlRmVhdHVyZUZsYWdzID0gJFJlYWRPbmx5PHtcbiAgLi4uUmVhY3ROYXRpdmVGZWF0dXJlRmxhZ3NKc09ubHksXG4gIGNvbW1vblRlc3RGbGFnOiBHZXR0ZXI8Ym9vbGVhbj4sXG4gIGNvbW1vblRlc3RGbGFnV2l0aG91dE5hdGl2ZUltcGxlbWVudGF0aW9uOiBHZXR0ZXI8Ym9vbGVhbj4sXG4gIGFuaW1hdGVkU2hvdWxkU2lnbmFsQmF0Y2g6IEdldHRlcjxib29sZWFuPixcbiAgY3h4TmF0aXZlQW5pbWF0ZWRFbmFibGVkOiBHZXR0ZXI8Ym9vbGVhbj4sXG4gIGN4eE5hdGl2ZUFuaW1hdGVkUmVtb3ZlSnNTeW5jOiBHZXR0ZXI8Ym9vbGVhbj4sXG4gIGRpc2FibGVNYWluUXVldWVTeW5jRGlzcGF0Y2hJT1M6IEdldHRlcjxib29sZWFuPixcbiAgZGlzYWJsZU1vdW50SXRlbVJlb3JkZXJpbmdBbmRyb2lkOiBHZXR0ZXI8Ym9vbGVhbj4sXG4gIGRpc2FibGVUZXh0TGF5b3V0TWFuYWdlckNhY2hlQW5kcm9pZDogR2V0dGVyPGJvb2xlYW4+LFxuICBlbmFibGVBY2Nlc3NpYmlsaXR5T3JkZXI6IEdldHRlcjxib29sZWFuPixcbiAgZW5hYmxlQWNjdW11bGF0ZWRVcGRhdGVzSW5SYXdQcm9wc0FuZHJvaWQ6IEdldHRlcjxib29sZWFuPixcbiAgZW5hYmxlQW5kcm9pZFRleHRNZWFzdXJlbWVudE9wdGltaXphdGlvbnM6IEdldHRlcjxib29sZWFuPixcbiAgZW5hYmxlQnJpZGdlbGVzc0FyY2hpdGVjdHVyZTogR2V0dGVyPGJvb2xlYW4+LFxuICBlbmFibGVDcHBQcm9wc0l0ZXJhdG9yU2V0dGVyOiBHZXR0ZXI8Ym9vbGVhbj4sXG4gIGVuYWJsZUN1c3RvbUZvY3VzU2VhcmNoT25DbGlwcGVkRWxlbWVudHNBbmRyb2lkOiBHZXR0ZXI8Ym9vbGVhbj4sXG4gIGVuYWJsZURlc3Ryb3lTaGFkb3dUcmVlUmV2aXNpb25Bc3luYzogR2V0dGVyPGJvb2xlYW4+LFxuICBlbmFibGVEb3VibGVNZWFzdXJlbWVudEZpeEFuZHJvaWQ6IEdldHRlcjxib29sZWFuPixcbiAgZW5hYmxlRWFnZXJSb290Vmlld0F0dGFjaG1lbnQ6IEdldHRlcjxib29sZWFuPixcbiAgZW5hYmxlRmFicmljTG9nczogR2V0dGVyPGJvb2xlYW4+LFxuICBlbmFibGVGYWJyaWNSZW5kZXJlcjogR2V0dGVyPGJvb2xlYW4+LFxuICBlbmFibGVGaXhGb3JQYXJlbnRUYWdEdXJpbmdSZXBhcmVudGluZzogR2V0dGVyPGJvb2xlYW4+LFxuICBlbmFibGVGb250U2NhbGVDaGFuZ2VzVXBkYXRpbmdMYXlvdXQ6IEdldHRlcjxib29sZWFuPixcbiAgZW5hYmxlSU9TVGV4dEJhc2VsaW5lT2Zmc2V0UGVyTGluZTogR2V0dGVyPGJvb2xlYW4+LFxuICBlbmFibGVJT1NWaWV3Q2xpcFRvUGFkZGluZ0JveDogR2V0dGVyPGJvb2xlYW4+LFxuICBlbmFibGVJbnRlcm9wVmlld01hbmFnZXJDbGFzc0xvb2tVcE9wdGltaXphdGlvbklPUzogR2V0dGVyPGJvb2xlYW4+LFxuICBlbmFibGVMYXlvdXRBbmltYXRpb25zT25BbmRyb2lkOiBHZXR0ZXI8Ym9vbGVhbj4sXG4gIGVuYWJsZUxheW91dEFuaW1hdGlvbnNPbklPUzogR2V0dGVyPGJvb2xlYW4+LFxuICBlbmFibGVNYWluUXVldWVDb29yZGluYXRvck9uSU9TOiBHZXR0ZXI8Ym9vbGVhbj4sXG4gIGVuYWJsZU1haW5RdWV1ZU1vZHVsZXNPbklPUzogR2V0dGVyPGJvb2xlYW4+LFxuICBlbmFibGVNb2R1bGVBcmd1bWVudE5TTnVsbENvbnZlcnNpb25JT1M6IEdldHRlcjxib29sZWFuPixcbiAgZW5hYmxlTmF0aXZlQ1NTUGFyc2luZzogR2V0dGVyPGJvb2xlYW4+LFxuICBlbmFibGVOZXR3b3JrRXZlbnRSZXBvcnRpbmc6IEdldHRlcjxib29sZWFuPixcbiAgZW5hYmxlTmV3QmFja2dyb3VuZEFuZEJvcmRlckRyYXdhYmxlczogR2V0dGVyPGJvb2xlYW4+LFxuICBlbmFibGVQcmVwYXJlZFRleHRMYXlvdXQ6IEdldHRlcjxib29sZWFuPixcbiAgZW5hYmxlUHJvcHNVcGRhdGVSZWNvbmNpbGlhdGlvbkFuZHJvaWQ6IEdldHRlcjxib29sZWFuPixcbiAgZW5hYmxlUmVzb3VyY2VUaW1pbmdBUEk6IEdldHRlcjxib29sZWFuPixcbiAgZW5hYmxlU3luY2hyb25vdXNTdGF0ZVVwZGF0ZXM6IEdldHRlcjxib29sZWFuPixcbiAgZW5hYmxlVmlld0N1bGxpbmc6IEdldHRlcjxib29sZWFuPixcbiAgZW5hYmxlVmlld1JlY3ljbGluZzogR2V0dGVyPGJvb2xlYW4+LFxuICBlbmFibGVWaWV3UmVjeWNsaW5nRm9yVGV4dDogR2V0dGVyPGJvb2xlYW4+LFxuICBlbmFibGVWaWV3UmVjeWNsaW5nRm9yVmlldzogR2V0dGVyPGJvb2xlYW4+LFxuICBlbmFibGVWaXJ0dWFsVmlld0RlYnVnRmVhdHVyZXM6IEdldHRlcjxib29sZWFuPixcbiAgZW5hYmxlVmlydHVhbFZpZXdSZW5kZXJTdGF0ZTogR2V0dGVyPGJvb2xlYW4+LFxuICBlbmFibGVWaXJ0dWFsVmlld1dpbmRvd0ZvY3VzRGV0ZWN0aW9uOiBHZXR0ZXI8Ym9vbGVhbj4sXG4gIGZpeE1hcHBpbmdPZkV2ZW50UHJpb3JpdGllc0JldHdlZW5GYWJyaWNBbmRSZWFjdDogR2V0dGVyPGJvb2xlYW4+LFxuICBmdXNlYm94RW5hYmxlZFJlbGVhc2U6IEdldHRlcjxib29sZWFuPixcbiAgZnVzZWJveE5ldHdvcmtJbnNwZWN0aW9uRW5hYmxlZDogR2V0dGVyPGJvb2xlYW4+LFxuICBoaWRlT2Zmc2NyZWVuVmlydHVhbFZpZXdzT25JT1M6IEdldHRlcjxib29sZWFuPixcbiAgcHJlcGFyZWRUZXh0Q2FjaGVTaXplOiBHZXR0ZXI8bnVtYmVyPixcbiAgcHJldmVudFNoYWRvd1RyZWVDb21taXRFeGhhdXN0aW9uOiBHZXR0ZXI8Ym9vbGVhbj4sXG4gIHRyYWNlVHVyYm9Nb2R1bGVQcm9taXNlUmVqZWN0aW9uc09uQW5kcm9pZDogR2V0dGVyPGJvb2xlYW4+LFxuICB1cGRhdGVSdW50aW1lU2hhZG93Tm9kZVJlZmVyZW5jZXNPbkNvbW1pdDogR2V0dGVyPGJvb2xlYW4+LFxuICB1c2VBbHdheXNBdmFpbGFibGVKU0Vycm9ySGFuZGxpbmc6IEdldHRlcjxib29sZWFuPixcbiAgdXNlRmFicmljSW50ZXJvcDogR2V0dGVyPGJvb2xlYW4+LFxuICB1c2VOYXRpdmVWaWV3Q29uZmlnc0luQnJpZGdlbGVzc01vZGU6IEdldHRlcjxib29sZWFuPixcbiAgdXNlT3B0aW1pemVkRXZlbnRCYXRjaGluZ09uQW5kcm9pZDogR2V0dGVyPGJvb2xlYW4+LFxuICB1c2VSYXdQcm9wc0pzaVZhbHVlOiBHZXR0ZXI8Ym9vbGVhbj4sXG4gIHVzZVNoYWRvd05vZGVTdGF0ZU9uQ2xvbmU6IEdldHRlcjxib29sZWFuPixcbiAgdXNlVHVyYm9Nb2R1bGVJbnRlcm9wOiBHZXR0ZXI8Ym9vbGVhbj4sXG4gIHVzZVR1cmJvTW9kdWxlczogR2V0dGVyPGJvb2xlYW4+LFxuICB2aXJ0dWFsVmlld1ByZXJlbmRlclJhdGlvOiBHZXR0ZXI8bnVtYmVyPixcbn0+O1xuXG4vKipcbiAqIEpTLW9ubHkgZmxhZyBmb3IgdGVzdGluZy4gRG8gTk9UIG1vZGlmeS5cbiAqL1xuZXhwb3J0IGNvbnN0IGpzT25seVRlc3RGbGFnOiBHZXR0ZXI8Ym9vbGVhbj4gPSBjcmVhdGVKYXZhU2NyaXB0RmxhZ0dldHRlcignanNPbmx5VGVzdEZsYWcnLCBmYWxzZSk7XG5cbi8qKlxuICogQ2hhbmdlcyBgQW5pbWF0ZWRgIHRvIGFsd2F5cyBmbGF0dGVuIHN0eWxlLCBmaXhpbmcgYSBidWcgd2l0aCBzaGFkb3dlZCBgQW5pbWF0ZWROb2RlYCBpbnN0YW5jZXMuXG4gKi9cbmV4cG9ydCBjb25zdCBhbHdheXNGbGF0dGVuQW5pbWF0ZWRTdHlsZXM6IEdldHRlcjxib29sZWFuPiA9IGNyZWF0ZUphdmFTY3JpcHRGbGFnR2V0dGVyKCdhbHdheXNGbGF0dGVuQW5pbWF0ZWRTdHlsZXMnLCBmYWxzZSk7XG5cbi8qKlxuICogRW5hYmxlcyBhbiBleHBlcmltZW50YWwgZmx1c2gtcXVldWUgZGVib3VuY2luZyBpbiBBbmltYXRlZC5qcy5cbiAqL1xuZXhwb3J0IGNvbnN0IGFuaW1hdGVkU2hvdWxkRGVib3VuY2VRdWV1ZUZsdXNoOiBHZXR0ZXI8Ym9vbGVhbj4gPSBjcmVhdGVKYXZhU2NyaXB0RmxhZ0dldHRlcignYW5pbWF0ZWRTaG91bGREZWJvdW5jZVF1ZXVlRmx1c2gnLCBmYWxzZSk7XG5cbi8qKlxuICogRW5hYmxlcyBhbiBleHBlcmltZW50YWwgbWVnYS1vcGVyYXRpb24gZm9yIEFuaW1hdGVkLmpzIHRoYXQgcmVwbGFjZXMgbWFueSBjYWxscyB0byBuYXRpdmUgd2l0aCBhIHNpbmdsZSBjYWxsIGludG8gbmF0aXZlLCB0byByZWR1Y2UgSlNJL0pOSSB0cmFmZmljLlxuICovXG5leHBvcnQgY29uc3QgYW5pbWF0ZWRTaG91bGRVc2VTaW5nbGVPcDogR2V0dGVyPGJvb2xlYW4+ID0gY3JlYXRlSmF2YVNjcmlwdEZsYWdHZXR0ZXIoJ2FuaW1hdGVkU2hvdWxkVXNlU2luZ2xlT3AnLCBmYWxzZSk7XG5cbi8qKlxuICogQ2hhbmdlcyBgdXNlQW5pbWF0ZWRQcm9wc01lbW9gIHRvIGF2b2lkIHN0YXRlIHVwZGF0ZXMgdG8gaW52YWxpZGF0ZSB0aGUgY2FjaGVkIGBBbmltYXRlZFByb3BzYC5cbiAqL1xuZXhwb3J0IGNvbnN0IGF2b2lkU3RhdGVVcGRhdGVJbkFuaW1hdGVkUHJvcHNNZW1vOiBHZXR0ZXI8Ym9vbGVhbj4gPSBjcmVhdGVKYXZhU2NyaXB0RmxhZ0dldHRlcignYXZvaWRTdGF0ZVVwZGF0ZUluQW5pbWF0ZWRQcm9wc01lbW8nLCB0cnVlKTtcblxuLyoqXG4gKiBVc2UgdGhlIGRlZmVycmVkIGNlbGwgcmVuZGVyIHVwZGF0ZSBtZWNoYW5pc20gZm9yIGZvY3VzIGNoYW5nZSBpbiBGbGF0TGlzdC5cbiAqL1xuZXhwb3J0IGNvbnN0IGRlZmVyRmxhdExpc3RGb2N1c0NoYW5nZVJlbmRlclVwZGF0ZTogR2V0dGVyPGJvb2xlYW4+ID0gY3JlYXRlSmF2YVNjcmlwdEZsYWdHZXR0ZXIoJ2RlZmVyRmxhdExpc3RGb2N1c0NoYW5nZVJlbmRlclVwZGF0ZScsIGZhbHNlKTtcblxuLyoqXG4gKiBEaXNhYmxlcyBJbnRlcmFjdGlvbk1hbmFnZXIgYW5kIHJlcGxhY2VzIGl0cyBzY2hlZHVsZXIgd2l0aCBgc2V0SW1tZWRpYXRlYC5cbiAqL1xuZXhwb3J0IGNvbnN0IGRpc2FibGVJbnRlcmFjdGlvbk1hbmFnZXI6IEdldHRlcjxib29sZWFuPiA9IGNyZWF0ZUphdmFTY3JpcHRGbGFnR2V0dGVyKCdkaXNhYmxlSW50ZXJhY3Rpb25NYW5hZ2VyJywgdHJ1ZSk7XG5cbi8qKlxuICogRW5hYmxlcyBhY2Nlc3MgdG8gdGhlIGhvc3QgdHJlZSBpbiBGYWJyaWMgdXNpbmcgRE9NLWNvbXBhdGlibGUgQVBJcy5cbiAqL1xuZXhwb3J0IGNvbnN0IGVuYWJsZUFjY2Vzc1RvSG9zdFRyZWVJbkZhYnJpYzogR2V0dGVyPGJvb2xlYW4+ID0gY3JlYXRlSmF2YVNjcmlwdEZsYWdHZXR0ZXIoJ2VuYWJsZUFjY2Vzc1RvSG9zdFRyZWVJbkZhYnJpYycsIGZhbHNlKTtcblxuLyoqXG4gKiBGaXhpbmcgYW4gZWRnZSBjYXNlIHdoZXJlIHRoZSBjdXJyZW50IHdpbmRvdyBzaXplIGlzIG5vdCBwcm9wZXJseSBjYWxjdWxhdGVkIHdpdGggZmFzdCBzY3JvbGxpbmcuIFdpbmRvdyBzaXplIGNvbGxhcHNlZCB0byAxIGVsZW1lbnQgZXZlbiBpZiB3aW5kb3dTaXplIG1vcmUgdGhhbiB0aGUgY3VycmVudCBhbW91bnQgb2YgZWxlbWVudHNcbiAqL1xuZXhwb3J0IGNvbnN0IGZpeFZpcnR1YWxpemVMaXN0Q29sbGFwc2VXaW5kb3dTaXplOiBHZXR0ZXI8Ym9vbGVhbj4gPSBjcmVhdGVKYXZhU2NyaXB0RmxhZ0dldHRlcignZml4VmlydHVhbGl6ZUxpc3RDb2xsYXBzZVdpbmRvd1NpemUnLCBmYWxzZSk7XG5cbi8qKlxuICogRnVuY3Rpb24gdXNlZCB0byBlbmFibGUgLyBkaXNhYmxlZCBMYXlvdXQgQW5pbWF0aW9ucyBpbiBSZWFjdCBOYXRpdmUuXG4gKi9cbmV4cG9ydCBjb25zdCBpc0xheW91dEFuaW1hdGlvbkVuYWJsZWQ6IEdldHRlcjxib29sZWFuPiA9IGNyZWF0ZUphdmFTY3JpcHRGbGFnR2V0dGVyKCdpc0xheW91dEFuaW1hdGlvbkVuYWJsZWQnLCB0cnVlKTtcblxuLyoqXG4gKiBPcHRpbWl6ZSBob3cgZGVmYXVsdCAoYWNjZXNzaWJpbGl0eSkgcHJvcHMgYXJlIHByb2Nlc3NlZCBpbiBWaWV3IHRvIGF2b2lkIHVubmVjZXNzYXJ5IGtleXMuXG4gKi9cbmV4cG9ydCBjb25zdCByZWR1Y2VEZWZhdWx0UHJvcHNJblZpZXc6IEdldHRlcjxib29sZWFuPiA9IGNyZWF0ZUphdmFTY3JpcHRGbGFnR2V0dGVyKCdyZWR1Y2VEZWZhdWx0UHJvcHNJblZpZXcnLCB0cnVlKTtcblxuLyoqXG4gKiBDaGFuZ2VzIHRoZSBjbGVhbnVwIG9mIGBBbmltYXRlZFByb3BzYCB0byBvY2N1ciBpbiBhIG1pY3JvdGFzayBpbnN0ZWFkIG9mIHN5bmNocm9ub3VzbHkgZHVyaW5nIGVmZmVjdCBjbGVhbnVwIChmb3IgdW5tb3VudCkgb3Igc3Vic2VxdWVudCBtb3VudHMgKGZvciB1cGRhdGVzKS5cbiAqL1xuZXhwb3J0IGNvbnN0IHNjaGVkdWxlQW5pbWF0ZWRDbGVhbnVwSW5NaWNyb3Rhc2s6IEdldHRlcjxib29sZWFuPiA9IGNyZWF0ZUphdmFTY3JpcHRGbGFnR2V0dGVyKCdzY2hlZHVsZUFuaW1hdGVkQ2xlYW51cEluTWljcm90YXNrJywgdHJ1ZSk7XG5cbi8qKlxuICogRW5hYmxlcyB1c2Ugb2YgQW5pbWF0ZWRPYmplY3QgZm9yIGFuaW1hdGluZyB0cmFuc2Zvcm0gdmFsdWVzLlxuICovXG5leHBvcnQgY29uc3Qgc2hvdWxkVXNlQW5pbWF0ZWRPYmplY3RGb3JUcmFuc2Zvcm06IEdldHRlcjxib29sZWFuPiA9IGNyZWF0ZUphdmFTY3JpcHRGbGFnR2V0dGVyKCdzaG91bGRVc2VBbmltYXRlZE9iamVjdEZvclRyYW5zZm9ybScsIGZhbHNlKTtcblxuLyoqXG4gKiByZW1vdmVDbGlwcGVkU3Vidmlld3MgcHJvcCB3aWxsIGJlIHVzZWQgYXMgdGhlIGRlZmF1bHQgaW4gRmxhdExpc3Qgb24gaU9TIHRvIG1hdGNoIEFuZHJvaWRcbiAqL1xuZXhwb3J0IGNvbnN0IHNob3VsZFVzZVJlbW92ZUNsaXBwZWRTdWJ2aWV3c0FzRGVmYXVsdE9uSU9TOiBHZXR0ZXI8Ym9vbGVhbj4gPSBjcmVhdGVKYXZhU2NyaXB0RmxhZ0dldHRlcignc2hvdWxkVXNlUmVtb3ZlQ2xpcHBlZFN1YnZpZXdzQXNEZWZhdWx0T25JT1MnLCBmYWxzZSk7XG5cbi8qKlxuICogRW5hYmxlcyB1c2Ugb2Ygc2V0TmF0aXZlUHJvcHMgaW4gSlMgZHJpdmVuIGFuaW1hdGlvbnMuXG4gKi9cbmV4cG9ydCBjb25zdCBzaG91bGRVc2VTZXROYXRpdmVQcm9wc0luRmFicmljOiBHZXR0ZXI8Ym9vbGVhbj4gPSBjcmVhdGVKYXZhU2NyaXB0RmxhZ0dldHRlcignc2hvdWxkVXNlU2V0TmF0aXZlUHJvcHNJbkZhYnJpYycsIHRydWUpO1xuXG4vKipcbiAqIFVzZSB0b2tlbnMgaW4gSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgdnMgU2hhZG93Tm9kZS5cbiAqL1xuZXhwb3J0IGNvbnN0IHV0aWxpemVUb2tlbnNJbkludGVyc2VjdGlvbk9ic2VydmVyOiBHZXR0ZXI8Ym9vbGVhbj4gPSBjcmVhdGVKYXZhU2NyaXB0RmxhZ0dldHRlcigndXRpbGl6ZVRva2Vuc0luSW50ZXJzZWN0aW9uT2JzZXJ2ZXInLCB0cnVlKTtcblxuLyoqXG4gKiBDb21tb24gZmxhZyBmb3IgdGVzdGluZy4gRG8gTk9UIG1vZGlmeS5cbiAqL1xuZXhwb3J0IGNvbnN0IGNvbW1vblRlc3RGbGFnOiBHZXR0ZXI8Ym9vbGVhbj4gPSBjcmVhdGVOYXRpdmVGbGFnR2V0dGVyKCdjb21tb25UZXN0RmxhZycsIGZhbHNlKTtcbi8qKlxuICogQ29tbW9uIGZsYWcgZm9yIHRlc3RpbmcgKHdpdGhvdXQgbmF0aXZlIGltcGxlbWVudGF0aW9uKS4gRG8gTk9UIG1vZGlmeS5cbiAqL1xuZXhwb3J0IGNvbnN0IGNvbW1vblRlc3RGbGFnV2l0aG91dE5hdGl2ZUltcGxlbWVudGF0aW9uOiBHZXR0ZXI8Ym9vbGVhbj4gPSBjcmVhdGVOYXRpdmVGbGFnR2V0dGVyKCdjb21tb25UZXN0RmxhZ1dpdGhvdXROYXRpdmVJbXBsZW1lbnRhdGlvbicsIGZhbHNlKTtcbi8qKlxuICogRW5hYmxlcyBzdGFydC0gYW5kIGZpbmlzaE9wZXJhdGlvbkJhdGNoIG9uIGFueSBwbGF0Zm9ybS5cbiAqL1xuZXhwb3J0IGNvbnN0IGFuaW1hdGVkU2hvdWxkU2lnbmFsQmF0Y2g6IEdldHRlcjxib29sZWFuPiA9IGNyZWF0ZU5hdGl2ZUZsYWdHZXR0ZXIoJ2FuaW1hdGVkU2hvdWxkU2lnbmFsQmF0Y2gnLCBmYWxzZSk7XG4vKipcbiAqIFVzZSBhIEMrKyBpbXBsZW1lbnRhdGlvbiBvZiBOYXRpdmUgQW5pbWF0ZWQgaW5zdGVhZCBvZiB0aGUgcGxhdGZvcm0gaW1wbGVtZW50YXRpb24uXG4gKi9cbmV4cG9ydCBjb25zdCBjeHhOYXRpdmVBbmltYXRlZEVuYWJsZWQ6IEdldHRlcjxib29sZWFuPiA9IGNyZWF0ZU5hdGl2ZUZsYWdHZXR0ZXIoJ2N4eE5hdGl2ZUFuaW1hdGVkRW5hYmxlZCcsIGZhbHNlKTtcbi8qKlxuICogUmVtb3ZlcyBKUyBzeW5jIGF0IGVuZCBvZiBuYXRpdmUgYW5pbWF0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBjeHhOYXRpdmVBbmltYXRlZFJlbW92ZUpzU3luYzogR2V0dGVyPGJvb2xlYW4+ID0gY3JlYXRlTmF0aXZlRmxhZ0dldHRlcignY3h4TmF0aXZlQW5pbWF0ZWRSZW1vdmVKc1N5bmMnLCBmYWxzZSk7XG4vKipcbiAqIERpc2FibGUgc3luYyBkaXNwYXRjaCBvbiB0aGUgbWFpbiBxdWV1ZSBvbiBpT1NcbiAqL1xuZXhwb3J0IGNvbnN0IGRpc2FibGVNYWluUXVldWVTeW5jRGlzcGF0Y2hJT1M6IEdldHRlcjxib29sZWFuPiA9IGNyZWF0ZU5hdGl2ZUZsYWdHZXR0ZXIoJ2Rpc2FibGVNYWluUXVldWVTeW5jRGlzcGF0Y2hJT1MnLCBmYWxzZSk7XG4vKipcbiAqIFByZXZlbnQgRmFicmljTW91bnRpbmdNYW5hZ2VyIGZyb20gcmVvcmRlcmluZyBtb3VudEl0ZW1zLCB3aGljaCBtYXkgbGVhZCB0byBpbnZhbGlkIHN0YXRlIG9uIHRoZSBVSSB0aHJlYWRcbiAqL1xuZXhwb3J0IGNvbnN0IGRpc2FibGVNb3VudEl0ZW1SZW9yZGVyaW5nQW5kcm9pZDogR2V0dGVyPGJvb2xlYW4+ID0gY3JlYXRlTmF0aXZlRmxhZ0dldHRlcignZGlzYWJsZU1vdW50SXRlbVJlb3JkZXJpbmdBbmRyb2lkJywgZmFsc2UpO1xuLyoqXG4gKiBUdXJucyBvZmYgdGhlIGdsb2JhbCBtZWFzdXJlbWVudCBjYWNoZSB1c2VkIGJ5IFRleHRMYXlvdXRNYW5hZ2VyIG9uIEFuZHJvaWQuXG4gKi9cbmV4cG9ydCBjb25zdCBkaXNhYmxlVGV4dExheW91dE1hbmFnZXJDYWNoZUFuZHJvaWQ6IEdldHRlcjxib29sZWFuPiA9IGNyZWF0ZU5hdGl2ZUZsYWdHZXR0ZXIoJ2Rpc2FibGVUZXh0TGF5b3V0TWFuYWdlckNhY2hlQW5kcm9pZCcsIGZhbHNlKTtcbi8qKlxuICogV2hlbiBlbmFibGVkLCB0aGUgYWNjZXNzaWJpbGl0eU9yZGVyIHByb3Agd2lsbCBwcm9wYWdhdGUgdG8gbmF0aXZlIHBsYXRmb3JtcyBhbmQgZGVmaW5lIHRoZSBhY2Nlc3NpYmlsaXR5IG9yZGVyLlxuICovXG5leHBvcnQgY29uc3QgZW5hYmxlQWNjZXNzaWJpbGl0eU9yZGVyOiBHZXR0ZXI8Ym9vbGVhbj4gPSBjcmVhdGVOYXRpdmVGbGFnR2V0dGVyKCdlbmFibGVBY2Nlc3NpYmlsaXR5T3JkZXInLCBmYWxzZSk7XG4vKipcbiAqIFdoZW4gZW5hYmxlZCwgQW5kcm9pZCB3aWxsIGFjY3VtdWxhdGUgdXBkYXRlcyBpbiByYXdQcm9wcyB0byByZWR1Y2UgdGhlIG51bWJlciBvZiBtb3VudGluZyBpbnN0cnVjdGlvbnMgZm9yIGNhc2NhZGluZyByZS1yZW5kZXJzLlxuICovXG5leHBvcnQgY29uc3QgZW5hYmxlQWNjdW11bGF0ZWRVcGRhdGVzSW5SYXdQcm9wc0FuZHJvaWQ6IEdldHRlcjxib29sZWFuPiA9IGNyZWF0ZU5hdGl2ZUZsYWdHZXR0ZXIoJ2VuYWJsZUFjY3VtdWxhdGVkVXBkYXRlc0luUmF3UHJvcHNBbmRyb2lkJywgZmFsc2UpO1xuLyoqXG4gKiBFbmFibGVzIHZhcmlvdXMgb3B0aW1pemF0aW9ucyB0aHJvdWdob3V0IHRoZSBwYXRoIG9mIG1lYXN1cmluZyB0ZXh0IG9uIEFuZHJvaWQuXG4gKi9cbmV4cG9ydCBjb25zdCBlbmFibGVBbmRyb2lkVGV4dE1lYXN1cmVtZW50T3B0aW1pemF0aW9uczogR2V0dGVyPGJvb2xlYW4+ID0gY3JlYXRlTmF0aXZlRmxhZ0dldHRlcignZW5hYmxlQW5kcm9pZFRleHRNZWFzdXJlbWVudE9wdGltaXphdGlvbnMnLCBmYWxzZSk7XG4vKipcbiAqIEZlYXR1cmUgZmxhZyB0byBlbmFibGUgdGhlIG5ldyBicmlkZ2VsZXNzIGFyY2hpdGVjdHVyZS4gTm90ZTogRW5hYmxpbmcgdGhpcyB3aWxsIGZvcmNlIGVuYWJsZSB0aGUgZm9sbG93aW5nIGZsYWdzOiBgdXNlVHVyYm9Nb2R1bGVzYCAmIGBlbmFibGVGYWJyaWNSZW5kZXJlcmAuXG4gKi9cbmV4cG9ydCBjb25zdCBlbmFibGVCcmlkZ2VsZXNzQXJjaGl0ZWN0dXJlOiBHZXR0ZXI8Ym9vbGVhbj4gPSBjcmVhdGVOYXRpdmVGbGFnR2V0dGVyKCdlbmFibGVCcmlkZ2VsZXNzQXJjaGl0ZWN0dXJlJywgZmFsc2UpO1xuLyoqXG4gKiBFbmFibGUgcHJvcCBpdGVyYXRvciBzZXR0ZXItc3R5bGUgY29uc3RydWN0aW9uIG9mIFByb3BzIGluIEMrKyAodGhpcyBmbGFnIGlzIG5vdCB1c2VkIGluIEphdmEpLlxuICovXG5leHBvcnQgY29uc3QgZW5hYmxlQ3BwUHJvcHNJdGVyYXRvclNldHRlcjogR2V0dGVyPGJvb2xlYW4+ID0gY3JlYXRlTmF0aXZlRmxhZ0dldHRlcignZW5hYmxlQ3BwUHJvcHNJdGVyYXRvclNldHRlcicsIGZhbHNlKTtcbi8qKlxuICogVGhpcyBlbmFibGVzIHRoZSBmYWJyaWMgaW1wbGVtZW50YXRpb24gb2YgZm9jdXMgc2VhcmNoIHNvIHRoYXQgd2UgY2FuIGZvY3VzIGNsaXBwZWQgZWxlbWVudHNcbiAqL1xuZXhwb3J0IGNvbnN0IGVuYWJsZUN1c3RvbUZvY3VzU2VhcmNoT25DbGlwcGVkRWxlbWVudHNBbmRyb2lkOiBHZXR0ZXI8Ym9vbGVhbj4gPSBjcmVhdGVOYXRpdmVGbGFnR2V0dGVyKCdlbmFibGVDdXN0b21Gb2N1c1NlYXJjaE9uQ2xpcHBlZEVsZW1lbnRzQW5kcm9pZCcsIHRydWUpO1xuLyoqXG4gKiBFbmFibGVzIGRlc3RydWN0b3IgY2FsbHMgZm9yIFNoYWRvd1RyZWVSZXZpc2lvbiBpbiB0aGUgYmFja2dyb3VuZCB0byByZWR1Y2UgVUkgdGhyZWFkIHdvcmsuXG4gKi9cbmV4cG9ydCBjb25zdCBlbmFibGVEZXN0cm95U2hhZG93VHJlZVJldmlzaW9uQXN5bmM6IEdldHRlcjxib29sZWFuPiA9IGNyZWF0ZU5hdGl2ZUZsYWdHZXR0ZXIoJ2VuYWJsZURlc3Ryb3lTaGFkb3dUcmVlUmV2aXNpb25Bc3luYycsIGZhbHNlKTtcbi8qKlxuICogV2hlbiBlbmFibGVkIGEgc3Vic2V0IG9mIGNvbXBvbmVudHMgd2lsbCBhdm9pZCBkb3VibGUgbWVhc3VyZW1lbnQgb24gQW5kcm9pZC5cbiAqL1xuZXhwb3J0IGNvbnN0IGVuYWJsZURvdWJsZU1lYXN1cmVtZW50Rml4QW5kcm9pZDogR2V0dGVyPGJvb2xlYW4+ID0gY3JlYXRlTmF0aXZlRmxhZ0dldHRlcignZW5hYmxlRG91YmxlTWVhc3VyZW1lbnRGaXhBbmRyb2lkJywgZmFsc2UpO1xuLyoqXG4gKiBGZWF0dXJlIGZsYWcgdG8gY29uZmlndXJlIGVhZ2VyIGF0dGFjaG1lbnQgb2YgdGhlIHJvb3Qgdmlldy9pbml0aWFsaXNhdGlvbiBvZiB0aGUgSlMgY29kZS5cbiAqL1xuZXhwb3J0IGNvbnN0IGVuYWJsZUVhZ2VyUm9vdFZpZXdBdHRhY2htZW50OiBHZXR0ZXI8Ym9vbGVhbj4gPSBjcmVhdGVOYXRpdmVGbGFnR2V0dGVyKCdlbmFibGVFYWdlclJvb3RWaWV3QXR0YWNobWVudCcsIGZhbHNlKTtcbi8qKlxuICogVGhpcyBmZWF0dXJlIGZsYWcgZW5hYmxlcyBsb2dzIGZvciBGYWJyaWMuXG4gKi9cbmV4cG9ydCBjb25zdCBlbmFibGVGYWJyaWNMb2dzOiBHZXR0ZXI8Ym9vbGVhbj4gPSBjcmVhdGVOYXRpdmVGbGFnR2V0dGVyKCdlbmFibGVGYWJyaWNMb2dzJywgZmFsc2UpO1xuLyoqXG4gKiBFbmFibGVzIHRoZSB1c2Ugb2YgdGhlIEZhYnJpYyByZW5kZXJlciBpbiB0aGUgd2hvbGUgYXBwLlxuICovXG5leHBvcnQgY29uc3QgZW5hYmxlRmFicmljUmVuZGVyZXI6IEdldHRlcjxib29sZWFuPiA9IGNyZWF0ZU5hdGl2ZUZsYWdHZXR0ZXIoJ2VuYWJsZUZhYnJpY1JlbmRlcmVyJywgZmFsc2UpO1xuLyoqXG4gKiBUaGlzIGZlYXR1cmUgZmxhZyBlbmFibGVzIGEgZml4IGZvciByZXBhcmVudGluZyBmaXggaW4gZGlmZmVyZW50aWF0b3JcbiAqL1xuZXhwb3J0IGNvbnN0IGVuYWJsZUZpeEZvclBhcmVudFRhZ0R1cmluZ1JlcGFyZW50aW5nOiBHZXR0ZXI8Ym9vbGVhbj4gPSBjcmVhdGVOYXRpdmVGbGFnR2V0dGVyKCdlbmFibGVGaXhGb3JQYXJlbnRUYWdEdXJpbmdSZXBhcmVudGluZycsIGZhbHNlKTtcbi8qKlxuICogRW5hYmxlcyBmb250IHNjYWxlIGNoYW5nZXMgdXBkYXRpbmcgbGF5b3V0IGZvciBtZWFzdXJhYmxlIG5vZGVzLlxuICovXG5leHBvcnQgY29uc3QgZW5hYmxlRm9udFNjYWxlQ2hhbmdlc1VwZGF0aW5nTGF5b3V0OiBHZXR0ZXI8Ym9vbGVhbj4gPSBjcmVhdGVOYXRpdmVGbGFnR2V0dGVyKCdlbmFibGVGb250U2NhbGVDaGFuZ2VzVXBkYXRpbmdMYXlvdXQnLCBmYWxzZSk7XG4vKipcbiAqIEFwcGxpZXMgYmFzZSBvZmZzZXQgZm9yIGVhY2ggbGluZSBvZiB0ZXh0IHNlcGFyYXRlbHkgb24gaU9TLlxuICovXG5leHBvcnQgY29uc3QgZW5hYmxlSU9TVGV4dEJhc2VsaW5lT2Zmc2V0UGVyTGluZTogR2V0dGVyPGJvb2xlYW4+ID0gY3JlYXRlTmF0aXZlRmxhZ0dldHRlcignZW5hYmxlSU9TVGV4dEJhc2VsaW5lT2Zmc2V0UGVyTGluZScsIGZhbHNlKTtcbi8qKlxuICogaU9TIFZpZXdzIHdpbGwgY2xpcCB0byB0aGVpciBwYWRkaW5nIGJveCB2cyBib3JkZXIgYm94XG4gKi9cbmV4cG9ydCBjb25zdCBlbmFibGVJT1NWaWV3Q2xpcFRvUGFkZGluZ0JveDogR2V0dGVyPGJvb2xlYW4+ID0gY3JlYXRlTmF0aXZlRmxhZ0dldHRlcignZW5hYmxlSU9TVmlld0NsaXBUb1BhZGRpbmdCb3gnLCBmYWxzZSk7XG4vKipcbiAqIFRoaXMgaXMgdG8gZml4IHRoZSBpc3N1ZSB3aXRoIGludGVyb3AgdmlldyBtYW5hZ2VyIHdoZXJlIGNvbXBvbmVudCBkZXNjcmlwdG9yIGxvb2t1cCBpcyBjYXVzaW5nIFZpZXdNYW5hZ2VyIHRvIHByZWxvYWQuXG4gKi9cbmV4cG9ydCBjb25zdCBlbmFibGVJbnRlcm9wVmlld01hbmFnZXJDbGFzc0xvb2tVcE9wdGltaXphdGlvbklPUzogR2V0dGVyPGJvb2xlYW4+ID0gY3JlYXRlTmF0aXZlRmxhZ0dldHRlcignZW5hYmxlSW50ZXJvcFZpZXdNYW5hZ2VyQ2xhc3NMb29rVXBPcHRpbWl6YXRpb25JT1MnLCBmYWxzZSk7XG4vKipcbiAqIFdoZW4gZW5hYmxlZCwgTGF5b3V0QW5pbWF0aW9ucyBBUEkgd2lsbCBhbmltYXRlIHN0YXRlIGNoYW5nZXMgb24gQW5kcm9pZC5cbiAqL1xuZXhwb3J0IGNvbnN0IGVuYWJsZUxheW91dEFuaW1hdGlvbnNPbkFuZHJvaWQ6IEdldHRlcjxib29sZWFuPiA9IGNyZWF0ZU5hdGl2ZUZsYWdHZXR0ZXIoJ2VuYWJsZUxheW91dEFuaW1hdGlvbnNPbkFuZHJvaWQnLCBmYWxzZSk7XG4vKipcbiAqIFdoZW4gZW5hYmxlZCwgTGF5b3V0QW5pbWF0aW9ucyBBUEkgd2lsbCBhbmltYXRlIHN0YXRlIGNoYW5nZXMgb24gaU9TLlxuICovXG5leHBvcnQgY29uc3QgZW5hYmxlTGF5b3V0QW5pbWF0aW9uc09uSU9TOiBHZXR0ZXI8Ym9vbGVhbj4gPSBjcmVhdGVOYXRpdmVGbGFnR2V0dGVyKCdlbmFibGVMYXlvdXRBbmltYXRpb25zT25JT1MnLCB0cnVlKTtcbi8qKlxuICogTWFrZSBSQ1RVbnNhZmVFeGVjdXRlT25NYWluUXVldWVTeW5jIGxlc3MgbGlrZWx5IHRvIGRlYWRsb2NrLCB3aGVuIHVzZWQgaW4gY29uanVjdGlvbiB3aXRoIHN5bmMgcmVuZGVyaW5nL2V2ZW50cy5cbiAqL1xuZXhwb3J0IGNvbnN0IGVuYWJsZU1haW5RdWV1ZUNvb3JkaW5hdG9yT25JT1M6IEdldHRlcjxib29sZWFuPiA9IGNyZWF0ZU5hdGl2ZUZsYWdHZXR0ZXIoJ2VuYWJsZU1haW5RdWV1ZUNvb3JkaW5hdG9yT25JT1MnLCBmYWxzZSk7XG4vKipcbiAqIE1ha2VzIG1vZHVsZXMgcmVxdWlyaW5nIG1haW4gcXVldWUgc2V0dXAgaW5pdGlhbGl6ZSBvbiB0aGUgbWFpbiB0aHJlYWQsIGR1cmluZyBSZWFjdCBOYXRpdmUgaW5pdC5cbiAqL1xuZXhwb3J0IGNvbnN0IGVuYWJsZU1haW5RdWV1ZU1vZHVsZXNPbklPUzogR2V0dGVyPGJvb2xlYW4+ID0gY3JlYXRlTmF0aXZlRmxhZ0dldHRlcignZW5hYmxlTWFpblF1ZXVlTW9kdWxlc09uSU9TJywgZmFsc2UpO1xuLyoqXG4gKiBFbmFibGUgTlNOdWxsIGNvbnZlcnNpb24gd2hlbiBoYW5kbGluZyBtb2R1bGUgYXJndW1lbnRzIG9uIGlPU1xuICovXG5leHBvcnQgY29uc3QgZW5hYmxlTW9kdWxlQXJndW1lbnROU051bGxDb252ZXJzaW9uSU9TOiBHZXR0ZXI8Ym9vbGVhbj4gPSBjcmVhdGVOYXRpdmVGbGFnR2V0dGVyKCdlbmFibGVNb2R1bGVBcmd1bWVudE5TTnVsbENvbnZlcnNpb25JT1MnLCBmYWxzZSk7XG4vKipcbiAqIFBhcnNlIENTUyBzdHJpbmdzIHVzaW5nIHRoZSBGYWJyaWMgQ1NTIHBhcnNlciBpbnN0ZWFkIG9mIFZpZXdDb25maWcgcHJvY2Vzc2luZ1xuICovXG5leHBvcnQgY29uc3QgZW5hYmxlTmF0aXZlQ1NTUGFyc2luZzogR2V0dGVyPGJvb2xlYW4+ID0gY3JlYXRlTmF0aXZlRmxhZ0dldHRlcignZW5hYmxlTmF0aXZlQ1NTUGFyc2luZycsIGZhbHNlKTtcbi8qKlxuICogRW5hYmxlIG5ldHdvcmsgZXZlbnQgcmVwb3J0aW5nIGhvb2tzIGluIGVhY2ggbmF0aXZlIHBsYXRmb3JtIHRocm91Z2ggYE5ldHdvcmtSZXBvcnRlcmAuIFRoaXMgZmxhZyBzaG91bGQgYmUgY29tYmluZWQgd2l0aCBgZW5hYmxlUmVzb3VyY2VUaW1pbmdBUElgIGFuZCBgZnVzZWJveE5ldHdvcmtJbnNwZWN0aW9uRW5hYmxlZGAgdG8gZW5hYmxlIGVuZC10by1lbmQgcmVwb3J0aW5nIGJlaGF2aW91ciB2aWEgdGhlIFdlYiBQZXJmb3JtYW5jZSBBUEkgYW5kIENEUCBkZWJ1Z2dpbmcgcmVzcGVjdGl2ZWx5LlxuICovXG5leHBvcnQgY29uc3QgZW5hYmxlTmV0d29ya0V2ZW50UmVwb3J0aW5nOiBHZXR0ZXI8Ym9vbGVhbj4gPSBjcmVhdGVOYXRpdmVGbGFnR2V0dGVyKCdlbmFibGVOZXR3b3JrRXZlbnRSZXBvcnRpbmcnLCBmYWxzZSk7XG4vKipcbiAqIFVzZSBCYWNrZ3JvdW5kRHJhd2FibGUgYW5kIEJvcmRlckRyYXdhYmxlIGluc3RlYWQgb2YgQ1NTQmFja2dyb3VuZERyYXdhYmxlXG4gKi9cbmV4cG9ydCBjb25zdCBlbmFibGVOZXdCYWNrZ3JvdW5kQW5kQm9yZGVyRHJhd2FibGVzOiBHZXR0ZXI8Ym9vbGVhbj4gPSBjcmVhdGVOYXRpdmVGbGFnR2V0dGVyKCdlbmFibGVOZXdCYWNrZ3JvdW5kQW5kQm9yZGVyRHJhd2FibGVzJywgdHJ1ZSk7XG4vKipcbiAqIEVuYWJsZXMgY2FjaGluZyB0ZXh0IGxheW91dCBhcnRpZmFjdHMgZm9yIGxhdGVyIHJldXNlXG4gKi9cbmV4cG9ydCBjb25zdCBlbmFibGVQcmVwYXJlZFRleHRMYXlvdXQ6IEdldHRlcjxib29sZWFuPiA9IGNyZWF0ZU5hdGl2ZUZsYWdHZXR0ZXIoJ2VuYWJsZVByZXBhcmVkVGV4dExheW91dCcsIGZhbHNlKTtcbi8qKlxuICogV2hlbiBlbmFibGVkLCBBbmRyb2lkIHdpbGwgcmVjZWl2ZSBwcm9wIHVwZGF0ZXMgYmFzZWQgb24gdGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gdGhlIGxhc3QgcmVuZGVyZWQgc2hhZG93IG5vZGUgYW5kIHRoZSBsYXN0IGNvbW1pdHRlZCBzaGFkb3cgbm9kZS5cbiAqL1xuZXhwb3J0IGNvbnN0IGVuYWJsZVByb3BzVXBkYXRlUmVjb25jaWxpYXRpb25BbmRyb2lkOiBHZXR0ZXI8Ym9vbGVhbj4gPSBjcmVhdGVOYXRpdmVGbGFnR2V0dGVyKCdlbmFibGVQcm9wc1VwZGF0ZVJlY29uY2lsaWF0aW9uQW5kcm9pZCcsIGZhbHNlKTtcbi8qKlxuICogRW5hYmxlcyB0aGUgcmVwb3J0aW5nIG9mIG5ldHdvcmsgcmVzb3VyY2UgdGltaW5ncyB0aHJvdWdoIGBQZXJmb3JtYW5jZU9ic2VydmVyYC5cbiAqL1xuZXhwb3J0IGNvbnN0IGVuYWJsZVJlc291cmNlVGltaW5nQVBJOiBHZXR0ZXI8Ym9vbGVhbj4gPSBjcmVhdGVOYXRpdmVGbGFnR2V0dGVyKCdlbmFibGVSZXNvdXJjZVRpbWluZ0FQSScsIGZhbHNlKTtcbi8qKlxuICogRGlzcGF0Y2hlcyBzdGF0ZSB1cGRhdGVzIHN5bmNocm9ub3VzbHkgaW4gRmFicmljIChlLmcuOiB1cGRhdGVzIHRoZSBzY3JvbGwgcG9zaXRpb24gaW4gdGhlIHNoYWRvdyB0cmVlIHN5bmNocm9ub3VzbHkgZnJvbSB0aGUgbWFpbiB0aHJlYWQpLlxuICovXG5leHBvcnQgY29uc3QgZW5hYmxlU3luY2hyb25vdXNTdGF0ZVVwZGF0ZXM6IEdldHRlcjxib29sZWFuPiA9IGNyZWF0ZU5hdGl2ZUZsYWdHZXR0ZXIoJ2VuYWJsZVN5bmNocm9ub3VzU3RhdGVVcGRhdGVzJywgZmFsc2UpO1xuLyoqXG4gKiBFbmFibGVzIFZpZXcgQ3VsbGluZzogYXMgc29vbiBhcyBhIHZpZXcgZ29lcyBvZmYgc2NyZWVuLCBpdCBjYW4gYmUgcmV1c2VkIGFueXdoZXJlIGluIHRoZSBVSSBhbmQgcGllY2VkIHRvZ2V0aGVyIHdpdGggb3RoZXIgaXRlbXMgdG8gY3JlYXRlIG5ldyBVSSBlbGVtZW50cy5cbiAqL1xuZXhwb3J0IGNvbnN0IGVuYWJsZVZpZXdDdWxsaW5nOiBHZXR0ZXI8Ym9vbGVhbj4gPSBjcmVhdGVOYXRpdmVGbGFnR2V0dGVyKCdlbmFibGVWaWV3Q3VsbGluZycsIGZhbHNlKTtcbi8qKlxuICogRW5hYmxlcyBWaWV3IFJlY3ljbGluZy4gV2hlbiBlbmFibGVkLCBpbmRpdmlkdWFsIFZpZXdNYW5hZ2VycyBtdXN0IHN0aWxsIG9wdC1pbi5cbiAqL1xuZXhwb3J0IGNvbnN0IGVuYWJsZVZpZXdSZWN5Y2xpbmc6IEdldHRlcjxib29sZWFuPiA9IGNyZWF0ZU5hdGl2ZUZsYWdHZXR0ZXIoJ2VuYWJsZVZpZXdSZWN5Y2xpbmcnLCBmYWxzZSk7XG4vKipcbiAqIEVuYWJsZXMgVmlldyBSZWN5Y2xpbmcgZm9yIDxUZXh0PiB2aWEgUmVhY3RUZXh0Vmlldy9SZWFjdFRleHRWaWV3TWFuYWdlci5cbiAqL1xuZXhwb3J0IGNvbnN0IGVuYWJsZVZpZXdSZWN5Y2xpbmdGb3JUZXh0OiBHZXR0ZXI8Ym9vbGVhbj4gPSBjcmVhdGVOYXRpdmVGbGFnR2V0dGVyKCdlbmFibGVWaWV3UmVjeWNsaW5nRm9yVGV4dCcsIHRydWUpO1xuLyoqXG4gKiBFbmFibGVzIFZpZXcgUmVjeWNsaW5nIGZvciA8Vmlldz4gdmlhIFJlYWN0Vmlld0dyb3VwL1JlYWN0Vmlld01hbmFnZXIuXG4gKi9cbmV4cG9ydCBjb25zdCBlbmFibGVWaWV3UmVjeWNsaW5nRm9yVmlldzogR2V0dGVyPGJvb2xlYW4+ID0gY3JlYXRlTmF0aXZlRmxhZ0dldHRlcignZW5hYmxlVmlld1JlY3ljbGluZ0ZvclZpZXcnLCB0cnVlKTtcbi8qKlxuICogRW5hYmxlcyBWaXJ0dWFsVmlldyBkZWJ1ZyBmZWF0dXJlcyBzdWNoIGFzIGxvZ2dpbmcgYW5kIG92ZXJsYXlzLlxuICovXG5leHBvcnQgY29uc3QgZW5hYmxlVmlydHVhbFZpZXdEZWJ1Z0ZlYXR1cmVzOiBHZXR0ZXI8Ym9vbGVhbj4gPSBjcmVhdGVOYXRpdmVGbGFnR2V0dGVyKCdlbmFibGVWaXJ0dWFsVmlld0RlYnVnRmVhdHVyZXMnLCBmYWxzZSk7XG4vKipcbiAqIEVuYWJsZXMgcmVhZGluZyByZW5kZXIgc3RhdGUgd2hlbiBkaXNwYXRjaGluZyBWaXJ0dWFsVmlldyBldmVudHMuXG4gKi9cbmV4cG9ydCBjb25zdCBlbmFibGVWaXJ0dWFsVmlld1JlbmRlclN0YXRlOiBHZXR0ZXI8Ym9vbGVhbj4gPSBjcmVhdGVOYXRpdmVGbGFnR2V0dGVyKCdlbmFibGVWaXJ0dWFsVmlld1JlbmRlclN0YXRlJywgZmFsc2UpO1xuLyoqXG4gKiBFbmFibGVzIHdpbmRvdyBmb2N1cyBkZXRlY3Rpb24gZm9yIHByaW9yaXRpemluZyBWaXJ0dWFsVmlldyBldmVudHMuXG4gKi9cbmV4cG9ydCBjb25zdCBlbmFibGVWaXJ0dWFsVmlld1dpbmRvd0ZvY3VzRGV0ZWN0aW9uOiBHZXR0ZXI8Ym9vbGVhbj4gPSBjcmVhdGVOYXRpdmVGbGFnR2V0dGVyKCdlbmFibGVWaXJ0dWFsVmlld1dpbmRvd0ZvY3VzRGV0ZWN0aW9uJywgZmFsc2UpO1xuLyoqXG4gKiBVc2VzIHRoZSBkZWZhdWx0IGV2ZW50IHByaW9yaXR5IGluc3RlYWQgb2YgdGhlIGRpc2NyZWV0IGV2ZW50IHByaW9yaXR5IGJ5IGRlZmF1bHQgd2hlbiBkaXNwYXRjaGluZyBldmVudHMgZnJvbSBGYWJyaWMgdG8gUmVhY3QuXG4gKi9cbmV4cG9ydCBjb25zdCBmaXhNYXBwaW5nT2ZFdmVudFByaW9yaXRpZXNCZXR3ZWVuRmFicmljQW5kUmVhY3Q6IEdldHRlcjxib29sZWFuPiA9IGNyZWF0ZU5hdGl2ZUZsYWdHZXR0ZXIoJ2ZpeE1hcHBpbmdPZkV2ZW50UHJpb3JpdGllc0JldHdlZW5GYWJyaWNBbmRSZWFjdCcsIGZhbHNlKTtcbi8qKlxuICogRmxhZyBkZXRlcm1pbmluZyBpZiB0aGUgUmVhY3QgTmF0aXZlIERldlRvb2xzIChGdXNlYm94KSBDRFAgYmFja2VuZCBzaG91bGQgYmUgZW5hYmxlZCBpbiByZWxlYXNlIGJ1aWxkcy4gVGhpcyBmbGFnIGlzIGdsb2JhbCBhbmQgc2hvdWxkIG5vdCBiZSBjaGFuZ2VkIGFjcm9zcyBSZWFjdCBIb3N0IGxpZmV0aW1lcy5cbiAqL1xuZXhwb3J0IGNvbnN0IGZ1c2Vib3hFbmFibGVkUmVsZWFzZTogR2V0dGVyPGJvb2xlYW4+ID0gY3JlYXRlTmF0aXZlRmxhZ0dldHRlcignZnVzZWJveEVuYWJsZWRSZWxlYXNlJywgZmFsc2UpO1xuLyoqXG4gKiBFbmFibGUgbmV0d29yayBpbnNwZWN0aW9uIHN1cHBvcnQgaW4gdGhlIFJlYWN0IE5hdGl2ZSBEZXZUb29scyBDRFAgYmFja2VuZC4gUmVxdWlyZXMgYGVuYWJsZUJyaWRnZWxlc3NBcmNoaXRlY3R1cmVgLiBUaGlzIGZsYWcgaXMgZ2xvYmFsIGFuZCBzaG91bGQgbm90IGJlIGNoYW5nZWQgYWNyb3NzIFJlYWN0IEhvc3QgbGlmZXRpbWVzLlxuICovXG5leHBvcnQgY29uc3QgZnVzZWJveE5ldHdvcmtJbnNwZWN0aW9uRW5hYmxlZDogR2V0dGVyPGJvb2xlYW4+ID0gY3JlYXRlTmF0aXZlRmxhZ0dldHRlcignZnVzZWJveE5ldHdvcmtJbnNwZWN0aW9uRW5hYmxlZCcsIGZhbHNlKTtcbi8qKlxuICogSGlkZXMgb2Zmc2NyZWVuIFZpcnR1YWxWaWV3cyBvbiBpT1MgYnkgc2V0dGluZyBoaWRkZW4gPSBZRVMgdG8gYXZvaWQgZXh0cmEgY29zdCBvZiB2aWV3c1xuICovXG5leHBvcnQgY29uc3QgaGlkZU9mZnNjcmVlblZpcnR1YWxWaWV3c09uSU9TOiBHZXR0ZXI8Ym9vbGVhbj4gPSBjcmVhdGVOYXRpdmVGbGFnR2V0dGVyKCdoaWRlT2Zmc2NyZWVuVmlydHVhbFZpZXdzT25JT1MnLCBmYWxzZSk7XG4vKipcbiAqIE51bWJlciBjYWNoZWQgUHJlcGFyZWRMYXlvdXRzIGluIFRleHRMYXlvdXRNYW5hZ2VyIGNhY2hlXG4gKi9cbmV4cG9ydCBjb25zdCBwcmVwYXJlZFRleHRDYWNoZVNpemU6IEdldHRlcjxudW1iZXI+ID0gY3JlYXRlTmF0aXZlRmxhZ0dldHRlcigncHJlcGFyZWRUZXh0Q2FjaGVTaXplJywgMjAwKTtcbi8qKlxuICogRW5hYmxlcyBhIG5ldyBtZWNoYW5pc20gaW4gU2hhZG93VHJlZSB0byBwcmV2ZW50IHByb2JsZW1zIGNhdXNlZCBieSBtdWx0aXBsZSB0aHJlYWRzIHRyeWluZyB0byBjb21taXQgY29uY3VycmVudGx5LiBJZiBhIHRocmVhZCB0cmllcyB0byBjb21taXQgYSBmZXcgdGltZXMgdW5zdWNjZXNzZnVsbHksIGl0IHdpbGwgYWNxdWlyZSBhIGxvY2sgYW5kIHRyeSBhZ2Fpbi5cbiAqL1xuZXhwb3J0IGNvbnN0IHByZXZlbnRTaGFkb3dUcmVlQ29tbWl0RXhoYXVzdGlvbjogR2V0dGVyPGJvb2xlYW4+ID0gY3JlYXRlTmF0aXZlRmxhZ0dldHRlcigncHJldmVudFNoYWRvd1RyZWVDb21taXRFeGhhdXN0aW9uJywgZmFsc2UpO1xuLyoqXG4gKiBFbmFibGVzIHN0b3JpbmcganMgY2FsbGVyIHN0YWNrIHdoZW4gY3JlYXRpbmcgcHJvbWlzZSBpbiBuYXRpdmUgbW9kdWxlLiBUaGlzIGlzIHVzZWZ1bCBpbiBjYXNlIG9mIFByb21pc2UgcmVqZWN0aW9uIGFuZCB0cmFjaW5nIHRoZSBjYXVzZS5cbiAqL1xuZXhwb3J0IGNvbnN0IHRyYWNlVHVyYm9Nb2R1bGVQcm9taXNlUmVqZWN0aW9uc09uQW5kcm9pZDogR2V0dGVyPGJvb2xlYW4+ID0gY3JlYXRlTmF0aXZlRmxhZ0dldHRlcigndHJhY2VUdXJib01vZHVsZVByb21pc2VSZWplY3Rpb25zT25BbmRyb2lkJywgZmFsc2UpO1xuLyoqXG4gKiBXaGVuIGVuYWJsZWQsIHJ1bnRpbWUgc2hhZG93IG5vZGUgcmVmZXJlbmNlcyB3aWxsIGJlIHVwZGF0ZWQgZHVyaW5nIHRoZSBjb21taXQuIFRoaXMgYWxsb3dzIHJ1bm5pbmcgUlNOUlUgZnJvbSBhbnkgdGhyZWFkIHdpdGhvdXQgY29ycnVwdGluZyB0aGUgcmVuZGVyZXIgc3RhdGUuXG4gKi9cbmV4cG9ydCBjb25zdCB1cGRhdGVSdW50aW1lU2hhZG93Tm9kZVJlZmVyZW5jZXNPbkNvbW1pdDogR2V0dGVyPGJvb2xlYW4+ID0gY3JlYXRlTmF0aXZlRmxhZ0dldHRlcigndXBkYXRlUnVudGltZVNoYWRvd05vZGVSZWZlcmVuY2VzT25Db21taXQnLCBmYWxzZSk7XG4vKipcbiAqIEluIEJyaWRnZWxlc3MgbW9kZSwgdXNlIHRoZSBhbHdheXMgYXZhaWxhYmxlIGphdmFzY3JpcHQgZXJyb3IgcmVwb3J0aW5nIHBpcGVsaW5lLlxuICovXG5leHBvcnQgY29uc3QgdXNlQWx3YXlzQXZhaWxhYmxlSlNFcnJvckhhbmRsaW5nOiBHZXR0ZXI8Ym9vbGVhbj4gPSBjcmVhdGVOYXRpdmVGbGFnR2V0dGVyKCd1c2VBbHdheXNBdmFpbGFibGVKU0Vycm9ySGFuZGxpbmcnLCBmYWxzZSk7XG4vKipcbiAqIFNob3VsZCB0aGlzIGFwcGxpY2F0aW9uIGVuYWJsZSB0aGUgRmFicmljIEludGVyb3AgTGF5ZXIgZm9yIEFuZHJvaWQ/IElmIHllcywgdGhlIGFwcGxpY2F0aW9uIHdpbGwgYmVoYXZlIHNvIHRoYXQgaXQgY2FuIGFjY2VwdCBub24tRmFicmljIGNvbXBvbmVudHMgYW5kIHJlbmRlciB0aGVtIG9uIEZhYnJpYy4gVGhpcyB0b2dnbGUgaXMgY29udHJvbGxpbmcgZXh0cmEgbG9naWMgc3VjaCBhcyBjdXN0b20gZXZlbnQgZGlzcGF0Y2hpbmcgdGhhdCBhcmUgbmVlZGVkIGZvciB0aGUgRmFicmljIEludGVyb3AgTGF5ZXIgdG8gd29yayBjb3JyZWN0bHkuXG4gKi9cbmV4cG9ydCBjb25zdCB1c2VGYWJyaWNJbnRlcm9wOiBHZXR0ZXI8Ym9vbGVhbj4gPSBjcmVhdGVOYXRpdmVGbGFnR2V0dGVyKCd1c2VGYWJyaWNJbnRlcm9wJywgdHJ1ZSk7XG4vKipcbiAqIFdoZW4gZW5hYmxlZCwgdGhlIG5hdGl2ZSB2aWV3IGNvbmZpZ3MgYXJlIHVzZWQgaW4gYnJpZGdlbGVzcyBtb2RlLlxuICovXG5leHBvcnQgY29uc3QgdXNlTmF0aXZlVmlld0NvbmZpZ3NJbkJyaWRnZWxlc3NNb2RlOiBHZXR0ZXI8Ym9vbGVhbj4gPSBjcmVhdGVOYXRpdmVGbGFnR2V0dGVyKCd1c2VOYXRpdmVWaWV3Q29uZmlnc0luQnJpZGdlbGVzc01vZGUnLCBmYWxzZSk7XG4vKipcbiAqIFVzZXMgYW4gb3B0aW1pemVkIG1lY2hhbmlzbSBmb3IgZXZlbnQgYmF0Y2hpbmcgb24gQW5kcm9pZCB0aGF0IGRvZXMgbm90IG5lZWQgdG8gd2FpdCBmb3IgYSBDaG9yZW9ncmFwaGVyIGZyYW1lIGNhbGxiYWNrLlxuICovXG5leHBvcnQgY29uc3QgdXNlT3B0aW1pemVkRXZlbnRCYXRjaGluZ09uQW5kcm9pZDogR2V0dGVyPGJvb2xlYW4+ID0gY3JlYXRlTmF0aXZlRmxhZ0dldHRlcigndXNlT3B0aW1pemVkRXZlbnRCYXRjaGluZ09uQW5kcm9pZCcsIGZhbHNlKTtcbi8qKlxuICogSW5zdGVhZCBvZiB1c2luZyBmb2xseTo6ZHluYW1pYyBhcyBpbnRlcm5hbCByZXByZXNlbnRhdGlvbiBpbiBSYXdQcm9wcyBhbmQgUmF3VmFsdWUsIHVzZSBqc2k6OlZhbHVlXG4gKi9cbmV4cG9ydCBjb25zdCB1c2VSYXdQcm9wc0pzaVZhbHVlOiBHZXR0ZXI8Ym9vbGVhbj4gPSBjcmVhdGVOYXRpdmVGbGFnR2V0dGVyKCd1c2VSYXdQcm9wc0pzaVZhbHVlJywgZmFsc2UpO1xuLyoqXG4gKiBVc2UgdGhlIHN0YXRlIHN0b3JlZCBvbiB0aGUgc291cmNlIHNoYWRvdyBub2RlIHdoZW4gY2xvbmluZyBpdCBpbnN0ZWFkIG9mIHJlYWRpbmcgaW4gdGhlIG1vc3QgcmVjZW50IHN0YXRlIG9uIHRoZSBzaGFkb3cgbm9kZSBmYW1pbHkuXG4gKi9cbmV4cG9ydCBjb25zdCB1c2VTaGFkb3dOb2RlU3RhdGVPbkNsb25lOiBHZXR0ZXI8Ym9vbGVhbj4gPSBjcmVhdGVOYXRpdmVGbGFnR2V0dGVyKCd1c2VTaGFkb3dOb2RlU3RhdGVPbkNsb25lJywgZmFsc2UpO1xuLyoqXG4gKiBJbiBCcmlkZ2VsZXNzIG1vZGUsIHNob3VsZCBsZWdhY3kgTmF0aXZlTW9kdWxlcyB1c2UgdGhlIFR1cmJvTW9kdWxlIHN5c3RlbT9cbiAqL1xuZXhwb3J0IGNvbnN0IHVzZVR1cmJvTW9kdWxlSW50ZXJvcDogR2V0dGVyPGJvb2xlYW4+ID0gY3JlYXRlTmF0aXZlRmxhZ0dldHRlcigndXNlVHVyYm9Nb2R1bGVJbnRlcm9wJywgZmFsc2UpO1xuLyoqXG4gKiBXaGVuIGVuYWJsZWQsIE5hdGl2ZU1vZHVsZXMgd2lsbCBiZSBleGVjdXRlZCBieSB1c2luZyB0aGUgVHVyYm9Nb2R1bGUgc3lzdGVtXG4gKi9cbmV4cG9ydCBjb25zdCB1c2VUdXJib01vZHVsZXM6IEdldHRlcjxib29sZWFuPiA9IGNyZWF0ZU5hdGl2ZUZsYWdHZXR0ZXIoJ3VzZVR1cmJvTW9kdWxlcycsIGZhbHNlKTtcbi8qKlxuICogSW5pdGlhbCBwcmVyZW5kZXIgcmF0aW8gZm9yIFZpcnR1YWxWaWV3LlxuICovXG5leHBvcnQgY29uc3QgdmlydHVhbFZpZXdQcmVyZW5kZXJSYXRpbzogR2V0dGVyPG51bWJlcj4gPSBjcmVhdGVOYXRpdmVGbGFnR2V0dGVyKCd2aXJ0dWFsVmlld1ByZXJlbmRlclJhdGlvJywgNSk7XG5cbi8qKlxuICogT3ZlcnJpZGVzIHRoZSBmZWF0dXJlIGZsYWdzIHdpdGggdGhlIHByb3ZpZGVkIG1ldGhvZHMuXG4gKiBOT1RFOiBPbmx5IEpTLW9ubHkgZmxhZ3MgY2FuIGJlIG92ZXJyaWRkZW4gZnJvbSBKYXZhU2NyaXB0IHVzaW5nIHRoaXMgQVBJLlxuICovXG5leHBvcnQgY29uc3Qgb3ZlcnJpZGUgPSBzZXRPdmVycmlkZXM7XG4iXSwibWFwcGluZ3MiOiI7Ozs7QUFxQkEsSUFBQUEsNEJBQUEsR0FBQUMsT0FBQTtBQWdHTyxJQUFNQyxjQUErQixHQUFBQyxPQUFBLENBQUFELGNBQUEsR0FBRyxJQUFBRSx1REFBMEIsRUFBQyxnQkFBZ0IsRUFBRSxLQUFLLENBQUM7QUFLM0YsSUFBTUMsMkJBQTRDLEdBQUFGLE9BQUEsQ0FBQUUsMkJBQUEsR0FBRyxJQUFBRCx1REFBMEIsRUFBQyw2QkFBNkIsRUFBRSxLQUFLLENBQUM7QUFLckgsSUFBTUUsZ0NBQWlELEdBQUFILE9BQUEsQ0FBQUcsZ0NBQUEsR0FBRyxJQUFBRix1REFBMEIsRUFBQyxrQ0FBa0MsRUFBRSxLQUFLLENBQUM7QUFLL0gsSUFBTUcseUJBQTBDLEdBQUFKLE9BQUEsQ0FBQUkseUJBQUEsR0FBRyxJQUFBSCx1REFBMEIsRUFBQywyQkFBMkIsRUFBRSxLQUFLLENBQUM7QUFLakgsSUFBTUksbUNBQW9ELEdBQUFMLE9BQUEsQ0FBQUssbUNBQUEsR0FBRyxJQUFBSix1REFBMEIsRUFBQyxxQ0FBcUMsRUFBRSxJQUFJLENBQUM7QUFLcEksSUFBTUssb0NBQXFELEdBQUFOLE9BQUEsQ0FBQU0sb0NBQUEsR0FBRyxJQUFBTCx1REFBMEIsRUFBQyxzQ0FBc0MsRUFBRSxLQUFLLENBQUM7QUFLdkksSUFBTU0seUJBQTBDLEdBQUFQLE9BQUEsQ0FBQU8seUJBQUEsR0FBRyxJQUFBTix1REFBMEIsRUFBQywyQkFBMkIsRUFBRSxJQUFJLENBQUM7QUFLaEgsSUFBTU8sOEJBQStDLEdBQUFSLE9BQUEsQ0FBQVEsOEJBQUEsR0FBRyxJQUFBUCx1REFBMEIsRUFBQyxnQ0FBZ0MsRUFBRSxLQUFLLENBQUM7QUFLM0gsSUFBTVEsbUNBQW9ELEdBQUFULE9BQUEs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