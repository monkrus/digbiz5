{"version":3,"names":["_ocrScannerService","require","describe","beforeEach","jest","clearAllMocks","it","_asyncToGenerator2","default","options","enableAutoCorrection","minConfidence","result","ocrScannerService","scanBusinessCard","expect","success","toBe","results","toHaveLength","parsedData","name","company","email","phone","confidence","toBeGreaterThan","_require","TextRecognition","recognize","mockResolvedValueOnce","text","blocks","frame","x","y","width","height","toBeLessThan","_require2","_require3","_require4","toMatch","_require5","_require6","website","startTime","Date","now","processingTime","maxImageSize","duration","imageUris","promises","map","uri","Promise","all","totalTime","every","r","error","toBeDefined","_require7","mockRejectedValueOnce","Error","toContain","_require8","title","address","rawText","contact","convertToContact","id","source","isVerified","needsReview","nameField","fields","find","f","type","value","emailField","phoneField","lowConfidenceData","partialData","_require9","length","toBeLessThanOrEqual","toBeGreaterThanOrEqual","_require0","not"],"sources":["ocrScannerService.test.ts"],"sourcesContent":["/**\n * OCR Scanner Service Tests\n * \n * Tests for OCR scanning functionality with sample cards\n */\n\nimport { ocrScannerService } from '../../src/services/ocrScannerService';\nimport { ParsedCardData, ScanOptions } from '../../src/services/ocrScannerService';\nimport { Contact } from '../../src/types/contacts';\n\ndescribe('OCRScannerService', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('Business Card Scanning', () => {\n    it('should scan business card and extract contact information', async () => {\n      const options: ScanOptions = {\n        enableAutoCorrection: true,\n        minConfidence: 0.7,\n      };\n\n      const result = await ocrScannerService.scanBusinessCard('file:///test-card.jpg', options);\n\n      expect(result.success).toBe(true);\n      expect(result.results).toHaveLength(1);\n      \n      const parsedData = result.results[0];\n      expect(parsedData.name).toBe('John Doe');\n      expect(parsedData.company).toBe('Acme Corp');\n      expect(parsedData.email).toBe('john@example.com');\n      expect(parsedData.phone).toBe('+1-555-0123');\n      expect(parsedData.confidence).toBeGreaterThan(0.7);\n    });\n\n    it('should handle low quality images with reduced confidence', async () => {\n      // Mock low confidence OCR result\n      const { TextRecognition } = require('@react-native-ml-kit/text-recognition');\n      TextRecognition.recognize.mockResolvedValueOnce({\n        text: 'John D\\nSoft Eng\\njhn@exam.com\\n555-012',\n        blocks: [\n          { text: 'John D', frame: { x: 10, y: 10, width: 50, height: 20 } },\n          { text: 'Soft Eng', frame: { x: 10, y: 35, width: 60, height: 15 } },\n          { text: 'jhn@exam.com', frame: { x: 10, y: 55, width: 90, height: 15 } },\n          { text: '555-012', frame: { x: 10, y: 75, width: 50, height: 15 } },\n        ],\n      });\n\n      const result = await ocrScannerService.scanBusinessCard('file:///low-quality-card.jpg');\n\n      expect(result.success).toBe(true);\n      const parsedData = result.results[0];\n      expect(parsedData.confidence).toBeLessThan(0.8);\n      expect(parsedData.name).toBe('John D');\n      expect(parsedData.email).toBe('jhn@exam.com');\n    });\n\n    it('should detect multiple contacts on single card', async () => {\n      // Mock multi-contact card\n      const { TextRecognition } = require('@react-native-ml-kit/text-recognition');\n      TextRecognition.recognize.mockResolvedValueOnce({\n        text: 'John Doe\\njohn@acme.com\\n+1-555-0123\\n\\nJane Smith\\njane@acme.com\\n+1-555-0124',\n        blocks: [\n          { text: 'John Doe', frame: { x: 10, y: 10, width: 100, height: 20 } },\n          { text: 'john@acme.com', frame: { x: 10, y: 35, width: 120, height: 15 } },\n          { text: '+1-555-0123', frame: { x: 10, y: 55, width: 100, height: 15 } },\n          { text: 'Jane Smith', frame: { x: 10, y: 90, width: 100, height: 20 } },\n          { text: 'jane@acme.com', frame: { x: 10, y: 115, width: 120, height: 15 } },\n          { text: '+1-555-0124', frame: { x: 10, y: 135, width: 100, height: 15 } },\n        ],\n      });\n\n      const result = await ocrScannerService.scanBusinessCard('file:///multi-contact-card.jpg');\n\n      expect(result.success).toBe(true);\n      expect(result.results).toHaveLength(2);\n      expect(result.results[0].name).toBe('John Doe');\n      expect(result.results[1].name).toBe('Jane Smith');\n    });\n\n    it('should handle foreign language cards', async () => {\n      // Mock foreign language text\n      const { TextRecognition } = require('@react-native-ml-kit/text-recognition');\n      TextRecognition.recognize.mockResolvedValueOnce({\n        text: '田中太郎\\nソフトウェアエンジニア\\ntanaka@example.jp\\n+81-90-1234-5678',\n        blocks: [\n          { text: '田中太郎', frame: { x: 10, y: 10, width: 100, height: 20 } },\n          { text: 'ソフトウェアエンジニア', frame: { x: 10, y: 35, width: 150, height: 15 } },\n          { text: 'tanaka@example.jp', frame: { x: 10, y: 55, width: 130, height: 15 } },\n          { text: '+81-90-1234-5678', frame: { x: 10, y: 75, width: 120, height: 15 } },\n        ],\n      });\n\n      const result = await ocrScannerService.scanBusinessCard('file:///japanese-card.jpg');\n\n      expect(result.success).toBe(true);\n      const parsedData = result.results[0];\n      expect(parsedData.name).toBe('田中太郎');\n      expect(parsedData.email).toBe('tanaka@example.jp');\n      expect(parsedData.phone).toBe('+81-90-1234-5678');\n    });\n  });\n\n  describe('Field Extraction Accuracy', () => {\n    it('should correctly identify email addresses', async () => {\n      const { TextRecognition } = require('@react-native-ml-kit/text-recognition');\n      TextRecognition.recognize.mockResolvedValueOnce({\n        text: 'Contact: test@domain.com, backup@company.org, invalid.email',\n        blocks: [\n          { text: 'Contact: test@domain.com, backup@company.org, invalid.email', \n            frame: { x: 10, y: 10, width: 300, height: 20 } },\n        ],\n      });\n\n      const result = await ocrScannerService.scanBusinessCard('file:///email-test-card.jpg');\n      const parsedData = result.results[0];\n      \n      // Should extract valid emails\n      expect(parsedData.email).toMatch(/@/);\n    });\n\n    it('should correctly identify phone numbers', async () => {\n      const { TextRecognition } = require('@react-native-ml-kit/text-recognition');\n      TextRecognition.recognize.mockResolvedValueOnce({\n        text: '+1-555-123-4567\\n(555) 987-6543\\n555.111.2222\\n12345',\n        blocks: [\n          { text: '+1-555-123-4567', frame: { x: 10, y: 10, width: 120, height: 15 } },\n          { text: '(555) 987-6543', frame: { x: 10, y: 30, width: 120, height: 15 } },\n          { text: '555.111.2222', frame: { x: 10, y: 50, width: 100, height: 15 } },\n          { text: '12345', frame: { x: 10, y: 70, width: 50, height: 15 } },\n        ],\n      });\n\n      const result = await ocrScannerService.scanBusinessCard('file:///phone-test-card.jpg');\n      const parsedData = result.results[0];\n      \n      // Should extract the first valid phone number\n      expect(parsedData.phone).toBe('+1-555-123-4567');\n    });\n\n    it('should correctly identify websites', async () => {\n      const { TextRecognition } = require('@react-native-ml-kit/text-recognition');\n      TextRecognition.recognize.mockResolvedValueOnce({\n        text: 'Visit us at www.company.com or https://secure.site.org',\n        blocks: [\n          { text: 'Visit us at www.company.com or https://secure.site.org', \n            frame: { x: 10, y: 10, width: 300, height: 20 } },\n        ],\n      });\n\n      const result = await ocrScannerService.scanBusinessCard('file:///website-test-card.jpg');\n      const parsedData = result.results[0];\n      \n      expect(parsedData.website).toMatch(/^(https?:\\/\\/)?(www\\.)?/);\n    });\n  });\n\n  describe('Performance Tests', () => {\n    it('should process image within acceptable time limit', async () => {\n      const startTime = Date.now();\n      \n      await ocrScannerService.scanBusinessCard('file:///performance-test-card.jpg');\n      \n      const processingTime = Date.now() - startTime;\n      expect(processingTime).toBeLessThan(5000); // Should complete within 5 seconds\n    });\n\n    it('should handle large images efficiently', async () => {\n      const options: ScanOptions = {\n        maxImageSize: 1024, // Resize large images\n      };\n\n      const result = await ocrScannerService.scanBusinessCard('file:///large-card.jpg', options);\n      \n      expect(result.success).toBe(true);\n      expect(result.duration).toBeLessThan(10000);\n    });\n\n    it('should process batch of images concurrently', async () => {\n      const imageUris = [\n        'file:///card1.jpg',\n        'file:///card2.jpg',\n        'file:///card3.jpg',\n      ];\n\n      const startTime = Date.now();\n      const promises = imageUris.map(uri => \n        ocrScannerService.scanBusinessCard(uri)\n      );\n      \n      const results = await Promise.all(promises);\n      const totalTime = Date.now() - startTime;\n      \n      expect(results).toHaveLength(3);\n      expect(results.every(r => r.success)).toBe(true);\n      expect(totalTime).toBeLessThan(15000); // Concurrent processing should be faster\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle invalid image paths gracefully', async () => {\n      const result = await ocrScannerService.scanBusinessCard('invalid://path/to/image.jpg');\n      \n      expect(result.success).toBe(false);\n      expect(result.error).toBeDefined();\n      expect(result.results).toHaveLength(0);\n    });\n\n    it('should handle OCR service failures', async () => {\n      const { TextRecognition } = require('@react-native-ml-kit/text-recognition');\n      TextRecognition.recognize.mockRejectedValueOnce(new Error('OCR Service unavailable'));\n\n      const result = await ocrScannerService.scanBusinessCard('file:///test-card.jpg');\n      \n      expect(result.success).toBe(false);\n      expect(result.error).toContain('OCR Service unavailable');\n    });\n\n    it('should handle corrupted image files', async () => {\n      const { TextRecognition } = require('@react-native-ml-kit/text-recognition');\n      TextRecognition.recognize.mockRejectedValueOnce(new Error('Invalid image format'));\n\n      const result = await ocrScannerService.scanBusinessCard('file:///corrupted.jpg');\n      \n      expect(result.success).toBe(false);\n      expect(result.error).toBeDefined();\n    });\n  });\n\n  describe('Contact Conversion', () => {\n    it('should convert parsed data to contact format correctly', () => {\n      const parsedData: ParsedCardData = {\n        name: 'John Doe',\n        company: 'Acme Corp',\n        title: 'Software Engineer',\n        email: 'john@acme.com',\n        phone: '+1-555-0123',\n        website: 'www.acme.com',\n        address: '123 Main St, Anytown, ST 12345',\n        confidence: 0.85,\n        rawText: 'John Doe\\nSoftware Engineer\\nAcme Corp\\njohn@acme.com\\n+1-555-0123',\n      };\n\n      const contact: Contact = ocrScannerService.convertToContact(parsedData);\n\n      expect(contact.id).toBeDefined();\n      expect(contact.source).toBe('ocr_scan');\n      expect(contact.confidence).toBe(0.85);\n      expect(contact.rawText).toBe(parsedData.rawText);\n      expect(contact.isVerified).toBe(false);\n      expect(contact.needsReview).toBe(true);\n\n      // Check fields mapping\n      const nameField = contact.fields.find(f => f.type === 'name');\n      expect(nameField?.value).toBe('John Doe');\n      \n      const emailField = contact.fields.find(f => f.type === 'email');\n      expect(emailField?.value).toBe('john@acme.com');\n      \n      const phoneField = contact.fields.find(f => f.type === 'phone');\n      expect(phoneField?.value).toBe('+1-555-0123');\n    });\n\n    it('should mark low confidence contacts for review', () => {\n      const lowConfidenceData: ParsedCardData = {\n        name: 'J. D.',\n        email: 'unclear@text',\n        confidence: 0.4,\n        rawText: 'Blurry text...',\n      };\n\n      const contact = ocrScannerService.convertToContact(lowConfidenceData);\n\n      expect(contact.needsReview).toBe(true);\n      expect(contact.isVerified).toBe(false);\n      expect(contact.confidence).toBe(0.4);\n    });\n\n    it('should handle partial data extraction', () => {\n      const partialData: ParsedCardData = {\n        name: 'Jane Smith',\n        // Missing company, email, phone\n        confidence: 0.6,\n        rawText: 'Jane Smith\\n[Illegible text]',\n      };\n\n      const contact = ocrScannerService.convertToContact(partialData);\n\n      expect(contact.fields).toHaveLength(1); // Only name field\n      expect(contact.needsReview).toBe(true);\n      \n      const nameField = contact.fields[0];\n      expect(nameField.type).toBe('name');\n      expect(nameField.value).toBe('Jane Smith');\n    });\n  });\n\n  describe('Configuration and Options', () => {\n    it('should respect minimum confidence threshold', async () => {\n      const options: ScanOptions = {\n        minConfidence: 0.9,\n      };\n\n      // Mock low confidence result\n      const { TextRecognition } = require('@react-native-ml-kit/text-recognition');\n      TextRecognition.recognize.mockResolvedValueOnce({\n        text: 'Blurry Name\\nunclear@email',\n        blocks: [\n          { text: 'Blurry Name', frame: { x: 10, y: 10, width: 80, height: 20 } },\n          { text: 'unclear@email', frame: { x: 10, y: 35, width: 90, height: 15 } },\n        ],\n      });\n\n      const result = await ocrScannerService.scanBusinessCard('file:///blurry-card.jpg', options);\n\n      // Should filter out results below threshold\n      expect(result.results.length).toBeLessThanOrEqual(1);\n      if (result.results.length > 0) {\n        expect(result.results[0].confidence).toBeGreaterThanOrEqual(0.9);\n      }\n    });\n\n    it('should apply auto-correction when enabled', async () => {\n      const options: ScanOptions = {\n        enableAutoCorrection: true,\n      };\n\n      // Mock text with common OCR errors\n      const { TextRecognition } = require('@react-native-ml-kit/text-recognition');\n      TextRecognition.recognize.mockResolvedValueOnce({\n        text: 'J0hn D0e\\nS0ftware Eng1neer\\nj0hn@exam1ple.c0m',\n        blocks: [\n          { text: 'J0hn D0e', frame: { x: 10, y: 10, width: 80, height: 20 } },\n          { text: 'S0ftware Eng1neer', frame: { x: 10, y: 35, width: 120, height: 15 } },\n          { text: 'j0hn@exam1ple.c0m', frame: { x: 10, y: 55, width: 130, height: 15 } },\n        ],\n      });\n\n      const result = await ocrScannerService.scanBusinessCard('file:///error-card.jpg', options);\n\n      expect(result.success).toBe(true);\n      // Auto-correction should improve the text quality\n      const parsedData = result.results[0];\n      expect(parsedData.name).not.toContain('0'); // Should correct 0 to O\n      expect(parsedData.email).not.toContain('1'); // Should correct 1 to l\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}