{"version":3,"names":["_profileErrorHandling","require","describe","it","networkError","name","message","error","ProfileErrorHandler","handleError","expect","type","toBe","ProfileErrorType","NETWORK_ERROR","retryable","userMessage","toContain","validationError","status","errors","email","VALIDATION_ERROR","details","validationErrors","toEqual","authError","AUTHENTICATION_ERROR","permissionError","PERMISSION_ERROR","uploadError","code","FILE_UPLOAD_ERROR","notFoundError","NOT_FOUND_ERROR","rateLimitError","RATE_LIMIT_ERROR","serverError","SERVER_ERROR","unknownError","UNKNOWN_ERROR","context","operation","userId","metadata","attempt","Error","timestamp","Date","createContext","updateContext","uploadContext","getUserFriendlyMessage","fieldContext","field","errorTypes","expectedText","forEach","_ref","toLowerCase","retryableError","shouldRetry","nonRetryableError","getRetryDelay","toBeLessThanOrEqual","createValidationError","phone","formatted","formatValidationErrors","toHaveLength","not","error1","error2","error3","isSameError","expectedSuggestions","_ref2","suggestions","getRecoverySuggestion","length","toBeGreaterThan","allSuggestions","join","consoleSpy","beforeEach","jest","spyOn","console","mockImplementation","afterEach","mockRestore","originalDev","global","__DEV__","logError","toHaveBeenCalledWith","objectContaining","toHaveBeenCalled","clearAllMocks","_asyncToGenerator2","default","fn","mockResolvedValue","result","retryWithBackoff","toHaveBeenCalledTimes","mockRejectedValueOnce","mockRejectedValue","rejects","toMatchObject","useFakeTimers","promise","advanceTimersByTime","useRealTimers","withProfileErrorHandling","originalError"],"sources":["profileErrorHandling.test.ts"],"sourcesContent":["/**\r\n * Profile Error Handling Unit Tests\r\n * \r\n * This test suite validates the ProfileErrorHandler class including error\r\n * classification, user-friendly messages, retry logic, and error recovery.\r\n */\r\n\r\nimport {\r\n  ProfileErrorHandler,\r\n  ProfileErrorType,\r\n  ProfileError,\r\n  ErrorContext,\r\n  retryWithBackoff,\r\n  withProfileErrorHandling,\r\n} from '../../../src/utils/profileErrorHandling';\r\nimport { ProfileValidationErrors } from '../../../src/types/profile';\r\n\r\ndescribe('ProfileErrorHandler', () => {\r\n  describe('Error Classification', () => {\r\n    it('should classify network errors correctly', () => {\r\n      const networkError = { name: 'NetworkError', message: 'Network connection failed' };\r\n      const error = ProfileErrorHandler.handleError(networkError);\r\n\r\n      expect(error.type).toBe(ProfileErrorType.NETWORK_ERROR);\r\n      expect(error.retryable).toBe(true);\r\n      expect(error.userMessage).toContain('Network connection error');\r\n    });\r\n\r\n    it('should classify validation errors correctly', () => {\r\n      const validationError = {\r\n        status: 400,\r\n        errors: { name: 'Name is required', email: 'Invalid email' },\r\n        message: 'Validation failed'\r\n      };\r\n      const error = ProfileErrorHandler.handleError(validationError);\r\n\r\n      expect(error.type).toBe(ProfileErrorType.VALIDATION_ERROR);\r\n      expect(error.retryable).toBe(false);\r\n      expect(error.details.validationErrors).toEqual(validationError.errors);\r\n    });\r\n\r\n    it('should classify authentication errors correctly', () => {\r\n      const authError = { status: 401, message: 'Unauthorized access' };\r\n      const error = ProfileErrorHandler.handleError(authError);\r\n\r\n      expect(error.type).toBe(ProfileErrorType.AUTHENTICATION_ERROR);\r\n      expect(error.retryable).toBe(false);\r\n      expect(error.userMessage).toContain('Authentication failed');\r\n    });\r\n\r\n    it('should classify permission errors correctly', () => {\r\n      const permissionError = { status: 403, message: 'Forbidden' };\r\n      const error = ProfileErrorHandler.handleError(permissionError);\r\n\r\n      expect(error.type).toBe(ProfileErrorType.PERMISSION_ERROR);\r\n      expect(error.retryable).toBe(false);\r\n    });\r\n\r\n    it('should classify file upload errors correctly', () => {\r\n      const uploadError = {\r\n        code: 'FILE_UPLOAD_ERROR',\r\n        message: 'File upload failed'\r\n      };\r\n      const error = ProfileErrorHandler.handleError(uploadError);\r\n\r\n      expect(error.type).toBe(ProfileErrorType.FILE_UPLOAD_ERROR);\r\n      expect(error.retryable).toBe(true);\r\n    });\r\n\r\n    it('should classify not found errors correctly', () => {\r\n      const notFoundError = { status: 404, message: 'Profile not found' };\r\n      const error = ProfileErrorHandler.handleError(notFoundError);\r\n\r\n      expect(error.type).toBe(ProfileErrorType.NOT_FOUND_ERROR);\r\n      expect(error.retryable).toBe(false);\r\n    });\r\n\r\n    it('should classify rate limit errors correctly', () => {\r\n      const rateLimitError = { status: 429, message: 'Too many requests' };\r\n      const error = ProfileErrorHandler.handleError(rateLimitError);\r\n\r\n      expect(error.type).toBe(ProfileErrorType.RATE_LIMIT_ERROR);\r\n      expect(error.retryable).toBe(true);\r\n    });\r\n\r\n    it('should classify server errors correctly', () => {\r\n      const serverError = { status: 500, message: 'Internal server error' };\r\n      const error = ProfileErrorHandler.handleError(serverError);\r\n\r\n      expect(error.type).toBe(ProfileErrorType.SERVER_ERROR);\r\n      expect(error.retryable).toBe(true);\r\n    });\r\n\r\n    it('should classify unknown errors correctly', () => {\r\n      const unknownError = { message: 'Something went wrong' };\r\n      const error = ProfileErrorHandler.handleError(unknownError);\r\n\r\n      expect(error.type).toBe(ProfileErrorType.UNKNOWN_ERROR);\r\n      expect(error.retryable).toBe(false);\r\n      expect(error.userMessage).toContain('unexpected error');\r\n    });\r\n\r\n    it('should include context in error details', () => {\r\n      const context: ErrorContext = {\r\n        operation: 'createProfile',\r\n        userId: 'user-123',\r\n        metadata: { attempt: 1 }\r\n      };\r\n      const error = ProfileErrorHandler.handleError(new Error('Test error'), context);\r\n\r\n      expect(error.details.context).toEqual(context);\r\n    });\r\n  });\r\n\r\n  describe('User-Friendly Messages', () => {\r\n    it('should return context-specific server error messages', () => {\r\n      const serverError: ProfileError = {\r\n        type: ProfileErrorType.SERVER_ERROR,\r\n        message: 'Server error',\r\n        timestamp: new Date(),\r\n        retryable: true,\r\n        userMessage: 'Server error occurred',\r\n      };\r\n\r\n      const createContext = { operation: 'create' };\r\n      const updateContext = { operation: 'update' };\r\n      const uploadContext = { operation: 'upload' };\r\n\r\n      expect(ProfileErrorHandler.getUserFriendlyMessage(serverError, createContext))\r\n        .toContain('Failed to create profile');\r\n      expect(ProfileErrorHandler.getUserFriendlyMessage(serverError, updateContext))\r\n        .toContain('Failed to update profile');\r\n      expect(ProfileErrorHandler.getUserFriendlyMessage(serverError, uploadContext))\r\n        .toContain('Failed to upload photo');\r\n    });\r\n\r\n    it('should return specific validation error messages', () => {\r\n      const validationError: ProfileError = {\r\n        type: ProfileErrorType.VALIDATION_ERROR,\r\n        message: 'Validation failed',\r\n        timestamp: new Date(),\r\n        retryable: false,\r\n        userMessage: 'Please check your input',\r\n        details: {\r\n          validationErrors: {\r\n            name: 'Name is required',\r\n            email: 'Invalid email format'\r\n          }\r\n        }\r\n      };\r\n\r\n      const fieldContext = { field: 'name' };\r\n      const message = ProfileErrorHandler.getUserFriendlyMessage(validationError, fieldContext);\r\n      \r\n      expect(message).toBe('Name is required');\r\n    });\r\n\r\n    it('should return generic validation message when no specific field', () => {\r\n      const validationError: ProfileError = {\r\n        type: ProfileErrorType.VALIDATION_ERROR,\r\n        message: 'Validation failed',\r\n        timestamp: new Date(),\r\n        retryable: false,\r\n        userMessage: 'Please check your input',\r\n        details: {\r\n          validationErrors: {\r\n            name: 'Name is required'\r\n          }\r\n        }\r\n      };\r\n\r\n      const message = ProfileErrorHandler.getUserFriendlyMessage(validationError);\r\n      \r\n      expect(message).toBe('Name is required');\r\n    });\r\n\r\n    it('should handle different error types with appropriate messages', () => {\r\n      const errorTypes = [\r\n        { type: ProfileErrorType.NETWORK_ERROR, expectedText: 'internet connection' },\r\n        { type: ProfileErrorType.AUTHENTICATION_ERROR, expectedText: 'session has expired' },\r\n        { type: ProfileErrorType.PERMISSION_ERROR, expectedText: 'permission' },\r\n        { type: ProfileErrorType.FILE_UPLOAD_ERROR, expectedText: 'Failed to upload' },\r\n        { type: ProfileErrorType.RATE_LIMIT_ERROR, expectedText: 'too many requests' },\r\n      ];\r\n\r\n      errorTypes.forEach(({ type, expectedText }) => {\r\n        const error: ProfileError = {\r\n          type,\r\n          message: 'Test error',\r\n          timestamp: new Date(),\r\n          retryable: true,\r\n          userMessage: 'Generic message',\r\n        };\r\n\r\n        const message = ProfileErrorHandler.getUserFriendlyMessage(error);\r\n        expect(message.toLowerCase()).toContain(expectedText.toLowerCase());\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('Retry Logic', () => {\r\n    it('should allow retry for retryable errors under max attempts', () => {\r\n      const retryableError: ProfileError = {\r\n        type: ProfileErrorType.NETWORK_ERROR,\r\n        message: 'Network error',\r\n        timestamp: new Date(),\r\n        retryable: true,\r\n        userMessage: 'Network error',\r\n      };\r\n\r\n      expect(ProfileErrorHandler.shouldRetry(retryableError, 0)).toBe(true);\r\n      expect(ProfileErrorHandler.shouldRetry(retryableError, 1)).toBe(true);\r\n      expect(ProfileErrorHandler.shouldRetry(retryableError, 2)).toBe(true);\r\n      expect(ProfileErrorHandler.shouldRetry(retryableError, 3)).toBe(false);\r\n    });\r\n\r\n    it('should not retry non-retryable errors', () => {\r\n      const nonRetryableError: ProfileError = {\r\n        type: ProfileErrorType.VALIDATION_ERROR,\r\n        message: 'Validation failed',\r\n        timestamp: new Date(),\r\n        retryable: false,\r\n        userMessage: 'Validation failed',\r\n      };\r\n\r\n      expect(ProfileErrorHandler.shouldRetry(nonRetryableError, 0)).toBe(false);\r\n    });\r\n\r\n    it('should not retry validation and permission errors even if marked retryable', () => {\r\n      const validationError: ProfileError = {\r\n        type: ProfileErrorType.VALIDATION_ERROR,\r\n        message: 'Validation failed',\r\n        timestamp: new Date(),\r\n        retryable: true,\r\n        userMessage: 'Validation failed',\r\n      };\r\n\r\n      const permissionError: ProfileError = {\r\n        type: ProfileErrorType.PERMISSION_ERROR,\r\n        message: 'Permission denied',\r\n        timestamp: new Date(),\r\n        retryable: true,\r\n        userMessage: 'Permission denied',\r\n      };\r\n\r\n      expect(ProfileErrorHandler.shouldRetry(validationError, 0)).toBe(false);\r\n      expect(ProfileErrorHandler.shouldRetry(permissionError, 0)).toBe(false);\r\n    });\r\n\r\n    it('should limit rate limit retries', () => {\r\n      const rateLimitError: ProfileError = {\r\n        type: ProfileErrorType.RATE_LIMIT_ERROR,\r\n        message: 'Rate limit exceeded',\r\n        timestamp: new Date(),\r\n        retryable: true,\r\n        userMessage: 'Rate limit exceeded',\r\n      };\r\n\r\n      expect(ProfileErrorHandler.shouldRetry(rateLimitError, 0)).toBe(true);\r\n      expect(ProfileErrorHandler.shouldRetry(rateLimitError, 1)).toBe(true);\r\n      expect(ProfileErrorHandler.shouldRetry(rateLimitError, 2)).toBe(false);\r\n    });\r\n  });\r\n\r\n  describe('Retry Delays', () => {\r\n    it('should calculate exponential backoff for rate limit errors', () => {\r\n      const rateLimitError: ProfileError = {\r\n        type: ProfileErrorType.RATE_LIMIT_ERROR,\r\n        message: 'Rate limit',\r\n        timestamp: new Date(),\r\n        retryable: true,\r\n        userMessage: 'Rate limit',\r\n      };\r\n\r\n      expect(ProfileErrorHandler.getRetryDelay(rateLimitError, 0)).toBe(2000); // 2s\r\n      expect(ProfileErrorHandler.getRetryDelay(rateLimitError, 1)).toBe(4000); // 4s\r\n      expect(ProfileErrorHandler.getRetryDelay(rateLimitError, 2)).toBe(8000); // 8s\r\n    });\r\n\r\n    it('should calculate linear increase for network errors', () => {\r\n      const networkError: ProfileError = {\r\n        type: ProfileErrorType.NETWORK_ERROR,\r\n        message: 'Network error',\r\n        timestamp: new Date(),\r\n        retryable: true,\r\n        userMessage: 'Network error',\r\n      };\r\n\r\n      expect(ProfileErrorHandler.getRetryDelay(networkError, 0)).toBe(1000); // 1s\r\n      expect(ProfileErrorHandler.getRetryDelay(networkError, 1)).toBe(2000); // 2s\r\n      expect(ProfileErrorHandler.getRetryDelay(networkError, 2)).toBe(3000); // 3s\r\n    });\r\n\r\n    it('should calculate exponential backoff for server errors', () => {\r\n      const serverError: ProfileError = {\r\n        type: ProfileErrorType.SERVER_ERROR,\r\n        message: 'Server error',\r\n        timestamp: new Date(),\r\n        retryable: true,\r\n        userMessage: 'Server error',\r\n      };\r\n\r\n      expect(ProfileErrorHandler.getRetryDelay(serverError, 0)).toBe(1000); // 1s\r\n      expect(ProfileErrorHandler.getRetryDelay(serverError, 1)).toBe(2000); // 2s\r\n      expect(ProfileErrorHandler.getRetryDelay(serverError, 2)).toBe(4000); // 4s\r\n    });\r\n\r\n    it('should cap retry delays at maximum values', () => {\r\n      const rateLimitError: ProfileError = {\r\n        type: ProfileErrorType.RATE_LIMIT_ERROR,\r\n        message: 'Rate limit',\r\n        timestamp: new Date(),\r\n        retryable: true,\r\n        userMessage: 'Rate limit',\r\n      };\r\n\r\n      const serverError: ProfileError = {\r\n        type: ProfileErrorType.SERVER_ERROR,\r\n        message: 'Server error',\r\n        timestamp: new Date(),\r\n        retryable: true,\r\n        userMessage: 'Server error',\r\n      };\r\n\r\n      // Very high attempt count should be capped\r\n      expect(ProfileErrorHandler.getRetryDelay(rateLimitError, 10)).toBeLessThanOrEqual(30000);\r\n      expect(ProfileErrorHandler.getRetryDelay(serverError, 10)).toBeLessThanOrEqual(10000);\r\n    });\r\n  });\r\n\r\n  describe('Error Utilities', () => {\r\n    it('should create validation error from validation result', () => {\r\n      const validationErrors: ProfileValidationErrors = {\r\n        name: 'Name is required',\r\n        email: 'Invalid email format',\r\n      };\r\n\r\n      const error = ProfileErrorHandler.createValidationError(validationErrors);\r\n\r\n      expect(error.type).toBe(ProfileErrorType.VALIDATION_ERROR);\r\n      expect(error.retryable).toBe(false);\r\n      expect(error.details.validationErrors).toEqual(validationErrors);\r\n      expect(error.userMessage).toBe('Name is required');\r\n    });\r\n\r\n    it('should format validation errors for display', () => {\r\n      const validationErrors: ProfileValidationErrors = {\r\n        name: 'Name is required',\r\n        email: 'Invalid email format',\r\n        phone: '', // Empty error should be filtered out\r\n      };\r\n\r\n      const formatted = ProfileErrorHandler.formatValidationErrors(validationErrors);\r\n\r\n      expect(formatted).toHaveLength(2);\r\n      expect(formatted).toContain('Name: Name is required');\r\n      expect(formatted).toContain('Email: Invalid email format');\r\n      expect(formatted).not.toContain('Phone:');\r\n    });\r\n\r\n    it('should compare errors correctly', () => {\r\n      const error1: ProfileError = {\r\n        type: ProfileErrorType.NETWORK_ERROR,\r\n        message: 'Network error',\r\n        code: 'NET_001',\r\n        timestamp: new Date(),\r\n        retryable: true,\r\n        userMessage: 'Network error',\r\n      };\r\n\r\n      const error2: ProfileError = {\r\n        type: ProfileErrorType.NETWORK_ERROR,\r\n        message: 'Network error',\r\n        code: 'NET_001',\r\n        timestamp: new Date(),\r\n        retryable: true,\r\n        userMessage: 'Network error',\r\n      };\r\n\r\n      const error3: ProfileError = {\r\n        type: ProfileErrorType.SERVER_ERROR,\r\n        message: 'Server error',\r\n        timestamp: new Date(),\r\n        retryable: true,\r\n        userMessage: 'Server error',\r\n      };\r\n\r\n      expect(ProfileErrorHandler.isSameError(error1, error2)).toBe(true);\r\n      expect(ProfileErrorHandler.isSameError(error1, error3)).toBe(false);\r\n    });\r\n\r\n    it('should provide recovery suggestions for different error types', () => {\r\n      const errorTypes = [\r\n        { type: ProfileErrorType.NETWORK_ERROR, expectedSuggestions: ['internet connection', 'Try again'] },\r\n        { type: ProfileErrorType.VALIDATION_ERROR, expectedSuggestions: ['highlighted fields', 'required fields'] },\r\n        { type: ProfileErrorType.FILE_UPLOAD_ERROR, expectedSuggestions: ['10MB', 'image format'] },\r\n        { type: ProfileErrorType.AUTHENTICATION_ERROR, expectedSuggestions: ['Log out', 'log in'] },\r\n        { type: ProfileErrorType.RATE_LIMIT_ERROR, expectedSuggestions: ['Wait', 'rapid requests'] },\r\n        { type: ProfileErrorType.SERVER_ERROR, expectedSuggestions: ['Try again later', 'support'] },\r\n      ];\r\n\r\n      errorTypes.forEach(({ type, expectedSuggestions }) => {\r\n        const error: ProfileError = {\r\n          type,\r\n          message: 'Test error',\r\n          timestamp: new Date(),\r\n          retryable: true,\r\n          userMessage: 'Test error',\r\n        };\r\n\r\n        const suggestions = ProfileErrorHandler.getRecoverySuggestion(error);\r\n        expect(suggestions.length).toBeGreaterThan(0);\r\n        \r\n        const allSuggestions = suggestions.join(' ').toLowerCase();\r\n        expectedSuggestions.forEach(expectedText => {\r\n          expect(allSuggestions).toContain(expectedText.toLowerCase());\r\n        });\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('Error Logging', () => {\r\n    let consoleSpy: jest.SpyInstance;\r\n\r\n    beforeEach(() => {\r\n      consoleSpy = jest.spyOn(console, 'error').mockImplementation();\r\n    });\r\n\r\n    afterEach(() => {\r\n      consoleSpy.mockRestore();\r\n    });\r\n\r\n    it('should log errors in development', () => {\r\n      const originalDev = (global as any).__DEV__;\r\n      (global as any).__DEV__ = true;\r\n\r\n      const error: ProfileError = {\r\n        type: ProfileErrorType.NETWORK_ERROR,\r\n        message: 'Network error',\r\n        timestamp: new Date(),\r\n        retryable: true,\r\n        userMessage: 'Network error',\r\n      };\r\n\r\n      const context: ErrorContext = { operation: 'test' };\r\n      ProfileErrorHandler.logError(error, context);\r\n\r\n      expect(consoleSpy).toHaveBeenCalledWith('Profile Error:', expect.objectContaining({\r\n        type: ProfileErrorType.NETWORK_ERROR,\r\n        message: 'Network error',\r\n        context,\r\n      }));\r\n\r\n      (global as any).__DEV__ = originalDev;\r\n    });\r\n\r\n    it('should not log to console in production', () => {\r\n      const originalDev = (global as any).__DEV__;\r\n      (global as any).__DEV__ = false;\r\n\r\n      const error: ProfileError = {\r\n        type: ProfileErrorType.NETWORK_ERROR,\r\n        message: 'Network error',\r\n        timestamp: new Date(),\r\n        retryable: true,\r\n        userMessage: 'Network error',\r\n      };\r\n\r\n      ProfileErrorHandler.logError(error);\r\n\r\n      expect(consoleSpy).not.toHaveBeenCalled();\r\n\r\n      (global as any).__DEV__ = originalDev;\r\n    });\r\n  });\r\n});\r\n\r\ndescribe('Retry Functions', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  describe('retryWithBackoff', () => {\r\n    it('should succeed on first attempt', async () => {\r\n      const operation = jest.fn().mockResolvedValue('success');\r\n\r\n      const result = await retryWithBackoff(operation);\r\n\r\n      expect(result).toBe('success');\r\n      expect(operation).toHaveBeenCalledTimes(1);\r\n    });\r\n\r\n    it('should retry on retryable errors', async () => {\r\n      const operation = jest.fn()\r\n        .mockRejectedValueOnce(new Error('Network error'))\r\n        .mockRejectedValueOnce(new Error('Network error'))\r\n        .mockResolvedValue('success');\r\n\r\n      const result = await retryWithBackoff(operation, { operation: 'test' });\r\n\r\n      expect(result).toBe('success');\r\n      expect(operation).toHaveBeenCalledTimes(3);\r\n    });\r\n\r\n    it('should not retry non-retryable errors', async () => {\r\n      const validationError = { status: 400, errors: { name: 'Required' } };\r\n      const operation = jest.fn().mockRejectedValue(validationError);\r\n\r\n      await expect(retryWithBackoff(operation, { operation: 'test' }))\r\n        .rejects.toMatchObject({\r\n          type: ProfileErrorType.VALIDATION_ERROR,\r\n        });\r\n\r\n      expect(operation).toHaveBeenCalledTimes(1);\r\n    });\r\n\r\n    it('should respect max retries', async () => {\r\n      const networkError = { name: 'NetworkError', message: 'Network failed' };\r\n      const operation = jest.fn().mockRejectedValue(networkError);\r\n\r\n      await expect(retryWithBackoff(operation, { operation: 'test' }, 2))\r\n        .rejects.toMatchObject({\r\n          type: ProfileErrorType.NETWORK_ERROR,\r\n        });\r\n\r\n      expect(operation).toHaveBeenCalledTimes(3); // Initial + 2 retries\r\n    });\r\n\r\n    it('should wait between retries', async () => {\r\n      jest.useFakeTimers();\r\n      const networkError = { name: 'NetworkError', message: 'Network failed' };\r\n      const operation = jest.fn().mockRejectedValue(networkError);\r\n\r\n      const promise = retryWithBackoff(operation, { operation: 'test' }, 1);\r\n\r\n      // Fast-forward past the retry delay\r\n      jest.advanceTimersByTime(2000);\r\n\r\n      await expect(promise).rejects.toMatchObject({\r\n        type: ProfileErrorType.NETWORK_ERROR,\r\n      });\r\n\r\n      jest.useRealTimers();\r\n    }, 10000);\r\n  });\r\n\r\n  describe('withProfileErrorHandling', () => {\r\n    it('should return result on success', async () => {\r\n      const operation = jest.fn().mockResolvedValue('success');\r\n\r\n      const result = await withProfileErrorHandling(operation);\r\n\r\n      expect(result).toBe('success');\r\n      expect(operation).toHaveBeenCalledTimes(1);\r\n    });\r\n\r\n    it('should wrap and throw ProfileError on failure', async () => {\r\n      const originalError = new Error('Original error');\r\n      const operation = jest.fn().mockRejectedValue(originalError);\r\n\r\n      await expect(withProfileErrorHandling(operation, { operation: 'test' }))\r\n        .rejects.toMatchObject({\r\n          type: ProfileErrorType.UNKNOWN_ERROR,\r\n          message: 'Original error',\r\n        });\r\n    });\r\n\r\n    it('should preserve error context', async () => {\r\n      const operation = jest.fn().mockRejectedValue(new Error('Test error'));\r\n      const context = { operation: 'test', userId: 'user-123' };\r\n\r\n      try {\r\n        await withProfileErrorHandling(operation, context);\r\n      } catch (error) {\r\n        expect((error as ProfileError).details.context).toEqual(context);\r\n      }\r\n    });\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}