b4411c469e1cb7e737232a481f4deee5
_getJestObj().mock('react-native', function () {
  return {
    Platform: {
      OS: 'ios'
    },
    Alert: {
      alert: jest.fn()
    },
    Linking: {
      openURL: jest.fn(),
      canOpenURL: jest.fn(function () {
        return Promise.resolve(true);
      })
    }
  };
});
_getJestObj().mock('react-native-share', function () {
  return {
    open: jest.fn(function () {
      return Promise.resolve({
        success: true
      });
    })
  };
});
_getJestObj().mock('react-native-fs', function () {
  return {
    CachesDirectoryPath: '/mock/cache',
    DocumentDirectoryPath: '/mock/documents',
    writeFile: jest.fn(function () {
      return Promise.resolve();
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _businessCardService = require("../../src/services/businessCardService");
var _businessCardValidation = require("../../src/utils/businessCardValidation");
var _qrCodeGenerator = require("../../src/utils/qrCodeGenerator");
var _sharingUtils = require("../../src/utils/sharingUtils");
var _walletUtils = require("../../src/utils/walletUtils");
var _exportUtils = require("../../src/utils/exportUtils");
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('Business Card Integration Tests', function () {
  var completeCardData = {
    basicInfo: {
      name: 'Sarah Chen',
      title: 'Co-Founder & CTO',
      company: 'AI Vision Labs',
      email: 'sarah@aivisionlabs.ai',
      phone: '+1-415-555-0123',
      location: 'Palo Alto, CA',
      bio: 'Building the future of computer vision with deep learning. Former Google AI researcher with 8 years in ML.',
      profilePhoto: 'https://example.com/sarah-profile.jpg',
      companyLogo: 'https://example.com/aivision-logo.png'
    },
    startupInfo: {
      fundingStage: 'series-a',
      fundingAmount: '$10M',
      fundingRound: 'Series A',
      teamSize: '11-25',
      foundedYear: 2022,
      industry: ['AI', 'Computer Vision', 'B2B'],
      businessModel: 'b2b',
      revenue: '100k-1m',
      customers: '150+ enterprise clients',
      growth: '40% MoM',
      seekingFunding: false,
      seekingTalent: true,
      seekingPartners: true,
      seekingMentors: false
    },
    socialLinks: {
      linkedin: 'https://linkedin.com/in/sarahchen',
      twitter: 'https://twitter.com/sarahchen_ai',
      github: 'https://github.com/sarahchen',
      website: 'https://aivisionlabs.ai',
      medium: 'https://medium.com/@sarahchen'
    },
    customFields: [{
      id: '1',
      label: 'Patents Filed',
      value: '3',
      type: 'number',
      icon: 'ðŸ“‹',
      isPublic: true,
      order: 1
    }, {
      id: '2',
      label: 'Research Papers',
      value: '12',
      type: 'number',
      icon: 'ðŸ“„',
      isPublic: true,
      order: 2
    }, {
      id: '3',
      label: 'Investment Range',
      value: '$50K - $500K',
      type: 'text',
      icon: 'ðŸ’°',
      isPublic: true,
      order: 3
    }, {
      id: '4',
      label: 'Calendly',
      value: 'https://calendly.com/sarahchen',
      type: 'url',
      icon: 'ðŸ“…',
      isPublic: true,
      order: 4
    }],
    themeId: 'tech-professional-theme',
    templateId: 'startup-cto-template',
    isDefault: true,
    isPublic: true
  };
  describe('End-to-End Card Creation Workflow', function () {
    test('should create complete business card with all field types', (0, _asyncToGenerator2.default)(function* () {
      var _result$card, _result$card2, _result$card3;
      var validationErrors = (0, _businessCardValidation.validateBusinessCardForm)(completeCardData);
      expect(Object.keys(validationErrors)).toHaveLength(0);
      var mockCreatedCard = Object.assign({
        id: 'card-integration-test-123',
        userId: 'user-test-456'
      }, completeCardData, {
        theme: {
          id: 'tech-professional-theme',
          name: 'Tech Professional',
          primaryColor: '#3b82f6',
          secondaryColor: '#1e40af',
          backgroundColor: '#ffffff',
          textColor: '#1f2937',
          accentColor: '#10b981',
          fontFamily: 'Inter',
          headerFontSize: 24,
          bodyFontSize: 14,
          borderRadius: 8,
          padding: 16,
          spacing: 8
        },
        template: {
          id: 'startup-cto-template',
          name: 'Startup CTO',
          category: 'tech',
          layout: 'standard',
          elements: [],
          isPopular: true,
          isPremium: false,
          previewImage: 'https://example.com/template-preview.png'
        },
        shareCode: 'integration-test-share-code',
        isActive: true,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      });
      jest.spyOn(_businessCardService.businessCardService, 'createCard').mockResolvedValue({
        success: true,
        card: mockCreatedCard
      });
      var result = yield _businessCardService.businessCardService.createCard(completeCardData);
      expect(result.success).toBe(true);
      expect(result.card).toBeDefined();
      expect((_result$card = result.card) == null ? void 0 : _result$card.basicInfo.name).toBe('Sarah Chen');
      expect((_result$card2 = result.card) == null || (_result$card2 = _result$card2.startupInfo) == null ? void 0 : _result$card2.fundingStage).toBe('series-a');
      expect((_result$card3 = result.card) == null ? void 0 : _result$card3.customFields).toHaveLength(4);
    }));
    test('should handle card creation with minimal data', (0, _asyncToGenerator2.default)(function* () {
      var minimalCardData = {
        basicInfo: {
          name: 'John Minimal',
          title: 'Developer',
          company: 'DevCorp',
          email: 'john@devcorp.com'
        },
        socialLinks: {},
        customFields: [],
        themeId: 'minimal-theme',
        templateId: 'simple-template'
      };
      var validationErrors = (0, _businessCardValidation.validateBusinessCardForm)(minimalCardData);
      expect(Object.keys(validationErrors)).toHaveLength(0);
      jest.spyOn(_businessCardService.businessCardService, 'createCard').mockResolvedValue({
        success: true,
        card: Object.assign({
          id: 'minimal-card-123',
          userId: 'user-456'
        }, minimalCardData, {
          shareCode: 'minimal-share-code'
        })
      });
      var result = yield _businessCardService.businessCardService.createCard(minimalCardData);
      expect(result.success).toBe(true);
    }));
  });
  describe('QR Code Generation and Scanning Integration', function () {
    test('should generate and parse QR codes for complete workflow', (0, _asyncToGenerator2.default)(function* () {
      var mockCard = Object.assign({
        id: 'qr-test-card',
        userId: 'user-123'
      }, completeCardData, {
        shareCode: 'qr-test-share-code'
      });
      var urlQR = (0, _qrCodeGenerator.generateQRCode)(mockCard, 'url');
      expect(urlQR.type).toBe('url');
      expect(urlQR.data).toContain('qr-test-share-code');
      var parsedURL = (0, _qrCodeGenerator.parseQRScanResult)(urlQR.data);
      expect(parsedURL.type).toBe('url');
      expect(parsedURL.parsed.url).toBe(urlQR.data);
      var vCardQR = (0, _qrCodeGenerator.generateQRCode)(mockCard, 'vcard');
      expect(vCardQR.type).toBe('vcard');
      expect(vCardQR.data).toContain('BEGIN:VCARD');
      expect(vCardQR.data).toContain('Sarah Chen');
      var parsedVCard = (0, _qrCodeGenerator.parseQRScanResult)(vCardQR.data);
      expect(parsedVCard.type).toBe('vcard');
      expect(parsedVCard.parsed.name).toBe('Sarah Chen');
      expect(parsedVCard.parsed.email).toBe('sarah@aivisionlabs.ai');
      var contactQR = (0, _qrCodeGenerator.generateQRCode)(mockCard, 'contact');
      expect(contactQR.type).toBe('text');
      expect(contactQR.data).toContain('Sarah Chen');
      expect(contactQR.data).toContain('+1-415-555-0123');
    }));
    test('should handle QR code generation with different card configurations', (0, _asyncToGenerator2.default)(function* () {
      var configurations = [{
        name: 'Minimal',
        socialLinks: {}
      }, {
        name: 'Social Heavy',
        socialLinks: {
          linkedin: 'https://linkedin.com/in/user',
          twitter: 'https://twitter.com/user',
          github: 'https://github.com/user',
          instagram: 'https://instagram.com/user',
          facebook: 'https://facebook.com/user'
        }
      }, {
        name: 'Custom Fields Heavy',
        customFields: Array.from({
          length: 10
        }, function (_, i) {
          return {
            id: String(i),
            label: `Field ${i}`,
            value: `Value ${i}`,
            type: 'text',
            isPublic: true,
            order: i
          };
        })
      }];
      for (var config of configurations) {
        var testCard = Object.assign({
          id: `test-card-${config.name.toLowerCase()}`,
          userId: 'user-123'
        }, completeCardData, config, {
          shareCode: `share-${config.name.toLowerCase()}`
        });
        var qrCode = (0, _qrCodeGenerator.generateQRCode)(testCard, 'vcard');
        expect(qrCode.type).toBe('vcard');
        var parsed = (0, _qrCodeGenerator.parseQRScanResult)(qrCode.data);
        expect(parsed.type).toBe('vcard');
        expect(parsed.parsed.name).toBe('Sarah Chen');
      }
    }));
  });
  describe('Sharing Workflow Integration', function () {
    test('should complete full sharing workflow', (0, _asyncToGenerator2.default)(function* () {
      var mockCard = Object.assign({
        id: 'sharing-test-card',
        userId: 'user-123'
      }, completeCardData, {
        shareCode: 'sharing-test-code'
      });
      var shareData = yield (0, _sharingUtils.generateShareData)(mockCard);
      expect(shareData.title).toContain('Sarah Chen');
      expect(shareData.url).toContain('sharing-test-code');
      expect(shareData.message).toContain('Co-Founder & CTO');
      var sharingMethods = ['native', 'email', 'sms', 'whatsapp', 'linkedin', 'twitter'];
      for (var method of sharingMethods) {
        var result = yield (0, _sharingUtils.shareCard)(mockCard, {
          method: method
        });
        expect(result).toBe(true);
      }
    }));
    test('should handle sharing with custom messages', (0, _asyncToGenerator2.default)(function* () {
      var mockCard = Object.assign({
        id: 'custom-message-card',
        userId: 'user-123'
      }, completeCardData, {
        shareCode: 'custom-message-code'
      });
      var customMessage = 'Check out my updated business card with new contact info!';
      var result = yield (0, _sharingUtils.shareCard)(mockCard, {
        method: 'native',
        message: customMessage
      });
      expect(result).toBe(true);
    }));
  });
  describe('Wallet Integration Workflow', function () {
    test('should complete wallet integration for both platforms', (0, _asyncToGenerator2.default)(function* () {
      var mockCard = Object.assign({
        id: 'wallet-test-card',
        userId: 'user-123'
      }, completeCardData, {
        shareCode: 'wallet-test-code'
      });
      require('react-native').Platform.OS = 'ios';
      var iosResult = yield (0, _walletUtils.saveToWallet)(mockCard);
      expect(iosResult).toBe(true);
      require('react-native').Platform.OS = 'android';
      var androidResult = yield (0, _walletUtils.saveToWallet)(mockCard);
      expect(androidResult).toBe(true);
    }));
  });
  describe('Export and Import Workflow', function () {
    test('should export card in multiple formats', (0, _asyncToGenerator2.default)(function* () {
      var mockCard = Object.assign({
        id: 'export-test-card',
        userId: 'user-123'
      }, completeCardData, {
        shareCode: 'export-test-code'
      });
      var exportFormats = ['pdf', 'vcf', 'json'];
      for (var format of exportFormats) {
        var result = yield (0, _exportUtils.exportBusinessCard)(mockCard, format, {
          includeQRCode: true,
          includeAnalytics: false
        });
        expect(result.success).toBe(true);
        expect(result.fileName).toContain(format);
      }
    }));
    test('should handle CSV export for multiple cards', (0, _asyncToGenerator2.default)(function* () {
      var mockCards = [Object.assign({
        id: 'csv-card-1',
        userId: 'user-123'
      }, completeCardData, {
        shareCode: 'csv-code-1'
      }), {
        id: 'csv-card-2',
        userId: 'user-123',
        basicInfo: {
          name: 'John Doe',
          title: 'Developer',
          company: 'DevCorp',
          email: 'john@devcorp.com'
        },
        socialLinks: {},
        customFields: [],
        themeId: 'theme-1',
        templateId: 'template-1',
        shareCode: 'csv-code-2'
      }];
      var result = yield (0, _exportUtils.exportBusinessCard)(mockCards, 'csv', {
        includeQRCode: false,
        includeAnalytics: true
      });
      expect(result.success).toBe(true);
      expect(result.fileName).toContain('.csv');
    }));
  });
  describe('Deep Linking Integration', function () {
    test('should handle complete deep linking workflow', (0, _asyncToGenerator2.default)(function* () {
      var _require = require('../../src/utils/deepLinking'),
        parseDeepLink = _require.parseDeepLink,
        handleDeepLink = _require.handleDeepLink;
      var mockNavigation = {
        navigate: jest.fn()
      };
      var deepLinks = ['digbiz://card/integration-test-123', 'https://digbiz.app/card/integration-test-123', 'https://digbiz.app/open/card/integration-test-123?source=qr'];
      for (var link of deepLinks) {
        var parsed = parseDeepLink(link);
        expect(parsed).toBeTruthy();
        expect(parsed == null ? void 0 : parsed.cardId).toBe('integration-test-123');
        var result = yield handleDeepLink(link, mockNavigation);
        expect(result.success).toBe(true);
        expect(mockNavigation.navigate).toHaveBeenCalled();
      }
    }));
  });
  describe('Error Scenarios and Recovery', function () {
    test('should handle network failures gracefully', (0, _asyncToGenerator2.default)(function* () {
      jest.spyOn(_businessCardService.businessCardService, 'createCard').mockRejectedValue(new Error('Network request failed'));
      try {
        yield _businessCardService.businessCardService.createCard(completeCardData);
        fail('Should have thrown an error');
      } catch (error) {
        expect(error).toBeInstanceOf(Error);
        expect(error.message).toContain('Network request failed');
      }
    }));
    test('should handle validation errors during creation', (0, _asyncToGenerator2.default)(function* () {
      var _validationErrors$bas, _validationErrors$bas2;
      var invalidCardData = Object.assign({}, completeCardData, {
        basicInfo: Object.assign({}, completeCardData.basicInfo, {
          name: '',
          email: 'invalid-email'
        })
      });
      var validationErrors = (0, _businessCardValidation.validateBusinessCardForm)(invalidCardData);
      expect(Object.keys(validationErrors)).toHaveLength(1);
      expect((_validationErrors$bas = validationErrors.basicInfo) == null ? void 0 : _validationErrors$bas.name).toBeDefined();
      expect((_validationErrors$bas2 = validationErrors.basicInfo) == null ? void 0 : _validationErrors$bas2.email).toBeDefined();
    }));
    test('should handle service unavailable scenarios', (0, _asyncToGenerator2.default)(function* () {
      jest.spyOn(_businessCardService.businessCardService, 'createCard').mockResolvedValue({
        success: false,
        message: 'Service temporarily unavailable'
      });
      var result = yield _businessCardService.businessCardService.createCard(completeCardData);
      expect(result.success).toBe(false);
      expect(result.message).toContain('unavailable');
    }));
  });
  describe('Performance and Load Testing', function () {
    test('should handle multiple concurrent card operations', (0, _asyncToGenerator2.default)(function* () {
      var promises = Array.from({
        length: 10
      }, function (_, i) {
        var cardData = Object.assign({}, completeCardData, {
          basicInfo: Object.assign({}, completeCardData.basicInfo, {
            name: `Test User ${i}`,
            email: `test${i}@example.com`
          })
        });
        jest.spyOn(_businessCardService.businessCardService, 'createCard').mockResolvedValue({
          success: true,
          card: Object.assign({
            id: `concurrent-card-${i}`,
            userId: 'user-123'
          }, cardData, {
            shareCode: `concurrent-share-${i}`
          })
        });
        return _businessCardService.businessCardService.createCard(cardData);
      });
      var results = yield Promise.all(promises);
      results.forEach(function (result, i) {
        var _result$card4;
        expect(result.success).toBe(true);
        expect((_result$card4 = result.card) == null ? void 0 : _result$card4.basicInfo.name).toBe(`Test User ${i}`);
      });
    }));
    test('should complete full workflow within performance bounds', (0, _asyncToGenerator2.default)(function* () {
      var startTime = performance.now();
      var mockCard = Object.assign({
        id: 'performance-test-card',
        userId: 'user-123'
      }, completeCardData, {
        shareCode: 'performance-test-code'
      });
      var validationErrors = (0, _businessCardValidation.validateBusinessCardForm)(completeCardData);
      expect(Object.keys(validationErrors)).toHaveLength(0);
      var urlQR = (0, _qrCodeGenerator.generateQRCode)(mockCard, 'url');
      var vCardQR = (0, _qrCodeGenerator.generateQRCode)(mockCard, 'vcard');
      expect(urlQR.data).toBeTruthy();
      expect(vCardQR.data).toBeTruthy();
      yield (0, _sharingUtils.shareCard)(mockCard, {
        method: 'native'
      });
      yield (0, _exportUtils.exportBusinessCard)(mockCard, 'vcf', {
        includeQRCode: true,
        includeAnalytics: false
      });
      var endTime = performance.now();
      var totalTime = endTime - startTime;
      expect(totalTime).toBeLessThan(2000);
    }));
  });
  describe('Data Consistency and Integrity', function () {
    test('should maintain data consistency across all operations', (0, _asyncToGenerator2.default)(function* () {
      var mockCard = Object.assign({
        id: 'consistency-test-card',
        userId: 'user-123'
      }, completeCardData, {
        shareCode: 'consistency-test-code'
      });
      var qrCode = (0, _qrCodeGenerator.generateQRCode)(mockCard, 'vcard');
      var parsedData = (0, _qrCodeGenerator.parseQRScanResult)(qrCode.data);
      expect(parsedData.parsed.name).toBe(mockCard.basicInfo.name);
      expect(parsedData.parsed.email).toBe(mockCard.basicInfo.email);
      expect(parsedData.parsed.company).toBe(mockCard.basicInfo.company);
      var shareData = yield (0, _sharingUtils.generateShareData)(mockCard);
      expect(shareData.title).toContain(mockCard.basicInfo.name);
      expect(shareData.url).toContain(mockCard.shareCode);
      var exportResult = yield (0, _exportUtils.exportBusinessCard)(mockCard, 'json', {
        includeQRCode: false,
        includeAnalytics: false
      });
      expect(exportResult.success).toBe(true);
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,