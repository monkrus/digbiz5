938c087deb521fc86fa2d91738853d87
_getJestObj().mock('../../src/services/tokenStorage');
_getJestObj().mock('../../src/utils/tokenUtils');
_getJestObj().mock('../../src/utils/config', function () {
  return {
    AppConfig: {
      apiUrl: 'https://api.test.com',
      apiTimeout: 10000
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _authService = require("../../src/services/authService");
var _tokenStorage = require("../../src/services/tokenStorage");
var _tokenUtils = require("../../src/utils/tokenUtils");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
global.fetch = jest.fn();
describe('AuthenticationService', function () {
  var authService;
  var mockTokenStorage = _tokenStorage.tokenStorage;
  var mockValidateTokens = _tokenUtils.validateTokens;
  var mockIsRefreshTokenValid = _tokenUtils.isRefreshTokenValid;
  var mockFetch = global.fetch;
  var mockTokens = {
    accessToken: 'mock-access-token',
    refreshToken: 'mock-refresh-token',
    expiresIn: 3600,
    refreshExpiresIn: 604800
  };
  var mockUser = {
    id: '123',
    email: 'test@example.com',
    name: 'Test User',
    avatar: null,
    emailVerified: true,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString()
  };
  beforeEach(function () {
    authService = new _authService.AuthenticationService();
    jest.clearAllMocks();
    mockFetch.mockResolvedValue({
      ok: true,
      json: function json() {
        return Promise.resolve({});
      },
      status: 200,
      statusText: 'OK'
    });
  });
  describe('Initialization', function () {
    it('should initialize auth state on construction', (0, _asyncToGenerator2.default)(function* () {
      mockTokenStorage.getTokens.mockResolvedValue(mockTokens);
      mockTokenStorage.hasValidTokens.mockResolvedValue(true);
      new _authService.AuthenticationService();
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 100);
      });
      expect(mockTokenStorage.getTokens).toHaveBeenCalled();
      expect(mockTokenStorage.hasValidTokens).toHaveBeenCalled();
    }), 10000);
    it('should handle initialization errors gracefully', (0, _asyncToGenerator2.default)(function* () {
      var consoleSpy = jest.spyOn(console, 'error').mockImplementation();
      mockTokenStorage.getTokens.mockRejectedValue(new Error('Storage error'));
      new _authService.AuthenticationService();
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 100);
      });
      expect(consoleSpy).toHaveBeenCalledWith('Failed to initialize auth state:', expect.any(Error));
      consoleSpy.mockRestore();
    }), 10000);
  });
  describe('Login', function () {
    var loginCredentials = {
      email: 'test@example.com',
      password: 'password123'
    };
    it('should login successfully with valid credentials', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        message: 'Login successful',
        tokens: mockTokens,
        user: mockUser
      };
      mockFetch.mockResolvedValue({
        ok: true,
        json: function json() {
          return Promise.resolve(mockResponse);
        }
      });
      var result = yield authService.login(loginCredentials);
      expect(mockFetch).toHaveBeenCalledWith('https://api.test.com/auth/login', expect.objectContaining({
        method: 'POST',
        body: JSON.stringify({
          email: 'test@example.com',
          password: 'password123'
        })
      }));
      expect(mockTokenStorage.setTokens).toHaveBeenCalledWith(mockTokens);
      expect(result).toEqual(mockResponse);
    }));
    it('should trim and lowercase email before login', (0, _asyncToGenerator2.default)(function* () {
      var credentialsWithSpaces = {
        email: '  TEST@EXAMPLE.COM  ',
        password: 'password123'
      };
      mockFetch.mockResolvedValue({
        ok: true,
        json: function json() {
          return Promise.resolve({
            success: true
          });
        }
      });
      yield authService.login(credentialsWithSpaces);
      expect(mockFetch).toHaveBeenCalledWith(expect.any(String), expect.objectContaining({
        body: JSON.stringify({
          email: 'test@example.com',
          password: 'password123'
        })
      }));
    }));
    it('should throw error on login failure', (0, _asyncToGenerator2.default)(function* () {
      var errorResponse = {
        message: 'Invalid credentials'
      };
      mockFetch.mockResolvedValue({
        ok: false,
        status: 401,
        statusText: 'Unauthorized',
        json: function json() {
          return Promise.resolve(errorResponse);
        }
      });
      yield expect(authService.login(loginCredentials)).rejects.toThrow('Invalid credentials');
    }));
    it('should handle network errors during login', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockRejectedValue(new Error('Network error'));
      yield expect(authService.login(loginCredentials)).rejects.toThrow('Network error');
    }));
  });
  describe('Registration', function () {
    var registerData = {
      name: 'John Doe',
      email: 'john@example.com',
      password: 'password123',
      confirmPassword: 'password123'
    };
    it('should register successfully with valid data', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        message: 'Registration successful',
        tokens: mockTokens,
        user: Object.assign({}, mockUser, {
          name: 'John Doe',
          email: 'john@example.com'
        })
      };
      mockFetch.mockResolvedValue({
        ok: true,
        json: function json() {
          return Promise.resolve(mockResponse);
        }
      });
      var result = yield authService.register(registerData);
      expect(mockFetch).toHaveBeenCalledWith('https://api.test.com/auth/register', expect.objectContaining({
        method: 'POST',
        body: JSON.stringify({
          email: 'john@example.com',
          password: 'password123',
          name: 'John Doe'
        })
      }));
      expect(mockTokenStorage.setTokens).toHaveBeenCalledWith(mockTokens);
      expect(result).toEqual(mockResponse);
    }));
    it('should throw error when passwords do not match', (0, _asyncToGenerator2.default)(function* () {
      var invalidData = Object.assign({}, registerData, {
        confirmPassword: 'different-password'
      });
      yield expect(authService.register(invalidData)).rejects.toThrow('Passwords do not match');
      expect(mockFetch).not.toHaveBeenCalled();
    }));
    it('should trim name and lowercase email before registration', (0, _asyncToGenerator2.default)(function* () {
      var dataWithSpaces = {
        name: '  John Doe  ',
        email: '  JOHN@EXAMPLE.COM  ',
        password: 'password123',
        confirmPassword: 'password123'
      };
      mockFetch.mockResolvedValue({
        ok: true,
        json: function json() {
          return Promise.resolve({
            success: true
          });
        }
      });
      yield authService.register(dataWithSpaces);
      expect(mockFetch).toHaveBeenCalledWith(expect.any(String), expect.objectContaining({
        body: JSON.stringify({
          email: 'john@example.com',
          password: 'password123',
          name: 'John Doe'
        })
      }));
    }));
  });
  describe('Logout', function () {
    it('should logout successfully and clear tokens', (0, _asyncToGenerator2.default)(function* () {
      mockTokenStorage.getTokens.mockResolvedValue(mockTokens);
      mockFetch.mockResolvedValue({
        ok: true,
        json: function json() {
          return Promise.resolve({});
        }
      });
      yield authService.logout();
      expect(mockFetch).toHaveBeenCalledWith('https://api.test.com/auth/logout', expect.objectContaining({
        method: 'POST',
        body: JSON.stringify({
          refreshToken: mockTokens.refreshToken
        })
      }));
      expect(mockTokenStorage.removeTokens).toHaveBeenCalled();
    }));
    it('should clear local tokens even if server logout fails', (0, _asyncToGenerator2.default)(function* () {
      var consoleSpy = jest.spyOn(console, 'error').mockImplementation();
      mockTokenStorage.getTokens.mockResolvedValue(mockTokens);
      mockFetch.mockRejectedValue(new Error('Server error'));
      yield authService.logout();
      expect(mockTokenStorage.removeTokens).toHaveBeenCalled();
      expect(consoleSpy).toHaveBeenCalledWith('Logout API call failed:', expect.any(Error));
      consoleSpy.mockRestore();
    }));
    it('should handle logout when no tokens exist', (0, _asyncToGenerator2.default)(function* () {
      mockTokenStorage.getTokens.mockResolvedValue(null);
      yield authService.logout();
      expect(mockTokenStorage.removeTokens).toHaveBeenCalled();
    }));
  });
  describe('Social Login', function () {
    var googleLoginData = {
      accessToken: 'google-access-token',
      idToken: 'google-id-token',
      profile: {
        id: 'google-123',
        email: 'user@gmail.com',
        name: 'Google User'
      }
    };
    var linkedinLoginData = {
      accessToken: 'linkedin-access-token',
      profile: {
        id: 'linkedin-123',
        email: 'user@linkedin.com',
        name: 'LinkedIn User'
      }
    };
    it('should login with Google successfully', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        message: 'Google login successful',
        tokens: mockTokens,
        user: mockUser
      };
      mockFetch.mockResolvedValue({
        ok: true,
        json: function json() {
          return Promise.resolve(mockResponse);
        }
      });
      var result = yield authService.loginWithGoogle(googleLoginData);
      expect(mockFetch).toHaveBeenCalledWith('https://api.test.com/auth/oauth/google', expect.objectContaining({
        method: 'POST',
        body: JSON.stringify(googleLoginData)
      }));
      expect(mockTokenStorage.setTokens).toHaveBeenCalledWith(mockTokens);
      expect(result).toEqual(mockResponse);
    }));
    it('should login with LinkedIn successfully', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        message: 'LinkedIn login successful',
        tokens: mockTokens,
        user: mockUser
      };
      mockFetch.mockResolvedValue({
        ok: true,
        json: function json() {
          return Promise.resolve(mockResponse);
        }
      });
      var result = yield authService.loginWithLinkedIn(linkedinLoginData);
      expect(mockFetch).toHaveBeenCalledWith('https://api.test.com/auth/oauth/linkedin', expect.objectContaining({
        method: 'POST',
        body: JSON.stringify(linkedinLoginData)
      }));
      expect(mockTokenStorage.setTokens).toHaveBeenCalledWith(mockTokens);
      expect(result).toEqual(mockResponse);
    }));
    it('should handle Google login errors', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockResolvedValue({
        ok: false,
        status: 400,
        statusText: 'Bad Request',
        json: function json() {
          return Promise.resolve({
            message: 'Invalid Google token'
          });
        }
      });
      yield expect(authService.loginWithGoogle(googleLoginData)).rejects.toThrow('Invalid Google token');
    }));
    it('should handle LinkedIn login errors', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockResolvedValue({
        ok: false,
        status: 400,
        statusText: 'Bad Request',
        json: function json() {
          return Promise.resolve({
            message: 'Invalid LinkedIn token'
          });
        }
      });
      yield expect(authService.loginWithLinkedIn(linkedinLoginData)).rejects.toThrow('Invalid LinkedIn token');
    }));
  });
  describe('Password Reset', function () {
    var resetData = {
      email: 'user@example.com'
    };
    var updateData = {
      token: 'reset-token',
      newPassword: 'newpassword123',
      confirmPassword: 'newpassword123'
    };
    it('should request password reset successfully', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        message: 'Password reset email sent'
      };
      mockFetch.mockResolvedValue({
        ok: true,
        json: function json() {
          return Promise.resolve(mockResponse);
        }
      });
      var result = yield authService.requestPasswordReset(resetData);
      expect(mockFetch).toHaveBeenCalledWith('https://api.test.com/auth/password/reset-request', expect.objectContaining({
        method: 'POST',
        body: JSON.stringify({
          email: 'user@example.com'
        })
      }));
      expect(result).toEqual(mockResponse);
    }));
    it('should update password successfully', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        message: 'Password updated successfully'
      };
      mockFetch.mockResolvedValue({
        ok: true,
        json: function json() {
          return Promise.resolve(mockResponse);
        }
      });
      var result = yield authService.updatePassword(updateData);
      expect(mockFetch).toHaveBeenCalledWith('https://api.test.com/auth/password/reset-confirm', expect.objectContaining({
        method: 'POST',
        body: JSON.stringify({
          token: 'reset-token',
          newPassword: 'newpassword123'
        })
      }));
      expect(result).toEqual(mockResponse);
    }));
    it('should throw error when new passwords do not match', (0, _asyncToGenerator2.default)(function* () {
      var invalidUpdateData = Object.assign({}, updateData, {
        confirmPassword: 'different-password'
      });
      yield expect(authService.updatePassword(invalidUpdateData)).rejects.toThrow('Passwords do not match');
      expect(mockFetch).not.toHaveBeenCalled();
    }));
  });
  describe('Token Management', function () {
    it('should refresh tokens successfully', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        tokens: mockTokens
      };
      mockTokenStorage.getTokens.mockResolvedValue(mockTokens);
      mockIsRefreshTokenValid.mockReturnValue(true);
      mockFetch.mockResolvedValue({
        ok: true,
        json: function json() {
          return Promise.resolve(mockResponse);
        }
      });
      var result = yield authService.refreshTokens();
      expect(mockFetch).toHaveBeenCalledWith('https://api.test.com/auth/refresh', expect.objectContaining({
        method: 'POST',
        body: JSON.stringify({
          refreshToken: mockTokens.refreshToken
        })
      }));
      expect(mockTokenStorage.setTokens).toHaveBeenCalledWith(mockTokens);
      expect(result).toEqual(mockResponse);
    }));
    it('should throw error when no valid refresh token available', (0, _asyncToGenerator2.default)(function* () {
      mockTokenStorage.getTokens.mockResolvedValue(null);
      yield expect(authService.refreshTokens()).rejects.toThrow('No valid refresh token available');
    }));
    it('should clear auth state when token refresh fails', (0, _asyncToGenerator2.default)(function* () {
      mockTokenStorage.getTokens.mockResolvedValue(mockTokens);
      mockIsRefreshTokenValid.mockReturnValue(true);
      mockFetch.mockRejectedValue(new Error('Refresh failed'));
      yield expect(authService.refreshTokens()).rejects.toThrow('Session expired. Please login again.');
      expect(mockTokenStorage.removeTokens).toHaveBeenCalled();
    }));
    it('should validate token with server', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockResolvedValue({
        ok: true,
        json: function json() {
          return Promise.resolve({
            valid: true
          });
        }
      });
      var result = yield authService.validateToken('test-token');
      expect(mockFetch).toHaveBeenCalledWith('https://api.test.com/auth/validate', expect.objectContaining({
        method: 'POST',
        body: JSON.stringify({
          token: 'test-token'
        })
      }));
      expect(result).toBe(true);
    }));
    it('should return false when token validation fails', (0, _asyncToGenerator2.default)(function* () {
      var consoleSpy = jest.spyOn(console, 'error').mockImplementation();
      mockFetch.mockRejectedValue(new Error('Validation failed'));
      var result = yield authService.validateToken('invalid-token');
      expect(result).toBe(false);
      expect(consoleSpy).toHaveBeenCalledWith('Token validation failed:', expect.any(Error));
      consoleSpy.mockRestore();
    }));
  });
  describe('User Management', function () {
    it('should get current user successfully', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        user: mockUser
      };
      mockTokenStorage.getTokens.mockResolvedValue(mockTokens);
      mockValidateTokens.mockReturnValue({
        isExpired: false,
        shouldRefresh: false,
        isValid: true
      });
      mockFetch.mockResolvedValue({
        ok: true,
        json: function json() {
          return Promise.resolve(mockResponse);
        }
      });
      var result = yield authService.getCurrentUser();
      expect(mockFetch).toHaveBeenCalledWith('https://api.test.com/auth/me', expect.objectContaining({
        method: 'GET'
      }));
      expect(result).toEqual(mockUser);
    }));
    it('should return null when no tokens exist', (0, _asyncToGenerator2.default)(function* () {
      mockTokenStorage.getTokens.mockResolvedValue(null);
      var result = yield authService.getCurrentUser();
      expect(result).toBeNull();
      expect(mockFetch).not.toHaveBeenCalled();
    }));
    it('should refresh tokens when needed before getting user', (0, _asyncToGenerator2.default)(function* () {
      var refreshSpy = jest.spyOn(authService, 'refreshTokens').mockResolvedValue({
        success: true,
        tokens: mockTokens
      });
      mockTokenStorage.getTokens.mockResolvedValue(mockTokens);
      mockValidateTokens.mockReturnValue({
        isExpired: false,
        shouldRefresh: true,
        isValid: true
      });
      mockIsRefreshTokenValid.mockReturnValue(true);
      mockFetch.mockResolvedValue({
        ok: true,
        json: function json() {
          return Promise.resolve({
            user: mockUser
          });
        }
      });
      var result = yield authService.getCurrentUser();
      expect(refreshSpy).toHaveBeenCalled();
      expect(result).toEqual(mockUser);
      refreshSpy.mockRestore();
    }));
    it('should update user profile successfully', (0, _asyncToGenerator2.default)(function* () {
      var profileUpdate = {
        name: 'Updated Name'
      };
      var updatedUser = Object.assign({}, mockUser, profileUpdate);
      var mockResponse = {
        user: updatedUser
      };
      mockFetch.mockResolvedValue({
        ok: true,
        json: function json() {
          return Promise.resolve(mockResponse);
        }
      });
      var result = yield authService.updateProfile(profileUpdate);
      expect(mockFetch).toHaveBeenCalledWith('https://api.test.com/auth/profile', expect.objectContaining({
        method: 'PUT',
        body: JSON.stringify(profileUpdate)
      }));
      expect(result).toEqual(updatedUser);
    }));
  });
  describe('Authentication State', function () {
    it('should check if user is authenticated', (0, _asyncToGenerator2.default)(function* () {
      mockTokenStorage.hasValidTokens.mockResolvedValue(true);
      var result = yield authService.isAuthenticated();
      expect(result).toBe(true);
      expect(mockTokenStorage.hasValidTokens).toHaveBeenCalled();
    }));
    it('should get stored tokens', (0, _asyncToGenerator2.default)(function* () {
      mockTokenStorage.getTokens.mockResolvedValue(mockTokens);
      var result = yield authService.getStoredTokens();
      expect(result).toEqual(mockTokens);
      expect(mockTokenStorage.getTokens).toHaveBeenCalled();
    }));
  });
  describe('Concurrent Token Refresh', function () {
    it('should handle concurrent refresh requests', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        tokens: mockTokens
      };
      mockTokenStorage.getTokens.mockResolvedValue(mockTokens);
      mockIsRefreshTokenValid.mockReturnValue(true);
      mockFetch.mockResolvedValue({
        ok: true,
        json: function json() {
          return Promise.resolve(mockResponse);
        }
      });
      var refreshPromises = [authService.refreshTokens(), authService.refreshTokens(), authService.refreshTokens()];
      var results = yield Promise.all(refreshPromises);
      expect(results).toHaveLength(3);
      results.forEach(function (result) {
        expect(result).toEqual(mockResponse);
      });
      expect(mockFetch).toHaveBeenCalledTimes(1);
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,