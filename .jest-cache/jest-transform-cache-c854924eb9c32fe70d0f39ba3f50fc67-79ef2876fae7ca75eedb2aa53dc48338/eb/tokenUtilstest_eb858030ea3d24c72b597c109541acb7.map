{"version":3,"names":["_tokenUtils","require","describe","it","token","result","formatAuthHeader","expect","toBe","validToken","payload","decodeJWTPayload","toEqual","sub","name","iat","invalidToken","toThrow","expiredToken","isTokenExpired","futureExp","Math","floor","Date","getTime","btoa","JSON","stringify","exp","tokenWithoutExp","mockPayload","email","now","tokenInfo","getTokenInfo","toMatchObject","isExpired","isValid","expiresAt","any","issuedAt"],"sources":["tokenUtils.test.ts"],"sourcesContent":["/**\n * Token Utils Tests\n * \n * Tests for JWT token utility functions including decoding, validation, and formatting\n */\n\nimport {\n  decodeJWTPayload,\n  isTokenExpired,\n  getTokenInfo,\n  formatAuthHeader,\n} from '../../src/utils/tokenUtils';\n\ndescribe('TokenUtils', () => {\n  describe('formatAuthHeader', () => {\n    it('should format authorization header correctly', () => {\n      const token = 'test-token-123';\n      const result = formatAuthHeader(token);\n      \n      expect(result).toBe('Bearer test-token-123');\n    });\n\n    it('should handle empty token', () => {\n      const result = formatAuthHeader('');\n      \n      expect(result).toBe('Bearer ');\n    });\n  });\n\n  describe('decodeJWTPayload', () => {\n    it('should decode valid JWT token', () => {\n      // Valid JWT token with payload: {\"sub\":\"1234567890\",\"name\":\"John Doe\",\"iat\":1516239022}\n      const validToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c';\n      \n      const payload = decodeJWTPayload(validToken);\n      \n      expect(payload).toEqual({\n        sub: \"1234567890\",\n        name: \"John Doe\", \n        iat: 1516239022\n      });\n    });\n\n    it('should handle invalid JWT token', () => {\n      const invalidToken = 'invalid.token.here';\n      \n      expect(() => decodeJWTPayload(invalidToken)).toThrow();\n    });\n  });\n\n  describe('isTokenExpired', () => {\n    it('should return true for expired token', () => {\n      // Token with expiration in the past (Jan 1, 2020)\n      const expiredToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwiZXhwIjoxNTc3ODM2ODAwfQ.example';\n      \n      const result = isTokenExpired(expiredToken);\n      \n      expect(result).toBe(true);\n    });\n\n    it('should return false for valid token', () => {\n      // Token with expiration far in the future (Jan 1, 2030)\n      const futureExp = Math.floor(new Date('2030-01-01').getTime() / 1000);\n      const validToken = `eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.${btoa(JSON.stringify({\n        sub: \"1234567890\",\n        exp: futureExp\n      }))}.example`;\n      \n      const result = isTokenExpired(validToken);\n      \n      expect(result).toBe(false);\n    });\n\n    it('should handle token without expiration', () => {\n      const tokenWithoutExp = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIn0.example';\n      \n      const result = isTokenExpired(tokenWithoutExp);\n      \n      expect(result).toBe(false); // No expiration means not expired\n    });\n  });\n\n  describe('getTokenInfo', () => {\n    it('should return comprehensive token information', () => {\n      const futureExp = Math.floor(new Date('2025-01-01').getTime() / 1000);\n      const mockPayload = {\n        sub: \"user123\",\n        name: \"Test User\",\n        email: \"test@example.com\",\n        iat: Math.floor(Date.now() / 1000) - 3600, // Issued 1 hour ago\n        exp: futureExp\n      };\n      \n      const token = `eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.${btoa(JSON.stringify(mockPayload))}.example`;\n      \n      const tokenInfo = getTokenInfo(token);\n      \n      expect(tokenInfo).toMatchObject({\n        payload: mockPayload,\n        isExpired: false,\n        isValid: true,\n        expiresAt: expect.any(Date),\n        issuedAt: expect.any(Date),\n      });\n    });\n\n    it('should handle invalid token', () => {\n      const invalidToken = 'invalid-token';\n      \n      const tokenInfo = getTokenInfo(invalidToken);\n      \n      expect(tokenInfo).toMatchObject({\n        payload: null,\n        isExpired: true,\n        isValid: false,\n        expiresAt: null,\n        issuedAt: null,\n      });\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}