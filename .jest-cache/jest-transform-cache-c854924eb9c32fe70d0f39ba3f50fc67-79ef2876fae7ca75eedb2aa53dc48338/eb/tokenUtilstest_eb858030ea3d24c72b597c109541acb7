4db35c57b346ca8628f90523a47cfa13
var _tokenUtils = require("../../src/utils/tokenUtils");
describe('TokenUtils', function () {
  describe('formatAuthHeader', function () {
    it('should format authorization header correctly', function () {
      var token = 'test-token-123';
      var result = (0, _tokenUtils.formatAuthHeader)(token);
      expect(result).toBe('Bearer test-token-123');
    });
    it('should handle empty token', function () {
      var result = (0, _tokenUtils.formatAuthHeader)('');
      expect(result).toBe('Bearer ');
    });
  });
  describe('decodeJWTPayload', function () {
    it('should decode valid JWT token', function () {
      var validToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c';
      var payload = (0, _tokenUtils.decodeJWTPayload)(validToken);
      expect(payload).toEqual({
        sub: "1234567890",
        name: "John Doe",
        iat: 1516239022
      });
    });
    it('should handle invalid JWT token', function () {
      var invalidToken = 'invalid.token.here';
      expect(function () {
        return (0, _tokenUtils.decodeJWTPayload)(invalidToken);
      }).toThrow();
    });
  });
  describe('isTokenExpired', function () {
    it('should return true for expired token', function () {
      var expiredToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwiZXhwIjoxNTc3ODM2ODAwfQ.example';
      var result = (0, _tokenUtils.isTokenExpired)(expiredToken);
      expect(result).toBe(true);
    });
    it('should return false for valid token', function () {
      var futureExp = Math.floor(new Date('2030-01-01').getTime() / 1000);
      var validToken = `eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.${btoa(JSON.stringify({
        sub: "1234567890",
        exp: futureExp
      }))}.example`;
      var result = (0, _tokenUtils.isTokenExpired)(validToken);
      expect(result).toBe(false);
    });
    it('should handle token without expiration', function () {
      var tokenWithoutExp = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIn0.example';
      var result = (0, _tokenUtils.isTokenExpired)(tokenWithoutExp);
      expect(result).toBe(false);
    });
  });
  describe('getTokenInfo', function () {
    it('should return comprehensive token information', function () {
      var futureExp = Math.floor(new Date('2025-01-01').getTime() / 1000);
      var mockPayload = {
        sub: "user123",
        name: "Test User",
        email: "test@example.com",
        iat: Math.floor(Date.now() / 1000) - 3600,
        exp: futureExp
      };
      var token = `eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.${btoa(JSON.stringify(mockPayload))}.example`;
      var tokenInfo = (0, _tokenUtils.getTokenInfo)(token);
      expect(tokenInfo).toMatchObject({
        payload: mockPayload,
        isExpired: false,
        isValid: true,
        expiresAt: expect.any(Date),
        issuedAt: expect.any(Date)
      });
    });
    it('should handle invalid token', function () {
      var invalidToken = 'invalid-token';
      var tokenInfo = (0, _tokenUtils.getTokenInfo)(invalidToken);
      expect(tokenInfo).toMatchObject({
        payload: null,
        isExpired: true,
        isValid: false,
        expiresAt: null,
        issuedAt: null
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,