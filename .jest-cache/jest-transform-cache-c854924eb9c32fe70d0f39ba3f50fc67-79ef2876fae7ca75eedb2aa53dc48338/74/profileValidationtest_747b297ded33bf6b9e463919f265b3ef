d8ba9667c8db7172deb039883652ee8e
var _profileValidation = require("../../../src/utils/profileValidation");
describe('Profile Validation', function () {
  var validProfileData = {
    name: 'John Doe',
    title: 'Software Engineer',
    company: 'Tech Company',
    bio: 'Experienced software engineer with expertise in React and Node.js. Passionate about building scalable applications.',
    email: 'john@example.com',
    phone: '+1234567890',
    location: 'San Francisco, CA',
    website: 'https://johndoe.com',
    socialLinks: {
      linkedin: 'https://linkedin.com/in/johndoe',
      twitter: 'https://twitter.com/johndoe',
      github: 'https://github.com/johndoe',
      instagram: null,
      facebook: null
    },
    skills: ['JavaScript', 'React', 'Node.js', 'TypeScript', 'MongoDB'],
    isPublic: true
  };
  describe('Field Validation', function () {
    describe('Name Validation', function () {
      it('should accept valid names', function () {
        expect((0, _profileValidation.validateProfileField)('name', 'John Doe')).toBeUndefined();
        expect((0, _profileValidation.validateProfileField)('name', 'Mary Smith-Johnson')).toBeUndefined();
        expect((0, _profileValidation.validateProfileField)('name', "O'Connor")).toBeUndefined();
      });
      it('should reject empty names', function () {
        expect((0, _profileValidation.validateProfileField)('name', '')).toBe('Name is required');
        expect((0, _profileValidation.validateProfileField)('name', '   ')).toBe('Name is required');
      });
      it('should reject names that are too short', function () {
        expect((0, _profileValidation.validateProfileField)('name', 'A')).toBe(`Name must be at least ${_profileValidation.VALIDATION_RULES.name.minLength} characters`);
      });
      it('should reject names that are too long', function () {
        var longName = 'A'.repeat(_profileValidation.VALIDATION_RULES.name.maxLength + 1);
        expect((0, _profileValidation.validateProfileField)('name', longName)).toBe(`Name must be less than ${_profileValidation.VALIDATION_RULES.name.maxLength} characters`);
      });
      it('should reject names with invalid characters', function () {
        expect((0, _profileValidation.validateProfileField)('name', 'John123')).toBe('Name can only contain letters, spaces, hyphens, and apostrophes');
        expect((0, _profileValidation.validateProfileField)('name', 'John@Doe')).toBe('Name can only contain letters, spaces, hyphens, and apostrophes');
      });
    });
    describe('Email Validation', function () {
      it('should accept valid emails', function () {
        expect((0, _profileValidation.validateProfileField)('email', 'test@example.com')).toBeUndefined();
        expect((0, _profileValidation.validateProfileField)('email', 'user.name+tag@example.co.uk')).toBeUndefined();
      });
      it('should reject empty emails', function () {
        expect((0, _profileValidation.validateProfileField)('email', '')).toBe('Email is required');
      });
      it('should reject invalid email formats', function () {
        expect((0, _profileValidation.validateProfileField)('email', 'invalid-email')).toBe('Please enter a valid email address');
        expect((0, _profileValidation.validateProfileField)('email', 'test@')).toBe('Please enter a valid email address');
        expect((0, _profileValidation.validateProfileField)('email', '@example.com')).toBe('Please enter a valid email address');
      });
    });
    describe('Phone Validation', function () {
      it('should accept valid phone numbers', function () {
        expect((0, _profileValidation.validateProfileField)('phone', '+1234567890')).toBeUndefined();
        expect((0, _profileValidation.validateProfileField)('phone', '1234567890')).toBeUndefined();
      });
      it('should accept empty phone numbers', function () {
        expect((0, _profileValidation.validateProfileField)('phone', '')).toBeUndefined();
      });
      it('should reject invalid phone formats', function () {
        expect((0, _profileValidation.validateProfileField)('phone', 'abc123')).toBe('Please enter a valid phone number');
        expect((0, _profileValidation.validateProfileField)('phone', '0123456789')).toBe('Please enter a valid phone number');
      });
    });
    describe('Website Validation', function () {
      it('should accept valid URLs', function () {
        expect((0, _profileValidation.validateProfileField)('website', 'https://example.com')).toBeUndefined();
        expect((0, _profileValidation.validateProfileField)('website', 'http://example.com')).toBeUndefined();
        expect((0, _profileValidation.validateProfileField)('website', 'example.com')).toBeUndefined();
      });
      it('should accept empty website', function () {
        expect((0, _profileValidation.validateProfileField)('website', '')).toBeUndefined();
      });
      it('should reject invalid URLs', function () {
        expect((0, _profileValidation.validateProfileField)('website', 'invalid-url')).toBe('Please enter a valid website URL');
        expect((0, _profileValidation.validateProfileField)('website', 'ftp://example')).toBe('Please enter a valid website URL');
      });
    });
    describe('Skills Validation', function () {
      it('should accept valid skill arrays', function () {
        expect((0, _profileValidation.validateProfileField)('skills', ['JavaScript', 'React'])).toBeUndefined();
      });
      it('should reject empty skill arrays', function () {
        expect((0, _profileValidation.validateProfileField)('skills', [])).toBe('Please add at least 1 skill');
        expect((0, _profileValidation.validateProfileField)('skills', null)).toBe('Please add at least one skill');
      });
      it('should reject too many skills', function () {
        var tooManySkills = Array(_profileValidation.VALIDATION_RULES.skills.maxItems + 1).fill('Skill');
        expect((0, _profileValidation.validateProfileField)('skills', tooManySkills)).toBe(`You can add up to ${_profileValidation.VALIDATION_RULES.skills.maxItems} skills`);
      });
      it('should reject skills that are too long', function () {
        var longSkill = 'A'.repeat(_profileValidation.VALIDATION_RULES.skills.maxLength + 1);
        expect((0, _profileValidation.validateProfileField)('skills', [longSkill])).toBe(`Each skill must be between 1 and ${_profileValidation.VALIDATION_RULES.skills.maxLength} characters`);
      });
      it('should reject duplicate skills', function () {
        expect((0, _profileValidation.validateProfileField)('skills', ['JavaScript', 'javascript'])).toBe('Please remove duplicate skills');
      });
    });
    describe('Social Links Validation', function () {
      it('should accept valid social links', function () {
        var validSocialLinks = {
          linkedin: 'https://linkedin.com/in/johndoe',
          twitter: 'https://twitter.com/johndoe',
          github: 'https://github.com/johndoe',
          instagram: null,
          facebook: null
        };
        expect((0, _profileValidation.validateProfileField)('socialLinks', validSocialLinks)).toBeUndefined();
      });
      it('should reject invalid social links', function () {
        var invalidSocialLinks = {
          linkedin: 'invalid-linkedin-url',
          twitter: null,
          github: null,
          instagram: null,
          facebook: null
        };
        expect((0, _profileValidation.validateProfileField)('socialLinks', invalidSocialLinks)).toBe('Please check your social media links');
      });
    });
  });
  describe('Form Validation', function () {
    it('should validate complete valid form', function () {
      var errors = (0, _profileValidation.validateProfileForm)(validProfileData);
      expect(Object.keys(errors)).toHaveLength(0);
    });
    it('should return errors for invalid form', function () {
      var invalidData = {
        name: '',
        email: 'invalid-email',
        skills: []
      };
      var errors = (0, _profileValidation.validateProfileForm)(invalidData);
      expect(errors.name).toBeDefined();
      expect(errors.email).toBeDefined();
      expect(errors.skills).toBeDefined();
    });
    it('should validate required fields', function () {
      var incompleteData = {
        bio: 'Some bio',
        phone: '+1234567890'
      };
      var errors = (0, _profileValidation.validateProfileForm)(incompleteData);
      expect(errors.name).toBe('Name is required');
      expect(errors.title).toBe('Title is required');
      expect(errors.company).toBe('Company is required');
      expect(errors.email).toBe('Email is required');
      expect(errors.skills).toBe('Please add at least one skill');
    });
    it('should not validate optional fields if empty', function () {
      var dataWithEmptyOptionals = Object.assign({}, validProfileData, {
        bio: '',
        phone: '',
        location: '',
        website: '',
        socialLinks: {
          linkedin: null,
          twitter: null,
          github: null,
          instagram: null,
          facebook: null
        }
      });
      var errors = (0, _profileValidation.validateProfileForm)(dataWithEmptyOptionals);
      expect(errors.bio).toBeUndefined();
      expect(errors.phone).toBeUndefined();
      expect(errors.location).toBeUndefined();
      expect(errors.website).toBeUndefined();
      expect(errors.socialLinks).toBeUndefined();
    });
  });
  describe('Form Validity', function () {
    it('should return true for valid form with no errors', function () {
      var errors = {};
      expect((0, _profileValidation.isProfileFormValid)(validProfileData, errors)).toBe(true);
    });
    it('should return false for form with errors', function () {
      var errors = {
        name: 'Name is required'
      };
      expect((0, _profileValidation.isProfileFormValid)(validProfileData, errors)).toBe(false);
    });
    it('should return false for form missing required fields', function () {
      var incompleteData = {
        name: 'John Doe'
      };
      var errors = {};
      expect((0, _profileValidation.isProfileFormValid)(incompleteData, errors)).toBe(false);
    });
    it('should return true for form with all required fields and no errors', function () {
      var minimalValidData = {
        name: 'John Doe',
        title: 'Engineer',
        company: 'Tech Co',
        email: 'john@example.com'
      };
      var errors = {};
      expect((0, _profileValidation.isProfileFormValid)(minimalValidData, errors)).toBe(true);
    });
  });
  describe('Profile Completion', function () {
    it('should calculate 100% for complete profile', function () {
      var percentage = (0, _profileValidation.getProfileCompletionPercentage)(validProfileData);
      expect(percentage).toBe(100);
    });
    it('should calculate correct percentage for partial profile', function () {
      var partialData = {
        name: 'John Doe',
        title: 'Engineer',
        company: 'Tech Co',
        email: 'john@example.com',
        skills: ['JavaScript']
      };
      var percentage = (0, _profileValidation.getProfileCompletionPercentage)(partialData);
      expect(percentage).toBe(50);
    });
    it('should return 0% for empty profile', function () {
      var percentage = (0, _profileValidation.getProfileCompletionPercentage)({});
      expect(percentage).toBe(0);
    });
    it('should handle social links as single field', function () {
      var dataWithSocial = {
        name: 'John Doe',
        socialLinks: {
          linkedin: 'https://linkedin.com/in/johndoe',
          twitter: null,
          github: null,
          instagram: null,
          facebook: null
        }
      };
      var percentage = (0, _profileValidation.getProfileCompletionPercentage)(dataWithSocial);
      expect(percentage).toBe(20);
    });
  });
  describe('Profile Suggestions', function () {
    it('should suggest bio improvement for short bio', function () {
      var dataWithShortBio = Object.assign({}, validProfileData, {
        bio: 'Short bio'
      });
      var suggestions = (0, _profileValidation.getProfileSuggestions)(dataWithShortBio);
      expect(suggestions).toContain('Add a detailed bio to help others understand your background');
    });
    it('should suggest adding missing contact info', function () {
      var dataWithoutContact = Object.assign({}, validProfileData, {
        phone: '',
        location: '',
        website: ''
      });
      var suggestions = (0, _profileValidation.getProfileSuggestions)(dataWithoutContact);
      expect(suggestions).toContain('Add your phone number to help people contact you');
      expect(suggestions).toContain('Add your location to connect with local professionals');
      expect(suggestions).toContain('Add your website or portfolio link');
    });
    it('should suggest adding more skills', function () {
      var dataWithFewSkills = Object.assign({}, validProfileData, {
        skills: ['JavaScript']
      });
      var suggestions = (0, _profileValidation.getProfileSuggestions)(dataWithFewSkills);
      expect(suggestions).toContain('Add more skills to showcase your expertise');
    });
    it('should suggest adding social links', function () {
      var dataWithoutSocial = Object.assign({}, validProfileData, {
        socialLinks: {
          linkedin: null,
          twitter: null,
          github: null,
          instagram: null,
          facebook: null
        }
      });
      var suggestions = (0, _profileValidation.getProfileSuggestions)(dataWithoutSocial);
      expect(suggestions).toContain('Add social media links to expand your network');
    });
    it('should return empty suggestions for complete profile', function () {
      var suggestions = (0, _profileValidation.getProfileSuggestions)(validProfileData);
      expect(suggestions).toHaveLength(0);
    });
  });
  describe('Edge Cases', function () {
    it('should handle null and undefined values', function () {
      expect((0, _profileValidation.validateProfileField)('name', null)).toBe('Name is required');
      expect((0, _profileValidation.validateProfileField)('name', undefined)).toBe('Name is required');
      expect((0, _profileValidation.validateProfileField)('phone', null)).toBeUndefined();
      expect((0, _profileValidation.validateProfileField)('phone', undefined)).toBeUndefined();
    });
    it('should trim whitespace before validation', function () {
      expect((0, _profileValidation.validateProfileField)('name', '  John Doe  ')).toBeUndefined();
      expect((0, _profileValidation.validateProfileField)('email', '  test@example.com  ')).toBeUndefined();
    });
    it('should handle boolean fields', function () {
      expect((0, _profileValidation.validateProfileField)('isPublic', true)).toBeUndefined();
      expect((0, _profileValidation.validateProfileField)('isPublic', false)).toBeUndefined();
    });
    it('should handle array fields', function () {
      expect((0, _profileValidation.validateProfileField)('skills', ['JavaScript', 'React'])).toBeUndefined();
      expect((0, _profileValidation.validateProfileField)('skills', [])).toBe('Please add at least 1 skill');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,