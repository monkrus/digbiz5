39b17ba9f9e4b97fc88a78b4d428a4d5
_getJestObj().mock('../../src/services/tokenStorage');
_getJestObj().mock('../../src/config/env', function () {
  return {
    API_BASE_URL: 'https://api.test.com',
    API_TIMEOUT: 10000
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _authService = require("../../src/services/authService");
var _tokenStorage = require("../../src/services/tokenStorage");
var _testUtils = require("../utils/testUtils");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('AuthService', function () {
  var authService;
  var mockTokenStorageInstance;
  beforeEach(function () {
    (0, _testUtils.setupMocks)();
    authService = new _authService.AuthenticationService();
    mockTokenStorageInstance = _tokenStorage.tokenStorage;
  });
  afterEach(function () {
    (0, _testUtils.teardownMocks)();
  });
  describe('login', function () {
    var loginCredentials = {
      email: 'test@example.com',
      password: 'password123'
    };
    it('should login successfully with valid credentials', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        data: {
          user: _testUtils.mockUser,
          tokens: _testUtils.mockTokens
        },
        message: 'Login successful'
      };
      global.fetch = jest.fn().mockResolvedValue((0, _testUtils.mockFetchResponse)(mockResponse));
      mockTokenStorageInstance.setTokens.mockResolvedValue();
      var result = yield authService.login(loginCredentials);
      expect(global.fetch).toHaveBeenCalledWith('https://api.test.com/auth/login', expect.objectContaining({
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(loginCredentials)
      }));
      expect(mockTokenStorageInstance.setTokens).toHaveBeenCalledWith(_testUtils.mockTokens);
      expect(result).toEqual({
        success: true,
        user: _testUtils.mockUser,
        tokens: _testUtils.mockTokens,
        message: 'Login successful'
      });
    }));
    it('should handle invalid credentials', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: false,
        message: 'Invalid email or password',
        code: 'INVALID_CREDENTIALS'
      };
      global.fetch = jest.fn().mockResolvedValue((0, _testUtils.mockFetchResponse)(mockResponse, 401));
      var result = yield authService.login(loginCredentials);
      expect(result).toEqual({
        success: false,
        message: 'Invalid email or password',
        code: 'INVALID_CREDENTIALS'
      });
      expect(mockTokenStorageInstance.setTokens).not.toHaveBeenCalled();
    }));
    it('should handle network errors', (0, _asyncToGenerator2.default)(function* () {
      global.fetch = jest.fn().mockRejectedValue(new Error('Network error'));
      var result = yield authService.login(loginCredentials);
      expect(result).toEqual({
        success: false,
        message: 'Network error occurred. Please check your connection.',
        code: 'NETWORK_ERROR'
      });
    }));
    it('should handle account locked error', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: false,
        message: 'Account temporarily locked due to too many failed attempts',
        code: 'ACCOUNT_LOCKED',
        lockUntil: Date.now() + 900000
      };
      global.fetch = jest.fn().mockResolvedValue((0, _testUtils.mockFetchResponse)(mockResponse, 423));
      var result = yield authService.login(loginCredentials);
      expect(result).toEqual({
        success: false,
        message: 'Account temporarily locked due to too many failed attempts',
        code: 'ACCOUNT_LOCKED',
        lockUntil: expect.any(Number)
      });
    }));
    it('should validate email format', (0, _asyncToGenerator2.default)(function* () {
      var invalidCredentials = {
        email: 'invalid-email',
        password: 'password123'
      };
      var result = yield authService.login(invalidCredentials);
      expect(result).toEqual({
        success: false,
        message: 'Please enter a valid email address',
        code: 'VALIDATION_ERROR'
      });
      expect(global.fetch).not.toHaveBeenCalled();
    }));
    it('should validate password length', (0, _asyncToGenerator2.default)(function* () {
      var invalidCredentials = {
        email: 'test@example.com',
        password: '123'
      };
      var result = yield authService.login(invalidCredentials);
      expect(result).toEqual({
        success: false,
        message: 'Password must be at least 6 characters long',
        code: 'VALIDATION_ERROR'
      });
    }));
  });
  describe('register', function () {
    var registerData = {
      email: 'test@example.com',
      password: 'password123',
      name: 'Test User',
      agreeToTerms: true
    };
    it('should register successfully with valid data', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        data: {
          user: _testUtils.mockUser,
          tokens: _testUtils.mockTokens
        },
        message: 'Registration successful'
      };
      global.fetch = jest.fn().mockResolvedValue((0, _testUtils.mockFetchResponse)(mockResponse));
      mockTokenStorageInstance.setTokens.mockResolvedValue();
      var result = yield authService.register(registerData);
      expect(global.fetch).toHaveBeenCalledWith('https://api.test.com/auth/register', expect.objectContaining({
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(registerData)
      }));
      expect(result).toEqual({
        success: true,
        user: _testUtils.mockUser,
        tokens: _testUtils.mockTokens,
        message: 'Registration successful'
      });
    }));
    it('should handle email already exists error', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: false,
        message: 'An account with this email already exists',
        code: 'EMAIL_EXISTS'
      };
      global.fetch = jest.fn().mockResolvedValue((0, _testUtils.mockFetchResponse)(mockResponse, 409));
      var result = yield authService.register(registerData);
      expect(result).toEqual({
        success: false,
        message: 'An account with this email already exists',
        code: 'EMAIL_EXISTS'
      });
    }));
    it('should validate terms agreement', (0, _asyncToGenerator2.default)(function* () {
      var invalidData = Object.assign({}, registerData, {
        agreeToTerms: false
      });
      var result = yield authService.register(invalidData);
      expect(result).toEqual({
        success: false,
        message: 'You must agree to the terms and conditions',
        code: 'VALIDATION_ERROR'
      });
    }));
    it('should validate password strength', (0, _asyncToGenerator2.default)(function* () {
      var weakPasswordData = Object.assign({}, registerData, {
        password: 'weak'
      });
      var result = yield authService.register(weakPasswordData);
      expect(result).toEqual({
        success: false,
        message: 'Password must be at least 6 characters long',
        code: 'VALIDATION_ERROR'
      });
    }));
  });
  describe('logout', function () {
    it('should logout successfully', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true
      };
      global.fetch = jest.fn().mockResolvedValue((0, _testUtils.mockFetchResponse)(mockResponse));
      mockTokenStorageInstance.getTokens.mockResolvedValue(_testUtils.mockTokens);
      mockTokenStorageInstance.removeTokens.mockResolvedValue();
      var result = yield authService.logout();
      expect(global.fetch).toHaveBeenCalledWith('https://api.test.com/auth/logout', expect.objectContaining({
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${_testUtils.mockTokens.accessToken}`
        }
      }));
      expect(mockTokenStorageInstance.removeTokens).toHaveBeenCalled();
      expect(result).toEqual({
        success: true
      });
    }));
    it('should handle logout without tokens', (0, _asyncToGenerator2.default)(function* () {
      mockTokenStorageInstance.getTokens.mockResolvedValue(null);
      mockTokenStorageInstance.removeTokens.mockResolvedValue();
      var result = yield authService.logout();
      expect(global.fetch).not.toHaveBeenCalled();
      expect(mockTokenStorageInstance.removeTokens).toHaveBeenCalled();
      expect(result).toEqual({
        success: true
      });
    }));
    it('should handle server logout failure gracefully', (0, _asyncToGenerator2.default)(function* () {
      global.fetch = jest.fn().mockResolvedValue((0, _testUtils.mockFetchResponse)({}, 500));
      mockTokenStorageInstance.getTokens.mockResolvedValue(_testUtils.mockTokens);
      mockTokenStorageInstance.removeTokens.mockResolvedValue();
      var result = yield authService.logout();
      expect(mockTokenStorageInstance.removeTokens).toHaveBeenCalled();
      expect(result).toEqual({
        success: true
      });
    }));
  });
  describe('refreshTokens', function () {
    it('should refresh tokens successfully', (0, _asyncToGenerator2.default)(function* () {
      var newTokens = Object.assign({}, _testUtils.mockTokens, {
        accessToken: 'new_access_token'
      });
      var mockResponse = {
        success: true,
        data: {
          tokens: newTokens
        }
      };
      global.fetch = jest.fn().mockResolvedValue((0, _testUtils.mockFetchResponse)(mockResponse));
      mockTokenStorageInstance.getTokens.mockResolvedValue(_testUtils.mockTokens);
      mockTokenStorageInstance.setTokens.mockResolvedValue();
      var result = yield authService.refreshTokens();
      expect(global.fetch).toHaveBeenCalledWith('https://api.test.com/auth/refresh', expect.objectContaining({
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          refreshToken: _testUtils.mockTokens.refreshToken
        })
      }));
      expect(mockTokenStorageInstance.setTokens).toHaveBeenCalledWith(newTokens);
      expect(result).toEqual({
        success: true,
        tokens: newTokens
      });
    }));
    it('should handle invalid refresh token', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: false,
        message: 'Invalid refresh token',
        code: 'INVALID_REFRESH_TOKEN'
      };
      global.fetch = jest.fn().mockResolvedValue((0, _testUtils.mockFetchResponse)(mockResponse, 401));
      mockTokenStorageInstance.getTokens.mockResolvedValue(_testUtils.mockTokens);
      mockTokenStorageInstance.removeTokens.mockResolvedValue();
      var result = yield authService.refreshTokens();
      expect(mockTokenStorageInstance.removeTokens).toHaveBeenCalled();
      expect(result).toEqual({
        success: false,
        message: 'Invalid refresh token',
        code: 'INVALID_REFRESH_TOKEN'
      });
    }));
    it('should handle missing refresh token', (0, _asyncToGenerator2.default)(function* () {
      mockTokenStorageInstance.getTokens.mockResolvedValue(null);
      var result = yield authService.refreshTokens();
      expect(result).toEqual({
        success: false,
        message: 'No refresh token available',
        code: 'NO_REFRESH_TOKEN'
      });
    }));
  });
  describe('getCurrentUser', function () {
    it('should get current user successfully', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        data: {
          user: _testUtils.mockUser
        }
      };
      global.fetch = jest.fn().mockResolvedValue((0, _testUtils.mockFetchResponse)(mockResponse));
      mockTokenStorageInstance.getTokens.mockResolvedValue(_testUtils.mockTokens);
      var result = yield authService.getCurrentUser();
      expect(global.fetch).toHaveBeenCalledWith('https://api.test.com/auth/me', expect.objectContaining({
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${_testUtils.mockTokens.accessToken}`
        }
      }));
      expect(result).toEqual({
        success: true,
        user: _testUtils.mockUser
      });
    }));
    it('should handle unauthorized access', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: false,
        message: 'Unauthorized',
        code: 'UNAUTHORIZED'
      };
      global.fetch = jest.fn().mockResolvedValue((0, _testUtils.mockFetchResponse)(mockResponse, 401));
      mockTokenStorageInstance.getTokens.mockResolvedValue(_testUtils.mockTokens);
      var result = yield authService.getCurrentUser();
      expect(result).toEqual({
        success: false,
        message: 'Unauthorized',
        code: 'UNAUTHORIZED'
      });
    }));
  });
  describe('requestPasswordReset', function () {
    it('should request password reset successfully', (0, _asyncToGenerator2.default)(function* () {
      var email = 'test@example.com';
      var mockResponse = {
        success: true,
        message: 'Password reset email sent'
      };
      global.fetch = jest.fn().mockResolvedValue((0, _testUtils.mockFetchResponse)(mockResponse));
      var result = yield authService.requestPasswordReset({
        email: email
      });
      expect(global.fetch).toHaveBeenCalledWith('https://api.test.com/auth/password/reset-request', expect.objectContaining({
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          email: email
        })
      }));
      expect(result).toEqual({
        success: true,
        message: 'Password reset email sent'
      });
    }));
    it('should handle user not found', (0, _asyncToGenerator2.default)(function* () {
      var email = 'nonexistent@example.com';
      var mockResponse = {
        success: false,
        message: 'No account found with this email address',
        code: 'USER_NOT_FOUND'
      };
      global.fetch = jest.fn().mockResolvedValue((0, _testUtils.mockFetchResponse)(mockResponse, 404));
      var result = yield authService.requestPasswordReset({
        email: email
      });
      expect(result).toEqual({
        success: false,
        message: 'No account found with this email address',
        code: 'USER_NOT_FOUND'
      });
    }));
  });
  describe('loginWithGoogle', function () {
    it('should login with Google successfully', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        data: {
          user: _testUtils.mockUser,
          tokens: _testUtils.mockTokens
        },
        message: 'Google login successful'
      };
      global.fetch = jest.fn().mockResolvedValue((0, _testUtils.mockFetchResponse)(mockResponse));
      mockTokenStorageInstance.setTokens.mockResolvedValue();
      var result = yield authService.loginWithGoogle();
      expect(result).toEqual({
        success: true,
        user: _testUtils.mockUser,
        tokens: _testUtils.mockTokens,
        message: 'Google login successful'
      });
    }));
    it('should handle Google login cancellation', (0, _asyncToGenerator2.default)(function* () {
      var mockGoogleSignIn = {
        signIn: jest.fn().mockRejectedValue({
          code: 'SIGN_IN_CANCELLED'
        })
      };
      var result = yield authService.loginWithGoogle();
      expect(result).toEqual({
        success: false,
        message: 'Google sign-in was cancelled',
        code: 'SIGN_IN_CANCELLED'
      });
    }));
  });
  describe('validateSession', function () {
    it('should validate session successfully', (0, _asyncToGenerator2.default)(function* () {
      mockTokenStorageInstance.hasValidTokens.mockResolvedValue(true);
      mockTokenStorageInstance.getTokens.mockResolvedValue(_testUtils.mockTokens);
      var result = yield authService.validateSession();
      expect(result).toEqual({
        isValid: true,
        tokens: _testUtils.mockTokens
      });
    }));
    it('should handle invalid session', (0, _asyncToGenerator2.default)(function* () {
      mockTokenStorageInstance.hasValidTokens.mockResolvedValue(false);
      var result = yield authService.validateSession();
      expect(result).toEqual({
        isValid: false,
        tokens: null
      });
    }));
    it('should attempt token refresh for expired tokens', (0, _asyncToGenerator2.default)(function* () {
      mockTokenStorageInstance.hasValidTokens.mockResolvedValueOnce(false).mockResolvedValueOnce(true);
      var newTokens = Object.assign({}, _testUtils.mockTokens, {
        accessToken: 'new_token'
      });
      mockTokenStorageInstance.getTokens.mockResolvedValue(newTokens);
      var mockRefreshResponse = {
        success: true,
        data: {
          tokens: newTokens
        }
      };
      global.fetch = jest.fn().mockResolvedValue((0, _testUtils.mockFetchResponse)(mockRefreshResponse));
      var result = yield authService.validateSession();
      expect(result).toEqual({
        isValid: true,
        tokens: newTokens
      });
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,