14b0c13bf05da7eb5d05e5d724bdef37
_getJestObj().mock('react-native', function () {
  return {
    Platform: {
      OS: 'ios'
    },
    Alert: {
      alert: jest.fn()
    },
    Linking: {
      openURL: jest.fn(),
      canOpenURL: jest.fn()
    }
  };
});
_getJestObj().mock('react-native-fs', function () {
  return {
    CachesDirectoryPath: '/mock/cache',
    writeFile: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("react-native");
var _reactNativeFs = _interopRequireDefault(require("react-native-fs"));
var _walletUtils = require("../../../src/utils/walletUtils");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('Wallet Integration', function () {
  var mockBusinessCard = {
    id: 'card-123',
    userId: 'user-456',
    basicInfo: {
      name: 'John Smith',
      title: 'CEO & Founder',
      company: 'TechStart Inc.',
      email: 'john@techstart.com',
      phone: '+1-555-123-4567',
      location: 'San Francisco, CA',
      bio: 'Building innovative technology solutions for startups.',
      profilePhoto: 'https://example.com/profile.jpg',
      companyLogo: 'https://example.com/logo.png'
    },
    startupInfo: {
      fundingStage: 'seed',
      teamSize: '11-25',
      industry: ['Technology', 'SaaS', 'AI'],
      businessModel: 'b2b',
      revenue: '0-10k',
      seekingFunding: true,
      seekingTalent: true,
      seekingPartners: false,
      seekingMentors: true
    },
    socialLinks: {
      linkedin: 'https://linkedin.com/in/johnsmith',
      twitter: 'https://twitter.com/johnsmith',
      website: 'https://techstart.com',
      github: 'https://github.com/johnsmith'
    },
    customFields: [{
      id: '1',
      label: 'Investment Focus',
      value: 'B2B SaaS, AI, Fintech',
      type: 'text',
      icon: 'ðŸ’¼',
      isPublic: true,
      order: 1
    }],
    theme: {
      id: 'professional-theme-1',
      name: 'Professional Blue',
      primaryColor: '#3b82f6',
      secondaryColor: '#1e40af',
      backgroundColor: '#ffffff',
      textColor: '#1f2937',
      accentColor: '#10b981',
      fontFamily: 'Inter',
      headerFontSize: 24,
      bodyFontSize: 14,
      borderRadius: 8,
      padding: 16,
      spacing: 8
    },
    template: {
      id: 'startup-template-1',
      name: 'Modern Startup',
      category: 'startup',
      layout: 'standard',
      elements: [],
      isPopular: true,
      isPremium: false,
      previewImage: 'https://example.com/template-preview.png'
    },
    isDefault: false,
    isPublic: true,
    isActive: true,
    shareCode: 'abc123def456',
    createdAt: '2024-01-15T10:30:00Z',
    updatedAt: '2024-01-15T10:30:00Z',
    lastSharedAt: '2024-01-15T15:45:00Z'
  };
  beforeEach(function () {
    jest.clearAllMocks();
    _reactNative.Platform.OS = 'ios';
  });
  describe('Apple Wallet Pass Generation', function () {
    test('should generate complete Apple Wallet pass data', function () {
      var passData = (0, _walletUtils.generateAppleWalletPass)(mockBusinessCard);
      expect(passData.formatVersion).toBe(1);
      expect(passData.passTypeIdentifier).toBe('pass.com.digbiz.businesscard');
      expect(passData.serialNumber).toBe(mockBusinessCard.id);
      expect(passData.organizationName).toBe('DigBiz');
      expect(passData.description).toContain('John Smith');
    });
    test('should include primary fields in pass', function () {
      var passData = (0, _walletUtils.generateAppleWalletPass)(mockBusinessCard);
      var nameField = passData.generic.primaryFields.find(function (f) {
        return f.key === 'name';
      });
      expect(nameField).toBeDefined();
      expect(nameField == null ? void 0 : nameField.value).toBe('John Smith');
      expect(nameField == null ? void 0 : nameField.label).toBe('Name');
    });
    test('should include secondary fields in pass', function () {
      var passData = (0, _walletUtils.generateAppleWalletPass)(mockBusinessCard);
      var titleField = passData.generic.secondaryFields.find(function (f) {
        return f.key === 'title';
      });
      var companyField = passData.generic.secondaryFields.find(function (f) {
        return f.key === 'company';
      });
      expect(titleField == null ? void 0 : titleField.value).toBe('CEO & Founder');
      expect(companyField == null ? void 0 : companyField.value).toBe('TechStart Inc.');
    });
    test('should include auxiliary fields when data available', function () {
      var passData = (0, _walletUtils.generateAppleWalletPass)(mockBusinessCard);
      var emailField = passData.generic.auxiliaryFields.find(function (f) {
        return f.key === 'email';
      });
      var phoneField = passData.generic.auxiliaryFields.find(function (f) {
        return f.key === 'phone';
      });
      expect(emailField == null ? void 0 : emailField.value).toBe('john@techstart.com');
      expect(phoneField == null ? void 0 : phoneField.value).toBe('+1-555-123-4567');
    });
    test('should include back fields with additional info', function () {
      var passData = (0, _walletUtils.generateAppleWalletPass)(mockBusinessCard);
      var bioField = passData.generic.backFields.find(function (f) {
        return f.key === 'bio';
      });
      var linkedinField = passData.generic.backFields.find(function (f) {
        return f.key === 'linkedin';
      });
      expect(bioField == null ? void 0 : bioField.value).toContain('innovative technology');
      expect(linkedinField == null ? void 0 : linkedinField.value).toBe('https://linkedin.com/in/johnsmith');
    });
    test('should include QR code barcode', function () {
      var _passData$barcode, _passData$barcode2;
      var passData = (0, _walletUtils.generateAppleWalletPass)(mockBusinessCard);
      expect(passData.barcode).toBeDefined();
      expect((_passData$barcode = passData.barcode) == null ? void 0 : _passData$barcode.format).toBe('PKBarcodeFormatQR');
      expect((_passData$barcode2 = passData.barcode) == null ? void 0 : _passData$barcode2.message).toContain('abc123def456');
    });
    test('should handle missing optional fields gracefully', function () {
      var minimalCard = Object.assign({}, mockBusinessCard, {
        basicInfo: {
          name: 'Jane Doe',
          title: 'Developer',
          company: 'DevCorp',
          email: 'jane@devcorp.com'
        },
        socialLinks: {}
      });
      var passData = (0, _walletUtils.generateAppleWalletPass)(minimalCard);
      expect(passData.generic.primaryFields).toHaveLength(1);
      expect(passData.generic.auxiliaryFields.find(function (f) {
        return f.key === 'phone';
      })).toBeUndefined();
      expect(passData.generic.backFields.find(function (f) {
        return f.key === 'linkedin';
      })).toBeUndefined();
    });
    test('should set relevant date to current time', function () {
      var passData = (0, _walletUtils.generateAppleWalletPass)(mockBusinessCard);
      var relevantDate = new Date(passData.relevantDate);
      var now = new Date();
      expect(relevantDate.getTime()).toBeCloseTo(now.getTime(), -2);
    });
  });
  describe('Google Wallet Object Generation', function () {
    test('should generate complete Google Wallet object', function () {
      var walletObject = (0, _walletUtils.generateGoogleWalletObject)(mockBusinessCard);
      expect(walletObject.id).toContain('card-123');
      expect(walletObject.classId).toBe('digbiz_business_card_class');
      expect(walletObject.title).toBe('John Smith');
    });
    test('should include structured content sections', function () {
      var walletObject = (0, _walletUtils.generateGoogleWalletObject)(mockBusinessCard);
      expect(walletObject.subheader.header).toBe('CEO & Founder');
      expect(walletObject.subheader.body).toBe('TechStart Inc.');
      expect(walletObject.header.header).toBe('Contact');
      expect(walletObject.header.body).toContain('@');
      expect(walletObject.body.header).toBe('About');
      expect(walletObject.body.body).toContain('innovative');
    });
    test('should include QR code barcode', function () {
      var walletObject = (0, _walletUtils.generateGoogleWalletObject)(mockBusinessCard);
      expect(walletObject.barcode.type).toBe('QR_CODE');
      expect(walletObject.barcode.value).toContain('abc123def456');
      expect(walletObject.barcode.alternateText).toBe('Scan to view card');
    });
    test('should include styling and branding', function () {
      var walletObject = (0, _walletUtils.generateGoogleWalletObject)(mockBusinessCard);
      expect(walletObject.hexBackgroundColor).toBe('#3B82F6');
      expect(walletObject.logo.sourceUri.uri).toContain('logo.png');
    });
    test('should generate unique ID with timestamp', function () {
      var walletObject1 = (0, _walletUtils.generateGoogleWalletObject)(mockBusinessCard);
      var walletObject2 = (0, _walletUtils.generateGoogleWalletObject)(mockBusinessCard);
      expect(walletObject1.id).not.toBe(walletObject2.id);
      expect(walletObject1.id).toContain('card-123');
      expect(walletObject2.id).toContain('card-123');
    });
    test('should prioritize contact information display', function () {
      var cardWithNoPhone = Object.assign({}, mockBusinessCard, {
        basicInfo: Object.assign({}, mockBusinessCard.basicInfo, {
          phone: undefined
        })
      });
      var walletObject = (0, _walletUtils.generateGoogleWalletObject)(cardWithNoPhone);
      expect(walletObject.header.body).toBe('john@techstart.com');
      var cardWithNoEmail = Object.assign({}, mockBusinessCard, {
        basicInfo: Object.assign({}, mockBusinessCard.basicInfo, {
          email: undefined
        })
      });
      var walletObject2 = (0, _walletUtils.generateGoogleWalletObject)(cardWithNoEmail);
      expect(walletObject2.header.body).toBe('+1-555-123-4567');
    });
  });
  describe('Apple Wallet Integration', function () {
    test('should save to Apple Wallet on iOS', (0, _asyncToGenerator2.default)(function* () {
      _reactNative.Platform.OS = 'ios';
      _reactNativeFs.default.writeFile.mockResolvedValue(true);
      var result = yield (0, _walletUtils.saveToAppleWallet)(mockBusinessCard);
      expect(_reactNativeFs.default.writeFile).toHaveBeenCalledWith(expect.stringContaining('pass_card-123.json'), expect.stringContaining('BEGIN:VCARD'), 'utf8');
      expect(_reactNative.Alert.alert).toHaveBeenCalledWith('Apple Wallet', expect.stringContaining('website'), expect.any(Array));
      expect(result).toBe(true);
    }));
    test('should reject Apple Wallet on non-iOS platforms', (0, _asyncToGenerator2.default)(function* () {
      _reactNative.Platform.OS = 'android';
      var result = yield (0, _walletUtils.saveToAppleWallet)(mockBusinessCard);
      expect(_reactNative.Alert.alert).toHaveBeenCalledWith('Not Available', 'Apple Wallet is only available on iOS devices.');
      expect(result).toBe(false);
    }));
    test('should handle Apple Wallet save errors', (0, _asyncToGenerator2.default)(function* () {
      _reactNative.Platform.OS = 'ios';
      _reactNativeFs.default.writeFile.mockRejectedValue(new Error('Write failed'));
      var result = yield (0, _walletUtils.saveToAppleWallet)(mockBusinessCard);
      expect(result).toBe(false);
      expect(_reactNative.Alert.alert).toHaveBeenCalledWith('Error', expect.any(String));
    }));
    test('should provide website redirect option', (0, _asyncToGenerator2.default)(function* () {
      _reactNative.Platform.OS = 'ios';
      _reactNativeFs.default.writeFile.mockResolvedValue(true);
      _reactNative.Linking.openURL.mockResolvedValue(true);
      yield (0, _walletUtils.saveToAppleWallet)(mockBusinessCard);
      var alertCall = _reactNative.Alert.alert.mock.calls[0];
      var buttons = alertCall[2];
      var websiteButton = buttons.find(function (b) {
        return b.text === 'Open Website';
      });
      expect(websiteButton).toBeDefined();
      websiteButton.onPress();
      expect(_reactNative.Linking.openURL).toHaveBeenCalledWith(expect.stringContaining('wallet/apple/abc123def456'));
    }));
  });
  describe('Google Wallet Integration', function () {
    test('should save to Google Wallet', (0, _asyncToGenerator2.default)(function* () {
      var result = yield (0, _walletUtils.saveToGoogleWallet)(mockBusinessCard);
      expect(_reactNative.Alert.alert).toHaveBeenCalledWith('Google Wallet', expect.stringContaining('website'), expect.any(Array));
      expect(result).toBe(true);
    }));
    test('should handle Google Wallet save errors', (0, _asyncToGenerator2.default)(function* () {
      var originalConsoleError = console.error;
      console.error = jest.fn();
      var result = yield (0, _walletUtils.saveToGoogleWallet)(mockBusinessCard);
      expect(result).toBe(true);
      console.error = originalConsoleError;
    }));
    test('should provide website redirect option for Google Wallet', (0, _asyncToGenerator2.default)(function* () {
      _reactNative.Linking.openURL.mockResolvedValue(true);
      yield (0, _walletUtils.saveToGoogleWallet)(mockBusinessCard);
      var alertCall = _reactNative.Alert.alert.mock.calls[0];
      var buttons = alertCall[2];
      var websiteButton = buttons.find(function (b) {
        return b.text === 'Open Website';
      });
      expect(websiteButton).toBeDefined();
      websiteButton.onPress();
      expect(_reactNative.Linking.openURL).toHaveBeenCalledWith(expect.stringContaining('wallet/google/abc123def456'));
    }));
    test('should generate JWT payload structure', (0, _asyncToGenerator2.default)(function* () {
      var walletObject = (0, _walletUtils.generateGoogleWalletObject)(mockBusinessCard);
      var expectedPayload = {
        iss: 'your-service-account-email@project.iam.gserviceaccount.com',
        aud: 'google',
        typ: 'savetowallet',
        iat: expect.any(Number),
        payload: {
          genericObjects: [walletObject]
        }
      };
      expect(walletObject).toBeDefined();
      expect(walletObject.id).toBeTruthy();
      expect(walletObject.classId).toBeTruthy();
    }));
  });
  describe('Platform Detection and Routing', function () {
    test('should route to Apple Wallet on iOS', (0, _asyncToGenerator2.default)(function* () {
      _reactNative.Platform.OS = 'ios';
      _reactNativeFs.default.writeFile.mockResolvedValue(true);
      var result = yield (0, _walletUtils.saveToWallet)(mockBusinessCard);
      expect(_reactNative.Alert.alert).toHaveBeenCalledWith('Apple Wallet', expect.any(String), expect.any(Array));
      expect(result).toBe(true);
    }));
    test('should route to Google Wallet on Android', (0, _asyncToGenerator2.default)(function* () {
      _reactNative.Platform.OS = 'android';
      var result = yield (0, _walletUtils.saveToWallet)(mockBusinessCard);
      expect(_reactNative.Alert.alert).toHaveBeenCalledWith('Google Wallet', expect.any(String), expect.any(Array));
      expect(result).toBe(true);
    }));
    test('should handle unsupported platforms', (0, _asyncToGenerator2.default)(function* () {
      _reactNative.Platform.OS = 'web';
      var result = yield (0, _walletUtils.saveToWallet)(mockBusinessCard);
      expect(_reactNative.Alert.alert).toHaveBeenCalledWith('Not Supported', 'Wallet integration is not supported on this platform.');
      expect(result).toBe(false);
    }));
    test('should detect wallet availability correctly', function () {
      _reactNative.Platform.OS = 'ios';
      expect((0, _walletUtils.isWalletAvailable)()).toBe(true);
      _reactNative.Platform.OS = 'android';
      expect((0, _walletUtils.isWalletAvailable)()).toBe(true);
      _reactNative.Platform.OS = 'web';
      expect((0, _walletUtils.isWalletAvailable)()).toBe(false);
    });
    test('should return correct platform names', function () {
      _reactNative.Platform.OS = 'ios';
      expect((0, _walletUtils.getWalletPlatformName)()).toBe('Apple Wallet');
      _reactNative.Platform.OS = 'android';
      expect((0, _walletUtils.getWalletPlatformName)()).toBe('Google Wallet');
      _reactNative.Platform.OS = 'web';
      expect((0, _walletUtils.getWalletPlatformName)()).toBe('Wallet');
    });
  });
  describe('Wallet Save URL Generation', function () {
    test('should generate Apple Wallet save URL on iOS', function () {
      _reactNative.Platform.OS = 'ios';
      var url = (0, _walletUtils.generateWalletSaveUrl)(mockBusinessCard);
      expect(url).toBe('https://digbiz.app/api/wallet/apple/abc123def456');
    });
    test('should generate Google Wallet save URL on Android', function () {
      _reactNative.Platform.OS = 'android';
      var url = (0, _walletUtils.generateWalletSaveUrl)(mockBusinessCard);
      expect(url).toBe('https://digbiz.app/api/wallet/google/abc123def456');
    });
    test('should use card ID when share code not available', function () {
      _reactNative.Platform.OS = 'ios';
      var cardWithoutShareCode = Object.assign({}, mockBusinessCard, {
        shareCode: undefined
      });
      var url = (0, _walletUtils.generateWalletSaveUrl)(cardWithoutShareCode);
      expect(url).toBe('https://digbiz.app/api/wallet/apple/card-123');
    });
  });
  describe('Contact Integration', function () {
    test('should provide instructions for saving to contacts', (0, _asyncToGenerator2.default)(function* () {
      var result = yield (0, _walletUtils.saveToContacts)(mockBusinessCard);
      expect(_reactNative.Alert.alert).toHaveBeenCalledWith('Save Contact', expect.stringContaining('vCard'), expect.any(Array));
      expect(result).toBe(true);
    }));
    test('should handle contact save errors gracefully', (0, _asyncToGenerator2.default)(function* () {
      var originalAlert = _reactNative.Alert.alert;
      _reactNative.Alert.alert = jest.fn(function () {
        throw new Error('Alert failed');
      });
      var result = yield (0, _walletUtils.saveToContacts)(mockBusinessCard);
      expect(result).toBe(false);
      _reactNative.Alert.alert = originalAlert;
    }));
  });
  describe('Calendar Integration', function () {
    test('should add follow-up event to calendar', (0, _asyncToGenerator2.default)(function* () {
      _reactNative.Linking.canOpenURL.mockResolvedValue(true);
      _reactNative.Linking.openURL.mockResolvedValue(true);
      var result = yield (0, _walletUtils.addToCalendar)(mockBusinessCard);
      expect(_reactNative.Linking.openURL).toHaveBeenCalledWith(expect.stringContaining('calendar.google.com'));
      expect(result).toBe(true);
    }));
    test('should add custom calendar event', (0, _asyncToGenerator2.default)(function* () {
      _reactNative.Linking.canOpenURL.mockResolvedValue(true);
      _reactNative.Linking.openURL.mockResolvedValue(true);
      var customTitle = 'Follow up call';
      var customNotes = 'Discuss partnership opportunities';
      var result = yield (0, _walletUtils.addToCalendar)(mockBusinessCard, customTitle, customNotes);
      expect(_reactNative.Linking.openURL).toHaveBeenCalledWith(expect.stringContaining(encodeURIComponent(customTitle)));
      expect(_reactNative.Linking.openURL).toHaveBeenCalledWith(expect.stringContaining(encodeURIComponent(customNotes)));
      expect(result).toBe(true);
    }));
    test('should handle calendar not available', (0, _asyncToGenerator2.default)(function* () {
      _reactNative.Linking.canOpenURL.mockResolvedValue(false);
      var result = yield (0, _walletUtils.addToCalendar)(mockBusinessCard);
      expect(_reactNative.Alert.alert).toHaveBeenCalledWith('Add to Calendar', expect.stringContaining('not available'));
      expect(result).toBe(false);
    }));
    test('should format calendar event dates correctly', (0, _asyncToGenerator2.default)(function* () {
      _reactNative.Linking.canOpenURL.mockResolvedValue(true);
      yield (0, _walletUtils.addToCalendar)(mockBusinessCard);
      var calendarUrl = _reactNative.Linking.openURL.mock.calls[0][0];
      expect(calendarUrl).toMatch(/dates=\d{8}T\d{6}Z\/\d{8}T\d{6}Z/);
    }));
    test('should handle calendar integration errors', (0, _asyncToGenerator2.default)(function* () {
      _reactNative.Linking.canOpenURL.mockRejectedValue(new Error('Calendar error'));
      var result = yield (0, _walletUtils.addToCalendar)(mockBusinessCard);
      expect(result).toBe(false);
      expect(_reactNative.Alert.alert).toHaveBeenCalledWith('Error', expect.any(String));
    }));
  });
  describe('Edge Cases and Error Handling', function () {
    test('should handle missing business card data', function () {
      var emptyCard = Object.assign({}, mockBusinessCard, {
        basicInfo: {
          name: '',
          title: '',
          company: '',
          email: ''
        }
      });
      expect(function () {
        return (0, _walletUtils.generateAppleWalletPass)(emptyCard);
      }).not.toThrow();
      expect(function () {
        return (0, _walletUtils.generateGoogleWalletObject)(emptyCard);
      }).not.toThrow();
    });
    test('should handle very long field values', function () {
      var longDataCard = Object.assign({}, mockBusinessCard, {
        basicInfo: Object.assign({}, mockBusinessCard.basicInfo, {
          name: 'A'.repeat(1000),
          bio: 'B'.repeat(2000)
        })
      });
      var applePass = (0, _walletUtils.generateAppleWalletPass)(longDataCard);
      var googleWallet = (0, _walletUtils.generateGoogleWalletObject)(longDataCard);
      expect(applePass.generic.primaryFields[0].value).toBe('A'.repeat(1000));
      expect(googleWallet.title).toBe('A'.repeat(1000));
    });
    test('should handle special characters in wallet data', function () {
      var specialCharsCard = Object.assign({}, mockBusinessCard, {
        basicInfo: Object.assign({}, mockBusinessCard.basicInfo, {
          name: 'JosÃ© MarÃ­a Ã‘oÃ±o',
          company: 'CafÃ© & Restaurantâ„¢'
        })
      });
      var applePass = (0, _walletUtils.generateAppleWalletPass)(specialCharsCard);
      var googleWallet = (0, _walletUtils.generateGoogleWalletObject)(specialCharsCard);
      expect(applePass.generic.primaryFields[0].value).toBe('JosÃ© MarÃ­a Ã‘oÃ±o');
      expect(googleWallet.subheader.body).toBe('CafÃ© & Restaurantâ„¢');
    });
    test('should handle network timeouts and errors', (0, _asyncToGenerator2.default)(function* () {
      _reactNative.Platform.OS = 'ios';
      _reactNativeFs.default.writeFile.mockImplementation(function () {
        return new Promise(function (_, reject) {
          return setTimeout(function () {
            return reject(new Error('Timeout'));
          }, 100);
        });
      });
      var result = yield (0, _walletUtils.saveToAppleWallet)(mockBusinessCard);
      expect(result).toBe(false);
      expect(_reactNative.Alert.alert).toHaveBeenCalledWith('Error', expect.any(String));
    }));
  });
  describe('Data Validation and Security', function () {
    test('should validate pass data structure', function () {
      var passData = (0, _walletUtils.generateAppleWalletPass)(mockBusinessCard);
      expect(passData.formatVersion).toBe(1);
      expect(passData.passTypeIdentifier).toMatch(/^pass\./);
      expect(passData.serialNumber).toBeTruthy();
      expect(passData.teamIdentifier).toBeTruthy();
      expect(passData.organizationName).toBeTruthy();
    });
    test('should sanitize sensitive information', function () {
      var cardWithSensitiveData = Object.assign({}, mockBusinessCard, {
        customFields: [{
          id: '1',
          label: 'SSN',
          value: '123-45-6789',
          type: 'text',
          isPublic: false,
          order: 1
        }, {
          id: '2',
          label: 'Public Info',
          value: 'Safe to share',
          type: 'text',
          isPublic: true,
          order: 2
        }]
      });
      var applePass = (0, _walletUtils.generateAppleWalletPass)(cardWithSensitiveData);
      var backFieldValues = applePass.generic.backFields.map(function (f) {
        return f.value;
      }).join(' ');
      expect(backFieldValues).not.toContain('123-45-6789');
      expect(backFieldValues).toContain('Safe to share');
    });
    test('should handle malformed URLs in social links', function () {
      var cardWithBadUrls = Object.assign({}, mockBusinessCard, {
        socialLinks: {
          linkedin: 'not-a-url',
          twitter: 'javascript:alert(1)',
          website: 'https://legitimate-site.com'
        }
      });
      expect(function () {
        return (0, _walletUtils.generateAppleWalletPass)(cardWithBadUrls);
      }).not.toThrow();
      expect(function () {
        return (0, _walletUtils.generateGoogleWalletObject)(cardWithBadUrls);
      }).not.toThrow();
    });
  });
  describe('Performance and Memory', function () {
    test('should handle large-scale pass generation efficiently', function () {
      var startTime = performance.now();
      for (var i = 0; i < 100; i++) {
        var testCard = Object.assign({}, mockBusinessCard, {
          id: `card-${i}`
        });
        (0, _walletUtils.generateAppleWalletPass)(testCard);
        (0, _walletUtils.generateGoogleWalletObject)(testCard);
      }
      var endTime = performance.now();
      var totalTime = endTime - startTime;
      expect(totalTime).toBeLessThan(5000);
    });
    test('should not leak memory with repeated operations', function () {
      var _process$memoryUsage, _process$memoryUsage2;
      var initialMemory = (process.memoryUsage == null || (_process$memoryUsage = process.memoryUsage()) == null ? void 0 : _process$memoryUsage.heapUsed) || 0;
      for (var i = 0; i < 50; i++) {
        var passData = (0, _walletUtils.generateAppleWalletPass)(mockBusinessCard);
        var walletObject = (0, _walletUtils.generateGoogleWalletObject)(mockBusinessCard);
        passData = null;
        walletObject = null;
      }
      if (global.gc) {
        global.gc();
      }
      var finalMemory = (process.memoryUsage == null || (_process$memoryUsage2 = process.memoryUsage()) == null ? void 0 : _process$memoryUsage2.heapUsed) || 0;
      var memoryIncrease = finalMemory - initialMemory;
      expect(memoryIncrease).toBeLessThan(50 * 1024 * 1024);
    });
  });
  describe('Advanced Apple Wallet Features', function () {
    test('should generate pass with personalization', function () {
      var personalizedCard = Object.assign({}, mockBusinessCard, {
        basicInfo: Object.assign({}, mockBusinessCard.basicInfo, {
          profilePhoto: 'https://example.com/photo.jpg'
        }),
        walletSettings: {
          personalization: {
            logo: 'https://company.com/logo.png',
            backgroundColor: '#FF6B6B',
            foregroundColor: '#FFFFFF',
            labelColor: '#E0E0E0'
          }
        }
      });
      var passData = (0, _walletUtils.generateAppleWalletPass)(personalizedCard);
      expect(passData.backgroundColor).toBe('rgb(255,107,107)');
      expect(passData.foregroundColor).toBe('rgb(255,255,255)');
      expect(passData.labelColor).toBe('rgb(224,224,224)');
    });
    test('should include Apple Wallet locations', function () {
      var cardWithLocations = Object.assign({}, mockBusinessCard, {
        walletSettings: {
          locations: [{
            latitude: 37.7749,
            longitude: -122.4194,
            relevantText: 'Welcome to San Francisco!',
            altitude: 10.0
          }, {
            latitude: 40.7128,
            longitude: -74.0060,
            relevantText: 'Welcome to New York!',
            altitude: 5.0
          }]
        }
      });
      var passData = (0, _walletUtils.generateAppleWalletPass)(cardWithLocations);
      expect(passData.locations).toHaveLength(2);
      expect(passData.locations[0].latitude).toBe(37.7749);
      expect(passData.locations[0].relevantText).toBe('Welcome to San Francisco!');
    });
    test('should handle Apple Wallet beacons', function () {
      var cardWithBeacons = Object.assign({}, mockBusinessCard, {
        walletSettings: {
          beacons: [{
            proximityUUID: '123e4567-e89b-12d3-a456-426614174000',
            major: 1,
            minor: 100,
            relevantText: 'Welcome to our office!'
          }]
        }
      });
      var passData = (0, _walletUtils.generateAppleWalletPass)(cardWithBeacons);
      expect(passData.beacons).toHaveLength(1);
      expect(passData.beacons[0].proximityUUID).toBe('123e4567-e89b-12d3-a456-426614174000');
      expect(passData.beacons[0].relevantText).toBe('Welcome to our office!');
    });
    test('should include Apple Wallet web service URLs', function () {
      var passData = (0, _walletUtils.generateAppleWalletPass)(mockBusinessCard);
      expect(passData.webServiceURL).toBe('https://digbiz.app/api/wallet/apple');
      expect(passData.authenticationToken).toBeTruthy();
      expect(passData.passTypeIdentifier).toBe('pass.com.digbiz.businesscard');
    });
    test('should handle Apple Wallet expiration', function () {
      var expiringCard = Object.assign({}, mockBusinessCard, {
        walletSettings: {
          expiresAfter: 30
        }
      });
      var passData = (0, _walletUtils.generateAppleWalletPass)(expiringCard);
      var expirationDate = new Date(passData.expirationDate);
      var expectedDate = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000);
      expect(expirationDate.getTime()).toBeCloseTo(expectedDate.getTime(), -4);
    });
    test('should generate Apple Wallet pass file', (0, _asyncToGenerator2.default)(function* () {
      var passBuffer = yield generateApplePassFile(mockBusinessCard);
      expect(passBuffer).toBeInstanceOf(Buffer);
      expect(passBuffer.length).toBeGreaterThan(0);
      expect(_reactNativeFs.default.writeFile).toHaveBeenCalledWith(expect.stringContaining('.pkpass'), expect.any(String), 'base64');
    }));
  });
  describe('Advanced Google Wallet Features', function () {
    test('should generate Google Wallet class definition', function () {
      var walletClass = generateGoogleWalletClass();
      expect(walletClass.id).toBe('digbiz_business_card_class');
      expect(walletClass.classTemplateInfo.cardTemplateOverride.cardRowTemplateInfos).toBeDefined();
      expect(walletClass.hexBackgroundColor).toBe('#3B82F6');
      expect(walletClass.issuerName).toBe('DigBiz');
    });
    test('should handle Google Wallet object with custom styling', function () {
      var styledCard = Object.assign({}, mockBusinessCard, {
        walletSettings: {
          googlePay: {
            hexBackgroundColor: '#FF5722',
            logo: {
              sourceUri: {
                uri: 'https://company.com/wallet-logo.png'
              },
              contentDescription: {
                defaultValue: {
                  language: 'en-US',
                  value: 'Company Logo'
                }
              }
            }
          }
        }
      });
      var walletObject = (0, _walletUtils.generateGoogleWalletObject)(styledCard);
      expect(walletObject.hexBackgroundColor).toBe('#FF5722');
      expect(walletObject.logo.sourceUri.uri).toBe('https://company.com/wallet-logo.png');
    });
    test('should include Google Wallet smart tap options', function () {
      var smartTapCard = Object.assign({}, mockBusinessCard, {
        walletSettings: {
          smartTap: {
            redemptionIssuers: [12345678],
            merchantId: 12345678
          }
        }
      });
      var walletObject = (0, _walletUtils.generateGoogleWalletObject)(smartTapCard);
      expect(walletObject.smartTapRedemptionValue).toBeDefined();
      expect(walletObject.redemptionIssuers).toContain(12345678);
    });
    test('should generate Google Wallet save URL with JWT', function () {
      var saveUrl = generateGoogleWalletSaveUrl(mockBusinessCard);
      expect(saveUrl).toContain('https://pay.google.com/gp/v/save/');
      expect(saveUrl).toContain('jwt=');
    });
    test('should handle Google Wallet object with multiple text modules', function () {
      var detailedCard = Object.assign({}, mockBusinessCard, {
        customFields: [{
          id: '1',
          label: 'Skills',
          value: 'React, Node.js, TypeScript',
          type: 'text',
          isPublic: true,
          order: 1
        }, {
          id: '2',
          label: 'Experience',
          value: '10 years',
          type: 'text',
          isPublic: true,
          order: 2
        }, {
          id: '3',
          label: 'Location',
          value: 'San Francisco',
          type: 'text',
          isPublic: true,
          order: 3
        }]
      });
      var walletObject = (0, _walletUtils.generateGoogleWalletObject)(detailedCard);
      expect(walletObject.textModulesData).toHaveLength(3);
      expect(walletObject.textModulesData[0].header).toBe('Skills');
      expect(walletObject.textModulesData[0].body).toBe('React, Node.js, TypeScript');
    });
  });
  describe('Wallet Integration Security', function () {
    test('should validate Apple Wallet pass signing', (0, _asyncToGenerator2.default)(function* () {
      var passData = (0, _walletUtils.generateAppleWalletPass)(mockBusinessCard);
      expect(passData.passTypeIdentifier).toMatch(/^pass\./);
      expect(passData.teamIdentifier).toBeTruthy();
      expect(passData.serialNumber).toBeTruthy();
      expect(passData.authenticationToken).toMatch(/^[A-Za-z0-9+/=]+$/);
    }));
    test('should handle sensitive data filtering', function () {
      var sensitiveCard = Object.assign({}, mockBusinessCard, {
        basicInfo: Object.assign({}, mockBusinessCard.basicInfo, {
          privateNotes: 'Internal password: 123456'
        }),
        customFields: [{
          id: '1',
          label: 'Internal ID',
          value: 'EMP-12345',
          type: 'text',
          isPublic: false,
          order: 1
        }, {
          id: '2',
          label: 'Public Phone',
          value: '+1-555-123-4567',
          type: 'phone',
          isPublic: true,
          order: 2
        }]
      });
      var applePass = (0, _walletUtils.generateAppleWalletPass)(sensitiveCard);
      var googleObject = (0, _walletUtils.generateGoogleWalletObject)(sensitiveCard);
      var applePassStr = JSON.stringify(applePass);
      expect(applePassStr).not.toContain('Internal password');
      expect(applePassStr).not.toContain('EMP-12345');
      var googleObjectStr = JSON.stringify(googleObject);
      expect(googleObjectStr).not.toContain('Internal password');
      expect(googleObjectStr).not.toContain('EMP-12345');
      expect(applePassStr).toContain('+1-555-123-4567');
      expect(googleObjectStr).toContain('+1-555-123-4567');
    });
    test('should validate wallet data before saving', function () {
      var invalidCard = Object.assign({}, mockBusinessCard, {
        basicInfo: {
          name: '',
          title: 'CEO',
          company: 'TechStart',
          email: 'invalid-email'
        }
      });
      expect(function () {
        return (0, _walletUtils.generateAppleWalletPass)(invalidCard);
      }).toThrow('Invalid card data');
      expect(function () {
        return (0, _walletUtils.generateGoogleWalletObject)(invalidCard);
      }).toThrow('Invalid card data');
    });
  });
  describe('Wallet Analytics and Tracking', function () {
    test('should track wallet save attempts', (0, _asyncToGenerator2.default)(function* () {
      yield (0, _walletUtils.saveToWallet)(mockBusinessCard);
      expect(mockAnalytics.track).toHaveBeenCalledWith('wallet_save_attempt', {
        cardId: mockBusinessCard.id,
        platform: expect.any(String),
        walletType: expect.stringMatching(/(apple|google)/)
      });
    }));
    test('should track successful wallet saves', (0, _asyncToGenerator2.default)(function* () {
      _reactNative.Linking.openURL.mockResolvedValue(true);
      yield (0, _walletUtils.saveToWallet)(mockBusinessCard);
      expect(mockAnalytics.track).toHaveBeenCalledWith('wallet_save_success', {
        cardId: mockBusinessCard.id,
        walletType: expect.stringMatching(/(apple|google)/)
      });
    }));
    test('should track wallet save failures', (0, _asyncToGenerator2.default)(function* () {
      _reactNativeFs.default.writeFile.mockRejectedValue(new Error('File write failed'));
      yield (0, _walletUtils.saveToWallet)(mockBusinessCard);
      expect(mockAnalytics.track).toHaveBeenCalledWith('wallet_save_failed', {
        cardId: mockBusinessCard.id,
        error: 'File write failed'
      });
    }));
  });
  describe('Wallet Integration Edge Cases', function () {
    test('should handle missing company logo gracefully', function () {
      var cardWithoutLogo = Object.assign({}, mockBusinessCard, {
        basicInfo: Object.assign({}, mockBusinessCard.basicInfo, {
          companyLogo: undefined
        })
      });
      var applePass = (0, _walletUtils.generateAppleWalletPass)(cardWithoutLogo);
      var googleObject = (0, _walletUtils.generateGoogleWalletObject)(cardWithoutLogo);
      expect(applePass.logoText).toBe(cardWithoutLogo.basicInfo.company);
      expect(googleObject.logo.sourceUri.uri).toContain('default-logo');
    });
    test('should handle very long field values', function () {
      var _applePass$generic;
      var cardWithLongValues = Object.assign({}, mockBusinessCard, {
        basicInfo: Object.assign({}, mockBusinessCard.basicInfo, {
          bio: 'A'.repeat(500)
        })
      });
      var applePass = (0, _walletUtils.generateAppleWalletPass)(cardWithLongValues);
      var googleObject = (0, _walletUtils.generateGoogleWalletObject)(cardWithLongValues);
      expect((_applePass$generic = applePass.generic) == null || (_applePass$generic = _applePass$generic.auxiliaryFields) == null || (_applePass$generic = _applePass$generic[0]) == null || (_applePass$generic = _applePass$generic.value) == null ? void 0 : _applePass$generic.length).toBeLessThanOrEqual(200);
      expect(googleObject.body.body.length).toBeLessThanOrEqual(200);
    });
    test('should handle special characters in wallet data', function () {
      var _applePass$generic2;
      var cardWithSpecialChars = Object.assign({}, mockBusinessCard, {
        basicInfo: Object.assign({}, mockBusinessCard.basicInfo, {
          name: 'JosÃ© MarÃ­a Ã‘oÃ±o',
          company: 'CafÃ© & Restaurantâ„¢'
        })
      });
      var applePass = (0, _walletUtils.generateAppleWalletPass)(cardWithSpecialChars);
      var googleObject = (0, _walletUtils.generateGoogleWalletObject)(cardWithSpecialChars);
      expect((_applePass$generic2 = applePass.generic) == null || (_applePass$generic2 = _applePass$generic2.primaryFields) == null || (_applePass$generic2 = _applePass$generic2[0]) == null ? void 0 : _applePass$generic2.value).toBe('JosÃ© MarÃ­a Ã‘oÃ±o');
      expect(googleObject.title).toBe('JosÃ© MarÃ­a Ã‘oÃ±o');
    });
    test('should handle wallet integration on different OS versions', function () {
      _reactNative.Platform.OS = 'ios';
      _reactNative.Platform.Version = '12.0';
      expect(isWalletSupported()).toBe(true);
      _reactNative.Platform.Version = '8.0';
      expect(isWalletSupported()).toBe(false);
      _reactNative.Platform.OS = 'android';
      _reactNative.Platform.Version = 23;
      expect(isWalletSupported()).toBe(true);
      _reactNative.Platform.Version = 19;
      expect(isWalletSupported()).toBe(false);
    });
  });
  describe('Wallet Pass Updates and Expiration', function () {
    test('should handle Apple Wallet pass updates', (0, _asyncToGenerator2.default)(function* () {
      var updatedCard = Object.assign({}, mockBusinessCard, {
        basicInfo: Object.assign({}, mockBusinessCard.basicInfo, {
          title: 'Senior CEO & Founder',
          phone: '+1-555-999-8888'
        }),
        updatedAt: new Date().toISOString()
      });
      var result = yield updateWalletPass(updatedCard);
      expect(result.success).toBe(true);
      expect(result.passUpdateTag).toBeTruthy();
      expect(mockAnalytics.track).toHaveBeenCalledWith('wallet_pass_updated', {
        cardId: updatedCard.id,
        updateFields: ['title', 'phone']
      });
    }));
    test('should handle wallet pass expiration notifications', (0, _asyncToGenerator2.default)(function* () {
      var expiringCard = Object.assign({}, mockBusinessCard, {
        walletSettings: {
          expiresAfter: 1,
          notifyBeforeExpiry: 24
        }
      });
      var result = yield checkWalletPassExpiration(expiringCard);
      expect(result.isExpiringSoon).toBe(true);
      expect(result.hoursUntilExpiry).toBeLessThanOrEqual(24);
    }));
    test('should revoke expired wallet passes', (0, _asyncToGenerator2.default)(function* () {
      var expiredCard = Object.assign({}, mockBusinessCard, {
        walletSettings: {
          expirationDate: new Date(Date.now() - 86400000).toISOString()
        }
      });
      var result = yield revokeWalletPass(expiredCard);
      expect(result.revoked).toBe(true);
      expect(mockAnalytics.track).toHaveBeenCalledWith('wallet_pass_revoked', {
        cardId: expiredCard.id,
        reason: 'expired'
      });
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,