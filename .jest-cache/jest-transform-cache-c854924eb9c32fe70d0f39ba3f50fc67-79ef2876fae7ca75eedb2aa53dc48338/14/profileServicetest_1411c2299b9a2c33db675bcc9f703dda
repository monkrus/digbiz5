1dd2f10ec84040c57e10f440d4374898
_getJestObj().mock('../../../src/utils/config', function () {
  return {
    AppConfig: {
      apiUrl: 'https://test-api.com',
      apiTimeout: 5000
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _profileService = require("../../../src/services/profileService");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
global.fetch = jest.fn();
describe('ProfileService', function () {
  var profileService;
  var mockFetch = fetch;
  beforeEach(function () {
    profileService = new _profileService.ProfileService();
    mockFetch.mockClear();
  });
  afterEach(function () {
    jest.clearAllMocks();
  });
  var mockProfileData = {
    name: 'John Doe',
    title: 'Software Engineer',
    company: 'Tech Company',
    bio: 'Experienced developer',
    email: 'john@example.com',
    phone: '+1234567890',
    location: 'San Francisco, CA',
    website: 'https://johndoe.com',
    socialLinks: {
      linkedin: 'https://linkedin.com/in/johndoe',
      twitter: null,
      github: null,
      instagram: null,
      facebook: null
    },
    skills: ['JavaScript', 'React', 'Node.js'],
    isPublic: true
  };
  var mockResponse = {
    success: true,
    profile: Object.assign({
      id: 'profile-123',
      userId: 'user-123'
    }, mockProfileData, {
      profilePhoto: null,
      experience: [],
      education: [],
      isVerified: false,
      createdAt: '2023-01-01T00:00:00Z',
      updatedAt: '2023-01-01T00:00:00Z'
    }),
    message: 'Profile created successfully'
  };
  describe('Authentication', function () {
    it('should set auth token correctly', function () {
      var token = 'test-token-123';
      profileService.setAuthToken(token);
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: function () {
          var _json = (0, _asyncToGenerator2.default)(function* () {
            return mockResponse;
          });
          function json() {
            return _json.apply(this, arguments);
          }
          return json;
        }()
      });
      profileService.getCurrentUserProfile();
      expect(mockFetch).toHaveBeenCalledWith('https://test-api.com/api/profiles/me', expect.objectContaining({
        headers: expect.objectContaining({
          Authorization: 'Bearer test-token-123'
        })
      }));
    });
    it('should remove auth token correctly', function () {
      profileService.setAuthToken('test-token');
      profileService.removeAuthToken();
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: function () {
          var _json2 = (0, _asyncToGenerator2.default)(function* () {
            return mockResponse;
          });
          function json() {
            return _json2.apply(this, arguments);
          }
          return json;
        }()
      });
      profileService.getCurrentUserProfile();
      expect(mockFetch).toHaveBeenCalledWith('https://test-api.com/api/profiles/me', expect.objectContaining({
        headers: expect.not.objectContaining({
          Authorization: expect.any(String)
        })
      }));
    });
  });
  describe('Profile CRUD Operations', function () {
    describe('createProfile', function () {
      it('should create profile successfully', (0, _asyncToGenerator2.default)(function* () {
        mockFetch.mockResolvedValueOnce({
          ok: true,
          json: function () {
            var _json3 = (0, _asyncToGenerator2.default)(function* () {
              return mockResponse;
            });
            function json() {
              return _json3.apply(this, arguments);
            }
            return json;
          }()
        });
        var result = yield profileService.createProfile(mockProfileData);
        expect(mockFetch).toHaveBeenCalledWith('https://test-api.com/api/profiles/', expect.objectContaining({
          method: 'POST',
          headers: expect.objectContaining({
            'Content-Type': 'application/json'
          }),
          body: JSON.stringify({
            name: 'John Doe',
            title: 'Software Engineer',
            company: 'Tech Company',
            bio: 'Experienced developer',
            email: 'john@example.com',
            phone: '+1234567890',
            location: 'San Francisco, CA',
            website: 'https://johndoe.com',
            socialLinks: mockProfileData.socialLinks,
            skills: ['JavaScript', 'React', 'Node.js'],
            isPublic: true
          })
        }));
        expect(result).toEqual(mockResponse);
      }));
      it('should sanitize input data', (0, _asyncToGenerator2.default)(function* () {
        var dirtyData = Object.assign({}, mockProfileData, {
          name: '  John Doe  ',
          email: '  JOHN@EXAMPLE.COM  ',
          bio: '  Bio with spaces  ',
          skills: ['  JavaScript  ', '  React  ']
        });
        mockFetch.mockResolvedValueOnce({
          ok: true,
          json: function () {
            var _json4 = (0, _asyncToGenerator2.default)(function* () {
              return mockResponse;
            });
            function json() {
              return _json4.apply(this, arguments);
            }
            return json;
          }()
        });
        yield profileService.createProfile(dirtyData);
        expect(mockFetch).toHaveBeenCalledWith(expect.any(String), expect.objectContaining({
          method: 'POST',
          body: expect.stringContaining('"name":"John Doe"') && expect.stringContaining('"email":"john@example.com"') && expect.stringContaining('"bio":"Bio with spaces"'),
          headers: expect.objectContaining({
            'Content-Type': 'application/json'
          })
        }));
      }));
      it('should handle API errors', (0, _asyncToGenerator2.default)(function* () {
        mockFetch.mockResolvedValueOnce({
          ok: false,
          status: 400,
          statusText: 'Bad Request',
          json: function () {
            var _json5 = (0, _asyncToGenerator2.default)(function* () {
              return {
                error: 'Invalid data'
              };
            });
            function json() {
              return _json5.apply(this, arguments);
            }
            return json;
          }()
        });
        yield expect(profileService.createProfile(mockProfileData)).rejects.toThrow('Invalid data');
      }));
      it('should handle network errors', (0, _asyncToGenerator2.default)(function* () {
        mockFetch.mockRejectedValueOnce(new Error('Network error'));
        yield expect(profileService.createProfile(mockProfileData)).rejects.toThrow('Network error');
      }));
    });
    describe('updateProfile', function () {
      it('should update profile successfully', (0, _asyncToGenerator2.default)(function* () {
        var updateData = {
          name: 'Jane Doe',
          title: 'Senior Engineer'
        };
        var updatedResponse = Object.assign({}, mockResponse, {
          profile: Object.assign({}, mockResponse.profile, updateData)
        });
        mockFetch.mockResolvedValueOnce({
          ok: true,
          json: function () {
            var _json6 = (0, _asyncToGenerator2.default)(function* () {
              return updatedResponse;
            });
            function json() {
              return _json6.apply(this, arguments);
            }
            return json;
          }()
        });
        var result = yield profileService.updateProfile('profile-123', updateData);
        expect(mockFetch).toHaveBeenCalledWith('https://test-api.com/api/profiles/profile-123', expect.objectContaining({
          method: 'PATCH',
          body: JSON.stringify(updateData)
        }));
        expect(result).toEqual(updatedResponse);
      }));
      it('should only include provided fields', (0, _asyncToGenerator2.default)(function* () {
        var partialUpdate = {
          name: 'Updated Name'
        };
        mockFetch.mockResolvedValueOnce({
          ok: true,
          json: function () {
            var _json7 = (0, _asyncToGenerator2.default)(function* () {
              return mockResponse;
            });
            function json() {
              return _json7.apply(this, arguments);
            }
            return json;
          }()
        });
        yield profileService.updateProfile('profile-123', partialUpdate);
        expect(mockFetch).toHaveBeenCalledWith(expect.any(String), expect.objectContaining({
          body: JSON.stringify({
            name: 'Updated Name'
          })
        }));
      }));
    });
    describe('getProfile', function () {
      it('should fetch profile successfully', (0, _asyncToGenerator2.default)(function* () {
        mockFetch.mockResolvedValueOnce({
          ok: true,
          json: function () {
            var _json8 = (0, _asyncToGenerator2.default)(function* () {
              return mockResponse;
            });
            function json() {
              return _json8.apply(this, arguments);
            }
            return json;
          }()
        });
        var result = yield profileService.getProfile('profile-123');
        expect(mockFetch).toHaveBeenCalledWith('https://test-api.com/api/profiles/profile-123', expect.objectContaining({
          method: 'GET'
        }));
        expect(result).toEqual(mockResponse);
      }));
    });
    describe('deleteProfile', function () {
      it('should delete profile successfully', (0, _asyncToGenerator2.default)(function* () {
        var deleteResponse = {
          success: true,
          message: 'Profile deleted'
        };
        mockFetch.mockResolvedValueOnce({
          ok: true,
          json: function () {
            var _json9 = (0, _asyncToGenerator2.default)(function* () {
              return deleteResponse;
            });
            function json() {
              return _json9.apply(this, arguments);
            }
            return json;
          }()
        });
        var result = yield profileService.deleteProfile('profile-123');
        expect(mockFetch).toHaveBeenCalledWith('https://test-api.com/api/profiles/profile-123', expect.objectContaining({
          method: 'DELETE'
        }));
        expect(result).toEqual(deleteResponse);
      }));
    });
  });
  describe('Photo Upload', function () {
    var mockPhotoData = {
      uri: 'file://photo.jpg',
      name: 'profile-photo.jpg',
      type: 'image/jpeg',
      size: 1024000
    };
    it('should upload photo successfully', (0, _asyncToGenerator2.default)(function* () {
      var uploadResponse = {
        success: true,
        photoUrl: 'https://example.com/photo.jpg',
        message: 'Photo uploaded successfully'
      };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: function () {
          var _json0 = (0, _asyncToGenerator2.default)(function* () {
            return uploadResponse;
          });
          function json() {
            return _json0.apply(this, arguments);
          }
          return json;
        }()
      });
      var result = yield profileService.uploadProfilePhoto('profile-123', mockPhotoData);
      expect(mockFetch).toHaveBeenCalledWith('https://test-api.com/api/profiles/profile-123/photo', expect.objectContaining({
        method: 'POST',
        body: expect.any(FormData),
        headers: expect.not.objectContaining({
          'Content-Type': expect.any(String)
        })
      }));
      expect(result).toEqual(uploadResponse);
    }));
    it('should delete photo successfully', (0, _asyncToGenerator2.default)(function* () {
      var deleteResponse = {
        success: true,
        message: 'Photo deleted'
      };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: function () {
          var _json1 = (0, _asyncToGenerator2.default)(function* () {
            return deleteResponse;
          });
          function json() {
            return _json1.apply(this, arguments);
          }
          return json;
        }()
      });
      var result = yield profileService.deleteProfilePhoto('profile-123');
      expect(result).toEqual(deleteResponse);
    }));
  });
  describe('Search and Discovery', function () {
    it('should search profiles with query and filters', (0, _asyncToGenerator2.default)(function* () {
      var searchParams = {
        query: 'software engineer',
        page: 1,
        limit: 10,
        sortBy: 'name',
        sortOrder: 'asc',
        filters: {
          isPublic: true,
          isVerified: true,
          skills: ['JavaScript', 'React']
        }
      };
      var searchResponse = {
        profiles: [mockResponse.profile],
        totalCount: 1,
        page: 1,
        limit: 10,
        hasNext: false
      };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: function () {
          var _json10 = (0, _asyncToGenerator2.default)(function* () {
            return searchResponse;
          });
          function json() {
            return _json10.apply(this, arguments);
          }
          return json;
        }()
      });
      var result = yield profileService.searchProfiles(searchParams);
      expect(mockFetch).toHaveBeenCalledWith(expect.stringContaining('/search?'), expect.objectContaining({
        method: 'GET'
      }));
      var calledUrl = mockFetch.mock.calls[0][0];
      expect(calledUrl).toContain('query=software%20engineer');
      expect(calledUrl).toContain('page=1');
      expect(calledUrl).toContain('limit=10');
      expect(calledUrl).toContain('sortBy=name');
      expect(calledUrl).toContain('sortOrder=asc');
      expect(result).toEqual(searchResponse);
    }));
    it('should handle empty search params', (0, _asyncToGenerator2.default)(function* () {
      var searchResponse = {
        profiles: [],
        totalCount: 0,
        page: 1,
        limit: 10,
        hasNext: false
      };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: function () {
          var _json11 = (0, _asyncToGenerator2.default)(function* () {
            return searchResponse;
          });
          function json() {
            return _json11.apply(this, arguments);
          }
          return json;
        }()
      });
      yield profileService.searchProfiles({});
      expect(mockFetch).toHaveBeenCalledWith('https://test-api.com/api/profiles/search', expect.objectContaining({
        method: 'GET'
      }));
    }));
    it('should get profile suggestions', (0, _asyncToGenerator2.default)(function* () {
      var suggestionsResponse = {
        profiles: [mockResponse.profile],
        totalCount: 1
      };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: function () {
          var _json12 = (0, _asyncToGenerator2.default)(function* () {
            return suggestionsResponse;
          });
          function json() {
            return _json12.apply(this, arguments);
          }
          return json;
        }()
      });
      var result = yield profileService.getProfileSuggestions(5);
      expect(mockFetch).toHaveBeenCalledWith('https://test-api.com/api/profiles/suggestions?limit=5', expect.objectContaining({
        method: 'GET'
      }));
      expect(result).toEqual(suggestionsResponse);
    }));
  });
  describe('Profile Analytics', function () {
    it('should get profile stats', (0, _asyncToGenerator2.default)(function* () {
      var statsResponse = {
        totalProfiles: 100,
        publicProfiles: 80,
        verifiedProfiles: 50,
        averageCompletion: 75
      };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: function () {
          var _json13 = (0, _asyncToGenerator2.default)(function* () {
            return statsResponse;
          });
          function json() {
            return _json13.apply(this, arguments);
          }
          return json;
        }()
      });
      var result = yield profileService.getProfileStats();
      expect(mockFetch).toHaveBeenCalledWith('https://test-api.com/api/profiles/stats', expect.objectContaining({
        method: 'GET'
      }));
      expect(result).toEqual(statsResponse);
    }));
    it('should get profile completion status', (0, _asyncToGenerator2.default)(function* () {
      var completionResponse = {
        percentage: 85,
        missingFields: ['bio', 'website'],
        suggestions: ['Add a detailed bio', 'Add your website'],
        isComplete: false
      };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: function () {
          var _json14 = (0, _asyncToGenerator2.default)(function* () {
            return completionResponse;
          });
          function json() {
            return _json14.apply(this, arguments);
          }
          return json;
        }()
      });
      var result = yield profileService.getProfileCompletion('profile-123');
      expect(mockFetch).toHaveBeenCalledWith('https://test-api.com/api/profiles/profile-123/completion', expect.objectContaining({
        method: 'GET'
      }));
      expect(result).toEqual(completionResponse);
    }));
    it('should record profile view', (0, _asyncToGenerator2.default)(function* () {
      var viewResponse = {
        success: true
      };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: function () {
          var _json15 = (0, _asyncToGenerator2.default)(function* () {
            return viewResponse;
          });
          function json() {
            return _json15.apply(this, arguments);
          }
          return json;
        }()
      });
      var result = yield profileService.recordProfileView('profile-123');
      expect(mockFetch).toHaveBeenCalledWith('https://test-api.com/api/profiles/profile-123/views', expect.objectContaining({
        method: 'POST'
      }));
      expect(result).toEqual(viewResponse);
    }));
    it('should not throw on view recording failure', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockRejectedValueOnce(new Error('Network error'));
      var result = yield profileService.recordProfileView('profile-123');
      expect(result).toEqual({
        success: false
      });
    }));
  });
  describe('Connection Management', function () {
    it('should send connection request', (0, _asyncToGenerator2.default)(function* () {
      var requestResponse = {
        success: true,
        message: 'Connection request sent'
      };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: function () {
          var _json16 = (0, _asyncToGenerator2.default)(function* () {
            return requestResponse;
          });
          function json() {
            return _json16.apply(this, arguments);
          }
          return json;
        }()
      });
      var result = yield profileService.sendConnectionRequest('profile-123', 'Hello!');
      expect(mockFetch).toHaveBeenCalledWith('https://test-api.com/api/profiles/connections/request', expect.objectContaining({
        method: 'POST',
        body: JSON.stringify({
          profileId: 'profile-123',
          message: 'Hello!'
        })
      }));
      expect(result).toEqual(requestResponse);
    }));
    it('should respond to connection request', (0, _asyncToGenerator2.default)(function* () {
      var responseData = {
        success: true,
        message: 'Connection request accepted'
      };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: function () {
          var _json17 = (0, _asyncToGenerator2.default)(function* () {
            return responseData;
          });
          function json() {
            return _json17.apply(this, arguments);
          }
          return json;
        }()
      });
      var result = yield profileService.respondToConnectionRequest('request-123', true);
      expect(mockFetch).toHaveBeenCalledWith('https://test-api.com/api/profiles/connections/requests/request-123', expect.objectContaining({
        method: 'PATCH',
        body: JSON.stringify({
          status: 'accepted'
        })
      }));
      expect(result).toEqual(responseData);
    }));
  });
  describe('Profile Settings', function () {
    it('should get profile settings', (0, _asyncToGenerator2.default)(function* () {
      var settingsResponse = {
        privacy: {
          showEmail: true,
          showPhone: false,
          showLocation: true
        },
        notifications: {
          connectionRequests: true,
          profileViews: false
        }
      };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: function () {
          var _json18 = (0, _asyncToGenerator2.default)(function* () {
            return settingsResponse;
          });
          function json() {
            return _json18.apply(this, arguments);
          }
          return json;
        }()
      });
      var result = yield profileService.getProfileSettings('profile-123');
      expect(result).toEqual(settingsResponse);
    }));
    it('should update profile settings', (0, _asyncToGenerator2.default)(function* () {
      var updatedSettings = {
        privacy: {
          showEmail: false
        }
      };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: function () {
          var _json19 = (0, _asyncToGenerator2.default)(function* () {
            return updatedSettings;
          });
          function json() {
            return _json19.apply(this, arguments);
          }
          return json;
        }()
      });
      var result = yield profileService.updateProfileSettings('profile-123', updatedSettings);
      expect(mockFetch).toHaveBeenCalledWith('https://test-api.com/api/profiles/profile-123/settings', expect.objectContaining({
        method: 'PATCH',
        body: JSON.stringify(updatedSettings)
      }));
      expect(result).toEqual(updatedSettings);
    }));
  });
  describe('Data Export and Validation', function () {
    it('should validate profile data', (0, _asyncToGenerator2.default)(function* () {
      var validationResponse = {
        isValid: true,
        errors: {}
      };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: function () {
          var _json20 = (0, _asyncToGenerator2.default)(function* () {
            return validationResponse;
          });
          function json() {
            return _json20.apply(this, arguments);
          }
          return json;
        }()
      });
      var result = yield profileService.validateProfileData(mockProfileData);
      expect(mockFetch).toHaveBeenCalledWith('https://test-api.com/api/profiles/validate', expect.objectContaining({
        method: 'POST',
        body: JSON.stringify(mockProfileData)
      }));
      expect(result).toEqual(validationResponse);
    }));
  });
  describe('Error Handling', function () {
    it('should handle JSON parsing errors', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockResolvedValueOnce({
        ok: false,
        status: 500,
        statusText: 'Internal Server Error',
        json: function () {
          var _json21 = (0, _asyncToGenerator2.default)(function* () {
            throw new Error('Invalid JSON');
          });
          function json() {
            return _json21.apply(this, arguments);
          }
          return json;
        }()
      });
      yield expect(profileService.getProfile('profile-123')).rejects.toThrow('HTTP 500: Internal Server Error');
    }));
    it('should handle timeout errors', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockImplementationOnce(function () {
        return new Promise(function (_, reject) {
          return setTimeout(function () {
            return reject(new Error('Timeout'));
          }, 100);
        });
      });
      yield expect(profileService.getProfile('profile-123')).rejects.toThrow('Timeout');
    }), 5000);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,