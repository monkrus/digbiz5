5d728a4f830d3dd31be5d82b279e1899
_getJestObj().mock('../../src/services/tokenStorage');
_getJestObj().mock('@react-native-google-signin/google-signin', function () {
  return {
    GoogleSignin: {
      configure: jest.fn(),
      hasPlayServices: jest.fn(),
      signIn: jest.fn(),
      signInSilently: jest.fn(),
      signOut: jest.fn(),
      revokeAccess: jest.fn(),
      isSignedIn: jest.fn(),
      getCurrentUser: jest.fn()
    },
    statusCodes: {
      SIGN_IN_CANCELLED: 'SIGN_IN_CANCELLED',
      IN_PROGRESS: 'IN_PROGRESS',
      PLAY_SERVICES_NOT_AVAILABLE: 'PLAY_SERVICES_NOT_AVAILABLE'
    }
  };
});
_getJestObj().mock('../../src/config', function () {
  return {
    Config: {
      GOOGLE_WEB_CLIENT_ID: 'test-google-client-id'
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _googleSignin = require("@react-native-google-signin/google-signin");
var _googleAuthService = require("../../src/services/googleAuthService");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('GoogleAuthService', function () {
  var googleAuthService;
  var mockGoogleSignin = _googleSignin.GoogleSignin;
  var mockGoogleUser = {
    user: {
      id: 'google-123',
      name: 'John Doe',
      email: 'john@gmail.com',
      photo: 'https://example.com/photo.jpg',
      familyName: 'Doe',
      givenName: 'John'
    },
    idToken: 'mock-id-token',
    serverAuthCode: 'mock-server-auth-code'
  };
  beforeEach(function () {
    jest.clearAllMocks();
    googleAuthService = new _googleAuthService.GoogleAuthService();
  });
  describe('Initialization', function () {
    it('should configure Google SignIn on construction', function () {
      expect(mockGoogleSignin.configure).toHaveBeenCalledWith({
        webClientId: 'test-google-client-id',
        offlineAccess: true,
        hostedDomain: '',
        forceCodeForRefreshToken: true,
        accountName: '',
        iosClientId: undefined,
        googleServicePlistPath: '',
        openIdNonce: '',
        profileImageSize: 120
      });
    });
    it('should initialize Google SignIn services', (0, _asyncToGenerator2.default)(function* () {
      mockGoogleSignin.hasPlayServices.mockResolvedValue(true);
      yield googleAuthService.initialize();
      expect(mockGoogleSignin.hasPlayServices).toHaveBeenCalledWith({
        showPlayServicesUpdateDialog: true
      });
    }));
    it('should throw error when Play Services not available', (0, _asyncToGenerator2.default)(function* () {
      mockGoogleSignin.hasPlayServices.mockRejectedValue(new Error('Play Services not available'));
      yield expect(googleAuthService.initialize()).rejects.toThrow('Google Play Services not available');
    }));
    it('should handle Play Services initialization errors', (0, _asyncToGenerator2.default)(function* () {
      var consoleSpy = jest.spyOn(console, 'error').mockImplementation();
      mockGoogleSignin.hasPlayServices.mockRejectedValue(new Error('Unknown error'));
      yield expect(googleAuthService.initialize()).rejects.toThrow('Failed to initialize Google Sign-In');
      expect(consoleSpy).toHaveBeenCalledWith('Google Sign-In initialization failed:', expect.any(Error));
      consoleSpy.mockRestore();
    }));
  });
  describe('Sign In', function () {
    it('should sign in successfully with Google', (0, _asyncToGenerator2.default)(function* () {
      mockGoogleSignin.hasPlayServices.mockResolvedValue(true);
      mockGoogleSignin.signIn.mockResolvedValue(mockGoogleUser);
      var result = yield googleAuthService.signIn();
      expect(mockGoogleSignin.hasPlayServices).toHaveBeenCalled();
      expect(mockGoogleSignin.signIn).toHaveBeenCalled();
      var expectedResult = {
        accessToken: 'mock-server-auth-code',
        idToken: 'mock-id-token',
        profile: {
          id: 'google-123',
          email: 'john@gmail.com',
          name: 'John Doe',
          avatar: 'https://example.com/photo.jpg'
        }
      };
      expect(result).toEqual(expectedResult);
    }));
    it('should handle sign in cancellation', (0, _asyncToGenerator2.default)(function* () {
      mockGoogleSignin.hasPlayServices.mockResolvedValue(true);
      var error = new Error('Sign in cancelled');
      error.code = _googleSignin.statusCodes.SIGN_IN_CANCELLED;
      mockGoogleSignin.signIn.mockRejectedValue(error);
      yield expect(googleAuthService.signIn()).rejects.toThrow('Google Sign-In was cancelled');
    }));
    it('should handle sign in in progress error', (0, _asyncToGenerator2.default)(function* () {
      mockGoogleSignin.hasPlayServices.mockResolvedValue(true);
      var error = new Error('Sign in in progress');
      error.code = _googleSignin.statusCodes.IN_PROGRESS;
      mockGoogleSignin.signIn.mockRejectedValue(error);
      yield expect(googleAuthService.signIn()).rejects.toThrow('Google Sign-In is already in progress');
    }));
    it('should handle Play Services not available during sign in', (0, _asyncToGenerator2.default)(function* () {
      var error = new Error('Play Services not available');
      error.code = _googleSignin.statusCodes.PLAY_SERVICES_NOT_AVAILABLE;
      mockGoogleSignin.hasPlayServices.mockRejectedValue(error);
      yield expect(googleAuthService.signIn()).rejects.toThrow('Google Play Services not available');
    }));
    it('should handle generic sign in errors', (0, _asyncToGenerator2.default)(function* () {
      var consoleSpy = jest.spyOn(console, 'error').mockImplementation();
      mockGoogleSignin.hasPlayServices.mockResolvedValue(true);
      mockGoogleSignin.signIn.mockRejectedValue(new Error('Generic error'));
      yield expect(googleAuthService.signIn()).rejects.toThrow('Google Sign-In failed');
      expect(consoleSpy).toHaveBeenCalledWith('Google Sign-In error:', expect.any(Error));
      consoleSpy.mockRestore();
    }));
    it('should handle missing user data in sign in response', (0, _asyncToGenerator2.default)(function* () {
      mockGoogleSignin.hasPlayServices.mockResolvedValue(true);
      var incompleteUser = {
        user: null,
        idToken: 'mock-id-token',
        serverAuthCode: 'mock-server-auth-code'
      };
      mockGoogleSignin.signIn.mockResolvedValue(incompleteUser);
      yield expect(googleAuthService.signIn()).rejects.toThrow('Google Sign-In failed');
    }));
    it('should handle missing id token in sign in response', (0, _asyncToGenerator2.default)(function* () {
      mockGoogleSignin.hasPlayServices.mockResolvedValue(true);
      var userWithoutToken = Object.assign({}, mockGoogleUser, {
        idToken: null
      });
      mockGoogleSignin.signIn.mockResolvedValue(userWithoutToken);
      yield expect(googleAuthService.signIn()).rejects.toThrow('Google Sign-In failed');
    }));
  });
  describe('Silent Sign In', function () {
    it('should sign in silently when user is already authenticated', (0, _asyncToGenerator2.default)(function* () {
      mockGoogleSignin.signInSilently.mockResolvedValue(mockGoogleUser);
      var result = yield googleAuthService.signInSilently();
      expect(mockGoogleSignin.signInSilently).toHaveBeenCalled();
      var expectedResult = {
        accessToken: 'mock-server-auth-code',
        idToken: 'mock-id-token',
        profile: {
          id: 'google-123',
          email: 'john@gmail.com',
          name: 'John Doe',
          avatar: 'https://example.com/photo.jpg'
        }
      };
      expect(result).toEqual(expectedResult);
    }));
    it('should return null when silent sign in fails', (0, _asyncToGenerator2.default)(function* () {
      var consoleSpy = jest.spyOn(console, 'error').mockImplementation();
      mockGoogleSignin.signInSilently.mockRejectedValue(new Error('No cached sign in'));
      var result = yield googleAuthService.signInSilently();
      expect(result).toBeNull();
      expect(consoleSpy).toHaveBeenCalledWith('Silent Google Sign-In failed:', expect.any(Error));
      consoleSpy.mockRestore();
    }));
    it('should return null when silent sign in returns incomplete data', (0, _asyncToGenerator2.default)(function* () {
      var incompleteUser = {
        user: null,
        idToken: 'mock-id-token',
        serverAuthCode: 'mock-server-auth-code'
      };
      mockGoogleSignin.signInSilently.mockResolvedValue(incompleteUser);
      var result = yield googleAuthService.signInSilently();
      expect(result).toBeNull();
    }));
  });
  describe('Sign Out', function () {
    it('should sign out successfully', (0, _asyncToGenerator2.default)(function* () {
      mockGoogleSignin.signOut.mockResolvedValue();
      yield googleAuthService.signOut();
      expect(mockGoogleSignin.signOut).toHaveBeenCalled();
    }));
    it('should handle sign out errors gracefully', (0, _asyncToGenerator2.default)(function* () {
      var consoleSpy = jest.spyOn(console, 'error').mockImplementation();
      mockGoogleSignin.signOut.mockRejectedValue(new Error('Sign out failed'));
      yield expect(googleAuthService.signOut()).rejects.toThrow('Google Sign-Out failed');
      expect(consoleSpy).toHaveBeenCalledWith('Google Sign-Out error:', expect.any(Error));
      consoleSpy.mockRestore();
    }));
  });
  describe('Revoke Access', function () {
    it('should revoke access successfully', (0, _asyncToGenerator2.default)(function* () {
      mockGoogleSignin.revokeAccess.mockResolvedValue();
      yield googleAuthService.revokeAccess();
      expect(mockGoogleSignin.revokeAccess).toHaveBeenCalled();
    }));
    it('should handle revoke access errors gracefully', (0, _asyncToGenerator2.default)(function* () {
      var consoleSpy = jest.spyOn(console, 'error').mockImplementation();
      mockGoogleSignin.revokeAccess.mockRejectedValue(new Error('Revoke failed'));
      yield expect(googleAuthService.revokeAccess()).rejects.toThrow('Failed to revoke Google access');
      expect(consoleSpy).toHaveBeenCalledWith('Google revoke access error:', expect.any(Error));
      consoleSpy.mockRestore();
    }));
  });
  describe('Authentication State', function () {
    it('should check if user is signed in', (0, _asyncToGenerator2.default)(function* () {
      mockGoogleSignin.isSignedIn.mockResolvedValue(true);
      var result = yield googleAuthService.isSignedIn();
      expect(result).toBe(true);
      expect(mockGoogleSignin.isSignedIn).toHaveBeenCalled();
    }));
    it('should return false when user is not signed in', (0, _asyncToGenerator2.default)(function* () {
      mockGoogleSignin.isSignedIn.mockResolvedValue(false);
      var result = yield googleAuthService.isSignedIn();
      expect(result).toBe(false);
    }));
    it('should handle isSignedIn errors gracefully', (0, _asyncToGenerator2.default)(function* () {
      var consoleSpy = jest.spyOn(console, 'error').mockImplementation();
      mockGoogleSignin.isSignedIn.mockRejectedValue(new Error('Check failed'));
      var result = yield googleAuthService.isSignedIn();
      expect(result).toBe(false);
      expect(consoleSpy).toHaveBeenCalledWith('Check Google sign-in status failed:', expect.any(Error));
      consoleSpy.mockRestore();
    }));
  });
  describe('Current User', function () {
    it('should get current user successfully', (0, _asyncToGenerator2.default)(function* () {
      mockGoogleSignin.getCurrentUser.mockResolvedValue(mockGoogleUser);
      var result = yield googleAuthService.getCurrentUser();
      expect(mockGoogleSignin.getCurrentUser).toHaveBeenCalled();
      var expectedResult = {
        accessToken: 'mock-server-auth-code',
        idToken: 'mock-id-token',
        profile: {
          id: 'google-123',
          email: 'john@gmail.com',
          name: 'John Doe',
          avatar: 'https://example.com/photo.jpg'
        }
      };
      expect(result).toEqual(expectedResult);
    }));
    it('should return null when no current user exists', (0, _asyncToGenerator2.default)(function* () {
      mockGoogleSignin.getCurrentUser.mockResolvedValue(null);
      var result = yield googleAuthService.getCurrentUser();
      expect(result).toBeNull();
    }));
    it('should handle getCurrentUser errors gracefully', (0, _asyncToGenerator2.default)(function* () {
      var consoleSpy = jest.spyOn(console, 'error').mockImplementation();
      mockGoogleSignin.getCurrentUser.mockRejectedValue(new Error('Get user failed'));
      var result = yield googleAuthService.getCurrentUser();
      expect(result).toBeNull();
      expect(consoleSpy).toHaveBeenCalledWith('Get current Google user failed:', expect.any(Error));
      consoleSpy.mockRestore();
    }));
    it('should return null when current user data is incomplete', (0, _asyncToGenerator2.default)(function* () {
      var incompleteUser = {
        user: null,
        idToken: 'mock-id-token',
        serverAuthCode: 'mock-server-auth-code'
      };
      mockGoogleSignin.getCurrentUser.mockResolvedValue(incompleteUser);
      var result = yield googleAuthService.getCurrentUser();
      expect(result).toBeNull();
    }));
  });
  describe('Data Transformation', function () {
    it('should transform Google user data correctly', (0, _asyncToGenerator2.default)(function* () {
      var googleUserWithoutPhoto = Object.assign({}, mockGoogleUser, {
        user: Object.assign({}, mockGoogleUser.user, {
          photo: null
        })
      });
      mockGoogleSignin.hasPlayServices.mockResolvedValue(true);
      mockGoogleSignin.signIn.mockResolvedValue(googleUserWithoutPhoto);
      var result = yield googleAuthService.signIn();
      expect(result.profile.avatar).toBeNull();
    }));
    it('should handle empty server auth code', (0, _asyncToGenerator2.default)(function* () {
      var userWithoutAuthCode = Object.assign({}, mockGoogleUser, {
        serverAuthCode: null
      });
      mockGoogleSignin.hasPlayServices.mockResolvedValue(true);
      mockGoogleSignin.signIn.mockResolvedValue(userWithoutAuthCode);
      var result = yield googleAuthService.signIn();
      expect(result.accessToken).toBeNull();
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,