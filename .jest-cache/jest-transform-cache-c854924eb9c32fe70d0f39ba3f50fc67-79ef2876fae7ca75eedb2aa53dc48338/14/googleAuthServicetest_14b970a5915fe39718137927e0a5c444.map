{"version":3,"names":["_getJestObj","mock","GoogleSignin","configure","jest","fn","hasPlayServices","signIn","signInSilently","signOut","revokeAccess","isSignedIn","getCurrentUser","statusCodes","SIGN_IN_CANCELLED","IN_PROGRESS","PLAY_SERVICES_NOT_AVAILABLE","Config","GOOGLE_WEB_CLIENT_ID","_interopRequireDefault","require","_asyncToGenerator2","_googleSignin","_googleAuthService","_require","describe","googleAuthService","mockGoogleSignin","mockGoogleUser","user","id","name","email","photo","familyName","givenName","idToken","serverAuthCode","beforeEach","clearAllMocks","GoogleAuthService","it","expect","toHaveBeenCalledWith","webClientId","offlineAccess","hostedDomain","forceCodeForRefreshToken","accountName","iosClientId","undefined","googleServicePlistPath","openIdNonce","profileImageSize","default","mockResolvedValue","initialize","showPlayServicesUpdateDialog","mockRejectedValue","Error","rejects","toThrow","consoleSpy","spyOn","console","mockImplementation","any","mockRestore","result","toHaveBeenCalled","expectedResult","accessToken","profile","avatar","toEqual","error","code","incompleteUser","userWithoutToken","Object","assign","toBeNull","toBe","googleUserWithoutPhoto","userWithoutAuthCode"],"sources":["googleAuthService.test.ts"],"sourcesContent":["/**\n * Google Authentication Service Unit Tests\n *\n * This test suite validates the Google OAuth integration functionality including:\n * - Google Sign-In initialization and configuration\n * - OAuth flow handling and token management\n * - User profile data retrieval\n * - Error handling for authentication failures\n * - Sign-out functionality\n */\n\nimport { SocialLoginData } from '../../src/types/auth';\n\n// Mock dependencies\njest.mock('../../src/services/tokenStorage');\njest.mock('@react-native-google-signin/google-signin', () => ({\n  GoogleSignin: {\n    configure: jest.fn(),\n    hasPlayServices: jest.fn(),\n    signIn: jest.fn(),\n    signInSilently: jest.fn(),\n    signOut: jest.fn(),\n    revokeAccess: jest.fn(),\n    isSignedIn: jest.fn(),\n    getCurrentUser: jest.fn(),\n  },\n  statusCodes: {\n    SIGN_IN_CANCELLED: 'SIGN_IN_CANCELLED',\n    IN_PROGRESS: 'IN_PROGRESS',\n    PLAY_SERVICES_NOT_AVAILABLE: 'PLAY_SERVICES_NOT_AVAILABLE',\n  },\n}));\n\njest.mock('../../src/config', () => ({\n  Config: {\n    GOOGLE_WEB_CLIENT_ID: 'test-google-client-id',\n  },\n}));\n\nimport {\n  GoogleSignin,\n  statusCodes,\n  User as GoogleUser,\n} from '@react-native-google-signin/google-signin';\nimport { GoogleAuthService } from '../../src/services/googleAuthService';\n\ndescribe('GoogleAuthService', () => {\n  let googleAuthService: GoogleAuthService;\n  const mockGoogleSignin = GoogleSignin as jest.Mocked<typeof GoogleSignin>;\n\n  const mockGoogleUser: GoogleUser = {\n    user: {\n      id: 'google-123',\n      name: 'John Doe',\n      email: 'john@gmail.com',\n      photo: 'https://example.com/photo.jpg',\n      familyName: 'Doe',\n      givenName: 'John',\n    },\n    idToken: 'mock-id-token',\n    serverAuthCode: 'mock-server-auth-code',\n  };\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    googleAuthService = new GoogleAuthService();\n  });\n\n  describe('Initialization', () => {\n    it('should configure Google SignIn on construction', () => {\n      expect(mockGoogleSignin.configure).toHaveBeenCalledWith({\n        webClientId: 'test-google-client-id',\n        offlineAccess: true,\n        hostedDomain: '',\n        forceCodeForRefreshToken: true,\n        accountName: '',\n        iosClientId: undefined,\n        googleServicePlistPath: '',\n        openIdNonce: '',\n        profileImageSize: 120,\n      });\n    });\n\n    it('should initialize Google SignIn services', async () => {\n      mockGoogleSignin.hasPlayServices.mockResolvedValue(true);\n\n      await googleAuthService.initialize();\n\n      expect(mockGoogleSignin.hasPlayServices).toHaveBeenCalledWith({\n        showPlayServicesUpdateDialog: true,\n      });\n    });\n\n    it('should throw error when Play Services not available', async () => {\n      mockGoogleSignin.hasPlayServices.mockRejectedValue(\n        new Error('Play Services not available'),\n      );\n\n      await expect(googleAuthService.initialize()).rejects.toThrow(\n        'Google Play Services not available',\n      );\n    });\n\n    it('should handle Play Services initialization errors', async () => {\n      const consoleSpy = jest.spyOn(console, 'error').mockImplementation();\n      mockGoogleSignin.hasPlayServices.mockRejectedValue(\n        new Error('Unknown error'),\n      );\n\n      await expect(googleAuthService.initialize()).rejects.toThrow(\n        'Failed to initialize Google Sign-In',\n      );\n      expect(consoleSpy).toHaveBeenCalledWith(\n        'Google Sign-In initialization failed:',\n        expect.any(Error),\n      );\n      consoleSpy.mockRestore();\n    });\n  });\n\n  describe('Sign In', () => {\n    it('should sign in successfully with Google', async () => {\n      mockGoogleSignin.hasPlayServices.mockResolvedValue(true);\n      mockGoogleSignin.signIn.mockResolvedValue(mockGoogleUser);\n\n      const result = await googleAuthService.signIn();\n\n      expect(mockGoogleSignin.hasPlayServices).toHaveBeenCalled();\n      expect(mockGoogleSignin.signIn).toHaveBeenCalled();\n\n      const expectedResult: SocialLoginData = {\n        accessToken: 'mock-server-auth-code',\n        idToken: 'mock-id-token',\n        profile: {\n          id: 'google-123',\n          email: 'john@gmail.com',\n          name: 'John Doe',\n          avatar: 'https://example.com/photo.jpg',\n        },\n      };\n\n      expect(result).toEqual(expectedResult);\n    });\n\n    it('should handle sign in cancellation', async () => {\n      mockGoogleSignin.hasPlayServices.mockResolvedValue(true);\n      const error = new Error('Sign in cancelled');\n      (error as any).code = statusCodes.SIGN_IN_CANCELLED;\n      mockGoogleSignin.signIn.mockRejectedValue(error);\n\n      await expect(googleAuthService.signIn()).rejects.toThrow(\n        'Google Sign-In was cancelled',\n      );\n    });\n\n    it('should handle sign in in progress error', async () => {\n      mockGoogleSignin.hasPlayServices.mockResolvedValue(true);\n      const error = new Error('Sign in in progress');\n      (error as any).code = statusCodes.IN_PROGRESS;\n      mockGoogleSignin.signIn.mockRejectedValue(error);\n\n      await expect(googleAuthService.signIn()).rejects.toThrow(\n        'Google Sign-In is already in progress',\n      );\n    });\n\n    it('should handle Play Services not available during sign in', async () => {\n      const error = new Error('Play Services not available');\n      (error as any).code = statusCodes.PLAY_SERVICES_NOT_AVAILABLE;\n      mockGoogleSignin.hasPlayServices.mockRejectedValue(error);\n\n      await expect(googleAuthService.signIn()).rejects.toThrow(\n        'Google Play Services not available',\n      );\n    });\n\n    it('should handle generic sign in errors', async () => {\n      const consoleSpy = jest.spyOn(console, 'error').mockImplementation();\n      mockGoogleSignin.hasPlayServices.mockResolvedValue(true);\n      mockGoogleSignin.signIn.mockRejectedValue(new Error('Generic error'));\n\n      await expect(googleAuthService.signIn()).rejects.toThrow(\n        'Google Sign-In failed',\n      );\n      expect(consoleSpy).toHaveBeenCalledWith(\n        'Google Sign-In error:',\n        expect.any(Error),\n      );\n      consoleSpy.mockRestore();\n    });\n\n    it('should handle missing user data in sign in response', async () => {\n      mockGoogleSignin.hasPlayServices.mockResolvedValue(true);\n      const incompleteUser = {\n        user: null,\n        idToken: 'mock-id-token',\n        serverAuthCode: 'mock-server-auth-code',\n      } as any;\n      mockGoogleSignin.signIn.mockResolvedValue(incompleteUser);\n\n      await expect(googleAuthService.signIn()).rejects.toThrow(\n        'Google Sign-In failed',\n      );\n    });\n\n    it('should handle missing id token in sign in response', async () => {\n      mockGoogleSignin.hasPlayServices.mockResolvedValue(true);\n      const userWithoutToken = {\n        ...mockGoogleUser,\n        idToken: null,\n      };\n      mockGoogleSignin.signIn.mockResolvedValue(userWithoutToken);\n\n      await expect(googleAuthService.signIn()).rejects.toThrow(\n        'Google Sign-In failed',\n      );\n    });\n  });\n\n  describe('Silent Sign In', () => {\n    it('should sign in silently when user is already authenticated', async () => {\n      mockGoogleSignin.signInSilently.mockResolvedValue(mockGoogleUser);\n\n      const result = await googleAuthService.signInSilently();\n\n      expect(mockGoogleSignin.signInSilently).toHaveBeenCalled();\n\n      const expectedResult: SocialLoginData = {\n        accessToken: 'mock-server-auth-code',\n        idToken: 'mock-id-token',\n        profile: {\n          id: 'google-123',\n          email: 'john@gmail.com',\n          name: 'John Doe',\n          avatar: 'https://example.com/photo.jpg',\n        },\n      };\n\n      expect(result).toEqual(expectedResult);\n    });\n\n    it('should return null when silent sign in fails', async () => {\n      const consoleSpy = jest.spyOn(console, 'error').mockImplementation();\n      mockGoogleSignin.signInSilently.mockRejectedValue(\n        new Error('No cached sign in'),\n      );\n\n      const result = await googleAuthService.signInSilently();\n\n      expect(result).toBeNull();\n      expect(consoleSpy).toHaveBeenCalledWith(\n        'Silent Google Sign-In failed:',\n        expect.any(Error),\n      );\n      consoleSpy.mockRestore();\n    });\n\n    it('should return null when silent sign in returns incomplete data', async () => {\n      const incompleteUser = {\n        user: null,\n        idToken: 'mock-id-token',\n        serverAuthCode: 'mock-server-auth-code',\n      } as any;\n      mockGoogleSignin.signInSilently.mockResolvedValue(incompleteUser);\n\n      const result = await googleAuthService.signInSilently();\n\n      expect(result).toBeNull();\n    });\n  });\n\n  describe('Sign Out', () => {\n    it('should sign out successfully', async () => {\n      mockGoogleSignin.signOut.mockResolvedValue();\n\n      await googleAuthService.signOut();\n\n      expect(mockGoogleSignin.signOut).toHaveBeenCalled();\n    });\n\n    it('should handle sign out errors gracefully', async () => {\n      const consoleSpy = jest.spyOn(console, 'error').mockImplementation();\n      mockGoogleSignin.signOut.mockRejectedValue(new Error('Sign out failed'));\n\n      await expect(googleAuthService.signOut()).rejects.toThrow(\n        'Google Sign-Out failed',\n      );\n      expect(consoleSpy).toHaveBeenCalledWith(\n        'Google Sign-Out error:',\n        expect.any(Error),\n      );\n      consoleSpy.mockRestore();\n    });\n  });\n\n  describe('Revoke Access', () => {\n    it('should revoke access successfully', async () => {\n      mockGoogleSignin.revokeAccess.mockResolvedValue();\n\n      await googleAuthService.revokeAccess();\n\n      expect(mockGoogleSignin.revokeAccess).toHaveBeenCalled();\n    });\n\n    it('should handle revoke access errors gracefully', async () => {\n      const consoleSpy = jest.spyOn(console, 'error').mockImplementation();\n      mockGoogleSignin.revokeAccess.mockRejectedValue(\n        new Error('Revoke failed'),\n      );\n\n      await expect(googleAuthService.revokeAccess()).rejects.toThrow(\n        'Failed to revoke Google access',\n      );\n      expect(consoleSpy).toHaveBeenCalledWith(\n        'Google revoke access error:',\n        expect.any(Error),\n      );\n      consoleSpy.mockRestore();\n    });\n  });\n\n  describe('Authentication State', () => {\n    it('should check if user is signed in', async () => {\n      mockGoogleSignin.isSignedIn.mockResolvedValue(true);\n\n      const result = await googleAuthService.isSignedIn();\n\n      expect(result).toBe(true);\n      expect(mockGoogleSignin.isSignedIn).toHaveBeenCalled();\n    });\n\n    it('should return false when user is not signed in', async () => {\n      mockGoogleSignin.isSignedIn.mockResolvedValue(false);\n\n      const result = await googleAuthService.isSignedIn();\n\n      expect(result).toBe(false);\n    });\n\n    it('should handle isSignedIn errors gracefully', async () => {\n      const consoleSpy = jest.spyOn(console, 'error').mockImplementation();\n      mockGoogleSignin.isSignedIn.mockRejectedValue(new Error('Check failed'));\n\n      const result = await googleAuthService.isSignedIn();\n\n      expect(result).toBe(false);\n      expect(consoleSpy).toHaveBeenCalledWith(\n        'Check Google sign-in status failed:',\n        expect.any(Error),\n      );\n      consoleSpy.mockRestore();\n    });\n  });\n\n  describe('Current User', () => {\n    it('should get current user successfully', async () => {\n      mockGoogleSignin.getCurrentUser.mockResolvedValue(mockGoogleUser);\n\n      const result = await googleAuthService.getCurrentUser();\n\n      expect(mockGoogleSignin.getCurrentUser).toHaveBeenCalled();\n\n      const expectedResult: SocialLoginData = {\n        accessToken: 'mock-server-auth-code',\n        idToken: 'mock-id-token',\n        profile: {\n          id: 'google-123',\n          email: 'john@gmail.com',\n          name: 'John Doe',\n          avatar: 'https://example.com/photo.jpg',\n        },\n      };\n\n      expect(result).toEqual(expectedResult);\n    });\n\n    it('should return null when no current user exists', async () => {\n      mockGoogleSignin.getCurrentUser.mockResolvedValue(null);\n\n      const result = await googleAuthService.getCurrentUser();\n\n      expect(result).toBeNull();\n    });\n\n    it('should handle getCurrentUser errors gracefully', async () => {\n      const consoleSpy = jest.spyOn(console, 'error').mockImplementation();\n      mockGoogleSignin.getCurrentUser.mockRejectedValue(\n        new Error('Get user failed'),\n      );\n\n      const result = await googleAuthService.getCurrentUser();\n\n      expect(result).toBeNull();\n      expect(consoleSpy).toHaveBeenCalledWith(\n        'Get current Google user failed:',\n        expect.any(Error),\n      );\n      consoleSpy.mockRestore();\n    });\n\n    it('should return null when current user data is incomplete', async () => {\n      const incompleteUser = {\n        user: null,\n        idToken: 'mock-id-token',\n        serverAuthCode: 'mock-server-auth-code',\n      } as any;\n      mockGoogleSignin.getCurrentUser.mockResolvedValue(incompleteUser);\n\n      const result = await googleAuthService.getCurrentUser();\n\n      expect(result).toBeNull();\n    });\n  });\n\n  describe('Data Transformation', () => {\n    it('should transform Google user data correctly', async () => {\n      const googleUserWithoutPhoto = {\n        ...mockGoogleUser,\n        user: {\n          ...mockGoogleUser.user,\n          photo: null,\n        },\n      };\n      mockGoogleSignin.hasPlayServices.mockResolvedValue(true);\n      mockGoogleSignin.signIn.mockResolvedValue(googleUserWithoutPhoto);\n\n      const result = await googleAuthService.signIn();\n\n      expect(result.profile.avatar).toBeNull();\n    });\n\n    it('should handle empty server auth code', async () => {\n      const userWithoutAuthCode = {\n        ...mockGoogleUser,\n        serverAuthCode: null,\n      };\n      mockGoogleSignin.hasPlayServices.mockResolvedValue(true);\n      mockGoogleSignin.signIn.mockResolvedValue(userWithoutAuthCode);\n\n      const result = await googleAuthService.signIn();\n\n      expect(result.accessToken).toBeNull();\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}