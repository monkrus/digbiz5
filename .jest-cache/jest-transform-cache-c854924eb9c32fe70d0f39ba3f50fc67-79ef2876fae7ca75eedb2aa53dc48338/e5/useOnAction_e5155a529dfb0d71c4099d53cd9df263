347ade828dab7c2581189e2f91d04f5a
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useOnAction = useOnAction;
var React = _interopRequireWildcard(require("react"));
var _DeprecatedNavigationInChildContext = require("./DeprecatedNavigationInChildContext.js");
var _NavigationBuilderContext = require("./NavigationBuilderContext.js");
var _useOnPreventRemove = require("./useOnPreventRemove.js");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function useOnAction(_ref) {
  var router = _ref.router,
    getState = _ref.getState,
    setState = _ref.setState,
    key = _ref.key,
    actionListeners = _ref.actionListeners,
    beforeRemoveListeners = _ref.beforeRemoveListeners,
    routerConfigOptions = _ref.routerConfigOptions,
    emitter = _ref.emitter;
  var _React$useContext = React.useContext(_NavigationBuilderContext.NavigationBuilderContext),
    onActionParent = _React$useContext.onAction,
    onRouteFocusParent = _React$useContext.onRouteFocus,
    addListenerParent = _React$useContext.addListener,
    onDispatchAction = _React$useContext.onDispatchAction;
  var navigationInChildEnabled = React.useContext(_DeprecatedNavigationInChildContext.DeprecatedNavigationInChildContext);
  var routerConfigOptionsRef = React.useRef(routerConfigOptions);
  React.useEffect(function () {
    routerConfigOptionsRef.current = routerConfigOptions;
  });
  var onAction = React.useCallback(function (action) {
    var visitedNavigators = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Set();
    var state = getState();
    if (visitedNavigators.has(state.key)) {
      return false;
    }
    visitedNavigators.add(state.key);
    if (typeof action.target !== 'string' || action.target === state.key) {
      var result = router.getStateForAction(state, action, routerConfigOptionsRef.current);
      result = result === null && action.target === state.key ? state : result;
      if (result !== null) {
        onDispatchAction(action, state === result);
        if (state !== result) {
          var isPrevented = (0, _useOnPreventRemove.shouldPreventRemove)(emitter, beforeRemoveListeners, state.routes, result.routes, action);
          if (isPrevented) {
            return true;
          }
          setState(result);
        }
        if (onRouteFocusParent !== undefined) {
          var shouldFocus = router.shouldActionChangeFocus(action);
          if (shouldFocus && key !== undefined) {
            onRouteFocusParent(key);
          }
        }
        return true;
      }
    }
    if (onActionParent !== undefined) {
      if (onActionParent(action, visitedNavigators)) {
        return true;
      }
    }
    if (typeof action.target === 'string' || action.type === 'NAVIGATE_DEPRECATED' || navigationInChildEnabled) {
      for (var i = actionListeners.length - 1; i >= 0; i--) {
        var listener = actionListeners[i];
        if (listener(action, visitedNavigators)) {
          return true;
        }
      }
    }
    return false;
  }, [actionListeners, beforeRemoveListeners, emitter, getState, navigationInChildEnabled, key, onActionParent, onDispatchAction, onRouteFocusParent, router, setState]);
  (0, _useOnPreventRemove.useOnPreventRemove)({
    getState: getState,
    emitter: emitter,
    beforeRemoveListeners: beforeRemoveListeners
  });
  React.useEffect(function () {
    return addListenerParent == null ? void 0 : addListenerParent('action', onAction);
  }, [addListenerParent, onAction]);
  return onAction;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9EZXByZWNhdGVkTmF2aWdhdGlvbkluQ2hpbGRDb250ZXh0IiwiX05hdmlnYXRpb25CdWlsZGVyQ29udGV4dCIsIl91c2VPblByZXZlbnRSZW1vdmUiLCJlIiwidCIsIldlYWtNYXAiLCJyIiwibiIsIl9fZXNNb2R1bGUiLCJvIiwiaSIsImYiLCJfX3Byb3RvX18iLCJkZWZhdWx0IiwiaGFzIiwiZ2V0Iiwic2V0IiwiX3QiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInVzZU9uQWN0aW9uIiwiX3JlZiIsInJvdXRlciIsImdldFN0YXRlIiwic2V0U3RhdGUiLCJrZXkiLCJhY3Rpb25MaXN0ZW5lcnMiLCJiZWZvcmVSZW1vdmVMaXN0ZW5lcnMiLCJyb3V0ZXJDb25maWdPcHRpb25zIiwiZW1pdHRlciIsIl9SZWFjdCR1c2VDb250ZXh0IiwidXNlQ29udGV4dCIsIk5hdmlnYXRpb25CdWlsZGVyQ29udGV4dCIsIm9uQWN0aW9uUGFyZW50Iiwib25BY3Rpb24iLCJvblJvdXRlRm9jdXNQYXJlbnQiLCJvblJvdXRlRm9jdXMiLCJhZGRMaXN0ZW5lclBhcmVudCIsImFkZExpc3RlbmVyIiwib25EaXNwYXRjaEFjdGlvbiIsIm5hdmlnYXRpb25JbkNoaWxkRW5hYmxlZCIsIkRlcHJlY2F0ZWROYXZpZ2F0aW9uSW5DaGlsZENvbnRleHQiLCJyb3V0ZXJDb25maWdPcHRpb25zUmVmIiwidXNlUmVmIiwidXNlRWZmZWN0IiwiY3VycmVudCIsInVzZUNhbGxiYWNrIiwiYWN0aW9uIiwidmlzaXRlZE5hdmlnYXRvcnMiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJTZXQiLCJzdGF0ZSIsImFkZCIsInRhcmdldCIsInJlc3VsdCIsImdldFN0YXRlRm9yQWN0aW9uIiwiaXNQcmV2ZW50ZWQiLCJzaG91bGRQcmV2ZW50UmVtb3ZlIiwicm91dGVzIiwic2hvdWxkRm9jdXMiLCJzaG91bGRBY3Rpb25DaGFuZ2VGb2N1cyIsInR5cGUiLCJsaXN0ZW5lciIsInVzZU9uUHJldmVudFJlbW92ZSJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91c2VPbkFjdGlvbi50c3giXSwic291cmNlc0NvbnRlbnQiOltudWxsXSwibWFwcGluZ3MiOiI7Ozs7OztBQU9BLElBQUFBLEtBQUEsR0FBQUMsdUJBQUEsQ0FBQUMsT0FBQTtBQUVBLElBQUFDLG1DQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSx5QkFBQSxHQUFBRixPQUFBO0FBT0EsSUFBQUcsbUJBQUEsR0FBQUgsT0FBQTtBQUE4RSxTQUFBRCx3QkFBQUssQ0FBQSxFQUFBQyxDQUFBLDZCQUFBQyxPQUFBLE1BQUFDLENBQUEsT0FBQUQsT0FBQSxJQUFBRSxDQUFBLE9BQUFGLE9BQUEsWUFBQVAsdUJBQUEsWUFBQUEsd0JBQUFLLENBQUEsRUFBQUMsQ0FBQSxTQUFBQSxDQUFBLElBQUFELENBQUEsSUFBQUEsQ0FBQSxDQUFBSyxVQUFBLFNBQUFMLENBQUEsTUFBQU0sQ0FBQSxFQUFBQyxDQUFBLEVBQUFDLENBQUEsS0FBQUMsU0FBQSxRQUFBQyxPQUFBLEVBQUFWLENBQUEsaUJBQUFBLENBQUEsdUJBQUFBLENBQUEseUJBQUFBLENBQUEsU0FBQVEsQ0FBQSxNQUFBRixDQUFBLEdBQUFMLENBQUEsR0FBQUcsQ0FBQSxHQUFBRCxDQUFBLFFBQUFHLENBQUEsQ0FBQUssR0FBQSxDQUFBWCxDQUFBLFVBQUFNLENBQUEsQ0FBQU0sR0FBQSxDQUFBWixDQUFBLEdBQUFNLENBQUEsQ0FBQU8sR0FBQSxDQUFBYixDQUFBLEVBQUFRLENBQUEsY0FBQU0sRUFBQSxJQUFBZCxDQUFBLGdCQUFBYyxFQUFBLE9BQUFDLGNBQUEsQ0FBQUMsSUFBQSxDQUFBaEIsQ0FBQSxFQUFBYyxFQUFBLE9BQUFQLENBQUEsSUFBQUQsQ0FBQSxHQUFBVyxNQUFBLENBQUFDLGNBQUEsS0FB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