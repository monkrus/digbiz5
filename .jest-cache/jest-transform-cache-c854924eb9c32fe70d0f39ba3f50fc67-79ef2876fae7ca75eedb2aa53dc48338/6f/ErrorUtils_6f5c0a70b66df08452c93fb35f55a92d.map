{"version":3,"names":["global","ErrorUtils"],"sources":["ErrorUtils.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\n// From @react-native/js-polyfills\ntype ErrorHandler = (error: mixed, isFatal: boolean) => void;\ntype Fn<Args: $ReadOnlyArray<mixed>, Return> = (...Args) => Return;\nexport type ErrorUtils = {\n  applyWithGuard<TArgs: $ReadOnlyArray<mixed>, TOut>(\n    fun: Fn<TArgs, TOut>,\n    context?: mixed,\n    args?: ?TArgs,\n    unused_onError?: null,\n    unused_name?: ?string,\n  ): ?TOut,\n  applyWithGuardIfNeeded<TArgs: $ReadOnlyArray<mixed>, TOut>(\n    fun: Fn<TArgs, TOut>,\n    context?: mixed,\n    args?: ?TArgs,\n  ): ?TOut,\n  getGlobalHandler(): ErrorHandler,\n  guard<TArgs: $ReadOnlyArray<mixed>, TOut>(\n    fun: Fn<TArgs, TOut>,\n    name?: ?string,\n    context?: mixed,\n  ): ?(...TArgs) => ?TOut,\n  inGuard(): boolean,\n  reportError(error: mixed): void,\n  reportFatalError(error: mixed): void,\n  setGlobalHandler(fun: ErrorHandler): void,\n};\n\n/**\n * The particular require runtime that we are using looks for a global\n * `ErrorUtils` object and if it exists, then it requires modules with the\n * error handler specified via ErrorUtils.setGlobalHandler by calling the\n * require function with applyWithGuard. Since the require module is loaded\n * before any of the modules, this ErrorUtils must be defined (and the handler\n * set) globally before requiring anything.\n *\n * However, we still want to treat ErrorUtils as a module so that other modules\n * that use it aren't just using a global variable, so simply export the global\n * variable here. ErrorUtils is originally defined in a file named error-guard.js.\n */\nexport default global.ErrorUtils as ErrorUtils;\n"],"mappings":";;;;iCAkDeA,MAAM,CAACC,UAAU","ignoreList":[]}