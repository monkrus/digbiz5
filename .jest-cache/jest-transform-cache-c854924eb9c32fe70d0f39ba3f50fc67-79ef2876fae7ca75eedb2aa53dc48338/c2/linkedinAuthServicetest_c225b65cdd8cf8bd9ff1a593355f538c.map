{"version":3,"names":["_getJestObj","mock","Config","LINKEDIN_CLIENT_ID","LINKEDIN_CLIENT_SECRET","LINKEDIN_REDIRECT_URI","_interopRequireDefault","require","_asyncToGenerator2","_linkedinAuthService","_require","jest","global","fetch","fn","describe","linkedinAuthService","mockFetch","mockProfile","sub","name","email","picture","given_name","family_name","mockTokenResponse","access_token","token_type","expires_in","scope","beforeEach","clearAllMocks","LinkedInAuthService","mockResolvedValue","ok","json","Promise","resolve","status","statusText","it","authUrl","getAuthorizationUrl","expect","toContain","authUrl1","authUrl2","state1","URLSearchParams","split","get","state2","not","toEqual","toHaveLength","urlParams","redirectUri","toBe","default","_call$","result","exchangeCodeForToken","toHaveBeenCalledWith","method","headers","Accept","body","stringContaining","call","calls","errorResponse","error","error_description","rejects","toThrow","mockRejectedValue","Error","reject","getUserProfile","Authorization","consoleSpy","spyOn","console","mockImplementation","message","any","mockRestore","mockResolvedValueOnce","authenticate","toHaveBeenCalledTimes","toHaveBeenNthCalledWith","objectContaining","expectedResult","accessToken","profile","id","avatar","profileWithoutPicture","Object","assign","undefined","toBeNull","profileWithoutName","profileWithNames","originalState","resolves","toBeDefined","states","Set","i","state","has","add","toMatch","service"],"sources":["linkedinAuthService.test.ts"],"sourcesContent":["/**\n * LinkedIn Authentication Service Unit Tests\n *\n * This test suite validates the LinkedIn OAuth integration functionality including:\n * - LinkedIn OAuth flow using WebView\n * - Authorization code exchange for access tokens\n * - User profile data retrieval from LinkedIn API\n * - Error handling for authentication failures\n * - URL construction and parameter handling\n */\n\nimport { SocialLoginData } from '../../src/types/auth';\n\n// Mock dependencies\njest.mock('../../src/services/tokenStorage');\njest.mock('../../src/config', () => ({\n  Config: {\n    LINKEDIN_CLIENT_ID: 'test-linkedin-client-id',\n    LINKEDIN_CLIENT_SECRET: 'test-linkedin-client-secret',\n    LINKEDIN_REDIRECT_URI: 'https://app.example.com/auth/linkedin/callback',\n  },\n}));\n\n// Mock fetch globally\nglobal.fetch = jest.fn();\n\nimport { LinkedInAuthService } from '../../src/services/linkedinAuthService';\n\ndescribe('LinkedInAuthService', () => {\n  let linkedinAuthService: LinkedInAuthService;\n  const mockFetch = global.fetch as jest.MockedFunction<typeof fetch>;\n\n  const mockProfile = {\n    sub: 'linkedin-123',\n    name: 'John Doe',\n    email: 'john@linkedin.com',\n    picture: 'https://example.com/profile.jpg',\n    given_name: 'John',\n    family_name: 'Doe',\n  };\n\n  const mockTokenResponse = {\n    access_token: 'linkedin-access-token',\n    token_type: 'Bearer',\n    expires_in: 5184000,\n    scope: 'profile email',\n  };\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    linkedinAuthService = new LinkedInAuthService();\n\n    // Mock successful API responses by default\n    mockFetch.mockResolvedValue({\n      ok: true,\n      json: () => Promise.resolve({}),\n      status: 200,\n      statusText: 'OK',\n    } as Response);\n  });\n\n  describe('Authorization URL Generation', () => {\n    it('should generate correct authorization URL', () => {\n      const authUrl = linkedinAuthService.getAuthorizationUrl();\n\n      expect(authUrl).toContain(\n        'https://www.linkedin.com/oauth/v2/authorization',\n      );\n      expect(authUrl).toContain('response_type=code');\n      expect(authUrl).toContain('client_id=test-linkedin-client-id');\n      expect(authUrl).toContain(\n        'redirect_uri=https://app.example.com/auth/linkedin/callback',\n      );\n      expect(authUrl).toContain('scope=profile%20email');\n      expect(authUrl).toContain('state=');\n    });\n\n    it('should generate different state parameter each time', () => {\n      const authUrl1 = linkedinAuthService.getAuthorizationUrl();\n      const authUrl2 = linkedinAuthService.getAuthorizationUrl();\n\n      const state1 = new URLSearchParams(authUrl1.split('?')[1]).get('state');\n      const state2 = new URLSearchParams(authUrl2.split('?')[1]).get('state');\n\n      expect(state1).not.toEqual(state2);\n      expect(state1).toHaveLength(32);\n      expect(state2).toHaveLength(32);\n    });\n\n    it('should URL encode redirect URI properly', () => {\n      const authUrl = linkedinAuthService.getAuthorizationUrl();\n      const urlParams = new URLSearchParams(authUrl.split('?')[1]);\n      const redirectUri = urlParams.get('redirect_uri');\n\n      expect(redirectUri).toBe(\n        'https://app.example.com/auth/linkedin/callback',\n      );\n    });\n\n    it('should include correct scope parameter', () => {\n      const authUrl = linkedinAuthService.getAuthorizationUrl();\n      const urlParams = new URLSearchParams(authUrl.split('?')[1]);\n      const scope = urlParams.get('scope');\n\n      expect(scope).toBe('profile email');\n    });\n  });\n\n  describe('Authorization Code Exchange', () => {\n    it('should exchange authorization code for access token successfully', async () => {\n      mockFetch.mockResolvedValue({\n        ok: true,\n        json: () => Promise.resolve(mockTokenResponse),\n      } as Response);\n\n      const result = await linkedinAuthService.exchangeCodeForToken(\n        'auth-code',\n        'test-state',\n      );\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        'https://www.linkedin.com/oauth/v2/accessToken',\n        {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded',\n            Accept: 'application/json',\n          },\n          body: expect.stringContaining('grant_type=authorization_code'),\n        },\n      );\n\n      const call = mockFetch.mock.calls[0];\n      const body = call[1]?.body as string;\n      expect(body).toContain('code=auth-code');\n      expect(body).toContain('client_id=test-linkedin-client-id');\n      expect(body).toContain('client_secret=test-linkedin-client-secret');\n      expect(body).toContain(\n        'redirect_uri=https://app.example.com/auth/linkedin/callback',\n      );\n\n      expect(result).toEqual(mockTokenResponse);\n    });\n\n    it('should handle token exchange errors', async () => {\n      const errorResponse = {\n        error: 'invalid_grant',\n        error_description: 'Authorization code is invalid',\n      };\n\n      mockFetch.mockResolvedValue({\n        ok: false,\n        status: 400,\n        statusText: 'Bad Request',\n        json: () => Promise.resolve(errorResponse),\n      } as Response);\n\n      await expect(\n        linkedinAuthService.exchangeCodeForToken('invalid-code', 'test-state'),\n      ).rejects.toThrow('Authorization code is invalid');\n    });\n\n    it('should handle network errors during token exchange', async () => {\n      mockFetch.mockRejectedValue(new Error('Network error'));\n\n      await expect(\n        linkedinAuthService.exchangeCodeForToken('auth-code', 'test-state'),\n      ).rejects.toThrow('LinkedIn token exchange failed');\n    });\n\n    it('should handle invalid JSON response', async () => {\n      mockFetch.mockResolvedValue({\n        ok: true,\n        json: () => Promise.reject(new Error('Invalid JSON')),\n      } as Response);\n\n      await expect(\n        linkedinAuthService.exchangeCodeForToken('auth-code', 'test-state'),\n      ).rejects.toThrow('LinkedIn token exchange failed');\n    });\n  });\n\n  describe('User Profile Retrieval', () => {\n    it('should get user profile successfully', async () => {\n      mockFetch.mockResolvedValue({\n        ok: true,\n        json: () => Promise.resolve(mockProfile),\n      } as Response);\n\n      const result = await linkedinAuthService.getUserProfile('access-token');\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        'https://api.linkedin.com/v2/userinfo',\n        {\n          method: 'GET',\n          headers: {\n            Authorization: 'Bearer access-token',\n            Accept: 'application/json',\n          },\n        },\n      );\n\n      expect(result).toEqual(mockProfile);\n    });\n\n    it('should handle profile retrieval errors', async () => {\n      const consoleSpy = jest.spyOn(console, 'error').mockImplementation();\n      mockFetch.mockResolvedValue({\n        ok: false,\n        status: 401,\n        statusText: 'Unauthorized',\n        json: () => Promise.resolve({ message: 'Invalid token' }),\n      } as Response);\n\n      await expect(\n        linkedinAuthService.getUserProfile('invalid-token'),\n      ).rejects.toThrow('Failed to get LinkedIn profile');\n\n      expect(consoleSpy).toHaveBeenCalledWith(\n        'LinkedIn profile retrieval failed:',\n        expect.any(Error),\n      );\n      consoleSpy.mockRestore();\n    });\n\n    it('should handle network errors during profile retrieval', async () => {\n      const consoleSpy = jest.spyOn(console, 'error').mockImplementation();\n      mockFetch.mockRejectedValue(new Error('Network error'));\n\n      await expect(\n        linkedinAuthService.getUserProfile('access-token'),\n      ).rejects.toThrow('Failed to get LinkedIn profile');\n\n      expect(consoleSpy).toHaveBeenCalledWith(\n        'LinkedIn profile retrieval failed:',\n        expect.any(Error),\n      );\n      consoleSpy.mockRestore();\n    });\n  });\n\n  describe('Complete Authentication Flow', () => {\n    it('should complete authentication flow successfully', async () => {\n      // Mock token exchange\n      mockFetch\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve(mockTokenResponse),\n        } as Response)\n        // Mock profile retrieval\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve(mockProfile),\n        } as Response);\n\n      const result = await linkedinAuthService.authenticate(\n        'auth-code',\n        'test-state',\n      );\n\n      expect(mockFetch).toHaveBeenCalledTimes(2);\n\n      // Verify token exchange call\n      expect(mockFetch).toHaveBeenNthCalledWith(\n        1,\n        'https://www.linkedin.com/oauth/v2/accessToken',\n        expect.objectContaining({ method: 'POST' }),\n      );\n\n      // Verify profile retrieval call\n      expect(mockFetch).toHaveBeenNthCalledWith(\n        2,\n        'https://api.linkedin.com/v2/userinfo',\n        expect.objectContaining({\n          method: 'GET',\n          headers: expect.objectContaining({\n            Authorization: 'Bearer linkedin-access-token',\n          }),\n        }),\n      );\n\n      const expectedResult: SocialLoginData = {\n        accessToken: 'linkedin-access-token',\n        profile: {\n          id: 'linkedin-123',\n          email: 'john@linkedin.com',\n          name: 'John Doe',\n          avatar: 'https://example.com/profile.jpg',\n        },\n      };\n\n      expect(result).toEqual(expectedResult);\n    });\n\n    it('should handle authentication flow failure during token exchange', async () => {\n      mockFetch.mockResolvedValue({\n        ok: false,\n        status: 400,\n        statusText: 'Bad Request',\n        json: () => Promise.resolve({ error_description: 'Invalid code' }),\n      } as Response);\n\n      await expect(\n        linkedinAuthService.authenticate('invalid-code', 'test-state'),\n      ).rejects.toThrow('Invalid code');\n    });\n\n    it('should handle authentication flow failure during profile retrieval', async () => {\n      const consoleSpy = jest.spyOn(console, 'error').mockImplementation();\n\n      // Mock successful token exchange\n      mockFetch\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve(mockTokenResponse),\n        } as Response)\n        // Mock failed profile retrieval\n        .mockResolvedValueOnce({\n          ok: false,\n          status: 401,\n          statusText: 'Unauthorized',\n          json: () => Promise.resolve({ message: 'Token expired' }),\n        } as Response);\n\n      await expect(\n        linkedinAuthService.authenticate('auth-code', 'test-state'),\n      ).rejects.toThrow('Failed to get LinkedIn profile');\n\n      consoleSpy.mockRestore();\n    });\n\n    it('should transform profile data correctly', async () => {\n      const profileWithoutPicture = {\n        ...mockProfile,\n        picture: undefined,\n      };\n\n      mockFetch\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve(mockTokenResponse),\n        } as Response)\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve(profileWithoutPicture),\n        } as Response);\n\n      const result = await linkedinAuthService.authenticate(\n        'auth-code',\n        'test-state',\n      );\n\n      expect(result.profile.avatar).toBeNull();\n    });\n\n    it('should use email as fallback name when name is not provided', async () => {\n      const profileWithoutName = {\n        ...mockProfile,\n        name: undefined,\n      };\n\n      mockFetch\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve(mockTokenResponse),\n        } as Response)\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve(profileWithoutName),\n        } as Response);\n\n      const result = await linkedinAuthService.authenticate(\n        'auth-code',\n        'test-state',\n      );\n\n      expect(result.profile.name).toBe('john@linkedin.com');\n    });\n\n    it('should construct name from given and family names when name is not provided', async () => {\n      const profileWithNames = {\n        ...mockProfile,\n        name: undefined,\n        given_name: 'Jane',\n        family_name: 'Smith',\n      };\n\n      mockFetch\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve(mockTokenResponse),\n        } as Response)\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve(profileWithNames),\n        } as Response);\n\n      const result = await linkedinAuthService.authenticate(\n        'auth-code',\n        'test-state',\n      );\n\n      expect(result.profile.name).toBe('Jane Smith');\n    });\n  });\n\n  describe('State Management', () => {\n    it('should validate state parameter during authentication', async () => {\n      const authUrl = linkedinAuthService.getAuthorizationUrl();\n      const urlParams = new URLSearchParams(authUrl.split('?')[1]);\n      const originalState = urlParams.get('state') as string;\n\n      mockFetch\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve(mockTokenResponse),\n        } as Response)\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve(mockProfile),\n        } as Response);\n\n      // This should work with the correct state\n      await expect(\n        linkedinAuthService.authenticate('auth-code', originalState),\n      ).resolves.toBeDefined();\n    });\n\n    it('should generate cryptographically secure state', () => {\n      const states = new Set<string>();\n\n      // Generate multiple states to check uniqueness\n      for (let i = 0; i < 100; i++) {\n        const authUrl = linkedinAuthService.getAuthorizationUrl();\n        const urlParams = new URLSearchParams(authUrl.split('?')[1]);\n        const state = urlParams.get('state') as string;\n\n        expect(state).toHaveLength(32);\n        expect(states.has(state)).toBe(false);\n        states.add(state);\n      }\n    });\n  });\n\n  describe('URL Parameter Encoding', () => {\n    it('should properly encode all URL parameters', () => {\n      const authUrl = linkedinAuthService.getAuthorizationUrl();\n\n      // URL should not contain any unencoded special characters\n      expect(authUrl).not.toMatch(/[^a-zA-Z0-9\\-_.~:/?#[\\]@!$&'()*+,;=%]/);\n\n      // Should contain properly encoded components\n      expect(authUrl).toContain('response_type=code');\n      expect(authUrl).toContain('scope=profile%20email');\n    });\n\n    it('should handle special characters in configuration', async () => {\n      // This test ensures the service can handle edge cases in configuration\n      const service = new LinkedInAuthService();\n      const authUrl = service.getAuthorizationUrl();\n\n      expect(authUrl).toContain('client_id=test-linkedin-client-id');\n      expect(authUrl).toContain(\n        'redirect_uri=https://app.example.com/auth/linkedin/callback',\n      );\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should provide meaningful error messages', async () => {\n      const errorResponse = {\n        error: 'access_denied',\n        error_description: 'User cancelled authorization',\n      };\n\n      mockFetch.mockResolvedValue({\n        ok: false,\n        status: 400,\n        statusText: 'Bad Request',\n        json: () => Promise.resolve(errorResponse),\n      } as Response);\n\n      await expect(\n        linkedinAuthService.exchangeCodeForToken('auth-code', 'state'),\n      ).rejects.toThrow('User cancelled authorization');\n    });\n\n    it('should handle missing error description', async () => {\n      mockFetch.mockResolvedValue({\n        ok: false,\n        status: 500,\n        statusText: 'Internal Server Error',\n        json: () => Promise.resolve({}),\n      } as Response);\n\n      await expect(\n        linkedinAuthService.exchangeCodeForToken('auth-code', 'state'),\n      ).rejects.toThrow('HTTP 500: Internal Server Error');\n    });\n\n    it('should handle JSON parsing errors', async () => {\n      mockFetch.mockResolvedValue({\n        ok: false,\n        status: 400,\n        statusText: 'Bad Request',\n        json: () => Promise.reject(new Error('Invalid JSON')),\n      } as Response);\n\n      await expect(\n        linkedinAuthService.exchangeCodeForToken('auth-code', 'state'),\n      ).rejects.toThrow('HTTP 400: Bad Request');\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}