bdaf7af4983f0238c87d121c7b15dbde
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _MaterialIcons = _interopRequireDefault(require("react-native-vector-icons/MaterialIcons"));
var _jsxRuntime = require("react/jsx-runtime");
function cov_xell86ez6() {
  var path = "C:\\Users\\robot\\Desktop\\digbiz5\\digbiz5\\src\\components\\common\\EmptyState.tsx";
  var hash = "9ffbc66c365ed6f653ed863e017335f46243584c";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\robot\\Desktop\\digbiz5\\digbiz5\\src\\components\\common\\EmptyState.tsx",
    statementMap: {
      "0": {
        start: {
          line: 25,
          column: 46
        },
        end: {
          line: 49,
          column: 1
        }
      },
      "1": {
        start: {
          line: 33,
          column: 2
        },
        end: {
          line: 48,
          column: 4
        }
      },
      "2": {
        start: {
          line: 51,
          column: 15
        },
        end: {
          line: 93,
          column: 2
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 25,
            column: 46
          },
          end: {
            line: 25,
            column: 47
          }
        },
        loc: {
          start: {
            line: 32,
            column: 6
          },
          end: {
            line: 49,
            column: 1
          }
        },
        line: 32
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 42,
            column: 7
          },
          end: {
            line: 46,
            column: 7
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 42,
            column: 7
          },
          end: {
            line: 42,
            column: 17
          }
        }, {
          start: {
            line: 42,
            column: 21
          },
          end: {
            line: 42,
            column: 34
          }
        }, {
          start: {
            line: 43,
            column: 8
          },
          end: {
            line: 45,
            column: 27
          }
        }],
        line: 42
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0, 0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "9ffbc66c365ed6f653ed863e017335f46243584c"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    cov_xell86ez6 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_xell86ez6();
cov_xell86ez6().s[0]++;
var EmptyState = function EmptyState(_ref) {
  var icon = _ref.icon,
    title = _ref.title,
    message = _ref.message,
    actionText = _ref.actionText,
    onActionPress = _ref.onActionPress,
    style = _ref.style;
  cov_xell86ez6().f[0]++;
  cov_xell86ez6().s[1]++;
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: [styles.container, style],
    children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.iconContainer,
      children: (0, _jsxRuntime.jsx)(_MaterialIcons.default, {
        name: icon,
        size: 48,
        color: "#9ca3af"
      })
    }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: styles.title,
      children: title
    }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: styles.message,
      children: message
    }), (cov_xell86ez6().b[0][0]++, actionText) && (cov_xell86ez6().b[0][1]++, onActionPress) && (cov_xell86ez6().b[0][2]++, (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      style: styles.actionButton,
      onPress: onActionPress,
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.actionButtonText,
        children: actionText
      })
    }))]
  });
};
var styles = (cov_xell86ez6().s[2]++, _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingHorizontal: 32,
    paddingVertical: 48
  },
  iconContainer: {
    width: 80,
    height: 80,
    borderRadius: 40,
    backgroundColor: '#f1f3f4',
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 24
  },
  title: {
    fontSize: 18,
    fontWeight: '600',
    color: '#1a1a1a',
    textAlign: 'center',
    marginBottom: 8
  },
  message: {
    fontSize: 14,
    color: '#6c757d',
    textAlign: 'center',
    lineHeight: 20,
    marginBottom: 24
  },
  actionButton: {
    backgroundColor: '#007bff',
    paddingHorizontal: 24,
    paddingVertical: 12,
    borderRadius: 8
  },
  actionButtonText: {
    fontSize: 14,
    fontWeight: '500',
    color: '#ffffff'
  }
}));
var _default = exports.default = EmptyState;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,