ff77275fd683e91bba35548a66880a40
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function cov_lctzlo87g() {
  var path = "C:\\Users\\robot\\Desktop\\digbiz5\\digbiz5\\src\\components\\common\\ProgressIndicator.tsx";
  var hash = "845bdd4458df0b6515c596ef85912f8a65f1865d";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\robot\\Desktop\\digbiz5\\digbiz5\\src\\components\\common\\ProgressIndicator.tsx",
    statementMap: {
      "0": {
        start: {
          line: 10,
          column: 60
        },
        end: {
          line: 34,
          column: 1
        }
      },
      "1": {
        start: {
          line: 15,
          column: 21
        },
        end: {
          line: 15,
          column: 57
        }
      },
      "2": {
        start: {
          line: 17,
          column: 2
        },
        end: {
          line: 33,
          column: 4
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 10,
            column: 60
          },
          end: {
            line: 10,
            column: 61
          }
        },
        loc: {
          start: {
            line: 14,
            column: 6
          },
          end: {
            line: 34,
            column: 1
          }
        },
        line: 14
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 11,
            column: 2
          },
          end: {
            line: 11,
            column: 14
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 11,
            column: 13
          },
          end: {
            line: 11,
            column: 14
          }
        }],
        line: 11
      },
      "1": {
        loc: {
          start: {
            line: 12,
            column: 2
          },
          end: {
            line: 12,
            column: 13
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 12,
            column: 10
          },
          end: {
            line: 12,
            column: 13
          }
        }],
        line: 12
      },
      "2": {
        loc: {
          start: {
            line: 13,
            column: 2
          },
          end: {
            line: 13,
            column: 23
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 13,
            column: 19
          },
          end: {
            line: 13,
            column: 23
          }
        }],
        line: 13
      },
      "3": {
        loc: {
          start: {
            line: 29,
            column: 7
          },
          end: {
            line: 31,
            column: 7
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 29,
            column: 7
          },
          end: {
            line: 29,
            column: 21
          }
        }, {
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 80
          }
        }],
        line: 29
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0],
      "1": [0],
      "2": [0],
      "3": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "845bdd4458df0b6515c596ef85912f8a65f1865d"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    cov_lctzlo87g = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_lctzlo87g();
cov_lctzlo87g().s[0]++;
var ProgressIndicator = function ProgressIndicator(_ref) {
  var _ref$progress = _ref.progress,
    progress = _ref$progress === void 0 ? (cov_lctzlo87g().b[0][0]++, 0) : _ref$progress,
    _ref$total = _ref.total,
    total = _ref$total === void 0 ? (cov_lctzlo87g().b[1][0]++, 100) : _ref$total,
    _ref$showPercentage = _ref.showPercentage,
    showPercentage = _ref$showPercentage === void 0 ? (cov_lctzlo87g().b[2][0]++, true) : _ref$showPercentage;
  cov_lctzlo87g().f[0]++;
  var percentage = (cov_lctzlo87g().s[1]++, Math.round(progress / total * 100));
  cov_lctzlo87g().s[2]++;
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
      style: {
        backgroundColor: '#f0f0f0',
        height: 8,
        borderRadius: 4
      },
      children: (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: {
          backgroundColor: '#007bff',
          height: 8,
          borderRadius: 4,
          width: `${percentage}%`
        }
      })
    }), (cov_lctzlo87g().b[3][0]++, showPercentage) && (cov_lctzlo87g().b[3][1]++, (0, _jsxRuntime.jsxs)(_reactNative.Text, {
      style: {
        textAlign: 'center',
        marginTop: 4
      },
      children: [percentage, "%"]
    }))]
  });
};
var _default = exports.default = ProgressIndicator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9qc3hSdW50aW1lIiwiY292X2xjdHpsbzg3ZyIsInBhdGgiLCJoYXNoIiwiZ2xvYmFsIiwiRnVuY3Rpb24iLCJnY3YiLCJjb3ZlcmFnZURhdGEiLCJzdGF0ZW1lbnRNYXAiLCJzdGFydCIsImxpbmUiLCJjb2x1bW4iLCJlbmQiLCJmbk1hcCIsIm5hbWUiLCJkZWNsIiwibG9jIiwiYnJhbmNoTWFwIiwidHlwZSIsImxvY2F0aW9ucyIsInMiLCJmIiwiYiIsIl9jb3ZlcmFnZVNjaGVtYSIsImNvdmVyYWdlIiwiYWN0dWFsQ292ZXJhZ2UiLCJQcm9ncmVzc0luZGljYXRvciIsIl9yZWYiLCJfcmVmJHByb2dyZXNzIiwicHJvZ3Jlc3MiLCJfcmVmJHRvdGFsIiwidG90YWwiLCJfcmVmJHNob3dQZXJjZW50YWdlIiwic2hvd1BlcmNlbnRhZ2UiLCJwZXJjZW50YWdlIiwiTWF0aCIsInJvdW5kIiwianN4cyIsIlZpZXciLCJjaGlsZHJlbiIsImpzeCIsInN0eWxlIiwiYmFja2dyb3VuZENvbG9yIiwiaGVpZ2h0IiwiYm9yZGVyUmFkaXVzIiwid2lkdGgiLCJUZXh0IiwidGV4dEFsaWduIiwibWFyZ2luVG9wIiwiX2RlZmF1bHQiLCJleHBvcnRzIiwiZGVmYXVsdCJdLCJzb3VyY2VzIjpbIlByb2dyZXNzSW5kaWNhdG9yLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgVmlldywgVGV4dCB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5cbmludGVyZmFjZSBQcm9ncmVzc0luZGljYXRvclByb3BzIHtcbiAgcHJvZ3Jlc3M/OiBudW1iZXI7XG4gIHRvdGFsPzogbnVtYmVyO1xuICBzaG93UGVyY2VudGFnZT86IGJvb2xlYW47XG59XG5cbmNvbnN0IFByb2dyZXNzSW5kaWNhdG9yOiBSZWFjdC5GQzxQcm9ncmVzc0luZGljYXRvclByb3BzPiA9ICh7XG4gIHByb2dyZXNzID0gMCxcbiAgdG90YWwgPSAxMDAsXG4gIHNob3dQZXJjZW50YWdlID0gdHJ1ZSxcbn0pID0+IHtcbiAgY29uc3QgcGVyY2VudGFnZSA9IE1hdGgucm91bmQoKHByb2dyZXNzIC8gdG90YWwpICogMTAwKTtcblxuICByZXR1cm4gKFxuICAgIDxWaWV3PlxuICAgICAgPFZpZXcgc3R5bGU9e3sgYmFja2dyb3VuZENvbG9yOiAnI2YwZjBmMCcsIGhlaWdodDogOCwgYm9yZGVyUmFkaXVzOiA0IH19PlxuICAgICAgICA8Vmlld1xuICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjMDA3YmZmJyxcbiAgICAgICAgICAgIGhlaWdodDogOCxcbiAgICAgICAgICAgIGJvcmRlclJhZGl1czogNCxcbiAgICAgICAgICAgIHdpZHRoOiBgJHtwZXJjZW50YWdlfSVgLFxuICAgICAgICAgIH19XG4gICAgICAgIC8+XG4gICAgICA8L1ZpZXc+XG4gICAgICB7c2hvd1BlcmNlbnRhZ2UgJiYgKFxuICAgICAgICA8VGV4dCBzdHlsZT17eyB0ZXh0QWxpZ246ICdjZW50ZXInLCBtYXJnaW5Ub3A6IDQgfX0+e3BlcmNlbnRhZ2V9JTwvVGV4dD5cbiAgICAgICl9XG4gICAgPC9WaWV3PlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgUHJvZ3Jlc3NJbmRpY2F0b3I7XG4iXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBQTBDLElBQUFFLFdBQUEsR0FBQUYsT0FBQTtBQUFBLFNBQUFHLGNBQUE7RUFBQSxJQUFBQyxJQUFBO0VBQUEsSUFBQUMsSUFBQTtFQUFBLElBQUFDLE1BQUEsT0FBQUMsUUFBQTtFQUFBLElBQUFDLEdBQUE7RUFBQSxJQUFBQyxZQUFBO0lBQUFMLElBQUE7SUFBQU0sWUFBQTtNQUFBO1FBQUFDLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtJQUFBO0lBQUFFLEtBQUE7TUFBQTtRQUFBQyxJQUFBO1FBQUFDLElBQUE7VUFBQU4sS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUssR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7SUFBQTtJQUFBTyxTQUFBO01BQUE7UUFBQUQsR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO0lBQUE7SUFBQVUsQ0FBQTtNQUFBO01BQUE7TUFBQTtJQUFBO0lBQUFDLENBQUE7TUFBQTtJQUFBO0lBQUFDLENBQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtJQUFBO0lBQUFDLGVBQUE7SUFBQXBCLElBQUE7RUFBQTtFQUFBLElBQUFxQixRQUFBLEdBQUFwQixNQUFBLENBQUFFLEdBQUEsTUFBQUYsTUFBQSxDQUFBRSxHQUFBO0VBQUEsS0FBQWtCLFFBQUEsQ0FBQXRCLElBQUEsS0FBQXNCLFFBQUEsQ0FBQXRCLElBQUEsRUFBQUMsSUFBQSxLQUFBQSxJQUFBO0lBQUFxQixRQUFBLENBQUF0QixJQUFBLElBQUFLLFlBQUE7RUFBQTtFQUFBLElBQUFrQixjQUFBLEdBQUFELFFBQUEsQ0FBQXRCLElBQUE7RUFBQTtJQUFBRCxhQUFBLFlBQUFBLENBQUE7TUFBQSxPQUFBd0IsY0FBQTtJQUFBO0VBQUE7RUFBQSxPQUFBQSxjQUFBO0FBQUE7QUFBQXhCLGFBQUE7QUFBQUEsYUFBQSxHQUFBbUIsQ0FBQTtBQVExQyxJQUFNTSxpQkFBbUQsR0FBRyxTQUF0REEsaUJBQW1EQSxDQUFBQyxJQUFBLEVBSW5EO0VBQUEsSUFBQUMsYUFBQSxHQUFBRCxJQUFBLENBSEpFLFFBQVE7SUFBUkEsUUFBUSxHQUFBRCxhQUFBLGVBQUEzQixhQUFBLEdBQUFxQixDQUFBLFVBQUcsQ0FBQyxJQUFBTSxhQUFBO0lBQUFFLFVBQUEsR0FBQUgsSUFBQSxDQUNaSSxLQUFLO0lBQUxBLEtBQUssR0FBQUQsVUFBQSxlQUFBN0IsYUFBQSxHQUFBcUIsQ0FBQSxVQUFHLEdBQUcsSUFBQVEsVUFBQTtJQUFBRSxtQkFBQSxHQUFBTCxJQUFBLENBQ1hNLGNBQWM7SUFBZEEsY0FBYyxHQUFBRCxtQkFBQSxlQUFBL0IsYUFBQSxHQUFBcUIsQ0FBQSxVQUFHLElBQUksSUFBQVUsbUJBQUE7RUFBQS9CLGFBQUEsR0FBQW9CLENBQUE7RUFFckIsSUFBTWEsVUFBVSxJQUFBakMsYUFBQSxHQUFBbUIsQ0FBQSxPQUFHZSxJQUFJLENBQUNDLEtBQUssQ0FBRVAsUUFBUSxHQUFHRSxLQUFLLEdBQUksR0FBRyxDQUFDO0VBQUM5QixhQUFBLEdBQUFtQixDQUFBO0VBRXhELE9BQ0UsSUFBQXBCLFdBQUEsQ0FBQXFDLElBQUEsRUFBQ3RDLFlBQUEsQ0FBQXVDLElBQUk7SUFBQUMsUUFBQSxHQUNILElBQUF2QyxXQUFBLENBQUF3QyxHQUFBLEVBQUN6QyxZQUFBLENBQUF1QyxJQUFJO01BQUNHLEtBQUssRUFBRTtRQUFFQyxlQUFlLEVBQUUsU0FBUztRQUFFQyxNQUFNLEVBQUUsQ0FBQztRQUFFQyxZQUFZLEVBQUU7TUFBRSxDQUFFO01BQUFMLFFBQUEsRUFDdEUsSUFBQXZDLFdBQUEsQ0FBQXdDLEdBQUEsRUFBQ3pDLFlBQUEsQ0FBQXVDLElBQUk7UUFDSEcsS0FBSyxFQUFFO1VBQ0xDLGVBQWUsRUFBRSxTQUFTO1VBQzFCQyxNQUFNLEVBQUUsQ0FBQztVQUNUQyxZQUFZLEVBQUUsQ0FBQztVQUNmQyxLQUFLLEVBQUUsR0FBR1gsVUFBVTtRQUN0QjtNQUFFLENBQ0g7SUFBQyxDQUNFLENBQUMsRUFDTixDQUFBakMsYUFBQSxHQUFBcUIsQ0FBQSxVQUFBVyxjQUFjLE1BQUFoQyxhQUFBLEdBQUFxQixDQUFBLFVBQ2IsSUFBQXRCLFdBQUEsQ0FBQXFDLElBQUEsRUFBQ3RDLFlBQUEsQ0FBQStDLElBQUk7TUFBQ0wsS0FBSyxFQUFFO1FBQUVNLFNBQVMsRUFBRSxRQUFRO1FBQUVDLFNBQVMsRUFBRTtNQUFFLENBQUU7TUFBQVQsUUFBQSxHQUFFTCxVQUFVLEVBQUMsR0FBQztJQUFBLENBQU0sQ0FBQyxDQUN6RTtFQUFBLENBQ0csQ0FBQztBQUVYLENBQUM7QUFBQyxJQUFBZSxRQUFBLEdBQUFDLE9BQUEsQ0FBQUMsT0FBQSxHQUVhekIsaUJBQWlCIiwiaWdub3JlTGlzdCI6W119