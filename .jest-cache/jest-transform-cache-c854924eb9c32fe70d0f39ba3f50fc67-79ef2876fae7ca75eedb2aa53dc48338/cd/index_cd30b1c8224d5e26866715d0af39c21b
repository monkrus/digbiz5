7109315c75f4f60594a0615f838ca6d1
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _slicedToArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/slicedToArray"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  configure: true,
  fetch: true,
  refresh: true,
  addEventListener: true,
  useNetInfo: true,
  useNetInfoInstance: true
};
exports.configure = configure;
exports.fetch = fetch;
exports.refresh = refresh;
exports.addEventListener = addEventListener;
exports.useNetInfo = useNetInfo;
exports.useNetInfoInstance = useNetInfoInstance;
exports.default = void 0;
var _react = require("react");
var _reactNative = require("react-native");
var _defaultConfiguration = _interopRequireDefault(require("./internal/defaultConfiguration"));
var _nativeInterface = _interopRequireDefault(require("./internal/nativeInterface"));
var _state2 = _interopRequireDefault(require("./internal/state"));
var Types = _interopRequireWildcard(require("./internal/types"));
Object.keys(Types).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === Types[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return Types[key];
    }
  });
});
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
var _configuration = _defaultConfiguration.default;
var _state = null;
var createState = function createState() {
  return new _state2.default(_configuration);
};
var isRequestInProgress = false;
var requestQueue = [];
function configure(configuration) {
  _configuration = Object.assign({}, _defaultConfiguration.default, configuration);
  if (_state) {
    _state.tearDown();
    _state = createState();
  }
  if (_reactNative.Platform.OS === 'ios') {
    _nativeInterface.default.configure(configuration);
  }
}
function fetch(requestedInterface) {
  if (!_state) {
    _state = createState();
  }
  return _state.latest(requestedInterface);
}
function refresh() {
  if (!_state) {
    _state = createState();
  }
  if (isRequestInProgress) {
    return new Promise(function (resolve) {
      requestQueue.push(resolve);
    });
  }
  isRequestInProgress = true;
  return _state._fetchCurrentState().then(function (result) {
    requestQueue.forEach(function (resolve) {
      return resolve(result);
    });
    requestQueue = [];
    return result;
  }).finally(function () {
    isRequestInProgress = false;
  });
}
function addEventListener(listener) {
  if (!_state) {
    _state = createState();
  }
  _state.add(listener);
  return function () {
    _state && _state.remove(listener);
  };
}
function useNetInfo(configuration) {
  if (configuration) {
    configure(configuration);
  }
  var _ref = (0, _react.useState)({
      type: Types.NetInfoStateType.unknown,
      isConnected: null,
      isInternetReachable: null,
      details: null
    }),
    _ref2 = (0, _slicedToArray2.default)(_ref, 2),
    netInfo = _ref2[0],
    setNetInfo = _ref2[1];
  (0, _react.useEffect)(function () {
    var unsubscribe = addEventListener(setNetInfo);
    return function () {
      return unsubscribe();
    };
  }, []);
  return netInfo;
}
function useNetInfoInstance() {
  var isPaused = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  var configuration = arguments.length > 1 ? arguments[1] : undefined;
  var _ref3 = (0, _react.useState)(),
    _ref4 = (0, _slicedToArray2.default)(_ref3, 2),
    networkInfoManager = _ref4[0],
    setNetworkInfoManager = _ref4[1];
  var _ref5 = (0, _react.useState)({
      type: Types.NetInfoStateType.unknown,
      isConnected: null,
      isInternetReachable: null,
      details: null
    }),
    _ref6 = (0, _slicedToArray2.default)(_ref5, 2),
    netInfo = _ref6[0],
    setNetInfo = _ref6[1];
  (0, _react.useEffect)(function () {
    if (isPaused) {
      return;
    }
    var config = Object.assign({}, _defaultConfiguration.default, configuration);
    var state = new _state2.default(config);
    setNetworkInfoManager(state);
    state.add(setNetInfo);
    return state.tearDown;
  }, [isPaused, configuration]);
  var refresh = (0, _react.useCallback)(function () {
    if (networkInfoManager && !isRequestInProgress) {
      isRequestInProgress = true;
      networkInfoManager._fetchCurrentState().finally(function () {
        isRequestInProgress = false;
      });
    }
  }, [networkInfoManager]);
  return {
    netInfo: netInfo,
    refresh: refresh
  };
}
var _default = {
  configure: configure,
  fetch: fetch,
  refresh: refresh,
  addEventListener: addEventListener,
  useNetInfo: useNetInfo,
  useNetInfoInstance: useNetInfoInstance
};
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,