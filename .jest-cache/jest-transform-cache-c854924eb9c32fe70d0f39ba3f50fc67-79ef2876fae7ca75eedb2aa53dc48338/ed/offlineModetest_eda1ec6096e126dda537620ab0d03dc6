b31535cf97b370cd53637213826e9894
_getJestObj().mock('../../../src/services/contactDatabaseService');
_getJestObj().mock('@react-native-async-storage/async-storage');
_getJestObj().mock('@react-native-community/netinfo', function () {
  return {
    fetch: jest.fn(function () {
      return Promise.resolve(mockNetInfo);
    }),
    addEventListener: jest.fn(function () {
      return jest.fn();
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _contactSyncService = require("../../../src/services/contactSyncService");
var _contactDatabaseService = require("../../../src/services/contactDatabaseService");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockNetInfo = {
  isConnected: true,
  type: 'wifi'
};
var createMockContact = function createMockContact(overrides) {
  return Object.assign({
    id: `contact-${Math.random().toString(36).substr(2, 9)}`,
    fields: [{
      id: 'field-name',
      type: 'name',
      label: 'Full Name',
      value: 'John Doe',
      isEditable: true
    }, {
      id: 'field-email',
      type: 'email',
      label: 'Email',
      value: 'john@example.com',
      isEditable: true
    }],
    source: 'manual',
    confidence: 0.85,
    createdAt: '2024-01-01T00:00:00.000Z',
    updatedAt: '2024-01-01T00:00:00.000Z',
    tags: ['business'],
    isVerified: true,
    needsReview: false,
    isFavorite: false,
    syncStatus: 'pending'
  }, overrides);
};
describe('ContactSyncService - Offline Mode', function () {
  var mockDb = jest.mocked(_contactDatabaseService.contactDatabaseService);
  var mockStorage = _asyncStorage.default;
  beforeEach(function () {
    jest.clearAllMocks();
    mockNetInfo.isConnected = true;
    global.fetch = jest.fn();
  });
  describe('Offline Detection', function () {
    it('should detect when device goes offline', (0, _asyncToGenerator2.default)(function* () {
      mockNetInfo.isConnected = false;
      var isOnline = yield _contactSyncService.contactSyncService.checkConnectivity();
      expect(isOnline).toBe(false);
    }));
    it('should detect when device comes back online', (0, _asyncToGenerator2.default)(function* () {
      mockNetInfo.isConnected = true;
      var isOnline = yield _contactSyncService.contactSyncService.checkConnectivity();
      expect(isOnline).toBe(true);
    }));
    it('should handle network state changes', (0, _asyncToGenerator2.default)(function* () {
      var networkChangeHandler = jest.fn();
      _contactSyncService.contactSyncService.onNetworkStateChange(networkChangeHandler);
      mockNetInfo.isConnected = false;
      yield _contactSyncService.contactSyncService.handleNetworkChange(mockNetInfo);
      expect(networkChangeHandler).toHaveBeenCalledWith({
        isOnline: false,
        type: 'wifi'
      });
    }));
  });
  describe('Offline Queue Management', function () {
    it('should queue contact creation when offline', (0, _asyncToGenerator2.default)(function* () {
      mockNetInfo.isConnected = false;
      var newContact = createMockContact({
        id: 'offline-create-test',
        syncStatus: 'pending'
      });
      mockDb.createContact.mockResolvedValue(newContact);
      mockStorage.getItem.mockResolvedValue('[]');
      mockStorage.setItem.mockResolvedValue();
      var result = yield _contactSyncService.contactSyncService.createContactOffline(newContact);
      expect(result.syncStatus).toBe('pending');
      expect(mockStorage.setItem).toHaveBeenCalledWith('contact_sync_queue', expect.stringContaining('"action":"create"'));
    }));
    it('should queue contact updates when offline', (0, _asyncToGenerator2.default)(function* () {
      mockNetInfo.isConnected = false;
      var updatedContact = createMockContact({
        id: 'offline-update-test',
        fields: [{
          id: 'field-1',
          type: 'name',
          label: 'Name',
          value: 'Updated Name',
          isEditable: true
        }],
        syncStatus: 'pending'
      });
      mockDb.updateContact.mockResolvedValue(updatedContact);
      mockStorage.getItem.mockResolvedValue('[]');
      mockStorage.setItem.mockResolvedValue();
      var result = yield _contactSyncService.contactSyncService.updateContactOffline(updatedContact);
      expect(result.syncStatus).toBe('pending');
      expect(mockStorage.setItem).toHaveBeenCalledWith('contact_sync_queue', expect.stringContaining('"action":"update"'));
    }));
    it('should queue contact deletion when offline', (0, _asyncToGenerator2.default)(function* () {
      mockNetInfo.isConnected = false;
      var contactId = 'offline-delete-test';
      mockDb.deleteContact.mockResolvedValue(true);
      mockStorage.getItem.mockResolvedValue('[]');
      mockStorage.setItem.mockResolvedValue();
      var result = yield _contactSyncService.contactSyncService.deleteContactOffline(contactId);
      expect(result).toBe(true);
      expect(mockStorage.setItem).toHaveBeenCalledWith('contact_sync_queue', expect.stringContaining('"action":"delete"'));
    }));
    it('should maintain queue order for operations', (0, _asyncToGenerator2.default)(function* () {
      mockNetInfo.isConnected = false;
      var contact1 = createMockContact({
        id: 'queue-order-1'
      });
      var contact2 = createMockContact({
        id: 'queue-order-2'
      });
      var contact3 = createMockContact({
        id: 'queue-order-3'
      });
      mockDb.createContact.mockResolvedValue(contact1);
      mockDb.updateContact.mockResolvedValue(contact2);
      mockDb.deleteContact.mockResolvedValue(true);
      var queueData = [];
      mockStorage.getItem.mockImplementation(function () {
        return Promise.resolve(JSON.stringify(queueData));
      });
      mockStorage.setItem.mockImplementation(function (key, value) {
        queueData = JSON.parse(value);
        return Promise.resolve();
      });
      yield _contactSyncService.contactSyncService.createContactOffline(contact1);
      yield _contactSyncService.contactSyncService.updateContactOffline(contact2);
      yield _contactSyncService.contactSyncService.deleteContactOffline(contact3.id);
      expect(queueData).toHaveLength(3);
      expect(queueData[0].action).toBe('create');
      expect(queueData[1].action).toBe('update');
      expect(queueData[2].action).toBe('delete');
    }));
  });
  describe('Sync Queue Processing', function () {
    it('should process queued operations when coming online', (0, _asyncToGenerator2.default)(function* () {
      var queuedOperations = [{
        id: 'op-1',
        action: 'create',
        contact: createMockContact({
          id: 'queue-create'
        }),
        timestamp: '2024-01-01T10:00:00.000Z'
      }, {
        id: 'op-2',
        action: 'update',
        contact: createMockContact({
          id: 'queue-update'
        }),
        timestamp: '2024-01-01T10:01:00.000Z'
      }, {
        id: 'op-3',
        action: 'delete',
        contactId: 'queue-delete',
        timestamp: '2024-01-01T10:02:00.000Z'
      }];
      mockStorage.getItem.mockResolvedValue(JSON.stringify(queuedOperations));
      mockStorage.setItem.mockResolvedValue();
      global.fetch = jest.fn().mockResolvedValueOnce({
        ok: true,
        json: function json() {
          return Promise.resolve({
            success: true
          });
        }
      }).mockResolvedValueOnce({
        ok: true,
        json: function json() {
          return Promise.resolve({
            success: true
          });
        }
      }).mockResolvedValueOnce({
        ok: true,
        json: function json() {
          return Promise.resolve({
            success: true
          });
        }
      });
      mockNetInfo.isConnected = true;
      var result = yield _contactSyncService.contactSyncService.processSyncQueue();
      expect(result.processed).toBe(3);
      expect(result.successful).toBe(3);
      expect(result.failed).toBe(0);
      expect(mockStorage.setItem).toHaveBeenCalledWith('contact_sync_queue', '[]');
    }));
    it('should handle partial queue processing failures', (0, _asyncToGenerator2.default)(function* () {
      var queuedOperations = [{
        id: 'op-1',
        action: 'create',
        contact: createMockContact({
          id: 'success-create'
        }),
        timestamp: '2024-01-01T10:00:00.000Z'
      }, {
        id: 'op-2',
        action: 'update',
        contact: createMockContact({
          id: 'fail-update'
        }),
        timestamp: '2024-01-01T10:01:00.000Z'
      }];
      mockStorage.getItem.mockResolvedValue(JSON.stringify(queuedOperations));
      mockStorage.setItem.mockResolvedValue();
      global.fetch = jest.fn().mockResolvedValueOnce({
        ok: true,
        json: function json() {
          return Promise.resolve({
            success: true
          });
        }
      }).mockResolvedValueOnce({
        ok: false,
        status: 500,
        statusText: 'Internal Server Error'
      });
      var result = yield _contactSyncService.contactSyncService.processSyncQueue();
      expect(result.processed).toBe(2);
      expect(result.successful).toBe(1);
      expect(result.failed).toBe(1);
      expect(mockStorage.setItem).toHaveBeenCalledWith('contact_sync_queue', expect.stringContaining('fail-update'));
    }));
    it('should retry failed operations with exponential backoff', (0, _asyncToGenerator2.default)(function* () {
      var failedOperation = {
        id: 'retry-op',
        action: 'create',
        contact: createMockContact({
          id: 'retry-contact'
        }),
        timestamp: '2024-01-01T10:00:00.000Z',
        retryCount: 0,
        maxRetries: 3
      };
      mockStorage.getItem.mockResolvedValue(JSON.stringify([failedOperation]));
      mockStorage.setItem.mockResolvedValue();
      global.fetch = jest.fn().mockRejectedValueOnce(new Error('Network error')).mockRejectedValueOnce(new Error('Network error')).mockResolvedValueOnce({
        ok: true,
        json: function json() {
          return Promise.resolve({
            success: true
          });
        }
      });
      var result = yield _contactSyncService.contactSyncService.processSyncQueue();
      expect(result.failed).toBe(1);
      result = yield _contactSyncService.contactSyncService.processSyncQueue();
      expect(result.failed).toBe(1);
      result = yield _contactSyncService.contactSyncService.processSyncQueue();
      expect(result.successful).toBe(1);
    }));
  });
  describe('Data Consistency in Offline Mode', function () {
    it('should maintain data integrity during offline operations', (0, _asyncToGenerator2.default)(function* () {
      mockNetInfo.isConnected = false;
      var contact = createMockContact({
        id: 'integrity-test',
        updatedAt: '2024-01-01T10:00:00.000Z'
      });
      mockDb.createContact.mockResolvedValue(contact);
      mockDb.getContactById.mockResolvedValue(contact);
      mockStorage.getItem.mockResolvedValue('[]');
      mockStorage.setItem.mockResolvedValue();
      yield _contactSyncService.contactSyncService.createContactOffline(contact);
      var localContact = yield _contactSyncService.contactSyncService.getContactById(contact.id);
      expect(localContact).toBeDefined();
      expect(localContact == null ? void 0 : localContact.syncStatus).toBe('pending');
      var updatedContact = Object.assign({}, contact, {
        fields: [].concat((0, _toConsumableArray2.default)(contact.fields), [{
          id: 'new-field',
          type: 'phone',
          label: 'Phone',
          value: '+1-555-0123',
          isEditable: true
        }]),
        updatedAt: '2024-01-01T11:00:00.000Z'
      });
      mockDb.updateContact.mockResolvedValue(updatedContact);
      yield _contactSyncService.contactSyncService.updateContactOffline(updatedContact);
      var finalContact = yield _contactSyncService.contactSyncService.getContactById(contact.id);
      expect(finalContact == null ? void 0 : finalContact.fields).toHaveLength(3);
      expect(finalContact == null ? void 0 : finalContact.syncStatus).toBe('pending');
    }));
    it('should handle concurrent offline operations safely', (0, _asyncToGenerator2.default)(function* () {
      mockNetInfo.isConnected = false;
      var baseContact = createMockContact({
        id: 'concurrent-test'
      });
      mockDb.createContact.mockResolvedValue(baseContact);
      mockDb.updateContact.mockResolvedValue(baseContact);
      mockStorage.getItem.mockResolvedValue('[]');
      mockStorage.setItem.mockResolvedValue();
      var operations = [_contactSyncService.contactSyncService.createContactOffline(baseContact), _contactSyncService.contactSyncService.updateContactOffline(Object.assign({}, baseContact, {
        tags: [].concat((0, _toConsumableArray2.default)(baseContact.tags), ['updated'])
      })), _contactSyncService.contactSyncService.updateContactOffline(Object.assign({}, baseContact, {
        isFavorite: true
      }))];
      var results = yield Promise.allSettled(operations);
      expect(results.every(function (r) {
        return r.status === 'fulfilled';
      })).toBe(true);
    }));
    it('should preserve operation order across app restarts', (0, _asyncToGenerator2.default)(function* () {
      var existingQueue = [{
        id: 'existing-op-1',
        action: 'create',
        contact: createMockContact({
          id: 'existing-1'
        }),
        timestamp: '2024-01-01T09:00:00.000Z'
      }];
      mockStorage.getItem.mockResolvedValue(JSON.stringify(existingQueue));
      mockNetInfo.isConnected = false;
      var newContact = createMockContact({
        id: 'new-operation'
      });
      var currentQueue = existingQueue;
      mockStorage.setItem.mockImplementation(function (key, value) {
        currentQueue = JSON.parse(value);
        return Promise.resolve();
      });
      mockDb.createContact.mockResolvedValue(newContact);
      yield _contactSyncService.contactSyncService.createContactOffline(newContact);
      expect(currentQueue).toHaveLength(2);
      expect(currentQueue[0].id).toBe('existing-op-1');
      expect(currentQueue[1].contact.id).toBe('new-operation');
    }));
  });
  describe('Offline Storage Optimization', function () {
    it('should compress queue data for storage efficiency', (0, _asyncToGenerator2.default)(function* () {
      var largeQueue = Array.from({
        length: 100
      }, function (_, i) {
        return {
          id: `large-op-${i}`,
          action: 'create',
          contact: createMockContact({
            id: `large-contact-${i}`,
            fields: Array.from({
              length: 10
            }, function (_, j) {
              return {
                id: `field-${i}-${j}`,
                type: 'custom',
                label: `Custom Field ${j}`,
                value: `Value ${i}-${j}`.repeat(10),
                isEditable: true
              };
            })
          }),
          timestamp: new Date().toISOString()
        };
      });
      mockStorage.getItem.mockResolvedValue('[]');
      var storedData = '';
      mockStorage.setItem.mockImplementation(function (key, value) {
        storedData = value;
        return Promise.resolve();
      });
      yield _contactSyncService.contactSyncService.saveQueueToStorage(largeQueue);
      expect(storedData.length).toBeGreaterThan(0);
      var parsedData = JSON.parse(storedData);
      expect(parsedData).toHaveLength(100);
    }));
    it('should handle storage quota limits gracefully', (0, _asyncToGenerator2.default)(function* () {
      var oversizedOperation = {
        id: 'oversized-op',
        action: 'create',
        contact: createMockContact({
          id: 'oversized-contact',
          fields: Array.from({
            length: 1000
          }, function (_, i) {
            return {
              id: `huge-field-${i}`,
              type: 'custom',
              label: `Field ${i}`,
              value: 'x'.repeat(10000),
              isEditable: true
            };
          })
        }),
        timestamp: new Date().toISOString()
      };
      mockStorage.getItem.mockResolvedValue('[]');
      mockStorage.setItem.mockRejectedValue(new Error('QuotaExceededError'));
      var result = yield _contactSyncService.contactSyncService.addToSyncQueue(oversizedOperation);
      expect(result.success).toBe(false);
      expect(result.error).toContain('storage');
    }));
    it('should clean up old completed operations from queue', (0, _asyncToGenerator2.default)(function* () {
      var oldCompletedOps = Array.from({
        length: 50
      }, function (_, i) {
        return {
          id: `old-completed-${i}`,
          action: 'create',
          contact: createMockContact({
            id: `old-${i}`
          }),
          timestamp: '2024-01-01T00:00:00.000Z',
          status: 'completed',
          completedAt: '2024-01-01T01:00:00.000Z'
        };
      });
      var pendingOps = Array.from({
        length: 5
      }, function (_, i) {
        return {
          id: `pending-${i}`,
          action: 'update',
          contact: createMockContact({
            id: `pending-${i}`
          }),
          timestamp: '2024-01-02T00:00:00.000Z',
          status: 'pending'
        };
      });
      var allOps = [].concat(oldCompletedOps, pendingOps);
      mockStorage.getItem.mockResolvedValue(JSON.stringify(allOps));
      var cleanedQueue = [];
      mockStorage.setItem.mockImplementation(function (key, value) {
        cleanedQueue = JSON.parse(value);
        return Promise.resolve();
      });
      yield _contactSyncService.contactSyncService.cleanupSyncQueue(24 * 60 * 60 * 1000);
      expect(cleanedQueue.length).toBeLessThan(allOps.length);
      expect(cleanedQueue.every(function (op) {
        return op.status === 'pending' || new Date(op.completedAt || op.timestamp) > new Date('2024-01-01T12:00:00.000Z');
      })).toBe(true);
    }));
  });
  describe('Background Sync', function () {
    it('should schedule background sync when app goes to background', (0, _asyncToGenerator2.default)(function* () {
      var backgroundSyncScheduler = jest.fn();
      _contactSyncService.contactSyncService.setBackgroundSyncScheduler(backgroundSyncScheduler);
      yield _contactSyncService.contactSyncService.scheduleBackgroundSync();
      expect(backgroundSyncScheduler).toHaveBeenCalledWith({
        taskName: 'contact-sync',
        interval: expect.any(Number),
        requiredNetworkType: 'any'
      });
    }));
    it('should process sync queue during background sync', (0, _asyncToGenerator2.default)(function* () {
      var queuedOperations = [{
        id: 'bg-op-1',
        action: 'create',
        contact: createMockContact({
          id: 'bg-contact'
        }),
        timestamp: '2024-01-01T10:00:00.000Z'
      }];
      mockStorage.getItem.mockResolvedValue(JSON.stringify(queuedOperations));
      mockStorage.setItem.mockResolvedValue();
      global.fetch = jest.fn().mockResolvedValue({
        ok: true,
        json: function json() {
          return Promise.resolve({
            success: true
          });
        }
      });
      var result = yield _contactSyncService.contactSyncService.performBackgroundSync();
      expect(result.processed).toBe(1);
      expect(result.successful).toBe(1);
    }));
    it('should handle background sync timeout', (0, _asyncToGenerator2.default)(function* () {
      var longRunningQueue = Array.from({
        length: 1000
      }, function (_, i) {
        return {
          id: `timeout-op-${i}`,
          action: 'create',
          contact: createMockContact({
            id: `timeout-contact-${i}`
          }),
          timestamp: new Date().toISOString()
        };
      });
      mockStorage.getItem.mockResolvedValue(JSON.stringify(longRunningQueue));
      global.fetch = jest.fn().mockImplementation(function () {
        return new Promise(function (resolve) {
          return setTimeout(function () {
            return resolve({
              ok: true,
              json: function json() {
                return Promise.resolve({
                  success: true
                });
              }
            });
          }, 1000);
        });
      });
      var syncTimeout = 5000;
      var startTime = Date.now();
      var result = yield _contactSyncService.contactSyncService.performBackgroundSync({
        timeout: syncTimeout
      });
      var duration = Date.now() - startTime;
      expect(duration).toBeLessThan(syncTimeout + 1000);
      expect(result.processed).toBeLessThan(longRunningQueue.length);
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,