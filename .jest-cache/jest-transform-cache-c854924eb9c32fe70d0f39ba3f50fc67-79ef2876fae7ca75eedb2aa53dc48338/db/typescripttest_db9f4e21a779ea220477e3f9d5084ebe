646816b411e1465afe16e6e19e62043c
var _child_process = require("child_process");
var fs = _interopRequireWildcard(require("fs"));
var path = _interopRequireWildcard(require("path"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
describe('TypeScript Configuration', function () {
  var projectRoot = path.resolve(__dirname, '../..');
  describe('TypeScript Setup', function () {
    test('should have TypeScript configuration', function () {
      var tsconfigPath = path.join(projectRoot, 'tsconfig.json');
      expect(fs.existsSync(tsconfigPath)).toBe(true);
      var tsconfig = JSON.parse(fs.readFileSync(tsconfigPath, 'utf8'));
      expect(tsconfig.extends).toBeDefined();
      expect(tsconfig.include).toBeDefined();
      expect(tsconfig.exclude).toBeDefined();
    });
    test.skip('should compile TypeScript without errors', function () {
      expect(function () {
        (0, _child_process.execSync)('npx tsc --noEmit', {
          cwd: projectRoot,
          stdio: 'pipe'
        });
      }).not.toThrow();
    });
    test('should extend React Native TypeScript configuration', function () {
      var tsconfigPath = path.join(projectRoot, 'tsconfig.json');
      var tsconfig = JSON.parse(fs.readFileSync(tsconfigPath, 'utf8'));
      expect(tsconfig.extends).toBe('@react-native/typescript-config');
      expect(tsconfig.include).toContain('**/*.ts');
      expect(tsconfig.include).toContain('**/*.tsx');
    });
    test('should include React Native types', function () {
      var packageJsonPath = path.join(projectRoot, 'package.json');
      var packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
      expect(packageJson.devDependencies['@types/react']).toBeDefined();
      expect(packageJson.devDependencies.typescript).toBeDefined();
    });
  });
  describe('Type Definitions', function () {
    test('should have environment type definitions if src/types exists', function () {
      var typesDir = path.join(projectRoot, 'src/types');
      if (fs.existsSync(typesDir)) {
        var envTypesPath = path.join(typesDir, 'env.d.ts');
        if (fs.existsSync(envTypesPath)) {
          var envTypes = fs.readFileSync(envTypesPath, 'utf8');
          expect(envTypes).toContain('react-native-config');
        }
      }
      expect(true).toBe(true);
    });
    test('should validate Redux types if store exists', function () {
      var storePath = path.join(projectRoot, 'src/store/store.ts');
      var hooksPath = path.join(projectRoot, 'src/store/hooks.ts');
      if (fs.existsSync(storePath) && fs.existsSync(hooksPath)) {
        var storeContent = fs.readFileSync(storePath, 'utf8');
        expect(storeContent).toContain('RootState');
        expect(storeContent).toContain('AppDispatch');
      } else {
        expect(true).toBe(true);
      }
    });
  });
  describe('Import Resolution', function () {
    test('should resolve React Native imports', function () {
      var appPath = path.join(projectRoot, 'App.tsx');
      if (fs.existsSync(appPath)) {
        var appContent = fs.readFileSync(appPath, 'utf8');
        expect(appContent).toContain('@react-navigation/native');
        expect(appContent).toContain('react-native-paper');
        expect(appContent).toContain('react-redux');
      } else {
        expect(true).toBe(true);
      }
    });
    test('should resolve local imports if they exist', function () {
      var appPath = path.join(projectRoot, 'App.tsx');
      if (fs.existsSync(appPath)) {
        var appContent = fs.readFileSync(appPath, 'utf8');
        expect(appContent.includes('./src/') || appContent.includes('src/')).toBe(true);
      } else {
        expect(true).toBe(true);
      }
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,