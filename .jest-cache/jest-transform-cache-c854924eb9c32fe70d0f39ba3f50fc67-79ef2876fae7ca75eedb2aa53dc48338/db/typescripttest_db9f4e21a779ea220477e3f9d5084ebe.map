{"version":3,"names":["_child_process","require","fs","_interopRequireWildcard","path","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","_t","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","describe","projectRoot","resolve","__dirname","test","tsconfigPath","join","expect","existsSync","toBe","tsconfig","JSON","parse","readFileSync","extends","toBeDefined","include","exclude","skip","execSync","cwd","stdio","not","toThrow","toContain","packageJsonPath","packageJson","devDependencies","typescript","typesDir","envTypesPath","envTypes","storePath","hooksPath","storeContent","appPath","appContent","includes"],"sources":["typescript.test.ts"],"sourcesContent":["/**\n * TypeScript Configuration Tests\n *\n * This test suite validates TypeScript setup, configuration, and type safety\n * for the React Native project. It ensures proper TypeScript compilation,\n * type definitions, import resolution, and integration with React Native.\n *\n * What these tests verify:\n * - TypeScript configuration file and compiler settings\n * - React Native TypeScript integration and type definitions\n * - Type definition files for environment variables and external modules\n * - Import resolution for both third-party and local modules\n * - TypeScript compilation process (when enabled)\n * - Proper extends configuration using React Native presets\n *\n * These tests help maintain type safety and catch TypeScript configuration issues.\n */\n\nimport { execSync } from 'child_process';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\ndescribe('TypeScript Configuration', () => {\n  const projectRoot = path.resolve(__dirname, '../..');\n\n  // Test Group: TypeScript Setup\n  // Validates basic TypeScript configuration and compiler setup\n  describe('TypeScript Setup', () => {\n    // Test: TypeScript Configuration File\n    // Checks that tsconfig.json exists with proper structure (extends, include, exclude)\n    test('should have TypeScript configuration', () => {\n      const tsconfigPath = path.join(projectRoot, 'tsconfig.json');\n      expect(fs.existsSync(tsconfigPath)).toBe(true);\n\n      const tsconfig = JSON.parse(fs.readFileSync(tsconfigPath, 'utf8'));\n      expect(tsconfig.extends).toBeDefined();\n      expect(tsconfig.include).toBeDefined();\n      expect(tsconfig.exclude).toBeDefined();\n    });\n\n    // Test: TypeScript Compilation (Skipped - Resource Intensive)\n    // This test would run tsc --noEmit to validate all TypeScript code compiles\n    // Skipped by default as it requires full type checking and can be slow\n    // eslint-disable-next-line jest/no-disabled-tests\n    test.skip('should compile TypeScript without errors', () => {\n      expect(() => {\n        execSync('npx tsc --noEmit', {\n          cwd: projectRoot,\n          stdio: 'pipe',\n        });\n      }).not.toThrow();\n    });\n\n    // Test: React Native TypeScript Configuration Extension\n    // Verifies that the project extends React Native's TypeScript configuration preset\n    test('should extend React Native TypeScript configuration', () => {\n      const tsconfigPath = path.join(projectRoot, 'tsconfig.json');\n      const tsconfig = JSON.parse(fs.readFileSync(tsconfigPath, 'utf8'));\n\n      expect(tsconfig.extends).toBe('@react-native/typescript-config');\n      expect(tsconfig.include).toContain('**/*.ts');\n      expect(tsconfig.include).toContain('**/*.tsx');\n    });\n\n    // Test: React Native Type Dependencies\n    // Ensures required TypeScript and React type definition packages are installed\n    test('should include React Native types', () => {\n      const packageJsonPath = path.join(projectRoot, 'package.json');\n      const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));\n\n      expect(packageJson.devDependencies['@types/react']).toBeDefined();\n      expect(packageJson.devDependencies.typescript).toBeDefined();\n    });\n  });\n\n  // Test Group: Type Definitions\n  // Validates custom type definition files for the project\n  describe('Type Definitions', () => {\n    // Test: Environment Type Definitions (Optional)\n    // Checks for environment variable type definitions when src/types directory exists\n    test('should have environment type definitions if src/types exists', () => {\n      const typesDir = path.join(projectRoot, 'src/types');\n      if (fs.existsSync(typesDir)) {\n        const envTypesPath = path.join(typesDir, 'env.d.ts');\n        if (fs.existsSync(envTypesPath)) {\n          const envTypes = fs.readFileSync(envTypesPath, 'utf8');\n          expect(envTypes).toContain('react-native-config');\n        }\n      }\n      // Test passes if directory doesn't exist (optional)\n      expect(true).toBe(true);\n    });\n\n    // Test: Redux Type Definitions (Optional)\n    // Validates Redux store type definitions when store files exist\n    test('should validate Redux types if store exists', () => {\n      const storePath = path.join(projectRoot, 'src/store/store.ts');\n      const hooksPath = path.join(projectRoot, 'src/store/hooks.ts');\n\n      if (fs.existsSync(storePath) && fs.existsSync(hooksPath)) {\n        const storeContent = fs.readFileSync(storePath, 'utf8');\n        expect(storeContent).toContain('RootState');\n        expect(storeContent).toContain('AppDispatch');\n      } else {\n        // Test passes if files don't exist (optional)\n        expect(true).toBe(true);\n      }\n    });\n  });\n\n  // Test Group: Import Resolution\n  // Validates TypeScript import resolution for both external and local modules\n  describe('Import Resolution', () => {\n    // Test: React Native Import Resolution\n    // Checks that React Native and third-party package imports resolve correctly\n    test('should resolve React Native imports', () => {\n      const appPath = path.join(projectRoot, 'App.tsx');\n      if (fs.existsSync(appPath)) {\n        const appContent = fs.readFileSync(appPath, 'utf8');\n\n        expect(appContent).toContain('@react-navigation/native');\n        expect(appContent).toContain('react-native-paper');\n        expect(appContent).toContain('react-redux');\n      } else {\n        expect(true).toBe(true); // Pass if App.tsx doesn't exist\n      }\n    });\n\n    // Test: Local Import Resolution\n    // Validates that local module imports (./src/ or src/) resolve properly\n    test('should resolve local imports if they exist', () => {\n      const appPath = path.join(projectRoot, 'App.tsx');\n      if (fs.existsSync(appPath)) {\n        const appContent = fs.readFileSync(appPath, 'utf8');\n\n        // Check if imports exist, but don't require specific ones\n        expect(\n          appContent.includes('./src/') || appContent.includes('src/'),\n        ).toBe(true);\n      } else {\n        expect(true).toBe(true); // Pass if App.tsx doesn't exist\n      }\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}