d04a3ca42ff0bbcf9e9993eb3599f1b0
_getJestObj().mock('../../src/services/imagePickerService');
_getJestObj().mock('../../src/hooks/useProfile');
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _CreateProfileScreen = _interopRequireDefault(require("../../src/screens/profile/CreateProfileScreen"));
var _imagePickerService = require("../../src/services/imagePickerService");
var _useProfile = require("../../src/hooks/useProfile");
var _testUtils = require("../utils/testUtils");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('CreateProfileScreen', function () {
  var mockImagePickerService;
  var mockUseProfile;
  var mockAlertSpy;
  var defaultProfileHook = {
    createProfile: jest.fn(),
    uploadProfilePhoto: jest.fn(),
    loading: false,
    error: null
  };
  beforeEach(function () {
    (0, _testUtils.setupMocks)();
    mockImagePickerService = _imagePickerService.imagePickerService;
    mockUseProfile = _useProfile.useProfile;
    mockAlertSpy = _reactNative2.Alert.alert;
    mockUseProfile.mockReturnValue(defaultProfileHook);
    mockImagePickerService.pickImage.mockResolvedValue({
      success: true,
      image: {
        uri: 'file://test-image.jpg',
        type: 'image/jpeg',
        name: 'test-image.jpg',
        size: 1024,
        width: 400,
        height: 400
      }
    });
    mockImagePickerService.validateImage.mockReturnValue({
      valid: true
    });
  });
  afterEach(function () {
    (0, _testUtils.teardownMocks)();
    jest.clearAllMocks();
  });
  describe('Form Rendering', function () {
    it('should render profile creation form', function () {
      var _renderWithProviders = (0, _testUtils.renderWithProviders)((0, _jsxRuntime.jsx)(_CreateProfileScreen.default, {}), {
          withNavigation: true
        }),
        getByText = _renderWithProviders.getByText,
        getByPlaceholderText = _renderWithProviders.getByPlaceholderText;
      expect(getByText('Create Your Profile')).toBeTruthy();
      expect(getByPlaceholderText('Full Name')).toBeTruthy();
      expect(getByPlaceholderText('Job Title')).toBeTruthy();
      expect(getByPlaceholderText('Company')).toBeTruthy();
    });
    it('should render step indicators', function () {
      var _renderWithProviders2 = (0, _testUtils.renderWithProviders)((0, _jsxRuntime.jsx)(_CreateProfileScreen.default, {}), {
          withNavigation: true
        }),
        getByText = _renderWithProviders2.getByText;
      expect(getByText('Step 1 of 5')).toBeTruthy();
    });
    it('should render progress indicator', function () {
      var _renderWithProviders3 = (0, _testUtils.renderWithProviders)((0, _jsxRuntime.jsx)(_CreateProfileScreen.default, {}), {
          withNavigation: true
        }),
        getByTestId = _renderWithProviders3.getByTestId;
      var progressIndicator = getByTestId('progress-indicator');
      expect(progressIndicator).toBeTruthy();
    });
  });
  describe('Form Validation', function () {
    it('should validate required fields', (0, _asyncToGenerator2.default)(function* () {
      var _renderWithProviders4 = (0, _testUtils.renderWithProviders)((0, _jsxRuntime.jsx)(_CreateProfileScreen.default, {}), {
          withNavigation: true
        }),
        getByText = _renderWithProviders4.getByText,
        getByTestId = _renderWithProviders4.getByTestId;
      var nextButton = getByText('Next');
      _reactNative.fireEvent.press(nextButton);
      yield (0, _reactNative.waitFor)(function () {
        expect(mockAlertSpy).toHaveBeenCalledWith('Validation Error', 'Please complete all required fields correctly.');
      });
    }));
    it('should validate email format', (0, _asyncToGenerator2.default)(function* () {
      var _renderWithProviders5 = (0, _testUtils.renderWithProviders)((0, _jsxRuntime.jsx)(_CreateProfileScreen.default, {}), {
          withNavigation: true
        }),
        getByPlaceholderText = _renderWithProviders5.getByPlaceholderText,
        getByText = _renderWithProviders5.getByText;
      _reactNative.fireEvent.changeText(getByPlaceholderText('Full Name'), 'Test User');
      _reactNative.fireEvent.changeText(getByPlaceholderText('Job Title'), 'Developer');
      _reactNative.fireEvent.changeText(getByPlaceholderText('Company'), 'Test Company');
      _reactNative.fireEvent.press(getByText('Next'));
      _reactNative.fireEvent.press(getByText('Next'));
      _reactNative.fireEvent.changeText(getByPlaceholderText('Email'), 'invalid-email');
      _reactNative.fireEvent.press(getByText('Next'));
      yield (0, _reactNative.waitFor)(function () {
        expect(mockAlertSpy).toHaveBeenCalledWith('Validation Error', 'Please complete all required fields correctly.');
      });
    }));
    it('should validate phone number format', (0, _asyncToGenerator2.default)(function* () {
      var _renderWithProviders6 = (0, _testUtils.renderWithProviders)((0, _jsxRuntime.jsx)(_CreateProfileScreen.default, {}), {
          withNavigation: true
        }),
        getByPlaceholderText = _renderWithProviders6.getByPlaceholderText,
        getByText = _renderWithProviders6.getByText;
      _reactNative.fireEvent.changeText(getByPlaceholderText('Full Name'), 'Test User');
      _reactNative.fireEvent.changeText(getByPlaceholderText('Job Title'), 'Developer');
      _reactNative.fireEvent.changeText(getByPlaceholderText('Company'), 'Test Company');
      _reactNative.fireEvent.press(getByText('Next'));
      _reactNative.fireEvent.press(getByText('Next'));
      _reactNative.fireEvent.changeText(getByPlaceholderText('Email'), 'test@example.com');
      _reactNative.fireEvent.changeText(getByPlaceholderText('Phone'), '123');
      var phoneInput = getByPlaceholderText('Phone');
      expect(phoneInput.props.value).toBe('123');
    }));
    it('should validate skills input', (0, _asyncToGenerator2.default)(function* () {
      var _renderWithProviders7 = (0, _testUtils.renderWithProviders)((0, _jsxRuntime.jsx)(_CreateProfileScreen.default, {}), {
          withNavigation: true
        }),
        getByPlaceholderText = _renderWithProviders7.getByPlaceholderText,
        getByText = _renderWithProviders7.getByText;
      var steps = ['Next', 'Next', 'Next', 'Next'];
      for (var step of steps) {
        _reactNative.fireEvent.press(getByText(step));
      }
      _reactNative.fireEvent.press(getByText('Submit'));
      yield (0, _reactNative.waitFor)(function () {
        expect(mockAlertSpy).toHaveBeenCalledWith('Validation Error', 'Please complete all required fields correctly.');
      });
    }));
  });
  describe('Form Navigation', function () {
    it('should navigate between form steps', function () {
      var _renderWithProviders8 = (0, _testUtils.renderWithProviders)((0, _jsxRuntime.jsx)(_CreateProfileScreen.default, {}), {
          withNavigation: true
        }),
        getByText = _renderWithProviders8.getByText,
        queryByText = _renderWithProviders8.queryByText;
      expect(getByText('Basic Info')).toBeTruthy();
      var nameInput = getByText('Full Name');
      _reactNative.fireEvent.changeText(nameInput, 'Test User');
      _reactNative.fireEvent.press(getByText('Next'));
      expect(getByText('Photo')).toBeTruthy();
      _reactNative.fireEvent.press(getByText('Previous'));
      expect(getByText('Basic Info')).toBeTruthy();
    });
    it('should prevent navigation to next step without required data', function () {
      var _renderWithProviders9 = (0, _testUtils.renderWithProviders)((0, _jsxRuntime.jsx)(_CreateProfileScreen.default, {}), {
          withNavigation: true
        }),
        getByText = _renderWithProviders9.getByText;
      var nextButton = getByText('Next');
      _reactNative.fireEvent.press(nextButton);
      expect(getByText('Basic Info')).toBeTruthy();
    });
    it('should show correct step titles', function () {
      var _renderWithProviders0 = (0, _testUtils.renderWithProviders)((0, _jsxRuntime.jsx)(_CreateProfileScreen.default, {}), {
          withNavigation: true
        }),
        getByText = _renderWithProviders0.getByText;
      var stepTitles = ['Basic Info', 'Photo', 'Contact', 'Social Links', 'Skills'];
      stepTitles.forEach(function (title, index) {
        expect(getByText(title)).toBeTruthy();
        if (index < stepTitles.length - 1) {
          if (index === 0) {
            _reactNative.fireEvent.changeText(getByText('Full Name'), 'Test');
            _reactNative.fireEvent.changeText(getByText('Job Title'), 'Test');
            _reactNative.fireEvent.changeText(getByText('Company'), 'Test');
          }
          _reactNative.fireEvent.press(getByText('Next'));
        }
      });
    });
  });
  describe('Photo Upload', function () {
    it('should handle photo selection', (0, _asyncToGenerator2.default)(function* () {
      var _renderWithProviders1 = (0, _testUtils.renderWithProviders)((0, _jsxRuntime.jsx)(_CreateProfileScreen.default, {}), {
          withNavigation: true
        }),
        getByText = _renderWithProviders1.getByText,
        getByTestId = _renderWithProviders1.getByTestId;
      _reactNative.fireEvent.press(getByText('Next'));
      var photoButton = getByTestId('photo-upload-button');
      _reactNative.fireEvent.press(photoButton);
      yield (0, _reactNative.waitFor)(function () {
        expect(mockImagePickerService.pickImage).toHaveBeenCalledWith('both', expect.objectContaining({
          quality: 0.8,
          maxWidth: 400,
          maxHeight: 400,
          cropping: true
        }));
      });
    }));
    it('should handle photo validation failure', (0, _asyncToGenerator2.default)(function* () {
      mockImagePickerService.validateImage.mockReturnValue({
        valid: false,
        error: 'Image file is too large'
      });
      var _renderWithProviders10 = (0, _testUtils.renderWithProviders)((0, _jsxRuntime.jsx)(_CreateProfileScreen.default, {}), {
          withNavigation: true
        }),
        getByText = _renderWithProviders10.getByText,
        getByTestId = _renderWithProviders10.getByTestId;
      _reactNative.fireEvent.press(getByText('Next'));
      var photoButton = getByTestId('photo-upload-button');
      _reactNative.fireEvent.press(photoButton);
      yield (0, _reactNative.waitFor)(function () {
        expect(mockAlertSpy).toHaveBeenCalledWith('Invalid Image', 'Image file is too large');
      });
    }));
    it('should handle photo upload error', (0, _asyncToGenerator2.default)(function* () {
      mockImagePickerService.pickImage.mockResolvedValue({
        success: false,
        error: 'Camera not available',
        cancelled: false
      });
      var _renderWithProviders11 = (0, _testUtils.renderWithProviders)((0, _jsxRuntime.jsx)(_CreateProfileScreen.default, {}), {
          withNavigation: true
        }),
        getByText = _renderWithProviders11.getByText,
        getByTestId = _renderWithProviders11.getByTestId;
      _reactNative.fireEvent.press(getByText('Next'));
      var photoButton = getByTestId('photo-upload-button');
      _reactNative.fireEvent.press(photoButton);
      yield (0, _reactNative.waitFor)(function () {
        expect(mockAlertSpy).toHaveBeenCalledWith('Error', 'Camera not available');
      });
    }));
    it('should handle photo removal', (0, _asyncToGenerator2.default)(function* () {
      var _renderWithProviders12 = (0, _testUtils.renderWithProviders)((0, _jsxRuntime.jsx)(_CreateProfileScreen.default, {}), {
          withNavigation: true
        }),
        getByText = _renderWithProviders12.getByText,
        getByTestId = _renderWithProviders12.getByTestId;
      _reactNative.fireEvent.press(getByText('Next'));
      var photoButton = getByTestId('photo-upload-button');
      _reactNative.fireEvent.press(photoButton);
      yield (0, _reactNative.waitFor)(function () {
        expect(mockImagePickerService.pickImage).toHaveBeenCalled();
      });
      var removeButton = getByTestId('photo-remove-button');
      _reactNative.fireEvent.press(removeButton);
      yield (0, _reactNative.waitFor)(function () {
        expect(mockAlertSpy).toHaveBeenCalledWith('Remove Photo', 'Are you sure you want to remove your profile photo?', expect.arrayContaining([expect.objectContaining({
          text: 'Cancel'
        }), expect.objectContaining({
          text: 'Remove'
        })]));
      });
    }));
  });
  describe('Form Submission', function () {
    var fillCompleteForm = function fillCompleteForm(getByPlaceholderText, getByText) {
      _reactNative.fireEvent.changeText(getByPlaceholderText('Full Name'), 'John Doe');
      _reactNative.fireEvent.changeText(getByPlaceholderText('Job Title'), 'Software Engineer');
      _reactNative.fireEvent.changeText(getByPlaceholderText('Company'), 'Tech Corp');
      _reactNative.fireEvent.press(getByText('Next'));
      _reactNative.fireEvent.press(getByText('Next'));
      _reactNative.fireEvent.changeText(getByPlaceholderText('Email'), 'john@example.com');
      _reactNative.fireEvent.press(getByText('Next'));
      _reactNative.fireEvent.press(getByText('Next'));
      _reactNative.fireEvent.changeText(getByPlaceholderText('Add a skill'), 'React');
      _reactNative.fireEvent.press(getByText('Add'));
    };
    it('should handle successful profile creation', (0, _asyncToGenerator2.default)(function* () {
      var mockCreateProfile = jest.fn().mockResolvedValue({
        success: true,
        profile: _testUtils.mockUser
      });
      mockUseProfile.mockReturnValue(Object.assign({}, defaultProfileHook, {
        createProfile: mockCreateProfile
      }));
      var _renderWithProviders13 = (0, _testUtils.renderWithProviders)((0, _jsxRuntime.jsx)(_CreateProfileScreen.default, {}), {
          withNavigation: true
        }),
        getByPlaceholderText = _renderWithProviders13.getByPlaceholderText,
        getByText = _renderWithProviders13.getByText;
      fillCompleteForm(getByPlaceholderText, getByText);
      _reactNative.fireEvent.press(getByText('Submit'));
      yield (0, _reactNative.waitFor)(function () {
        expect(mockCreateProfile).toHaveBeenCalledWith(expect.objectContaining({
          name: 'John Doe',
          title: 'Software Engineer',
          company: 'Tech Corp',
          email: 'john@example.com',
          skills: ['React']
        }));
      });
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText('Profile Created!')).toBeTruthy();
      });
    }));
    it('should handle profile creation failure', (0, _asyncToGenerator2.default)(function* () {
      var mockCreateProfile = jest.fn().mockResolvedValue({
        success: false,
        message: 'Failed to create profile'
      });
      mockUseProfile.mockReturnValue(Object.assign({}, defaultProfileHook, {
        createProfile: mockCreateProfile
      }));
      var _renderWithProviders14 = (0, _testUtils.renderWithProviders)((0, _jsxRuntime.jsx)(_CreateProfileScreen.default, {}), {
          withNavigation: true
        }),
        getByPlaceholderText = _renderWithProviders14.getByPlaceholderText,
        getByText = _renderWithProviders14.getByText;
      fillCompleteForm(getByPlaceholderText, getByText);
      _reactNative.fireEvent.press(getByText('Submit'));
      yield (0, _reactNative.waitFor)(function () {
        expect(mockAlertSpy).toHaveBeenCalledWith('Error', 'Failed to create profile. Please try again.');
      });
    }));
    it('should handle photo upload during submission', (0, _asyncToGenerator2.default)(function* () {
      var mockUploadProfilePhoto = jest.fn().mockResolvedValue({
        success: true,
        photoUrl: 'https://example.com/photo.jpg'
      });
      var mockCreateProfile = jest.fn().mockResolvedValue({
        success: true,
        profile: _testUtils.mockUser
      });
      mockUseProfile.mockReturnValue(Object.assign({}, defaultProfileHook, {
        createProfile: mockCreateProfile,
        uploadProfilePhoto: mockUploadProfilePhoto
      }));
      var _renderWithProviders15 = (0, _testUtils.renderWithProviders)((0, _jsxRuntime.jsx)(_CreateProfileScreen.default, {}), {
          withNavigation: true
        }),
        getByPlaceholderText = _renderWithProviders15.getByPlaceholderText,
        getByText = _renderWithProviders15.getByText,
        getByTestId = _renderWithProviders15.getByTestId;
      _reactNative.fireEvent.changeText(getByPlaceholderText('Full Name'), 'John Doe');
      _reactNative.fireEvent.changeText(getByPlaceholderText('Job Title'), 'Software Engineer');
      _reactNative.fireEvent.changeText(getByPlaceholderText('Company'), 'Tech Corp');
      _reactNative.fireEvent.press(getByText('Next'));
      var photoButton = getByTestId('photo-upload-button');
      _reactNative.fireEvent.press(photoButton);
      yield (0, _reactNative.waitFor)(function () {
        expect(mockImagePickerService.pickImage).toHaveBeenCalled();
      });
      fillCompleteForm(getByPlaceholderText, getByText);
      _reactNative.fireEvent.press(getByText('Submit'));
      yield (0, _reactNative.waitFor)(function () {
        expect(mockUploadProfilePhoto).toHaveBeenCalled();
        expect(mockCreateProfile).toHaveBeenCalledWith(expect.objectContaining({
          profilePhoto: 'https://example.com/photo.jpg'
        }));
      });
    }));
    it('should handle photo upload failure during submission', (0, _asyncToGenerator2.default)(function* () {
      var mockUploadProfilePhoto = jest.fn().mockResolvedValue({
        success: false,
        message: 'Photo upload failed'
      });
      mockUseProfile.mockReturnValue(Object.assign({}, defaultProfileHook, {
        uploadProfilePhoto: mockUploadProfilePhoto
      }));
      var _renderWithProviders16 = (0, _testUtils.renderWithProviders)((0, _jsxRuntime.jsx)(_CreateProfileScreen.default, {}), {
          withNavigation: true
        }),
        getByPlaceholderText = _renderWithProviders16.getByPlaceholderText,
        getByText = _renderWithProviders16.getByText,
        getByTestId = _renderWithProviders16.getByTestId;
      _reactNative.fireEvent.press(getByText('Next'));
      _reactNative.fireEvent.press(getByTestId('photo-upload-button'));
      fillCompleteForm(getByPlaceholderText, getByText);
      _reactNative.fireEvent.press(getByText('Submit'));
      yield (0, _reactNative.waitFor)(function () {
        expect(mockAlertSpy).toHaveBeenCalledWith('Upload Error', 'Failed to upload profile photo. Please try again.');
      });
    }));
  });
  describe('Loading States', function () {
    it('should show loading indicator during submission', (0, _asyncToGenerator2.default)(function* () {
      var mockCreateProfile = jest.fn(function () {
        return new Promise(function (resolve) {
          return setTimeout(resolve, 1000);
        });
      });
      mockUseProfile.mockReturnValue(Object.assign({}, defaultProfileHook, {
        createProfile: mockCreateProfile
      }));
      var _renderWithProviders17 = (0, _testUtils.renderWithProviders)((0, _jsxRuntime.jsx)(_CreateProfileScreen.default, {}), {
          withNavigation: true
        }),
        getByPlaceholderText = _renderWithProviders17.getByPlaceholderText,
        getByText = _renderWithProviders17.getByText,
        getByTestId = _renderWithProviders17.getByTestId;
      fillCompleteForm(getByPlaceholderText, getByText);
      _reactNative.fireEvent.press(getByText('Submit'));
      expect(getByTestId('loading-overlay')).toBeTruthy();
    }));
    it('should disable submit button during loading', (0, _asyncToGenerator2.default)(function* () {
      mockUseProfile.mockReturnValue(Object.assign({}, defaultProfileHook, {
        loading: true
      }));
      var _renderWithProviders18 = (0, _testUtils.renderWithProviders)((0, _jsxRuntime.jsx)(_CreateProfileScreen.default, {}), {
          withNavigation: true
        }),
        getByText = _renderWithProviders18.getByText;
      var submitButton = getByText('Submit');
      expect(submitButton.props.disabled).toBe(true);
    }));
  });
  describe('Error Handling', function () {
    it('should display error message', function () {
      mockUseProfile.mockReturnValue(Object.assign({}, defaultProfileHook, {
        error: 'Network error occurred'
      }));
      var _renderWithProviders19 = (0, _testUtils.renderWithProviders)((0, _jsxRuntime.jsx)(_CreateProfileScreen.default, {}), {
          withNavigation: true
        }),
        getByText = _renderWithProviders19.getByText;
      expect(getByText('Network error occurred')).toBeTruthy();
    });
    it('should handle unexpected errors gracefully', (0, _asyncToGenerator2.default)(function* () {
      var mockCreateProfile = jest.fn().mockRejectedValue(new Error('Unexpected error'));
      mockUseProfile.mockReturnValue(Object.assign({}, defaultProfileHook, {
        createProfile: mockCreateProfile
      }));
      var _renderWithProviders20 = (0, _testUtils.renderWithProviders)((0, _jsxRuntime.jsx)(_CreateProfileScreen.default, {}), {
          withNavigation: true
        }),
        getByPlaceholderText = _renderWithProviders20.getByPlaceholderText,
        getByText = _renderWithProviders20.getByText;
      fillCompleteForm(getByPlaceholderText, getByText);
      _reactNative.fireEvent.press(getByText('Submit'));
      yield (0, _reactNative.waitFor)(function () {
        expect(mockAlertSpy).toHaveBeenCalledWith('Error', 'An unexpected error occurred. Please try again.');
      });
    }));
  });
  describe('Accessibility', function () {
    it('should have accessible labels', function () {
      var _renderWithProviders21 = (0, _testUtils.renderWithProviders)((0, _jsxRuntime.jsx)(_CreateProfileScreen.default, {}), {
          withNavigation: true
        }),
        getByLabelText = _renderWithProviders21.getByLabelText;
      expect(getByLabelText('Full Name')).toBeTruthy();
      expect(getByLabelText('Job Title')).toBeTruthy();
      expect(getByLabelText('Company')).toBeTruthy();
    });
    it('should have accessible form navigation', function () {
      var _renderWithProviders22 = (0, _testUtils.renderWithProviders)((0, _jsxRuntime.jsx)(_CreateProfileScreen.default, {}), {
          withNavigation: true
        }),
        getByRole = _renderWithProviders22.getByRole;
      var nextButton = getByRole('button', {
        name: 'Next'
      });
      expect(nextButton.props.accessibilityLabel).toBeTruthy();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,