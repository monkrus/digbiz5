2cf4f446437be6947168d7eeb32e776f
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useNavigationCache = useNavigationCache;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _routers = require("@react-navigation/routers");
var React = _interopRequireWildcard(require("react"));
var _NavigationBuilderContext = require("./NavigationBuilderContext.js");
var _excluded = ["emit"];
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function useNavigationCache(_ref) {
  var state = _ref.state,
    getState = _ref.getState,
    navigation = _ref.navigation,
    _setOptions = _ref.setOptions,
    router = _ref.router,
    emitter = _ref.emitter;
  var _React$useContext = React.useContext(_NavigationBuilderContext.NavigationBuilderContext),
    stackRef = _React$useContext.stackRef;
  var base = React.useMemo(function () {
    var emit = navigation.emit,
      rest = (0, _objectWithoutProperties2.default)(navigation, _excluded);
    var actions = Object.assign({}, router.actionCreators, _routers.CommonActions);
    var dispatch = function dispatch() {
      throw new Error('Actions cannot be dispatched from a placeholder screen.');
    };
    var helpers = Object.keys(actions).reduce(function (acc, name) {
      acc[name] = dispatch;
      return acc;
    }, {});
    return Object.assign({}, rest, helpers, {
      addListener: function addListener() {
        return function () {};
      },
      removeListener: function removeListener() {},
      dispatch: dispatch,
      getParent: function getParent(id) {
        if (id !== undefined && id === rest.getId()) {
          return base;
        }
        return rest.getParent(id);
      },
      setOptions: function setOptions() {
        throw new Error('Options cannot be set from a placeholder screen.');
      },
      isFocused: function isFocused() {
        return false;
      }
    });
  }, [navigation, router.actionCreators]);
  var cache = React.useMemo(function () {
    return {
      current: {}
    };
  }, [base, getState, navigation, _setOptions, emitter]);
  cache.current = state.routes.reduce(function (acc, route) {
    var previous = cache.current[route.key];
    if (previous) {
      acc[route.key] = previous;
    } else {
      var _dispatch = function dispatch(thunk) {
        var action = typeof thunk === 'function' ? thunk(getState()) : thunk;
        if (action != null) {
          navigation.dispatch(Object.assign({
            source: route.key
          }, action));
        }
      };
      var withStack = function withStack(callback) {
        var isStackSet = false;
        try {
          if (process.env.NODE_ENV !== 'production' && stackRef && !stackRef.current) {
            stackRef.current = new Error().stack;
            isStackSet = true;
          }
          callback();
        } finally {
          if (isStackSet && stackRef) {
            stackRef.current = undefined;
          }
        }
      };
      var actions = Object.assign({}, router.actionCreators, _routers.CommonActions);
      var helpers = Object.keys(actions).reduce(function (acc, name) {
        acc[name] = function () {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          return withStack(function () {
            return (_dispatch(actions[name].apply(actions, args))
            );
          });
        };
        return acc;
      }, {});
      acc[route.key] = Object.assign({}, base, helpers, emitter.create(route.key), {
        dispatch: function dispatch(thunk) {
          return withStack(function () {
            return _dispatch(thunk);
          });
        },
        getParent: function getParent(id) {
          if (id !== undefined && id === base.getId()) {
            return acc[route.key];
          }
          return base.getParent(id);
        },
        setOptions: function setOptions(options) {
          _setOptions(function (o) {
            return Object.assign({}, o, (0, _defineProperty2.default)({}, route.key, Object.assign({}, o[route.key], options)));
          });
        },
        isFocused: function isFocused() {
          var state = base.getState();
          if (state.routes[state.index].key !== route.key) {
            return false;
          }
          return navigation ? navigation.isFocused() : true;
        }
      });
    }
    return acc;
  }, {});
  return {
    base: base,
    navigations: cache.current
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,