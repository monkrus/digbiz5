4c0fb6a5724e281d502ab8e70a5fc2fa
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createJavaScriptFlagGetter = createJavaScriptFlagGetter;
exports.createNativeFlagGetter = createNativeFlagGetter;
exports.getOverrides = getOverrides;
exports.setOverrides = setOverrides;
var _NativeReactNativeFeatureFlags = _interopRequireDefault(require("./specs/NativeReactNativeFeatureFlags"));
var accessedFeatureFlags = new Set();
var overrides;
function createGetter(configName, customValueGetter, defaultValue) {
  var cachedValue;
  return function () {
    if (cachedValue == null) {
      var _customValueGetter;
      cachedValue = (_customValueGetter = customValueGetter()) != null ? _customValueGetter : defaultValue;
    }
    return cachedValue;
  };
}
function createJavaScriptFlagGetter(configName, defaultValue) {
  return createGetter(configName, function () {
    var _overrides, _overrides$configName;
    accessedFeatureFlags.add(configName);
    return (_overrides = overrides) == null || (_overrides$configName = _overrides[configName]) == null ? void 0 : _overrides$configName.call(_overrides, defaultValue);
  }, defaultValue);
}
function createNativeFlagGetter(configName, defaultValue) {
  var skipUnavailableNativeModuleError = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  return createGetter(configName, function () {
    var _NativeReactNativeFea;
    maybeLogUnavailableNativeModuleError(configName);
    return _NativeReactNativeFeatureFlags.default == null || (_NativeReactNativeFea = _NativeReactNativeFeatureFlags.default[configName]) == null ? void 0 : _NativeReactNativeFea.call(_NativeReactNativeFeatureFlags.default);
  }, defaultValue);
}
function getOverrides() {
  return overrides;
}
function setOverrides(newOverrides) {
  if (overrides != null) {
    throw new Error('Feature flags cannot be overridden more than once');
  }
  if (accessedFeatureFlags.size > 0) {
    var accessedFeatureFlagsStr = Array.from(accessedFeatureFlags).join(', ');
    throw new Error(`Feature flags were accessed before being overridden: ${accessedFeatureFlagsStr}`);
  }
  overrides = newOverrides;
}
var reportedConfigNames = new Set();
var hasTurboModules = global.RN$Bridgeless === true || global.__turboModuleProxy != null;
function maybeLogUnavailableNativeModuleError(configName) {
  if (!_NativeReactNativeFeatureFlags.default && process.env.NODE_ENV !== 'test' && !reportedConfigNames.has(configName) && hasTurboModules) {
    reportedConfigNames.add(configName);
    console.error(`Could not access feature flag '${configName}' because native module method was not available`);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,