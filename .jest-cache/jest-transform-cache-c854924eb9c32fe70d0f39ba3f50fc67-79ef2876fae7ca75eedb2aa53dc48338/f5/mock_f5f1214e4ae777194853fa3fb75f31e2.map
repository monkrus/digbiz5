{"version":3,"names":["mock","moduleRef","factoryRef","undefined","jest","deref","_getJestObj","requireActual","mockFactory","ref","substring"],"sources":["mock.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n * @oncall react_native\n */\n\n/**\n * Mocks the module referenced by `moduleRef` (expected to begin with `m#`)\n * while enforcing type safety of mock factories.\n *\n * If `factoryRef` is provided, it is expected to reference a module that\n * exports the same type signature as the module referenced by `moduleRef`.\n */\nexport default function mock<TModuleRef: $Flow$ModuleRef<mixed>>(\n  moduleRef: TModuleRef,\n  factoryRef?: NoInfer<TModuleRef>,\n): void {\n  // NOTE: Jest's `babel-plugin-jest-hoist` requires that the second argument to\n  // `jest.mock` be an inline function, so structure this code accordingly.\n  if (factoryRef === undefined) {\n    jest.mock(deref(moduleRef));\n  } else {\n    // NOTE: Jest's `babel-plugin-jest-hoist` requires that module factories\n    // only reference local variables or variables starting with \"mock\", so be\n    // careful when renaming this `mockFactory` variable.\n    const mockFactory = deref(factoryRef);\n    jest.mock(deref(moduleRef), () => jest.requireActual(mockFactory));\n  }\n}\n\nfunction deref(ref: $Flow$ModuleRef<mixed>): string {\n  // $FlowIgnore[incompatible-cast]\n  return (ref as string).substring(2);\n}\n"],"mappings":";;;;;;;;;;;;AAkBe,SAASA,IAAIA,CAC1BC,SAAqB,EACrBC,UAAgC,EAC1B;EAGN,IAAIA,UAAU,KAAKC,SAAS,EAAE;IAC5BC,IAAI,CAACJ,IAAI,CAACK,KAAK,CAACJ,SAAS,CAAC,CAAC;EAC7B,CAAC,MAAM;IAKLK,WAAA,GAAKN,IAAI,CAACK,KAAK,CAACJ,SAAS,CAAC,EAAE;MAAA,OAAMG,IAAI,CAACG,aAAa,CAACC,WAAW,CAAC;IAAA,EAAC;IADlE,IAAMA,WAAW,GAAGH,KAAK,CAACH,UAAU,CAAC;EAEvC;AACF;AAEA,SAASG,KAAKA,CAACI,GAA2B,EAAU;EAElD,OAAQA,GAAG,CAAYC,SAAS,CAAC,CAAC,CAAC;AACrC","ignoreList":[]}