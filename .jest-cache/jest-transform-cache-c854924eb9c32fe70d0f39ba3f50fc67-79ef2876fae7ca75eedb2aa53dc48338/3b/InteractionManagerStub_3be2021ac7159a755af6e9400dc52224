6b547c1b1d771e77c719f5dd68616574
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var invariant = require('invariant');
function reject(error) {
  setTimeout(function () {
    throw error;
  }, 0);
}
var InteractionManagerStub = {
  Events: {
    interactionStart: 'interactionStart',
    interactionComplete: 'interactionComplete'
  },
  runAfterInteractions: function runAfterInteractions(task) {
    var immediateID;
    var promise = new Promise(function (resolve) {
      immediateID = setImmediate(function () {
        if (typeof task === 'object' && task !== null) {
          if (typeof task.gen === 'function') {
            task.gen().then(resolve, reject);
          } else if (typeof task.run === 'function') {
            try {
              task.run();
              resolve();
            } catch (error) {
              reject(error);
            }
          } else {
            reject(new TypeError(`Task "${task.name}" missing gen or run.`));
          }
        } else if (typeof task === 'function') {
          try {
            task();
            resolve();
          } catch (error) {
            reject(error);
          }
        } else {
          reject(new TypeError('Invalid task of type: ' + typeof task));
        }
      });
    });
    return {
      then: promise.then.bind(promise),
      cancel: function cancel() {
        clearImmediate(immediateID);
      }
    };
  },
  createInteractionHandle: function createInteractionHandle() {
    return -1;
  },
  clearInteractionHandle: function clearInteractionHandle(handle) {
    invariant(!!handle, 'InteractionManager: Must provide a handle to clear.');
  },
  addListener: function addListener() {
    return {
      remove: function remove() {}
    };
  },
  setDeadline: function setDeadline(deadline) {}
};
var _default = exports.default = InteractionManagerStub;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,