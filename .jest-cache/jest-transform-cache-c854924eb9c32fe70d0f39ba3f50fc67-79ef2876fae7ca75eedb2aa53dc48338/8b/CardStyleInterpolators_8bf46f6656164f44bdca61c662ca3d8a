d9290627476726e09a914a5c37bf22bc
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.forBottomSheetAndroid = forBottomSheetAndroid;
exports.forFadeFromBottomAndroid = forFadeFromBottomAndroid;
exports.forFadeFromCenter = forFadeFromCenter;
exports.forFadeFromRightAndroid = forFadeFromRightAndroid;
exports.forHorizontalIOS = forHorizontalIOS;
exports.forHorizontalIOSInverted = forHorizontalIOSInverted;
exports.forModalPresentationIOS = forModalPresentationIOS;
exports.forNoAnimation = forNoAnimation;
exports.forRevealFromBottomAndroid = forRevealFromBottomAndroid;
exports.forScaleFromCenterAndroid = forScaleFromCenterAndroid;
exports.forVerticalIOS = forVerticalIOS;
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _reactNative = require("react-native");
var _conditional = require("../utils/conditional.js");
var _excluded = ["inverted"];
var add = _reactNative.Animated.add,
  multiply = _reactNative.Animated.multiply;
function forHorizontalIOS(_ref) {
  var current = _ref.current,
    next = _ref.next,
    inverted = _ref.inverted,
    screen = _ref.layouts.screen;
  var translateFocused = multiply(current.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [screen.width, 0],
    extrapolate: 'clamp'
  }), inverted);
  var translateUnfocused = next ? multiply(next.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [0, screen.width * -0.3],
    extrapolate: 'clamp'
  }), inverted) : 0;
  var overlayOpacity = current.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [0, 0.07],
    extrapolate: 'clamp'
  });
  var shadowOpacity = current.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [0, 0.3],
    extrapolate: 'clamp'
  });
  return {
    cardStyle: {
      transform: [{
        translateX: translateFocused
      }, {
        translateX: translateUnfocused
      }]
    },
    overlayStyle: {
      opacity: overlayOpacity
    },
    shadowStyle: {
      shadowOpacity: shadowOpacity
    }
  };
}
function forHorizontalIOSInverted(_ref2) {
  var inverted = _ref2.inverted,
    rest = (0, _objectWithoutProperties2.default)(_ref2, _excluded);
  return forHorizontalIOS(Object.assign({}, rest, {
    inverted: _reactNative.Animated.multiply(inverted, -1)
  }));
}
function forVerticalIOS(_ref3) {
  var current = _ref3.current,
    inverted = _ref3.inverted,
    screen = _ref3.layouts.screen;
  var translateY = multiply(current.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [screen.height, 0],
    extrapolate: 'clamp'
  }), inverted);
  return {
    cardStyle: {
      transform: [{
        translateY: translateY
      }]
    }
  };
}
function forModalPresentationIOS(_ref4) {
  var index = _ref4.index,
    current = _ref4.current,
    next = _ref4.next,
    inverted = _ref4.inverted,
    screen = _ref4.layouts.screen,
    insets = _ref4.insets;
  var hasNotchIos = _reactNative.Platform.OS === 'ios' && !_reactNative.Platform.isPad && !_reactNative.Platform.isTV && insets.top > 20;
  var isLandscape = screen.width > screen.height;
  var topOffset = isLandscape ? 0 : 10;
  var statusBarHeight = insets.top;
  var aspectRatio = screen.height / screen.width;
  var progress = add(current.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [0, 1],
    extrapolate: 'clamp'
  }), next ? next.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [0, 1],
    extrapolate: 'clamp'
  }) : 0);
  var isFirst = index === 0;
  var translateY = multiply(progress.interpolate({
    inputRange: [0, 1, 2],
    outputRange: [screen.height, isFirst ? 0 : topOffset, (isFirst ? statusBarHeight : 0) - topOffset * aspectRatio]
  }), inverted);
  var overlayOpacity = progress.interpolate({
    inputRange: [0, 1, 1.0001, 2],
    outputRange: [0, 0.3, 1, 1]
  });
  var scale = isLandscape ? 1 : progress.interpolate({
    inputRange: [0, 1, 2],
    outputRange: [1, 1, screen.width ? 1 - topOffset * 2 / screen.width : 1]
  });
  var borderRadius = isLandscape ? 0 : isFirst ? progress.interpolate({
    inputRange: [0, 1, 1.0001, 2],
    outputRange: [0, 0, hasNotchIos ? 38 : 0, 10]
  }) : 10;
  return {
    cardStyle: {
      overflow: 'hidden',
      borderTopLeftRadius: borderRadius,
      borderTopRightRadius: borderRadius,
      borderBottomLeftRadius: hasNotchIos ? borderRadius : 0,
      borderBottomRightRadius: hasNotchIos ? borderRadius : 0,
      marginTop: isFirst ? 0 : statusBarHeight,
      marginBottom: isFirst ? 0 : topOffset,
      transform: [{
        translateY: translateY
      }, {
        scale: scale
      }]
    },
    overlayStyle: {
      opacity: overlayOpacity
    }
  };
}
function forFadeFromBottomAndroid(_ref5) {
  var current = _ref5.current,
    inverted = _ref5.inverted,
    screen = _ref5.layouts.screen,
    closing = _ref5.closing;
  var translateY = multiply(current.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [screen.height * 0.08, 0],
    extrapolate: 'clamp'
  }), inverted);
  var opacity = (0, _conditional.conditional)(closing, current.progress, current.progress.interpolate({
    inputRange: [0, 0.5, 0.9, 1],
    outputRange: [0, 0.25, 0.7, 1],
    extrapolate: 'clamp'
  }));
  return {
    cardStyle: {
      opacity: opacity,
      transform: [{
        translateY: translateY
      }]
    }
  };
}
function forRevealFromBottomAndroid(_ref6) {
  var current = _ref6.current,
    next = _ref6.next,
    inverted = _ref6.inverted,
    screen = _ref6.layouts.screen;
  var containerTranslateY = multiply(current.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [screen.height, 0],
    extrapolate: 'clamp'
  }), inverted);
  var cardTranslateYFocused = multiply(current.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [screen.height * (95.9 / 100) * -1, 0],
    extrapolate: 'clamp'
  }), inverted);
  var cardTranslateYUnfocused = next ? multiply(next.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [0, screen.height * (2 / 100) * -1],
    extrapolate: 'clamp'
  }), inverted) : 0;
  var overlayOpacity = current.progress.interpolate({
    inputRange: [0, 0.36, 1],
    outputRange: [0, 0.1, 0.1],
    extrapolate: 'clamp'
  });
  return {
    containerStyle: {
      overflow: 'hidden',
      transform: [{
        translateY: containerTranslateY
      }]
    },
    cardStyle: {
      transform: [{
        translateY: cardTranslateYFocused
      }, {
        translateY: cardTranslateYUnfocused
      }]
    },
    overlayStyle: {
      opacity: overlayOpacity
    }
  };
}
function forScaleFromCenterAndroid(_ref7) {
  var current = _ref7.current,
    next = _ref7.next,
    closing = _ref7.closing;
  var progress = add(current.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [0, 1],
    extrapolate: 'clamp'
  }), next ? next.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [0, 1],
    extrapolate: 'clamp'
  }) : 0);
  var opacity = progress.interpolate({
    inputRange: [0, 0.75, 0.875, 1, 1.0825, 1.2075, 2],
    outputRange: [0, 0, 1, 1, 1, 1, 0]
  });
  var scale = (0, _conditional.conditional)(closing, current.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [0.925, 1],
    extrapolate: 'clamp'
  }), progress.interpolate({
    inputRange: [0, 1, 2],
    outputRange: [0.85, 1, 1.075]
  }));
  return {
    cardStyle: {
      opacity: opacity,
      transform: [{
        scale: scale
      }]
    }
  };
}
function forFadeFromRightAndroid(_ref8) {
  var current = _ref8.current,
    next = _ref8.next,
    inverted = _ref8.inverted,
    closing = _ref8.closing;
  var translateFocused = multiply(current.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [96, 0],
    extrapolate: 'clamp'
  }), inverted);
  var translateUnfocused = next ? multiply(next.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [0, -96],
    extrapolate: 'clamp'
  }), inverted) : 0;
  var opacity = (0, _conditional.conditional)(closing, current.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [0, 1],
    extrapolate: 'clamp'
  }), current.progress);
  return {
    cardStyle: {
      opacity: opacity,
      transform: [{
        translateX: translateFocused
      }, {
        translateX: translateUnfocused
      }]
    }
  };
}
function forBottomSheetAndroid(_ref9) {
  var current = _ref9.current,
    inverted = _ref9.inverted,
    screen = _ref9.layouts.screen,
    closing = _ref9.closing;
  var translateY = multiply(current.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [screen.height * 0.8, 0],
    extrapolate: 'clamp'
  }), inverted);
  var opacity = (0, _conditional.conditional)(closing, current.progress, current.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [0, 1],
    extrapolate: 'clamp'
  }));
  var overlayOpacity = current.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [0, 0.3],
    extrapolate: 'clamp'
  });
  return {
    cardStyle: {
      opacity: opacity,
      transform: [{
        translateY: translateY
      }]
    },
    overlayStyle: {
      opacity: overlayOpacity
    }
  };
}
function forFadeFromCenter(_ref0) {
  var progress = _ref0.current.progress;
  return {
    cardStyle: {
      opacity: progress.interpolate({
        inputRange: [0, 0.5, 0.9, 1],
        outputRange: [0, 0.25, 0.7, 1]
      })
    },
    overlayStyle: {
      opacity: progress.interpolate({
        inputRange: [0, 1],
        outputRange: [0, 0.5],
        extrapolate: 'clamp'
      })
    }
  };
}
function forNoAnimation() {
  return {};
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,