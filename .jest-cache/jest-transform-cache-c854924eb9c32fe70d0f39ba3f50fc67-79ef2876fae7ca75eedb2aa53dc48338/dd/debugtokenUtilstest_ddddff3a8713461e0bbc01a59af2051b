d04d11ad857dd6d6a648866f12693f1a
var tokenUtils = require('./src/utils/tokenUtils.ts');
describe('TokenUtils Debug', function () {
  test('module should load correctly', function () {
    console.log('TokenUtils module:', typeof tokenUtils);
    console.log('Exports:', Object.keys(tokenUtils));
    expect(typeof tokenUtils).toBe('object');
  });
  test('formatAuthHeader should work', function () {
    var result = tokenUtils.formatAuthHeader('test');
    console.log('formatAuthHeader result:', result);
    console.log('formatAuthHeader type:', typeof tokenUtils.formatAuthHeader);
    expect(result).toBe('Bearer test');
  });
  test('decodeJWTPayload should be a function', function () {
    console.log('decodeJWTPayload type:', typeof tokenUtils.decodeJWTPayload);
    expect(typeof tokenUtils.decodeJWTPayload).toBe('function');
  });
  test('simple token decode test', function () {
    var header = JSON.stringify({
      alg: 'HS256',
      typ: 'JWT'
    });
    var payload = JSON.stringify({
      sub: '123',
      exp: Math.floor(Date.now() / 1000) + 3600
    });
    var encodedHeader = Buffer.from(header).toString('base64');
    var encodedPayload = Buffer.from(payload).toString('base64');
    var token = `${encodedHeader}.${encodedPayload}.signature`;
    console.log('Test token:', token);
    var decoded = tokenUtils.decodeJWTPayload(token);
    console.log('Decoded result:', decoded);
    expect(decoded).not.toBeUndefined();
    expect(decoded).not.toBeNull();
    expect(decoded.sub).toBe('123');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ0b2tlblV0aWxzIiwicmVxdWlyZSIsImRlc2NyaWJlIiwidGVzdCIsImNvbnNvbGUiLCJsb2ciLCJPYmplY3QiLCJrZXlzIiwiZXhwZWN0IiwidG9CZSIsInJlc3VsdCIsImZvcm1hdEF1dGhIZWFkZXIiLCJkZWNvZGVKV1RQYXlsb2FkIiwiaGVhZGVyIiwiSlNPTiIsInN0cmluZ2lmeSIsImFsZyIsInR5cCIsInBheWxvYWQiLCJzdWIiLCJleHAiLCJNYXRoIiwiZmxvb3IiLCJEYXRlIiwibm93IiwiZW5jb2RlZEhlYWRlciIsIkJ1ZmZlciIsImZyb20iLCJ0b1N0cmluZyIsImVuY29kZWRQYXlsb2FkIiwidG9rZW4iLCJkZWNvZGVkIiwibm90IiwidG9CZVVuZGVmaW5lZCIsInRvQmVOdWxsIl0sInNvdXJjZXMiOlsiZGVidWctdG9rZW5VdGlscy50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRGVidWcgdGVzdCBmb3IgdG9rZW5VdGlscyB0byBpc29sYXRlIHRoZSBpc3N1ZVxuICovXG5cbi8vIERpcmVjdCBpbXBvcnQgdG8gdGVzdCBtb2R1bGUgcmVzb2x1dGlvblxuY29uc3QgdG9rZW5VdGlscyA9IHJlcXVpcmUoJy4vc3JjL3V0aWxzL3Rva2VuVXRpbHMudHMnKTtcblxuZGVzY3JpYmUoJ1Rva2VuVXRpbHMgRGVidWcnLCAoKSA9PiB7XG4gIHRlc3QoJ21vZHVsZSBzaG91bGQgbG9hZCBjb3JyZWN0bHknLCAoKSA9PiB7XG4gICAgY29uc29sZS5sb2coJ1Rva2VuVXRpbHMgbW9kdWxlOicsIHR5cGVvZiB0b2tlblV0aWxzKTtcbiAgICBjb25zb2xlLmxvZygnRXhwb3J0czonLCBPYmplY3Qua2V5cyh0b2tlblV0aWxzKSk7XG4gICAgZXhwZWN0KHR5cGVvZiB0b2tlblV0aWxzKS50b0JlKCdvYmplY3QnKTtcbiAgfSk7XG5cbiAgdGVzdCgnZm9ybWF0QXV0aEhlYWRlciBzaG91bGQgd29yaycsICgpID0+IHtcbiAgICBjb25zdCByZXN1bHQgPSB0b2tlblV0aWxzLmZvcm1hdEF1dGhIZWFkZXIoJ3Rlc3QnKTtcbiAgICBjb25zb2xlLmxvZygnZm9ybWF0QXV0aEhlYWRlciByZXN1bHQ6JywgcmVzdWx0KTtcbiAgICBjb25zb2xlLmxvZygnZm9ybWF0QXV0aEhlYWRlciB0eXBlOicsIHR5cGVvZiB0b2tlblV0aWxzLmZvcm1hdEF1dGhIZWFkZXIpO1xuICAgIGV4cGVjdChyZXN1bHQpLnRvQmUoJ0JlYXJlciB0ZXN0Jyk7XG4gIH0pO1xuXG4gIHRlc3QoJ2RlY29kZUpXVFBheWxvYWQgc2hvdWxkIGJlIGEgZnVuY3Rpb24nLCAoKSA9PiB7XG4gICAgY29uc29sZS5sb2coJ2RlY29kZUpXVFBheWxvYWQgdHlwZTonLCB0eXBlb2YgdG9rZW5VdGlscy5kZWNvZGVKV1RQYXlsb2FkKTtcbiAgICBleHBlY3QodHlwZW9mIHRva2VuVXRpbHMuZGVjb2RlSldUUGF5bG9hZCkudG9CZSgnZnVuY3Rpb24nKTtcbiAgfSk7XG5cbiAgdGVzdCgnc2ltcGxlIHRva2VuIGRlY29kZSB0ZXN0JywgKCkgPT4ge1xuICAgIC8vIENyZWF0ZSBhIHNpbXBsZSBiYXNlNjQgdG9rZW4gZm9yIHRlc3RpbmdcbiAgICBjb25zdCBoZWFkZXIgPSBKU09OLnN0cmluZ2lmeSh7IGFsZzogJ0hTMjU2JywgdHlwOiAnSldUJyB9KTtcbiAgICBjb25zdCBwYXlsb2FkID0gSlNPTi5zdHJpbmdpZnkoeyBzdWI6ICcxMjMnLCBleHA6IE1hdGguZmxvb3IoRGF0ZS5ub3coKSAvIDEwMDApICsgMzYwMCB9KTtcbiAgICBcbiAgICBjb25zdCBlbmNvZGVkSGVhZGVyID0gQnVmZmVyLmZyb20oaGVhZGVyKS50b1N0cmluZygnYmFzZTY0Jyk7XG4gICAgY29uc3QgZW5jb2RlZFBheWxvYWQgPSBCdWZmZXIuZnJvbShwYXlsb2FkKS50b1N0cmluZygnYmFzZTY0Jyk7XG4gICAgY29uc3QgdG9rZW4gPSBgJHtlbmNvZGVkSGVhZGVyfS4ke2VuY29kZWRQYXlsb2FkfS5zaWduYXR1cmVgO1xuICAgIFxuICAgIGNvbnNvbGUubG9nKCdUZXN0IHRva2VuOicsIHRva2VuKTtcbiAgICBjb25zdCBkZWNvZGVkID0gdG9rZW5VdGlscy5kZWNvZGVKV1RQYXlsb2FkKHRva2VuKTtcbiAgICBjb25zb2xlLmxvZygnRGVjb2RlZCByZXN1bHQ6JywgZGVjb2RlZCk7XG4gICAgXG4gICAgZXhwZWN0KGRlY29kZWQpLm5vdC50b0JlVW5kZWZpbmVkKCk7XG4gICAgZXhwZWN0KGRlY29kZWQpLm5vdC50b0JlTnVsbCgpO1xuICAgIGV4cGVjdChkZWNvZGVkLnN1YikudG9CZSgnMTIzJyk7XG4gIH0pO1xufSk7Il0sIm1hcHBpbmdzIjoiQUFLQSxJQUFNQSxVQUFVLEdBQUdDLE9BQU8sQ0FBQywyQkFBMkIsQ0FBQztBQUV2REMsUUFBUSxDQUFDLGtCQUFrQixFQUFFLFlBQU07RUFDakNDLElBQUksQ0FBQyw4QkFBOEIsRUFBRSxZQUFNO0lBQ3pDQyxPQUFPLENBQUNDLEdBQUcsQ0FBQyxvQkFBb0IsRUFBRSxPQUFPTCxVQUFVLENBQUM7SUFDcERJLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLFVBQVUsRUFBRUMsTUFBTSxDQUFDQyxJQUFJLENBQUNQLFVBQVUsQ0FBQyxDQUFDO0lBQ2hEUSxNQUFNLENBQUMsT0FBT1IsVUFBVSxDQUFDLENBQUNTLElBQUksQ0FBQyxRQUFRLENBQUM7RUFDMUMsQ0FBQyxDQUFDO0VBRUZOLElBQUksQ0FBQyw4QkFBOEIsRUFBRSxZQUFNO0lBQ3pDLElBQU1PLE1BQU0sR0FBR1YsVUFBVSxDQUFDVyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUM7SUFDbERQLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLDBCQUEwQixFQUFFSyxNQUFNLENBQUM7SUFDL0NOLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLHdCQUF3QixFQUFFLE9BQU9MLFVBQVUsQ0FBQ1csZ0JBQWdCLENBQUM7SUFDekVILE1BQU0sQ0FBQ0UsTUFBTSxDQUFDLENBQUNELElBQUksQ0FBQyxhQUFhLENBQUM7RUFDcEMsQ0FBQyxDQUFDO0VBRUZOLElBQUksQ0FBQyx1Q0FBdUMsRUFBRSxZQUFNO0lBQ2xEQyxPQUFPLENBQUNDLEdBQUcsQ0FBQyx3QkFBd0IsRUFBRSxPQUFPTCxVQUFVLENBQUNZLGdCQUFnQixDQUFDO0lBQ3pFSixNQUFNLENBQUMsT0FBT1IsVUFBVSxDQUFDWSxnQkFBZ0IsQ0FBQyxDQUFDSCxJQUFJLENBQUMsVUFBVSxDQUFDO0VBQzdELENBQUMsQ0FBQztFQUVGTixJQUFJLENBQUMsMEJBQTBCLEVBQUUsWUFBTTtJQUVyQyxJQUFNVSxNQUFNLEdBQUdDLElBQUksQ0FBQ0MsU0FBUyxDQUFDO01BQUVDLEdBQUcsRUFBRSxPQUFPO01BQUVDLEdBQUcsRUFBRTtJQUFNLENBQUMsQ0FBQztJQUMzRCxJQUFNQyxPQUFPLEdBQUdKLElBQUksQ0FBQ0MsU0FBUyxDQUFDO01BQUVJLEdBQUcsRUFBRSxLQUFLO01BQUVDLEdBQUcsRUFBRUMsSUFBSSxDQUFDQyxLQUFLLENBQUNDLElBQUksQ0FBQ0MsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRztJQUFLLENBQUMsQ0FBQztJQUV6RixJQUFNQyxhQUFhLEdBQUdDLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDZCxNQUFNLENBQUMsQ0FBQ2UsUUFBUSxDQUFDLFFBQVEsQ0FBQztJQUM1RCxJQUFNQyxjQUFjLEdBQUdILE1BQU0sQ0FBQ0MsSUFBSSxDQUFDVCxPQUFPLENBQUMsQ0FBQ1UsUUFBUSxDQUFDLFFBQVEsQ0FBQztJQUM5RCxJQUFNRSxLQUFLLEdBQUcsR0FBR0wsYUFBYSxJQUFJSSxjQUFjLFlBQVk7SUFFNUR6QixPQUFPLENBQUNDLEdBQUcsQ0FBQyxhQUFhLEVBQUV5QixLQUFLLENBQUM7SUFDakMsSUFBTUMsT0FBTyxHQUFHL0IsVUFBVSxDQUFDWSxnQkFBZ0IsQ0FBQ2tCLEtBQUssQ0FBQztJQUNsRDFCLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLGlCQUFpQixFQUFFMEIsT0FBTyxDQUFDO0lBRXZDdkIsTUFBTSxDQUFDdUIsT0FBTyxDQUFDLENBQUNDLEdBQUcsQ0FBQ0MsYUFBYSxDQUFDLENBQUM7SUFDbkN6QixNQUFNLENBQUN1QixPQUFPLENBQUMsQ0FBQ0MsR0FBRyxDQUFDRSxRQUFRLENBQUMsQ0FBQztJQUM5QjFCLE1BQU0sQ0FBQ3VCLE9BQU8sQ0FBQ1osR0FBRyxDQUFDLENBQUNWLElBQUksQ0FBQyxLQUFLLENBQUM7RUFDakMsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119