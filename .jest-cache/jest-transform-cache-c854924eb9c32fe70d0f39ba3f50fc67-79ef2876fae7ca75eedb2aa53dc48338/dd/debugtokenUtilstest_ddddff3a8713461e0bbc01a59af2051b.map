{"version":3,"names":["tokenUtils","require","describe","test","console","log","Object","keys","expect","toBe","result","formatAuthHeader","decodeJWTPayload","header","JSON","stringify","alg","typ","payload","sub","exp","Math","floor","Date","now","encodedHeader","Buffer","from","toString","encodedPayload","token","decoded","not","toBeUndefined","toBeNull"],"sources":["debug-tokenUtils.test.js"],"sourcesContent":["/**\n * Debug test for tokenUtils to isolate the issue\n */\n\n// Direct import to test module resolution\nconst tokenUtils = require('./src/utils/tokenUtils.ts');\n\ndescribe('TokenUtils Debug', () => {\n  test('module should load correctly', () => {\n    console.log('TokenUtils module:', typeof tokenUtils);\n    console.log('Exports:', Object.keys(tokenUtils));\n    expect(typeof tokenUtils).toBe('object');\n  });\n\n  test('formatAuthHeader should work', () => {\n    const result = tokenUtils.formatAuthHeader('test');\n    console.log('formatAuthHeader result:', result);\n    console.log('formatAuthHeader type:', typeof tokenUtils.formatAuthHeader);\n    expect(result).toBe('Bearer test');\n  });\n\n  test('decodeJWTPayload should be a function', () => {\n    console.log('decodeJWTPayload type:', typeof tokenUtils.decodeJWTPayload);\n    expect(typeof tokenUtils.decodeJWTPayload).toBe('function');\n  });\n\n  test('simple token decode test', () => {\n    // Create a simple base64 token for testing\n    const header = JSON.stringify({ alg: 'HS256', typ: 'JWT' });\n    const payload = JSON.stringify({ sub: '123', exp: Math.floor(Date.now() / 1000) + 3600 });\n    \n    const encodedHeader = Buffer.from(header).toString('base64');\n    const encodedPayload = Buffer.from(payload).toString('base64');\n    const token = `${encodedHeader}.${encodedPayload}.signature`;\n    \n    console.log('Test token:', token);\n    const decoded = tokenUtils.decodeJWTPayload(token);\n    console.log('Decoded result:', decoded);\n    \n    expect(decoded).not.toBeUndefined();\n    expect(decoded).not.toBeNull();\n    expect(decoded.sub).toBe('123');\n  });\n});"],"mappings":"AAKA,IAAMA,UAAU,GAAGC,OAAO,CAAC,2BAA2B,CAAC;AAEvDC,QAAQ,CAAC,kBAAkB,EAAE,YAAM;EACjCC,IAAI,CAAC,8BAA8B,EAAE,YAAM;IACzCC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAE,OAAOL,UAAU,CAAC;IACpDI,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEC,MAAM,CAACC,IAAI,CAACP,UAAU,CAAC,CAAC;IAChDQ,MAAM,CAAC,OAAOR,UAAU,CAAC,CAACS,IAAI,CAAC,QAAQ,CAAC;EAC1C,CAAC,CAAC;EAEFN,IAAI,CAAC,8BAA8B,EAAE,YAAM;IACzC,IAAMO,MAAM,GAAGV,UAAU,CAACW,gBAAgB,CAAC,MAAM,CAAC;IAClDP,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEK,MAAM,CAAC;IAC/CN,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAE,OAAOL,UAAU,CAACW,gBAAgB,CAAC;IACzEH,MAAM,CAACE,MAAM,CAAC,CAACD,IAAI,CAAC,aAAa,CAAC;EACpC,CAAC,CAAC;EAEFN,IAAI,CAAC,uCAAuC,EAAE,YAAM;IAClDC,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAE,OAAOL,UAAU,CAACY,gBAAgB,CAAC;IACzEJ,MAAM,CAAC,OAAOR,UAAU,CAACY,gBAAgB,CAAC,CAACH,IAAI,CAAC,UAAU,CAAC;EAC7D,CAAC,CAAC;EAEFN,IAAI,CAAC,0BAA0B,EAAE,YAAM;IAErC,IAAMU,MAAM,GAAGC,IAAI,CAACC,SAAS,CAAC;MAAEC,GAAG,EAAE,OAAO;MAAEC,GAAG,EAAE;IAAM,CAAC,CAAC;IAC3D,IAAMC,OAAO,GAAGJ,IAAI,CAACC,SAAS,CAAC;MAAEI,GAAG,EAAE,KAAK;MAAEC,GAAG,EAAEC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG;IAAK,CAAC,CAAC;IAEzF,IAAMC,aAAa,GAAGC,MAAM,CAACC,IAAI,CAACd,MAAM,CAAC,CAACe,QAAQ,CAAC,QAAQ,CAAC;IAC5D,IAAMC,cAAc,GAAGH,MAAM,CAACC,IAAI,CAACT,OAAO,CAAC,CAACU,QAAQ,CAAC,QAAQ,CAAC;IAC9D,IAAME,KAAK,GAAG,GAAGL,aAAa,IAAII,cAAc,YAAY;IAE5DzB,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEyB,KAAK,CAAC;IACjC,IAAMC,OAAO,GAAG/B,UAAU,CAACY,gBAAgB,CAACkB,KAAK,CAAC;IAClD1B,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAE0B,OAAO,CAAC;IAEvCvB,MAAM,CAACuB,OAAO,CAAC,CAACC,GAAG,CAACC,aAAa,CAAC,CAAC;IACnCzB,MAAM,CAACuB,OAAO,CAAC,CAACC,GAAG,CAACE,QAAQ,CAAC,CAAC;IAC9B1B,MAAM,CAACuB,OAAO,CAACZ,GAAG,CAAC,CAACV,IAAI,CAAC,KAAK,CAAC;EACjC,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}