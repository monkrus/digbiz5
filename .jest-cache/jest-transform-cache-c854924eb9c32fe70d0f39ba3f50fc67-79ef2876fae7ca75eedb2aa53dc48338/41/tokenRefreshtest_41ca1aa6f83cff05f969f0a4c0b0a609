8a9eb8b299852573237e7c4afc536b79
_getJestObj().mock('../../src/services/tokenStorage');
_getJestObj().mock('../../src/services/authService');
_getJestObj().mock('../../src/utils/tokenUtils');
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _toolkit = require("@reduxjs/toolkit");
var _tokenStorage = require("../../src/services/tokenStorage");
var _authService = require("../../src/services/authService");
var _authSlice = _interopRequireWildcard(require("../../src/store/authSlice"));
var _tokenUtils = require("../../src/utils/tokenUtils");
var _testUtils = require("../utils/testUtils");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('Token Refresh Mechanism', function () {
  var store;
  var mockTokenStorage;
  var mockAuthService;
  var mockValidateTokens;
  beforeEach(function () {
    (0, _testUtils.setupMocks)();
    store = (0, _toolkit.configureStore)({
      reducer: {
        auth: _authSlice.default
      },
      middleware: function middleware(getDefaultMiddleware) {
        return getDefaultMiddleware({
          serializableCheck: false
        });
      }
    });
    mockTokenStorage = _tokenStorage.tokenStorage;
    mockAuthService = _authService.authService;
    mockValidateTokens = _tokenUtils.validateTokens;
  });
  afterEach(function () {
    (0, _testUtils.teardownMocks)();
  });
  describe('Automatic Token Refresh', function () {
    it('should refresh tokens when they are expired', (0, _asyncToGenerator2.default)(function* () {
      var expiredTokens = Object.assign({}, _testUtils.mockTokens, {
        expiresIn: Date.now() - 1000
      });
      var newTokens = Object.assign({}, _testUtils.mockTokens, {
        accessToken: 'new_access_token',
        expiresIn: Date.now() + 3600000
      });
      mockValidateTokens.mockReturnValue({
        isValid: false,
        isExpired: true,
        needsRefresh: true,
        expiresAt: expiredTokens.expiresIn,
        timeUntilExpiry: -1000
      });
      mockTokenStorage.getTokens.mockResolvedValue(expiredTokens);
      mockTokenStorage.hasValidTokens.mockResolvedValue(false);
      mockAuthService.refreshTokens.mockResolvedValue({
        success: true,
        tokens: newTokens
      });
      mockTokenStorage.setTokens.mockResolvedValue();
      mockValidateTokens.mockReturnValueOnce({
        isValid: true,
        isExpired: false,
        needsRefresh: false,
        expiresAt: newTokens.expiresIn,
        timeUntilExpiry: 3600000
      });
      var result = yield store.dispatch((0, _authSlice.refreshTokens)());
      yield (0, _testUtils.flushPromises)();
      expect(result.type).toBe('auth/refreshTokens/fulfilled');
      expect(result.payload).toEqual({
        tokens: newTokens
      });
      var state = store.getState().auth;
      expect(state.tokens).toEqual(newTokens);
      expect(state.isAuthenticated).toBe(true);
      expect(mockAuthService.refreshTokens).toHaveBeenCalled();
      expect(mockTokenStorage.setTokens).toHaveBeenCalledWith(newTokens);
    }));
    it('should handle refresh token expiration', (0, _asyncToGenerator2.default)(function* () {
      var expiredTokens = Object.assign({}, _testUtils.mockTokens, {
        expiresIn: Date.now() - 1000
      });
      mockValidateTokens.mockReturnValue({
        isValid: false,
        isExpired: true,
        needsRefresh: true,
        expiresAt: expiredTokens.expiresIn,
        timeUntilExpiry: -1000
      });
      mockTokenStorage.getTokens.mockResolvedValue(expiredTokens);
      mockAuthService.refreshTokens.mockResolvedValue({
        success: false,
        message: 'Refresh token expired',
        code: 'REFRESH_TOKEN_EXPIRED'
      });
      mockTokenStorage.removeTokens.mockResolvedValue();
      var result = yield store.dispatch((0, _authSlice.refreshTokens)());
      expect(result.type).toBe('auth/refreshTokens/rejected');
      var state = store.getState().auth;
      expect(state.isAuthenticated).toBe(false);
      expect(state.tokens).toBeNull();
      expect(state.user).toBeNull();
      expect(mockTokenStorage.removeTokens).toHaveBeenCalled();
    }));
    it('should retry failed refresh attempts', (0, _asyncToGenerator2.default)(function* () {
      var expiredTokens = Object.assign({}, _testUtils.mockTokens, {
        expiresIn: Date.now() - 1000
      });
      var newTokens = Object.assign({}, _testUtils.mockTokens, {
        accessToken: 'new_access_token'
      });
      mockTokenStorage.getTokens.mockResolvedValue(expiredTokens);
      mockAuthService.refreshTokens.mockResolvedValueOnce({
        success: false,
        message: 'Network error',
        code: 'NETWORK_ERROR'
      }).mockResolvedValueOnce({
        success: true,
        tokens: newTokens
      });
      var firstResult = yield store.dispatch((0, _authSlice.refreshTokens)());
      expect(firstResult.type).toBe('auth/refreshTokens/rejected');
      var secondResult = yield store.dispatch((0, _authSlice.refreshTokens)());
      expect(secondResult.type).toBe('auth/refreshTokens/fulfilled');
      expect(secondResult.payload).toEqual({
        tokens: newTokens
      });
    }));
  });
  describe('Concurrent Refresh Handling', function () {
    it('should handle concurrent refresh requests', (0, _asyncToGenerator2.default)(function* () {
      var expiredTokens = Object.assign({}, _testUtils.mockTokens, {
        expiresIn: Date.now() - 1000
      });
      var newTokens = Object.assign({}, _testUtils.mockTokens, {
        accessToken: 'new_access_token'
      });
      mockTokenStorage.getTokens.mockResolvedValue(expiredTokens);
      var refreshCallCount = 0;
      mockAuthService.refreshTokens.mockImplementation(function () {
        refreshCallCount++;
        return new Promise(function (resolve) {
          setTimeout(function () {
            resolve({
              success: true,
              tokens: Object.assign({}, newTokens, {
                accessToken: `token_${refreshCallCount}`
              })
            });
          }, 100);
        });
      });
      var promises = [store.dispatch((0, _authSlice.refreshTokens)()), store.dispatch((0, _authSlice.refreshTokens)()), store.dispatch((0, _authSlice.refreshTokens)())];
      var results = yield Promise.all(promises);
      results.forEach(function (result) {
        expect(result.type).toBe('auth/refreshTokens/fulfilled');
      });
      expect(refreshCallCount).toBe(1);
    }));
    it('should handle refresh during other auth operations', (0, _asyncToGenerator2.default)(function* () {
      var expiredTokens = Object.assign({}, _testUtils.mockTokens, {
        expiresIn: Date.now() - 1000
      });
      var newTokens = Object.assign({}, _testUtils.mockTokens, {
        accessToken: 'new_access_token'
      });
      mockTokenStorage.getTokens.mockResolvedValue(expiredTokens);
      mockTokenStorage.hasValidTokens.mockResolvedValue(false);
      mockAuthService.refreshTokens.mockImplementation(function () {
        return new Promise(function (resolve) {
          setTimeout(function () {
            resolve({
              success: true,
              tokens: newTokens
            });
          }, 200);
        });
      });
      mockAuthService.getCurrentUser.mockResolvedValue({
        success: true,
        user: _testUtils.mockUser
      });
      var _yield$Promise$all = yield Promise.all([store.dispatch((0, _authSlice.refreshTokens)()), store.dispatch((0, _authSlice.initializeAuth)())]),
        _yield$Promise$all2 = (0, _slicedToArray2.default)(_yield$Promise$all, 2),
        refreshResult = _yield$Promise$all2[0],
        initResult = _yield$Promise$all2[1];
      expect(refreshResult.type).toBe('auth/refreshTokens/fulfilled');
      var state = store.getState().auth;
      expect(state.isLoading).toBe(false);
    }));
  });
  describe('Preemptive Token Refresh', function () {
    it('should refresh tokens before they expire', (0, _asyncToGenerator2.default)(function* () {
      var soonToExpireTokens = Object.assign({}, _testUtils.mockTokens, {
        expiresIn: Date.now() + 300000
      });
      var newTokens = Object.assign({}, _testUtils.mockTokens, {
        accessToken: 'new_access_token',
        expiresIn: Date.now() + 3600000
      });
      mockValidateTokens.mockReturnValue({
        isValid: true,
        isExpired: false,
        needsRefresh: true,
        expiresAt: soonToExpireTokens.expiresIn,
        timeUntilExpiry: 300000
      });
      mockTokenStorage.getTokens.mockResolvedValue(soonToExpireTokens);
      mockAuthService.refreshTokens.mockResolvedValue({
        success: true,
        tokens: newTokens
      });
      var result = yield store.dispatch((0, _authSlice.refreshTokens)());
      expect(result.type).toBe('auth/refreshTokens/fulfilled');
      expect(mockAuthService.refreshTokens).toHaveBeenCalled();
      var state = store.getState().auth;
      expect(state.tokens).toEqual(newTokens);
    }));
    it('should schedule automatic refresh before expiration', (0, _asyncToGenerator2.default)(function* () {
      var tokens = Object.assign({}, _testUtils.mockTokens, {
        expiresIn: Date.now() + 600000
      });
      mockValidateTokens.mockReturnValue({
        isValid: true,
        isExpired: false,
        needsRefresh: false,
        expiresAt: tokens.expiresIn,
        timeUntilExpiry: 600000
      });
      mockTokenStorage.hasValidTokens.mockResolvedValue(true);
      mockTokenStorage.getTokens.mockResolvedValue(tokens);
      mockAuthService.getCurrentUser.mockResolvedValue({
        success: true,
        user: _testUtils.mockUser
      });
      yield store.dispatch((0, _authSlice.initializeAuth)());
      var state = store.getState().auth;
      expect(state.isAuthenticated).toBe(true);
      expect(state.tokens).toEqual(tokens);
    }));
  });
  describe('Token Refresh Error Scenarios', function () {
    it('should handle network errors during refresh', (0, _asyncToGenerator2.default)(function* () {
      var expiredTokens = Object.assign({}, _testUtils.mockTokens, {
        expiresIn: Date.now() - 1000
      });
      mockTokenStorage.getTokens.mockResolvedValue(expiredTokens);
      mockAuthService.refreshTokens.mockRejectedValue(new Error('Network error'));
      var result = yield store.dispatch((0, _authSlice.refreshTokens)());
      expect(result.type).toBe('auth/refreshTokens/rejected');
      var state = store.getState().auth;
      expect(state.error).toBeTruthy();
      expect(state.isAuthenticated).toBe(false);
    }));
    it('should handle malformed refresh response', (0, _asyncToGenerator2.default)(function* () {
      var expiredTokens = Object.assign({}, _testUtils.mockTokens, {
        expiresIn: Date.now() - 1000
      });
      mockTokenStorage.getTokens.mockResolvedValue(expiredTokens);
      mockAuthService.refreshTokens.mockResolvedValue({
        success: true,
        tokens: null
      });
      var result = yield store.dispatch((0, _authSlice.refreshTokens)());
      expect(result.type).toBe('auth/refreshTokens/rejected');
    }));
    it('should handle refresh when no refresh token exists', (0, _asyncToGenerator2.default)(function* () {
      mockTokenStorage.getTokens.mockResolvedValue(null);
      var result = yield store.dispatch((0, _authSlice.refreshTokens)());
      expect(result.type).toBe('auth/refreshTokens/rejected');
      expect(mockAuthService.refreshTokens).not.toHaveBeenCalled();
    }));
    it('should clear invalid tokens after failed refresh', (0, _asyncToGenerator2.default)(function* () {
      var invalidTokens = Object.assign({}, _testUtils.mockTokens, {
        refreshToken: 'invalid_refresh_token'
      });
      mockTokenStorage.getTokens.mockResolvedValue(invalidTokens);
      mockAuthService.refreshTokens.mockResolvedValue({
        success: false,
        message: 'Invalid refresh token',
        code: 'INVALID_REFRESH_TOKEN'
      });
      mockTokenStorage.removeTokens.mockResolvedValue();
      var result = yield store.dispatch((0, _authSlice.refreshTokens)());
      expect(result.type).toBe('auth/refreshTokens/rejected');
      expect(mockTokenStorage.removeTokens).toHaveBeenCalled();
      var state = store.getState().auth;
      expect(state.tokens).toBeNull();
      expect(state.isAuthenticated).toBe(false);
    }));
  });
  describe('Token Validation Integration', function () {
    it('should validate tokens after successful refresh', (0, _asyncToGenerator2.default)(function* () {
      var expiredTokens = Object.assign({}, _testUtils.mockTokens, {
        expiresIn: Date.now() - 1000
      });
      var newTokens = Object.assign({}, _testUtils.mockTokens, {
        accessToken: 'new_access_token',
        expiresIn: Date.now() + 3600000
      });
      mockTokenStorage.getTokens.mockResolvedValue(expiredTokens);
      mockAuthService.refreshTokens.mockResolvedValue({
        success: true,
        tokens: newTokens
      });
      mockValidateTokens.mockReturnValueOnce({
        isValid: true,
        isExpired: false,
        needsRefresh: false,
        expiresAt: newTokens.expiresIn,
        timeUntilExpiry: 3600000
      });
      var result = yield store.dispatch((0, _authSlice.refreshTokens)());
      expect(result.type).toBe('auth/refreshTokens/fulfilled');
      expect(mockValidateTokens).toHaveBeenCalledWith(newTokens);
    }));
    it('should handle refresh loop prevention', (0, _asyncToGenerator2.default)(function* () {
      var refreshCount = 0;
      mockTokenStorage.getTokens.mockResolvedValue(_testUtils.mockTokens);
      mockAuthService.refreshTokens.mockImplementation(function () {
        refreshCount++;
        if (refreshCount > 3) {
          return Promise.resolve({
            success: false,
            message: 'Too many refresh attempts',
            code: 'REFRESH_LIMIT_EXCEEDED'
          });
        }
        return Promise.resolve({
          success: false,
          message: 'Temporary error',
          code: 'TEMPORARY_ERROR'
        });
      });
      for (var i = 0; i < 5; i++) {
        yield store.dispatch((0, _authSlice.refreshTokens)());
      }
      expect(refreshCount).toBeLessThanOrEqual(3);
    }));
  });
  describe('Performance and Race Conditions', function () {
    it('should debounce rapid refresh requests', (0, _asyncToGenerator2.default)(function* () {
      var expiredTokens = Object.assign({}, _testUtils.mockTokens, {
        expiresIn: Date.now() - 1000
      });
      var newTokens = Object.assign({}, _testUtils.mockTokens, {
        accessToken: 'new_access_token'
      });
      mockTokenStorage.getTokens.mockResolvedValue(expiredTokens);
      var refreshCallCount = 0;
      mockAuthService.refreshTokens.mockImplementation(function () {
        refreshCallCount++;
        return Promise.resolve({
          success: true,
          tokens: newTokens
        });
      });
      var promises = Array.from({
        length: 10
      }, function () {
        return store.dispatch((0, _authSlice.refreshTokens)());
      });
      yield Promise.all(promises);
      expect(refreshCallCount).toBe(1);
    }));
    it('should handle timeout during refresh', (0, _asyncToGenerator2.default)(function* () {
      mockTokenStorage.getTokens.mockResolvedValue(_testUtils.mockTokens);
      mockAuthService.refreshTokens.mockImplementation(function () {
        return new Promise(function (resolve) {
          setTimeout(function () {
            resolve({
              success: true,
              tokens: _testUtils.mockTokens
            });
          }, 10000);
        });
      });
      var refreshPromise = store.dispatch((0, _authSlice.refreshTokens)());
      yield expect((0, _testUtils.withTimeout)(refreshPromise, 1000)).rejects.toThrow('Test timeout');
    }));
    it('should maintain consistent state during concurrent operations', (0, _asyncToGenerator2.default)(function* () {
      var initialState = store.getState().auth;
      expect(initialState.isLoading).toBe(false);
      mockTokenStorage.getTokens.mockResolvedValue(_testUtils.mockTokens);
      mockAuthService.refreshTokens.mockImplementation(function () {
        return new Promise(function (resolve) {
          setTimeout(function () {
            resolve({
              success: true,
              tokens: _testUtils.mockTokens
            });
          }, 100);
        });
      });
      var operations = [store.dispatch((0, _authSlice.refreshTokens)()), store.dispatch((0, _authSlice.refreshTokens)()), store.dispatch((0, _authSlice.initializeAuth)())];
      yield Promise.all(operations);
      var finalState = store.getState().auth;
      expect(finalState.isLoading).toBe(false);
      if (finalState.isAuthenticated) {
        expect(finalState.tokens).toBeTruthy();
      }
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,