{"version":3,"names":["_discoveryService","_interopRequireDefault","require","mockUsers","id","userId","displayName","company","industry","location","startupStage","skills","isRecent","isVerified","mutualConnections","profilePicture","currentUser","describe","beforeEach","jest","clearAllMocks","test","_discoveryService$cal","discoveryService","calculateSimilarityScore","score","reasons","expect","toBeGreaterThan","toContain","_discoveryService$cal2","_discoveryService$cal3","_discoveryService$cal4","_discoveryService$cal5","_discoveryService$cal6","_discoveryService$cal7","perfectMatch","Object","assign","_discoveryService$cal8","toBeLessThanOrEqual","noMatch","_discoveryService$cal9","toBe","_asyncToGenerator2","default","suggestions","generatePersonalizedSuggestions","toBeInstanceOf","Array","length","toHaveProperty","i","suggestionScore","toBeGreaterThanOrEqual","lowSimilarityUsers","toHaveLength","usersIncludingSelf","concat","selfSuggestion","find","s","toBeUndefined","sameCompanyUsers","from","_","suggestionReason","diversified","diversifySuggestions","toBeLessThan","manyUsers","diverseUsers","_toConsumableArray2","techCount","filter","u","healthCount","sfLat","sfLon","nyLat","nyLon","distance","calculateDistance","lat","lon","lat1","lon1","lat2","lon2","startTime","performance","now","endTime","avgTime","largeUserSet","executionTime","largeSuggestions","toEqual","incompleteUser","undefined","_discoveryService$cal0","distance1","distance2","userWithDifferentCase","_discoveryService$cal1"],"sources":["searchAlgorithm.test.ts"],"sourcesContent":["/**\n * Search Algorithm Accuracy Tests\n *\n * Tests for the discovery service search algorithm including:\n * - Similarity scoring accuracy\n * - Search result relevance\n * - Filter effectiveness\n * - Suggestion algorithm performance\n */\n\nimport discoveryService from '../../src/services/discoveryService';\nimport { DiscoveredUser, SuggestedConnection } from '../../src/types/discovery';\n\n// Mock users for testing\nconst mockUsers: DiscoveredUser[] = [\n  {\n    id: '1',\n    userId: 'user1',\n    displayName: 'John Smith',\n    company: 'TechCorp',\n    industry: 'Technology',\n    location: 'San Francisco, CA',\n    startupStage: 'growth',\n    skills: ['JavaScript', 'React', 'Node.js'],\n    isRecent: false,\n    isVerified: true,\n    mutualConnections: 5,\n    profilePicture: 'https://example.com/john.jpg',\n  },\n  {\n    id: '2',\n    userId: 'user2',\n    displayName: 'Jane Doe',\n    company: 'TechCorp',\n    industry: 'Technology',\n    location: 'San Francisco, CA',\n    startupStage: 'growth',\n    skills: ['Python', 'AI', 'Machine Learning'],\n    isRecent: true,\n    isVerified: true,\n    mutualConnections: 3,\n    profilePicture: 'https://example.com/jane.jpg',\n  },\n  {\n    id: '3',\n    userId: 'user3',\n    displayName: 'Bob Johnson',\n    company: 'HealthTech Inc',\n    industry: 'Healthcare',\n    location: 'New York, NY',\n    startupStage: 'early-stage',\n    skills: ['JavaScript', 'React', 'Healthcare'],\n    isRecent: false,\n    isVerified: false,\n    mutualConnections: 1,\n    profilePicture: 'https://example.com/bob.jpg',\n  },\n  {\n    id: '4',\n    userId: 'user4',\n    displayName: 'Alice Brown',\n    company: 'FinanceApp',\n    industry: 'Finance',\n    location: 'London, UK',\n    startupStage: 'mvp',\n    skills: ['Java', 'Spring', 'Finance'],\n    isRecent: true,\n    isVerified: true,\n    mutualConnections: 0,\n    profilePicture: 'https://example.com/alice.jpg',\n  },\n];\n\nconst currentUser: DiscoveredUser = {\n  id: 'current',\n  userId: 'currentUser',\n  displayName: 'Test User',\n  company: 'TechCorp',\n  industry: 'Technology',\n  location: 'San Francisco, CA',\n  startupStage: 'growth',\n  skills: ['JavaScript', 'React', 'TypeScript'],\n  isRecent: false,\n  isVerified: true,\n  mutualConnections: 0,\n  profilePicture: 'https://example.com/current.jpg',\n};\n\ndescribe('Search Algorithm Accuracy Tests', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('Similarity Scoring Algorithm', () => {\n    test('should give highest score to same company match', () => {\n      const { score, reasons } = discoveryService.calculateSimilarityScore(\n        currentUser,\n        mockUsers[0] // Same company (TechCorp)\n      );\n\n      expect(score).toBeGreaterThan(30);\n      expect(reasons).toContain('same_company');\n    });\n\n    test('should score industry match appropriately', () => {\n      const { score, reasons } = discoveryService.calculateSimilarityScore(\n        currentUser,\n        mockUsers[1] // Same industry (Technology)\n      );\n\n      expect(score).toBeGreaterThan(25);\n      expect(reasons).toContain('same_industry');\n    });\n\n    test('should score location proximity correctly', () => {\n      const { score, reasons } = discoveryService.calculateSimilarityScore(\n        currentUser,\n        mockUsers[0] // Same location (San Francisco, CA)\n      );\n\n      expect(score).toBeGreaterThan(20);\n      expect(reasons).toContain('same_location');\n    });\n\n    test('should score startup stage match', () => {\n      const { score, reasons } = discoveryService.calculateSimilarityScore(\n        currentUser,\n        mockUsers[1] // Same startup stage (growth)\n      );\n\n      expect(score).toBeGreaterThan(15);\n      expect(reasons).toContain('startup_stage');\n    });\n\n    test('should score skills overlap correctly', () => {\n      const { score, reasons } = discoveryService.calculateSimilarityScore(\n        currentUser,\n        mockUsers[2] // Overlapping skills (JavaScript, React)\n      );\n\n      expect(reasons).toContain('similar_skills');\n      expect(score).toBeGreaterThan(0);\n    });\n\n    test('should apply mutual connections boost', () => {\n      const { score, reasons } = discoveryService.calculateSimilarityScore(\n        currentUser,\n        mockUsers[0] // Has 5 mutual connections\n      );\n\n      expect(reasons).toContain('mutual_connections');\n      expect(score).toBeGreaterThan(0);\n    });\n\n    test('should apply recent activity boost', () => {\n      const { score, reasons } = discoveryService.calculateSimilarityScore(\n        currentUser,\n        mockUsers[1] // Is recent user\n      );\n\n      expect(reasons).toContain('recent_activity');\n      expect(score).toBeGreaterThan(0);\n    });\n\n    test('should cap maximum score at 100', () => {\n      // Create a user with perfect matches\n      const perfectMatch: DiscoveredUser = {\n        ...currentUser,\n        id: 'perfect',\n        userId: 'perfect',\n        mutualConnections: 50,\n        isRecent: true,\n      };\n\n      const { score } = discoveryService.calculateSimilarityScore(\n        currentUser,\n        perfectMatch\n      );\n\n      expect(score).toBeLessThanOrEqual(100);\n    });\n\n    test('should return zero score for no matches', () => {\n      const noMatch: DiscoveredUser = {\n        id: 'nomatch',\n        userId: 'nomatch',\n        displayName: 'No Match',\n        company: 'Different Corp',\n        industry: 'Different Industry',\n        location: 'Different City',\n        startupStage: 'idea',\n        skills: ['PHP', 'Laravel'],\n        isRecent: false,\n        isVerified: false,\n        mutualConnections: 0,\n        profilePicture: 'https://example.com/nomatch.jpg',\n      };\n\n      const { score } = discoveryService.calculateSimilarityScore(\n        currentUser,\n        noMatch\n      );\n\n      expect(score).toBe(0);\n    });\n  });\n\n  describe('Personalized Suggestions Generation', () => {\n    test('should generate suggestions based on similarity scores', async () => {\n      const suggestions = await discoveryService.generatePersonalizedSuggestions(\n        currentUser,\n        mockUsers\n      );\n\n      expect(suggestions).toBeInstanceOf(Array);\n      expect(suggestions.length).toBeGreaterThan(0);\n      expect(suggestions[0]).toHaveProperty('suggestionScore');\n      expect(suggestions[0]).toHaveProperty('suggestionReason');\n    });\n\n    test('should sort suggestions by score in descending order', async () => {\n      const suggestions = await discoveryService.generatePersonalizedSuggestions(\n        currentUser,\n        mockUsers\n      );\n\n      for (let i = 1; i < suggestions.length; i++) {\n        expect(suggestions[i - 1].suggestionScore).toBeGreaterThanOrEqual(\n          suggestions[i].suggestionScore\n        );\n      }\n    });\n\n    test('should filter out users with low similarity scores', async () => {\n      // Create users with very low similarity\n      const lowSimilarityUsers: DiscoveredUser[] = [\n        {\n          id: 'low1',\n          userId: 'low1',\n          displayName: 'Low Similarity',\n          company: 'Unknown Corp',\n          industry: 'Unknown',\n          location: 'Unknown',\n          startupStage: 'idea',\n          skills: [],\n          isRecent: false,\n          isVerified: false,\n          mutualConnections: 0,\n          profilePicture: 'https://example.com/low.jpg',\n        },\n      ];\n\n      const suggestions = await discoveryService.generatePersonalizedSuggestions(\n        currentUser,\n        lowSimilarityUsers\n      );\n\n      // Should filter out users with score < 15\n      expect(suggestions).toHaveLength(0);\n    });\n\n    test('should exclude current user from suggestions', async () => {\n      const usersIncludingSelf = [...mockUsers, currentUser];\n\n      const suggestions = await discoveryService.generatePersonalizedSuggestions(\n        currentUser,\n        usersIncludingSelf\n      );\n\n      const selfSuggestion = suggestions.find(s => s.userId === currentUser.userId);\n      expect(selfSuggestion).toBeUndefined();\n    });\n  });\n\n  describe('Diversity Filter', () => {\n    test('should diversify suggestions to avoid too many from same company', () => {\n      // Create multiple users from same company\n      const sameCompanyUsers: SuggestedConnection[] = Array.from({ length: 10 }, (_, i) => ({\n        id: `same${i}`,\n        userId: `same${i}`,\n        displayName: `User ${i}`,\n        company: 'SameCompany',\n        industry: 'Technology',\n        location: 'San Francisco',\n        startupStage: 'growth',\n        skills: ['JavaScript'],\n        isRecent: false,\n        isVerified: true,\n        mutualConnections: 1,\n        profilePicture: `https://example.com/same${i}.jpg`,\n        suggestionReason: ['same_company'],\n        suggestionScore: 90,\n      }));\n\n      const diversified = discoveryService.diversifySuggestions(sameCompanyUsers);\n\n      // Should limit suggestions from same company\n      expect(diversified.length).toBeLessThan(sameCompanyUsers.length);\n    });\n\n    test('should limit total suggestions to 50', () => {\n      const manyUsers: SuggestedConnection[] = Array.from({ length: 100 }, (_, i) => ({\n        id: `user${i}`,\n        userId: `user${i}`,\n        displayName: `User ${i}`,\n        company: `Company${i}`,\n        industry: `Industry${i % 10}`,\n        location: 'Various',\n        startupStage: 'growth',\n        skills: ['JavaScript'],\n        isRecent: false,\n        isVerified: true,\n        mutualConnections: 1,\n        profilePicture: `https://example.com/user${i}.jpg`,\n        suggestionReason: ['same_industry'],\n        suggestionScore: 50,\n      }));\n\n      const diversified = discoveryService.diversifySuggestions(manyUsers);\n\n      expect(diversified.length).toBeLessThanOrEqual(50);\n    });\n\n    test('should maintain variety in industries', () => {\n      const diverseUsers: SuggestedConnection[] = [\n        ...Array.from({ length: 20 }, (_, i) => ({\n          id: `tech${i}`,\n          userId: `tech${i}`,\n          displayName: `Tech User ${i}`,\n          company: `TechCompany${i}`,\n          industry: 'Technology',\n          location: 'San Francisco',\n          startupStage: 'growth',\n          skills: ['JavaScript'],\n          isRecent: false,\n          isVerified: true,\n          mutualConnections: 1,\n          profilePicture: `https://example.com/tech${i}.jpg`,\n          suggestionReason: ['same_industry'],\n          suggestionScore: 80,\n        })),\n        ...Array.from({ length: 5 }, (_, i) => ({\n          id: `health${i}`,\n          userId: `health${i}`,\n          displayName: `Health User ${i}`,\n          company: `HealthCompany${i}`,\n          industry: 'Healthcare',\n          location: 'New York',\n          startupStage: 'early-stage',\n          skills: ['Healthcare'],\n          isRecent: false,\n          isVerified: true,\n          mutualConnections: 1,\n          profilePicture: `https://example.com/health${i}.jpg`,\n          suggestionReason: ['same_location'],\n          suggestionScore: 70,\n        })),\n      ];\n\n      const diversified = discoveryService.diversifySuggestions(diverseUsers);\n\n      const techCount = diversified.filter(u => u.industry === 'Technology').length;\n      const healthCount = diversified.filter(u => u.industry === 'Healthcare').length;\n\n      // Should include users from both industries\n      expect(techCount).toBeGreaterThan(0);\n      expect(healthCount).toBeGreaterThan(0);\n    });\n  });\n\n  describe('Distance Calculation', () => {\n    test('should calculate distance accurately using Haversine formula', () => {\n      // San Francisco to New York (approximately 2572 miles / 4139 km)\n      const sfLat = 37.7749;\n      const sfLon = -122.4194;\n      const nyLat = 40.7128;\n      const nyLon = -74.0060;\n\n      const distance = discoveryService.calculateDistance(sfLat, sfLon, nyLat, nyLon);\n\n      // Should be approximately 4139 km (allow 10% tolerance)\n      expect(distance).toBeGreaterThan(3700);\n      expect(distance).toBeLessThan(4600);\n    });\n\n    test('should return zero distance for same location', () => {\n      const lat = 37.7749;\n      const lon = -122.4194;\n\n      const distance = discoveryService.calculateDistance(lat, lon, lat, lon);\n\n      expect(distance).toBe(0);\n    });\n\n    test('should calculate short distances accurately', () => {\n      // Two points in San Francisco (approximately 5 km apart)\n      const lat1 = 37.7749; // Downtown SF\n      const lon1 = -122.4194;\n      const lat2 = 37.8044; // North Beach\n      const lon2 = -122.4078;\n\n      const distance = discoveryService.calculateDistance(lat1, lon1, lat2, lon2);\n\n      // Should be approximately 3-4 km\n      expect(distance).toBeGreaterThan(2);\n      expect(distance).toBeLessThan(6);\n    });\n  });\n\n  describe('Search Performance', () => {\n    test('should complete similarity calculation within performance threshold', () => {\n      const startTime = performance.now();\n\n      // Run similarity calculation multiple times\n      for (let i = 0; i < 100; i++) {\n        discoveryService.calculateSimilarityScore(currentUser, mockUsers[0]);\n      }\n\n      const endTime = performance.now();\n      const avgTime = (endTime - startTime) / 100;\n\n      // Should complete in less than 1ms on average\n      expect(avgTime).toBeLessThan(1);\n    });\n\n    test('should handle large suggestion generation efficiently', async () => {\n      // Create 1000 mock users\n      const largeUserSet: DiscoveredUser[] = Array.from({ length: 1000 }, (_, i) => ({\n        id: `bulk${i}`,\n        userId: `bulk${i}`,\n        displayName: `Bulk User ${i}`,\n        company: `Company${i % 100}`,\n        industry: `Industry${i % 20}`,\n        location: `City${i % 50}`,\n        startupStage: 'growth',\n        skills: ['JavaScript', 'React'],\n        isRecent: i % 10 === 0,\n        isVerified: i % 5 === 0,\n        mutualConnections: i % 10,\n        profilePicture: `https://example.com/bulk${i}.jpg`,\n      }));\n\n      const startTime = performance.now();\n\n      const suggestions = await discoveryService.generatePersonalizedSuggestions(\n        currentUser,\n        largeUserSet\n      );\n\n      const endTime = performance.now();\n      const executionTime = endTime - startTime;\n\n      // Should complete in less than 100ms for 1000 users\n      expect(executionTime).toBeLessThan(100);\n      expect(suggestions).toBeInstanceOf(Array);\n    });\n\n    test('should handle diversification of large result sets efficiently', () => {\n      // Create 500 suggestions\n      const largeSuggestions: SuggestedConnection[] = Array.from({ length: 500 }, (_, i) => ({\n        id: `large${i}`,\n        userId: `large${i}`,\n        displayName: `Large User ${i}`,\n        company: `Company${i % 20}`,\n        industry: `Industry${i % 10}`,\n        location: `City${i % 30}`,\n        startupStage: 'growth',\n        skills: ['JavaScript'],\n        isRecent: false,\n        isVerified: true,\n        mutualConnections: 1,\n        profilePicture: `https://example.com/large${i}.jpg`,\n        suggestionReason: ['same_industry'],\n        suggestionScore: 50 + (i % 50),\n      }));\n\n      const startTime = performance.now();\n\n      const diversified = discoveryService.diversifySuggestions(largeSuggestions);\n\n      const endTime = performance.now();\n      const executionTime = endTime - startTime;\n\n      // Should complete in less than 50ms for 500 suggestions\n      expect(executionTime).toBeLessThan(50);\n      expect(diversified).toBeInstanceOf(Array);\n      expect(diversified.length).toBeLessThanOrEqual(50);\n    });\n  });\n\n  describe('Edge Cases', () => {\n    test('should handle empty user arrays', async () => {\n      const suggestions = await discoveryService.generatePersonalizedSuggestions(\n        currentUser,\n        []\n      );\n\n      expect(suggestions).toEqual([]);\n    });\n\n    test('should handle users with missing or null fields', () => {\n      const incompleteUser: DiscoveredUser = {\n        id: 'incomplete',\n        userId: 'incomplete',\n        displayName: 'Incomplete User',\n        company: undefined,\n        industry: undefined,\n        location: undefined,\n        startupStage: undefined,\n        skills: undefined,\n        isRecent: false,\n        isVerified: false,\n        mutualConnections: undefined,\n        profilePicture: undefined,\n      };\n\n      const { score } = discoveryService.calculateSimilarityScore(\n        currentUser,\n        incompleteUser\n      );\n\n      // Should not throw error and return valid score\n      expect(typeof score).toBe('number');\n      expect(score).toBeGreaterThanOrEqual(0);\n    });\n\n    test('should handle extreme coordinates for distance calculation', () => {\n      // Test with extreme latitude/longitude values\n      const distance1 = discoveryService.calculateDistance(90, 180, -90, -180);\n      const distance2 = discoveryService.calculateDistance(0, 0, 0, 180);\n\n      expect(typeof distance1).toBe('number');\n      expect(typeof distance2).toBe('number');\n      expect(distance1).toBeGreaterThan(0);\n      expect(distance2).toBeGreaterThan(0);\n    });\n\n    test('should handle case-insensitive matching', () => {\n      const userWithDifferentCase: DiscoveredUser = {\n        ...mockUsers[0],\n        company: 'techcorp', // lowercase\n        industry: 'TECHNOLOGY', // uppercase\n        location: 'san francisco, ca', // mixed case\n      };\n\n      const { score, reasons } = discoveryService.calculateSimilarityScore(\n        currentUser,\n        userWithDifferentCase\n      );\n\n      expect(reasons).toContain('same_company');\n      expect(reasons).toContain('same_industry');\n      expect(score).toBeGreaterThan(50);\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}