d2163b5cf0d4236414785fb5b73776ba
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _discoveryService = _interopRequireDefault(require("../../src/services/discoveryService"));
var mockUsers = [{
  id: '1',
  userId: 'user1',
  displayName: 'John Smith',
  company: 'TechCorp',
  industry: 'Technology',
  location: 'San Francisco, CA',
  startupStage: 'growth',
  skills: ['JavaScript', 'React', 'Node.js'],
  isRecent: false,
  isVerified: true,
  mutualConnections: 5,
  profilePicture: 'https://example.com/john.jpg'
}, {
  id: '2',
  userId: 'user2',
  displayName: 'Jane Doe',
  company: 'TechCorp',
  industry: 'Technology',
  location: 'San Francisco, CA',
  startupStage: 'growth',
  skills: ['Python', 'AI', 'Machine Learning'],
  isRecent: true,
  isVerified: true,
  mutualConnections: 3,
  profilePicture: 'https://example.com/jane.jpg'
}, {
  id: '3',
  userId: 'user3',
  displayName: 'Bob Johnson',
  company: 'HealthTech Inc',
  industry: 'Healthcare',
  location: 'New York, NY',
  startupStage: 'early-stage',
  skills: ['JavaScript', 'React', 'Healthcare'],
  isRecent: false,
  isVerified: false,
  mutualConnections: 1,
  profilePicture: 'https://example.com/bob.jpg'
}, {
  id: '4',
  userId: 'user4',
  displayName: 'Alice Brown',
  company: 'FinanceApp',
  industry: 'Finance',
  location: 'London, UK',
  startupStage: 'mvp',
  skills: ['Java', 'Spring', 'Finance'],
  isRecent: true,
  isVerified: true,
  mutualConnections: 0,
  profilePicture: 'https://example.com/alice.jpg'
}];
var currentUser = {
  id: 'current',
  userId: 'currentUser',
  displayName: 'Test User',
  company: 'TechCorp',
  industry: 'Technology',
  location: 'San Francisco, CA',
  startupStage: 'growth',
  skills: ['JavaScript', 'React', 'TypeScript'],
  isRecent: false,
  isVerified: true,
  mutualConnections: 0,
  profilePicture: 'https://example.com/current.jpg'
};
describe('Search Algorithm Accuracy Tests', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe('Similarity Scoring Algorithm', function () {
    test('should give highest score to same company match', function () {
      var _discoveryService$cal = _discoveryService.default.calculateSimilarityScore(currentUser, mockUsers[0]),
        score = _discoveryService$cal.score,
        reasons = _discoveryService$cal.reasons;
      expect(score).toBeGreaterThan(30);
      expect(reasons).toContain('same_company');
    });
    test('should score industry match appropriately', function () {
      var _discoveryService$cal2 = _discoveryService.default.calculateSimilarityScore(currentUser, mockUsers[1]),
        score = _discoveryService$cal2.score,
        reasons = _discoveryService$cal2.reasons;
      expect(score).toBeGreaterThan(25);
      expect(reasons).toContain('same_industry');
    });
    test('should score location proximity correctly', function () {
      var _discoveryService$cal3 = _discoveryService.default.calculateSimilarityScore(currentUser, mockUsers[0]),
        score = _discoveryService$cal3.score,
        reasons = _discoveryService$cal3.reasons;
      expect(score).toBeGreaterThan(20);
      expect(reasons).toContain('same_location');
    });
    test('should score startup stage match', function () {
      var _discoveryService$cal4 = _discoveryService.default.calculateSimilarityScore(currentUser, mockUsers[1]),
        score = _discoveryService$cal4.score,
        reasons = _discoveryService$cal4.reasons;
      expect(score).toBeGreaterThan(15);
      expect(reasons).toContain('startup_stage');
    });
    test('should score skills overlap correctly', function () {
      var _discoveryService$cal5 = _discoveryService.default.calculateSimilarityScore(currentUser, mockUsers[2]),
        score = _discoveryService$cal5.score,
        reasons = _discoveryService$cal5.reasons;
      expect(reasons).toContain('similar_skills');
      expect(score).toBeGreaterThan(0);
    });
    test('should apply mutual connections boost', function () {
      var _discoveryService$cal6 = _discoveryService.default.calculateSimilarityScore(currentUser, mockUsers[0]),
        score = _discoveryService$cal6.score,
        reasons = _discoveryService$cal6.reasons;
      expect(reasons).toContain('mutual_connections');
      expect(score).toBeGreaterThan(0);
    });
    test('should apply recent activity boost', function () {
      var _discoveryService$cal7 = _discoveryService.default.calculateSimilarityScore(currentUser, mockUsers[1]),
        score = _discoveryService$cal7.score,
        reasons = _discoveryService$cal7.reasons;
      expect(reasons).toContain('recent_activity');
      expect(score).toBeGreaterThan(0);
    });
    test('should cap maximum score at 100', function () {
      var perfectMatch = Object.assign({}, currentUser, {
        id: 'perfect',
        userId: 'perfect',
        mutualConnections: 50,
        isRecent: true
      });
      var _discoveryService$cal8 = _discoveryService.default.calculateSimilarityScore(currentUser, perfectMatch),
        score = _discoveryService$cal8.score;
      expect(score).toBeLessThanOrEqual(100);
    });
    test('should return zero score for no matches', function () {
      var noMatch = {
        id: 'nomatch',
        userId: 'nomatch',
        displayName: 'No Match',
        company: 'Different Corp',
        industry: 'Different Industry',
        location: 'Different City',
        startupStage: 'idea',
        skills: ['PHP', 'Laravel'],
        isRecent: false,
        isVerified: false,
        mutualConnections: 0,
        profilePicture: 'https://example.com/nomatch.jpg'
      };
      var _discoveryService$cal9 = _discoveryService.default.calculateSimilarityScore(currentUser, noMatch),
        score = _discoveryService$cal9.score;
      expect(score).toBe(0);
    });
  });
  describe('Personalized Suggestions Generation', function () {
    test('should generate suggestions based on similarity scores', (0, _asyncToGenerator2.default)(function* () {
      var suggestions = yield _discoveryService.default.generatePersonalizedSuggestions(currentUser, mockUsers);
      expect(suggestions).toBeInstanceOf(Array);
      expect(suggestions.length).toBeGreaterThan(0);
      expect(suggestions[0]).toHaveProperty('suggestionScore');
      expect(suggestions[0]).toHaveProperty('suggestionReason');
    }));
    test('should sort suggestions by score in descending order', (0, _asyncToGenerator2.default)(function* () {
      var suggestions = yield _discoveryService.default.generatePersonalizedSuggestions(currentUser, mockUsers);
      for (var i = 1; i < suggestions.length; i++) {
        expect(suggestions[i - 1].suggestionScore).toBeGreaterThanOrEqual(suggestions[i].suggestionScore);
      }
    }));
    test('should filter out users with low similarity scores', (0, _asyncToGenerator2.default)(function* () {
      var lowSimilarityUsers = [{
        id: 'low1',
        userId: 'low1',
        displayName: 'Low Similarity',
        company: 'Unknown Corp',
        industry: 'Unknown',
        location: 'Unknown',
        startupStage: 'idea',
        skills: [],
        isRecent: false,
        isVerified: false,
        mutualConnections: 0,
        profilePicture: 'https://example.com/low.jpg'
      }];
      var suggestions = yield _discoveryService.default.generatePersonalizedSuggestions(currentUser, lowSimilarityUsers);
      expect(suggestions).toHaveLength(0);
    }));
    test('should exclude current user from suggestions', (0, _asyncToGenerator2.default)(function* () {
      var usersIncludingSelf = [].concat(mockUsers, [currentUser]);
      var suggestions = yield _discoveryService.default.generatePersonalizedSuggestions(currentUser, usersIncludingSelf);
      var selfSuggestion = suggestions.find(function (s) {
        return s.userId === currentUser.userId;
      });
      expect(selfSuggestion).toBeUndefined();
    }));
  });
  describe('Diversity Filter', function () {
    test('should diversify suggestions to avoid too many from same company', function () {
      var sameCompanyUsers = Array.from({
        length: 10
      }, function (_, i) {
        return {
          id: `same${i}`,
          userId: `same${i}`,
          displayName: `User ${i}`,
          company: 'SameCompany',
          industry: 'Technology',
          location: 'San Francisco',
          startupStage: 'growth',
          skills: ['JavaScript'],
          isRecent: false,
          isVerified: true,
          mutualConnections: 1,
          profilePicture: `https://example.com/same${i}.jpg`,
          suggestionReason: ['same_company'],
          suggestionScore: 90
        };
      });
      var diversified = _discoveryService.default.diversifySuggestions(sameCompanyUsers);
      expect(diversified.length).toBeLessThan(sameCompanyUsers.length);
    });
    test('should limit total suggestions to 50', function () {
      var manyUsers = Array.from({
        length: 100
      }, function (_, i) {
        return {
          id: `user${i}`,
          userId: `user${i}`,
          displayName: `User ${i}`,
          company: `Company${i}`,
          industry: `Industry${i % 10}`,
          location: 'Various',
          startupStage: 'growth',
          skills: ['JavaScript'],
          isRecent: false,
          isVerified: true,
          mutualConnections: 1,
          profilePicture: `https://example.com/user${i}.jpg`,
          suggestionReason: ['same_industry'],
          suggestionScore: 50
        };
      });
      var diversified = _discoveryService.default.diversifySuggestions(manyUsers);
      expect(diversified.length).toBeLessThanOrEqual(50);
    });
    test('should maintain variety in industries', function () {
      var diverseUsers = [].concat((0, _toConsumableArray2.default)(Array.from({
        length: 20
      }, function (_, i) {
        return {
          id: `tech${i}`,
          userId: `tech${i}`,
          displayName: `Tech User ${i}`,
          company: `TechCompany${i}`,
          industry: 'Technology',
          location: 'San Francisco',
          startupStage: 'growth',
          skills: ['JavaScript'],
          isRecent: false,
          isVerified: true,
          mutualConnections: 1,
          profilePicture: `https://example.com/tech${i}.jpg`,
          suggestionReason: ['same_industry'],
          suggestionScore: 80
        };
      })), (0, _toConsumableArray2.default)(Array.from({
        length: 5
      }, function (_, i) {
        return {
          id: `health${i}`,
          userId: `health${i}`,
          displayName: `Health User ${i}`,
          company: `HealthCompany${i}`,
          industry: 'Healthcare',
          location: 'New York',
          startupStage: 'early-stage',
          skills: ['Healthcare'],
          isRecent: false,
          isVerified: true,
          mutualConnections: 1,
          profilePicture: `https://example.com/health${i}.jpg`,
          suggestionReason: ['same_location'],
          suggestionScore: 70
        };
      })));
      var diversified = _discoveryService.default.diversifySuggestions(diverseUsers);
      var techCount = diversified.filter(function (u) {
        return u.industry === 'Technology';
      }).length;
      var healthCount = diversified.filter(function (u) {
        return u.industry === 'Healthcare';
      }).length;
      expect(techCount).toBeGreaterThan(0);
      expect(healthCount).toBeGreaterThan(0);
    });
  });
  describe('Distance Calculation', function () {
    test('should calculate distance accurately using Haversine formula', function () {
      var sfLat = 37.7749;
      var sfLon = -122.4194;
      var nyLat = 40.7128;
      var nyLon = -74.0060;
      var distance = _discoveryService.default.calculateDistance(sfLat, sfLon, nyLat, nyLon);
      expect(distance).toBeGreaterThan(3700);
      expect(distance).toBeLessThan(4600);
    });
    test('should return zero distance for same location', function () {
      var lat = 37.7749;
      var lon = -122.4194;
      var distance = _discoveryService.default.calculateDistance(lat, lon, lat, lon);
      expect(distance).toBe(0);
    });
    test('should calculate short distances accurately', function () {
      var lat1 = 37.7749;
      var lon1 = -122.4194;
      var lat2 = 37.8044;
      var lon2 = -122.4078;
      var distance = _discoveryService.default.calculateDistance(lat1, lon1, lat2, lon2);
      expect(distance).toBeGreaterThan(2);
      expect(distance).toBeLessThan(6);
    });
  });
  describe('Search Performance', function () {
    test('should complete similarity calculation within performance threshold', function () {
      var startTime = performance.now();
      for (var i = 0; i < 100; i++) {
        _discoveryService.default.calculateSimilarityScore(currentUser, mockUsers[0]);
      }
      var endTime = performance.now();
      var avgTime = (endTime - startTime) / 100;
      expect(avgTime).toBeLessThan(1);
    });
    test('should handle large suggestion generation efficiently', (0, _asyncToGenerator2.default)(function* () {
      var largeUserSet = Array.from({
        length: 1000
      }, function (_, i) {
        return {
          id: `bulk${i}`,
          userId: `bulk${i}`,
          displayName: `Bulk User ${i}`,
          company: `Company${i % 100}`,
          industry: `Industry${i % 20}`,
          location: `City${i % 50}`,
          startupStage: 'growth',
          skills: ['JavaScript', 'React'],
          isRecent: i % 10 === 0,
          isVerified: i % 5 === 0,
          mutualConnections: i % 10,
          profilePicture: `https://example.com/bulk${i}.jpg`
        };
      });
      var startTime = performance.now();
      var suggestions = yield _discoveryService.default.generatePersonalizedSuggestions(currentUser, largeUserSet);
      var endTime = performance.now();
      var executionTime = endTime - startTime;
      expect(executionTime).toBeLessThan(100);
      expect(suggestions).toBeInstanceOf(Array);
    }));
    test('should handle diversification of large result sets efficiently', function () {
      var largeSuggestions = Array.from({
        length: 500
      }, function (_, i) {
        return {
          id: `large${i}`,
          userId: `large${i}`,
          displayName: `Large User ${i}`,
          company: `Company${i % 20}`,
          industry: `Industry${i % 10}`,
          location: `City${i % 30}`,
          startupStage: 'growth',
          skills: ['JavaScript'],
          isRecent: false,
          isVerified: true,
          mutualConnections: 1,
          profilePicture: `https://example.com/large${i}.jpg`,
          suggestionReason: ['same_industry'],
          suggestionScore: 50 + i % 50
        };
      });
      var startTime = performance.now();
      var diversified = _discoveryService.default.diversifySuggestions(largeSuggestions);
      var endTime = performance.now();
      var executionTime = endTime - startTime;
      expect(executionTime).toBeLessThan(50);
      expect(diversified).toBeInstanceOf(Array);
      expect(diversified.length).toBeLessThanOrEqual(50);
    });
  });
  describe('Edge Cases', function () {
    test('should handle empty user arrays', (0, _asyncToGenerator2.default)(function* () {
      var suggestions = yield _discoveryService.default.generatePersonalizedSuggestions(currentUser, []);
      expect(suggestions).toEqual([]);
    }));
    test('should handle users with missing or null fields', function () {
      var incompleteUser = {
        id: 'incomplete',
        userId: 'incomplete',
        displayName: 'Incomplete User',
        company: undefined,
        industry: undefined,
        location: undefined,
        startupStage: undefined,
        skills: undefined,
        isRecent: false,
        isVerified: false,
        mutualConnections: undefined,
        profilePicture: undefined
      };
      var _discoveryService$cal0 = _discoveryService.default.calculateSimilarityScore(currentUser, incompleteUser),
        score = _discoveryService$cal0.score;
      expect(typeof score).toBe('number');
      expect(score).toBeGreaterThanOrEqual(0);
    });
    test('should handle extreme coordinates for distance calculation', function () {
      var distance1 = _discoveryService.default.calculateDistance(90, 180, -90, -180);
      var distance2 = _discoveryService.default.calculateDistance(0, 0, 0, 180);
      expect(typeof distance1).toBe('number');
      expect(typeof distance2).toBe('number');
      expect(distance1).toBeGreaterThan(0);
      expect(distance2).toBeGreaterThan(0);
    });
    test('should handle case-insensitive matching', function () {
      var userWithDifferentCase = Object.assign({}, mockUsers[0], {
        company: 'techcorp',
        industry: 'TECHNOLOGY',
        location: 'san francisco, ca'
      });
      var _discoveryService$cal1 = _discoveryService.default.calculateSimilarityScore(currentUser, userWithDifferentCase),
        score = _discoveryService$cal1.score,
        reasons = _discoveryService$cal1.reasons;
      expect(reasons).toContain('same_company');
      expect(reasons).toContain('same_industry');
      expect(score).toBeGreaterThan(50);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,