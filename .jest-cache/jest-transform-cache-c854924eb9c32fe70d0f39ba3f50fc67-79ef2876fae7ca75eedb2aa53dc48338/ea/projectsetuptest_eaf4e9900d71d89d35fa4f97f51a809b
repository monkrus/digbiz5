530e2090410addeb6645702755c27ae2
var fs = _interopRequireWildcard(require("fs"));
var path = _interopRequireWildcard(require("path"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
describe('Project Setup Verification', function () {
  var projectRoot = path.resolve(__dirname, '../..');
  describe('Dependencies Installation', function () {
    test('should have all required dependencies installed', function () {
      var packageJsonPath = path.join(projectRoot, 'package.json');
      var packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
      var requiredDeps = ['@react-navigation/native', '@react-navigation/stack', '@react-navigation/bottom-tabs', '@react-navigation/drawer', 'react-native-paper', '@reduxjs/toolkit', 'react-redux', 'react-hook-form', '@hookform/resolvers', 'react-native-mmkv', 'react-native-config', 'react-native-safe-area-context', 'react-native-screens', 'react-native-gesture-handler', 'react-native-vector-icons', 'yup'];
      requiredDeps.forEach(function (dep) {
        expect(packageJson.dependencies[dep]).toBeDefined();
      });
    });
    test('should have node_modules directory', function () {
      var nodeModulesPath = path.join(projectRoot, 'node_modules');
      expect(fs.existsSync(nodeModulesPath)).toBe(true);
    });
    test('should have package-lock.json or yarn.lock', function () {
      var packageLockPath = path.join(projectRoot, 'package-lock.json');
      var yarnLockPath = path.join(projectRoot, 'yarn.lock');
      expect(fs.existsSync(packageLockPath) || fs.existsSync(yarnLockPath)).toBe(true);
    });
  });
  describe('Project Structure', function () {
    test('should have required configuration files', function () {
      var requiredFiles = ['package.json', 'tsconfig.json', '.eslintrc.js', '.prettierrc.js', 'babel.config.js', 'metro.config.js', 'App.tsx', '.env'];
      requiredFiles.forEach(function (file) {
        var filePath = path.join(projectRoot, file);
        expect(fs.existsSync(filePath)).toBe(true);
      });
    });
    test('should have source directory structure', function () {
      var requiredDirs = ['src/store', 'src/screens', 'src/types', 'src/utils'];
      requiredDirs.forEach(function (dir) {
        var dirPath = path.join(projectRoot, dir);
        expect(fs.existsSync(dirPath)).toBe(true);
      });
    });
    test('should have platform-specific directories', function () {
      var platformDirs = ['ios', 'android'];
      platformDirs.forEach(function (dir) {
        var dirPath = path.join(projectRoot, dir);
        expect(fs.existsSync(dirPath)).toBe(true);
      });
    });
  });
  describe('Environment Configuration', function () {
    test('should have environment variables file', function () {
      var envPath = path.join(projectRoot, '.env');
      expect(fs.existsSync(envPath)).toBe(true);
      var envContent = fs.readFileSync(envPath, 'utf8');
      expect(envContent).toContain('API_URL');
      expect(envContent).toContain('APP_NAME');
      expect(envContent).toContain('DEBUG_MODE');
    });
    test('should have TypeScript declarations for env', function () {
      var envTypesPath = path.join(projectRoot, 'src/types/env.d.ts');
      expect(fs.existsSync(envTypesPath)).toBe(true);
    });
  });
  describe('CI/CD Configuration', function () {
    test('should have GitHub Actions workflows', function () {
      var workflowsDir = path.join(projectRoot, '.github/workflows');
      expect(fs.existsSync(workflowsDir)).toBe(true);
      var requiredWorkflows = ['ci.yml', 'android-build.yml', 'ios-build.yml', 'deploy.yml'];
      requiredWorkflows.forEach(function (workflow) {
        var workflowPath = path.join(workflowsDir, workflow);
        expect(fs.existsSync(workflowPath)).toBe(true);
      });
    });
    test('should have Fastlane configuration', function () {
      var iosFastlanePath = path.join(projectRoot, 'ios/fastlane/Fastfile');
      var androidFastlanePath = path.join(projectRoot, 'android/fastlane/Fastfile');
      expect(fs.existsSync(iosFastlanePath)).toBe(true);
      expect(fs.existsSync(androidFastlanePath)).toBe(true);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,