{"version":3,"names":["fs","_interopRequireWildcard","require","path","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","_t","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","describe","projectRoot","resolve","__dirname","test","packageJsonPath","join","packageJson","JSON","parse","readFileSync","requiredDeps","forEach","dep","expect","dependencies","toBeDefined","nodeModulesPath","existsSync","toBe","packageLockPath","yarnLockPath","requiredFiles","file","filePath","requiredDirs","dir","dirPath","platformDirs","envPath","envContent","toContain","envTypesPath","workflowsDir","requiredWorkflows","workflow","workflowPath","iosFastlanePath","androidFastlanePath"],"sources":["project-setup.test.ts"],"sourcesContent":["/**\n * Project Setup Verification Tests\n *\n * This test suite validates the fundamental project setup, structure, and configuration\n * for the React Native application. It ensures that all necessary dependencies, files,\n * directories, and configurations are properly in place for development and production.\n *\n * What these tests verify:\n * - Required dependencies installation and availability\n * - Project directory structure and essential files\n * - Environment configuration and variables setup\n * - CI/CD pipeline configuration (GitHub Actions, Fastlane)\n * - Development tools and configuration files\n * - Platform-specific directory structure\n *\n * These tests act as a comprehensive project health check and setup validation.\n */\n\nimport * as fs from 'fs';\nimport * as path from 'path';\n\ndescribe('Project Setup Verification', () => {\n  const projectRoot = path.resolve(__dirname, '../..');\n\n  // Test Group: Dependencies Installation\n  // Validates that all required npm packages are properly installed\n  describe('Dependencies Installation', () => {\n    // Test: Required Dependencies Check\n    // Verifies that all essential React Native and third-party packages are present\n    test('should have all required dependencies installed', () => {\n      const packageJsonPath = path.join(projectRoot, 'package.json');\n      const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));\n\n      const requiredDeps = [\n        '@react-navigation/native',\n        '@react-navigation/stack',\n        '@react-navigation/bottom-tabs',\n        '@react-navigation/drawer',\n        'react-native-paper',\n        '@reduxjs/toolkit',\n        'react-redux',\n        'react-hook-form',\n        '@hookform/resolvers',\n        'react-native-mmkv',\n        'react-native-config',\n        'react-native-safe-area-context',\n        'react-native-screens',\n        'react-native-gesture-handler',\n        'react-native-vector-icons',\n        'yup',\n      ];\n\n      requiredDeps.forEach(dep => {\n        expect(packageJson.dependencies[dep]).toBeDefined();\n      });\n    });\n\n    // Test: Node Modules Directory\n    // Checks that node_modules exists indicating successful npm/yarn install\n    test('should have node_modules directory', () => {\n      const nodeModulesPath = path.join(projectRoot, 'node_modules');\n      expect(fs.existsSync(nodeModulesPath)).toBe(true);\n    });\n\n    // Test: Lock File Existence\n    // Ensures dependency versions are locked via package-lock.json or yarn.lock\n    test('should have package-lock.json or yarn.lock', () => {\n      const packageLockPath = path.join(projectRoot, 'package-lock.json');\n      const yarnLockPath = path.join(projectRoot, 'yarn.lock');\n\n      expect(\n        fs.existsSync(packageLockPath) || fs.existsSync(yarnLockPath),\n      ).toBe(true);\n    });\n  });\n\n  // Test Group: Project Structure\n  // Validates essential project files and directory organization\n  describe('Project Structure', () => {\n    // Test: Configuration Files\n    // Checks for all essential config files (package.json, tsconfig, babel, etc.)\n    test('should have required configuration files', () => {\n      const requiredFiles = [\n        'package.json',\n        'tsconfig.json',\n        '.eslintrc.js',\n        '.prettierrc.js',\n        'babel.config.js',\n        'metro.config.js',\n        'App.tsx',\n        '.env',\n      ];\n\n      requiredFiles.forEach(file => {\n        const filePath = path.join(projectRoot, file);\n        expect(fs.existsSync(filePath)).toBe(true);\n      });\n    });\n\n    // Test: Source Directory Structure\n    // Validates that the src/ directory has proper organization (store, screens, types, utils)\n    test('should have source directory structure', () => {\n      const requiredDirs = [\n        'src/store',\n        'src/screens',\n        'src/types',\n        'src/utils',\n      ];\n\n      requiredDirs.forEach(dir => {\n        const dirPath = path.join(projectRoot, dir);\n        expect(fs.existsSync(dirPath)).toBe(true);\n      });\n    });\n\n    // Test: Platform-Specific Directories\n    // Ensures both iOS and Android platform directories exist for native builds\n    test('should have platform-specific directories', () => {\n      const platformDirs = ['ios', 'android'];\n\n      platformDirs.forEach(dir => {\n        const dirPath = path.join(projectRoot, dir);\n        expect(fs.existsSync(dirPath)).toBe(true);\n      });\n    });\n  });\n\n  // Test Group: Environment Configuration\n  // Validates environment setup and configuration management\n  describe('Environment Configuration', () => {\n    // Test: Environment Variables File\n    // Checks that .env exists with required environment variables\n    test('should have environment variables file', () => {\n      const envPath = path.join(projectRoot, '.env');\n      expect(fs.existsSync(envPath)).toBe(true);\n\n      const envContent = fs.readFileSync(envPath, 'utf8');\n      expect(envContent).toContain('API_URL');\n      expect(envContent).toContain('APP_NAME');\n      expect(envContent).toContain('DEBUG_MODE');\n    });\n\n    // Test: Environment TypeScript Declarations\n    // Verifies that TypeScript declarations exist for environment variables\n    test('should have TypeScript declarations for env', () => {\n      const envTypesPath = path.join(projectRoot, 'src/types/env.d.ts');\n      expect(fs.existsSync(envTypesPath)).toBe(true);\n    });\n  });\n\n  // Test Group: CI/CD Configuration\n  // Validates continuous integration and deployment setup\n  describe('CI/CD Configuration', () => {\n    // Test: GitHub Actions Workflows\n    // Checks for CI/CD workflow files in .github/workflows directory\n    test('should have GitHub Actions workflows', () => {\n      const workflowsDir = path.join(projectRoot, '.github/workflows');\n      expect(fs.existsSync(workflowsDir)).toBe(true);\n\n      const requiredWorkflows = [\n        'ci.yml',\n        'android-build.yml',\n        'ios-build.yml',\n        'deploy.yml',\n      ];\n\n      requiredWorkflows.forEach(workflow => {\n        const workflowPath = path.join(workflowsDir, workflow);\n        expect(fs.existsSync(workflowPath)).toBe(true);\n      });\n    });\n\n    // Test: Fastlane Configuration\n    // Verifies that Fastlane automation is configured for both iOS and Android\n    test('should have Fastlane configuration', () => {\n      const iosFastlanePath = path.join(projectRoot, 'ios/fastlane/Fastfile');\n      const androidFastlanePath = path.join(\n        projectRoot,\n        'android/fastlane/Fastfile',\n      );\n\n      expect(fs.existsSync(iosFastlanePath)).toBe(true);\n      expect(fs.existsSync(androidFastlanePath)).toBe(true);\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}