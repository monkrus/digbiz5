2f2e4b3e43483e79d7dda68307111ed2
_getJestObj().unmock('../../src/services/tokenStorage');
_getJestObj().unmock('../../src/utils/tokenUtils');
_getJestObj().mock('crypto-js', function () {
  return {
    AES: {
      encrypt: jest.fn(),
      decrypt: jest.fn()
    },
    enc: {
      Utf8: {
        stringify: jest.fn()
      }
    }
  };
});
_getJestObj().mock('../../src/utils/tokenUtils');
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNativeMmkv = require("react-native-mmkv");
var _cryptoJs = _interopRequireDefault(require("crypto-js"));
var _tokenStorage = require("../../src/services/tokenStorage");
var _tokenUtils = require("../../src/utils/tokenUtils");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('TokenStorageService', function () {
  var storage;
  var mockMMKV;
  var mockValidateTokens = _tokenUtils.validateTokens;
  var mockIsRefreshTokenValid = _tokenUtils.isRefreshTokenValid;
  var mockTokens = {
    accessToken: 'mock-access-token',
    refreshToken: 'mock-refresh-token',
    expiresIn: 3600,
    refreshExpiresIn: 604800
  };
  beforeEach(function () {
    jest.clearAllMocks();
    mockMMKV = {
      set: jest.fn(),
      getString: jest.fn(),
      delete: jest.fn(),
      getAllKeys: jest.fn().mockReturnValue([]),
      clearAll: jest.fn()
    };
    _reactNativeMmkv.MMKV.mockReturnValue(mockMMKV);
    storage = new _tokenStorage.SecureTokenStorage();
  });
  describe('Initialization', function () {
    it('should initialize MMKV with correct configuration', function () {
      expect(_reactNativeMmkv.MMKV).toHaveBeenCalledWith({
        id: 'auth-tokens',
        encryptionKey: expect.any(String)
      });
    });
    it('should generate consistent encryption key', function () {
      new TokenStorageService();
      new TokenStorageService();
      expect(_reactNativeMmkv.MMKV).toHaveBeenCalledTimes(3);
      var calls = _reactNativeMmkv.MMKV.mock.calls;
      expect(calls[1][0].encryptionKey).toEqual(calls[2][0].encryptionKey);
    });
  });
  describe('Token Storage', function () {
    it('should store tokens successfully', (0, _asyncToGenerator2.default)(function* () {
      var encryptedData = {
        toString: function toString() {
          return 'encrypted-data';
        }
      };
      _cryptoJs.default.AES.encrypt.mockReturnValue(encryptedData);
      yield storage.setTokens(mockTokens);
      expect(_cryptoJs.default.AES.encrypt).toHaveBeenCalledWith(JSON.stringify(mockTokens), expect.any(String));
      expect(mockMMKV.set).toHaveBeenCalledWith('tokens', 'encrypted-data');
    }));
    it('should handle storage errors gracefully', (0, _asyncToGenerator2.default)(function* () {
      var consoleSpy = jest.spyOn(console, 'error').mockImplementation();
      mockMMKV.set.mockImplementation(function () {
        throw new Error('Storage error');
      });
      yield expect(storage.setTokens(mockTokens)).rejects.toThrow('Failed to store tokens');
      expect(consoleSpy).toHaveBeenCalledWith('Failed to store tokens:', expect.any(Error));
      consoleSpy.mockRestore();
    }));
    it('should handle encryption errors', (0, _asyncToGenerator2.default)(function* () {
      var consoleSpy = jest.spyOn(console, 'error').mockImplementation();
      _cryptoJs.default.AES.encrypt.mockImplementation(function () {
        throw new Error('Encryption error');
      });
      yield expect(storage.setTokens(mockTokens)).rejects.toThrow('Failed to store tokens');
      expect(consoleSpy).toHaveBeenCalledWith('Failed to store tokens:', expect.any(Error));
      consoleSpy.mockRestore();
    }));
  });
  describe('Token Retrieval', function () {
    it('should retrieve and decrypt tokens successfully', (0, _asyncToGenerator2.default)(function* () {
      var encryptedData = 'encrypted-token-data';
      var decryptedMock = {
        toString: jest.fn().mockReturnValue(JSON.stringify(mockTokens))
      };
      mockMMKV.getString.mockReturnValue(encryptedData);
      _cryptoJs.default.AES.decrypt.mockReturnValue(decryptedMock);
      _cryptoJs.default.enc.Utf8.stringify.mockReturnValue(JSON.stringify(mockTokens));
      var result = yield storage.getTokens();
      expect(mockMMKV.getString).toHaveBeenCalledWith('tokens');
      expect(_cryptoJs.default.AES.decrypt).toHaveBeenCalledWith(encryptedData, expect.any(String));
      expect(result).toEqual(mockTokens);
    }));
    it('should return null when no tokens are stored', (0, _asyncToGenerator2.default)(function* () {
      mockMMKV.getString.mockReturnValue(undefined);
      var result = yield storage.getTokens();
      expect(result).toBeNull();
    }));
    it('should handle decryption errors gracefully', (0, _asyncToGenerator2.default)(function* () {
      var consoleSpy = jest.spyOn(console, 'error').mockImplementation();
      mockMMKV.getString.mockReturnValue('invalid-encrypted-data');
      _cryptoJs.default.AES.decrypt.mockImplementation(function () {
        throw new Error('Decryption error');
      });
      var result = yield storage.getTokens();
      expect(result).toBeNull();
      expect(consoleSpy).toHaveBeenCalledWith('Failed to retrieve tokens:', expect.any(Error));
      consoleSpy.mockRestore();
    }));
    it('should handle invalid JSON data', (0, _asyncToGenerator2.default)(function* () {
      var consoleSpy = jest.spyOn(console, 'error').mockImplementation();
      var encryptedData = 'encrypted-data';
      var decryptedMock = {
        toString: jest.fn().mockReturnValue('invalid-json')
      };
      mockMMKV.getString.mockReturnValue(encryptedData);
      _cryptoJs.default.AES.decrypt.mockReturnValue(decryptedMock);
      _cryptoJs.default.enc.Utf8.stringify.mockReturnValue('invalid-json');
      var result = yield storage.getTokens();
      expect(result).toBeNull();
      expect(consoleSpy).toHaveBeenCalledWith('Failed to retrieve tokens:', expect.any(SyntaxError));
      consoleSpy.mockRestore();
    }));
  });
  describe('Token Removal', function () {
    it('should remove tokens successfully', (0, _asyncToGenerator2.default)(function* () {
      yield storage.removeTokens();
      expect(mockMMKV.delete).toHaveBeenCalledWith('tokens');
    }));
    it('should handle removal errors gracefully', (0, _asyncToGenerator2.default)(function* () {
      var consoleSpy = jest.spyOn(console, 'error').mockImplementation();
      mockMMKV.delete.mockImplementation(function () {
        throw new Error('Delete error');
      });
      yield expect(storage.removeTokens()).rejects.toThrow('Failed to remove tokens');
      expect(consoleSpy).toHaveBeenCalledWith('Failed to remove tokens:', expect.any(Error));
      consoleSpy.mockRestore();
    }));
  });
  describe('Token Validation', function () {
    it('should return true for valid tokens', (0, _asyncToGenerator2.default)(function* () {
      var encryptedData = 'encrypted-token-data';
      var decryptedMock = {
        toString: jest.fn().mockReturnValue(JSON.stringify(mockTokens))
      };
      mockMMKV.getString.mockReturnValue(encryptedData);
      _cryptoJs.default.AES.decrypt.mockReturnValue(decryptedMock);
      _cryptoJs.default.enc.Utf8.stringify.mockReturnValue(JSON.stringify(mockTokens));
      mockValidateTokens.mockReturnValue({
        isValid: true,
        isExpired: false,
        shouldRefresh: false
      });
      var result = yield storage.hasValidTokens();
      expect(result).toBe(true);
      expect(mockValidateTokens).toHaveBeenCalledWith(mockTokens);
    }));
    it('should return false for invalid tokens', (0, _asyncToGenerator2.default)(function* () {
      var encryptedData = 'encrypted-token-data';
      var decryptedMock = {
        toString: jest.fn().mockReturnValue(JSON.stringify(mockTokens))
      };
      mockMMKV.getString.mockReturnValue(encryptedData);
      _cryptoJs.default.AES.decrypt.mockReturnValue(decryptedMock);
      _cryptoJs.default.enc.Utf8.stringify.mockReturnValue(JSON.stringify(mockTokens));
      mockValidateTokens.mockReturnValue({
        isValid: false,
        isExpired: true,
        shouldRefresh: false
      });
      var result = yield storage.hasValidTokens();
      expect(result).toBe(false);
    }));
    it('should return false when no tokens exist', (0, _asyncToGenerator2.default)(function* () {
      mockMMKV.getString.mockReturnValue(undefined);
      var result = yield storage.hasValidTokens();
      expect(result).toBe(false);
      expect(mockValidateTokens).not.toHaveBeenCalled();
    }));
    it('should return false when token retrieval fails', (0, _asyncToGenerator2.default)(function* () {
      var consoleSpy = jest.spyOn(console, 'error').mockImplementation();
      mockMMKV.getString.mockReturnValue('invalid-encrypted-data');
      _cryptoJs.default.AES.decrypt.mockImplementation(function () {
        throw new Error('Decryption error');
      });
      var result = yield storage.hasValidTokens();
      expect(result).toBe(false);
      consoleSpy.mockRestore();
    }));
  });
  describe('Storage Cleanup', function () {
    it('should clear all storage data', (0, _asyncToGenerator2.default)(function* () {
      yield storage.clearAllData();
      expect(mockMMKV.clearAll).toHaveBeenCalled();
    }));
    it('should handle cleanup errors gracefully', (0, _asyncToGenerator2.default)(function* () {
      var consoleSpy = jest.spyOn(console, 'error').mockImplementation();
      mockMMKV.clearAll.mockImplementation(function () {
        throw new Error('Clear error');
      });
      yield expect(storage.clearAllData()).rejects.toThrow('Failed to clear storage');
      expect(consoleSpy).toHaveBeenCalledWith('Failed to clear all storage data:', expect.any(Error));
      consoleSpy.mockRestore();
    }));
  });
  describe('Access Token Management', function () {
    it('should get access token from stored tokens', (0, _asyncToGenerator2.default)(function* () {
      var encryptedData = 'encrypted-token-data';
      var decryptedMock = {
        toString: jest.fn().mockReturnValue(JSON.stringify(mockTokens))
      };
      mockMMKV.getString.mockReturnValue(encryptedData);
      _cryptoJs.default.AES.decrypt.mockReturnValue(decryptedMock);
      _cryptoJs.default.enc.Utf8.stringify.mockReturnValue(JSON.stringify(mockTokens));
      var result = yield storage.getAccessToken();
      expect(result).toBe(mockTokens.accessToken);
    }));
    it('should return null when no access token exists', (0, _asyncToGenerator2.default)(function* () {
      mockMMKV.getString.mockReturnValue(undefined);
      var result = yield storage.getAccessToken();
      expect(result).toBeNull();
    }));
  });
  describe('Refresh Token Management', function () {
    it('should get refresh token from stored tokens', (0, _asyncToGenerator2.default)(function* () {
      var encryptedData = 'encrypted-token-data';
      var decryptedMock = {
        toString: jest.fn().mockReturnValue(JSON.stringify(mockTokens))
      };
      mockMMKV.getString.mockReturnValue(encryptedData);
      _cryptoJs.default.AES.decrypt.mockReturnValue(decryptedMock);
      _cryptoJs.default.enc.Utf8.stringify.mockReturnValue(JSON.stringify(mockTokens));
      var result = yield storage.getRefreshToken();
      expect(result).toBe(mockTokens.refreshToken);
    }));
    it('should return null when no refresh token exists', (0, _asyncToGenerator2.default)(function* () {
      mockMMKV.getString.mockReturnValue(undefined);
      var result = yield storage.getRefreshToken();
      expect(result).toBeNull();
    }));
    it('should validate refresh token', (0, _asyncToGenerator2.default)(function* () {
      var encryptedData = 'encrypted-token-data';
      var decryptedMock = {
        toString: jest.fn().mockReturnValue(JSON.stringify(mockTokens))
      };
      mockMMKV.getString.mockReturnValue(encryptedData);
      _cryptoJs.default.AES.decrypt.mockReturnValue(decryptedMock);
      _cryptoJs.default.enc.Utf8.stringify.mockReturnValue(JSON.stringify(mockTokens));
      mockIsRefreshTokenValid.mockReturnValue(true);
      var result = yield storage.isRefreshTokenValid();
      expect(result).toBe(true);
      expect(mockIsRefreshTokenValid).toHaveBeenCalledWith(mockTokens);
    }));
    it('should return false for invalid refresh token', (0, _asyncToGenerator2.default)(function* () {
      var encryptedData = 'encrypted-token-data';
      var decryptedMock = {
        toString: jest.fn().mockReturnValue(JSON.stringify(mockTokens))
      };
      mockMMKV.getString.mockReturnValue(encryptedData);
      _cryptoJs.default.AES.decrypt.mockReturnValue(decryptedMock);
      _cryptoJs.default.enc.Utf8.stringify.mockReturnValue(JSON.stringify(mockTokens));
      mockIsRefreshTokenValid.mockReturnValue(false);
      var result = yield storage.isRefreshTokenValid();
      expect(result).toBe(false);
    }));
    it('should return false when no tokens exist for refresh validation', (0, _asyncToGenerator2.default)(function* () {
      mockMMKV.getString.mockReturnValue(undefined);
      var result = yield storage.isRefreshTokenValid();
      expect(result).toBe(false);
      expect(mockIsRefreshTokenValid).not.toHaveBeenCalled();
    }));
  });
  describe('Default Export', function () {
    it('should export default tokenStorage instance', function () {
      expect(_tokenStorage.tokenStorage).toBeInstanceOf(TokenStorageService);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,