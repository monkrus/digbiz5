ae5fc11e3f1ec5f2b5da0d82ce4572cb
var _child_process = require("child_process");
var fs = _interopRequireWildcard(require("fs"));
var path = _interopRequireWildcard(require("path"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
describe('Android Build Verification', function () {
  var projectRoot = path.resolve(__dirname, '../..');
  var androidDir = path.join(projectRoot, 'android');
  describe('Android Project Structure', function () {
    test('should have Android project directory', function () {
      expect(fs.existsSync(androidDir)).toBe(true);
    });
    test('should have build.gradle files', function () {
      var rootBuildGradlePath = path.join(androidDir, 'build.gradle');
      var appBuildGradlePath = path.join(androidDir, 'app/build.gradle');
      expect(fs.existsSync(rootBuildGradlePath)).toBe(true);
      expect(fs.existsSync(appBuildGradlePath)).toBe(true);
    });
    test('should have gradle wrapper', function () {
      var gradlewPath = path.join(androidDir, 'gradlew');
      var gradlewBatPath = path.join(androidDir, 'gradlew.bat');
      var gradleWrapperPath = path.join(androidDir, 'gradle/wrapper/gradle-wrapper.properties');
      expect(fs.existsSync(gradlewPath) || fs.existsSync(gradlewBatPath)).toBe(true);
      expect(fs.existsSync(gradleWrapperPath)).toBe(true);
    });
    test('should have AndroidManifest.xml', function () {
      var manifestPath = path.join(androidDir, 'app/src/main/AndroidManifest.xml');
      expect(fs.existsSync(manifestPath)).toBe(true);
    });
    test('should have MainActivity.java or MainActivity.kt', function () {
      var javaActivityPath = path.join(androidDir, 'app/src/main/java/com/digbiz5/MainActivity.java');
      var kotlinActivityPath = path.join(androidDir, 'app/src/main/java/com/digbiz5/MainActivity.kt');
      expect(fs.existsSync(javaActivityPath) || fs.existsSync(kotlinActivityPath)).toBe(true);
    });
  });
  describe('Android Configuration', function () {
    test('should have correct package name in build.gradle', function () {
      var appBuildGradlePath = path.join(androidDir, 'app/build.gradle');
      var buildGradleContent = fs.readFileSync(appBuildGradlePath, 'utf8');
      expect(buildGradleContent).toContain('applicationId');
      expect(buildGradleContent).toContain('com.digbiz5');
    });
    test('should have minimum SDK version configured', function () {
      var appBuildGradlePath = path.join(androidDir, 'app/build.gradle');
      var buildGradleContent = fs.readFileSync(appBuildGradlePath, 'utf8');
      expect(buildGradleContent).toContain('minSdkVersion');
      expect(buildGradleContent).toContain('targetSdkVersion');
      expect(buildGradleContent).toContain('compileSdkVersion');
    });
    test('should have React Native dependencies', function () {
      var settingsGradlePath = path.join(androidDir, 'settings.gradle');
      if (fs.existsSync(settingsGradlePath)) {
        var settingsContent = fs.readFileSync(settingsGradlePath, 'utf8');
        expect(settingsContent).toContain('react-native');
      }
    });
  });
  describe('Android Build Process', function () {
    test.skip('should build debug APK successfully', function () {
      jest.setTimeout(300000);
      expect(function () {
        (0, _child_process.execSync)('./gradlew assembleDebug', {
          cwd: androidDir,
          stdio: 'pipe'
        });
      }).not.toThrow();
      var apkPath = path.join(androidDir, 'app/build/outputs/apk/debug/app-debug.apk');
      expect(fs.existsSync(apkPath)).toBe(true);
    }, 300000);
    test('should have gradlew script file', function () {
      var gradlewPath = path.join(androidDir, 'gradlew');
      var gradlewBatPath = path.join(androidDir, 'gradlew.bat');
      expect(fs.existsSync(gradlewPath) || fs.existsSync(gradlewBatPath)).toBe(true);
      if (fs.existsSync(gradlewPath)) {
        expect(fs.statSync(gradlewPath).isFile()).toBe(true);
      }
    });
    test('should validate Gradle wrapper integrity', function () {
      var gradleWrapperPropsPath = path.join(androidDir, 'gradle/wrapper/gradle-wrapper.properties');
      var wrapperProps = fs.readFileSync(gradleWrapperPropsPath, 'utf8');
      expect(wrapperProps).toContain('distributionUrl');
      expect(wrapperProps).toContain('gradle');
    });
  });
  describe('Android Fastlane Integration', function () {
    test('should have Android Fastlane configuration', function () {
      var androidFastfilePath = path.join(androidDir, 'fastlane/Fastfile');
      var androidAppfilePath = path.join(androidDir, 'fastlane/Appfile');
      expect(fs.existsSync(androidFastfilePath)).toBe(true);
      expect(fs.existsSync(androidAppfilePath)).toBe(true);
    });
    test('should have valid Fastfile for Android', function () {
      var fastfilePath = path.join(androidDir, 'fastlane/Fastfile');
      var fastfileContent = fs.readFileSync(fastfilePath, 'utf8');
      expect(fastfileContent).toContain('platform :android');
      expect(fastfileContent).toContain('gradle');
      expect(fastfileContent).toContain('assembleDebug');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,