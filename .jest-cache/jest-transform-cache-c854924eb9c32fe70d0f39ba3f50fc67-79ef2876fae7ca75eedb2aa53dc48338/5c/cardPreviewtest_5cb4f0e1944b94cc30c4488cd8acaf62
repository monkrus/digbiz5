0090374a56b9e95510605f5e3ab046ed
_getJestObj().mock('react-native', function () {
  return Object.assign({}, jest.requireActual('react-native'), {
    Dimensions: {
      get: jest.fn(function () {
        return {
          width: 375,
          height: 812
        };
      })
    },
    PixelRatio: {
      get: jest.fn(function () {
        return 2;
      }),
      getFontScale: jest.fn(function () {
        return 1;
      })
    }
  });
});
_getJestObj().mock('react-native-view-shot', function () {
  return {
    __esModule: true,
    default: function _default(_ref) {
      var children = _ref.children,
        props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
      var MockViewShot = function MockViewShot(_ref2) {
        var children = _ref2.children,
          props = (0, _objectWithoutProperties2.default)(_ref2, _excluded2);
        return (0, _jsxRuntime.jsx)("div", Object.assign({
          testID: "view-shot"
        }, props, {
          children: children
        }));
      };
      return (0, _jsxRuntime.jsx)(MockViewShot, Object.assign({}, props, {
        children: children
      }));
    }
  };
});
_getJestObj().mock('../../../src/components/common/QRCodeComponent', function () {
  return {
    __esModule: true,
    default: function _default(_ref3) {
      var data = _ref3.data,
        props = (0, _objectWithoutProperties2.default)(_ref3, _excluded3);
      var MockQRCode = function MockQRCode(_ref4) {
        var data = _ref4.data,
          props = (0, _objectWithoutProperties2.default)(_ref4, _excluded4);
        return (0, _jsxRuntime.jsxs)("div", Object.assign({
          testID: "qr-code"
        }, props, {
          children: ["QR: ", (data == null ? void 0 : data.data) || 'mock-qr-data']
        }));
      };
      return (0, _jsxRuntime.jsx)(MockQRCode, Object.assign({
        data: data
      }, props));
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _CardPreview = _interopRequireDefault(require("../../../src/components/businessCard/preview/CardPreview"));
var _cardRendering = require("../../../src/utils/cardRendering");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children"],
  _excluded2 = ["children"],
  _excluded3 = ["data"],
  _excluded4 = ["data"];
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('Card Preview Rendering', function () {
  var mockTheme = {
    id: 'professional-theme-1',
    name: 'Professional Blue',
    primaryColor: '#3b82f6',
    secondaryColor: '#1e40af',
    backgroundColor: '#ffffff',
    textColor: '#1f2937',
    accentColor: '#10b981',
    fontFamily: 'Inter',
    headerFontSize: 24,
    bodyFontSize: 14,
    borderRadius: 8,
    padding: 16,
    spacing: 8
  };
  var mockTemplate = {
    id: 'startup-template-1',
    name: 'Modern Startup',
    category: 'startup',
    layout: 'standard',
    elements: [{
      id: 'name-element',
      type: 'name',
      position: {
        x: 16,
        y: 16
      },
      size: {
        width: 300,
        height: 32
      },
      style: {
        fontSize: 24,
        fontWeight: 'bold',
        color: '#1f2937'
      },
      isVisible: true,
      isRequired: true
    }, {
      id: 'title-element',
      type: 'title',
      position: {
        x: 16,
        y: 56
      },
      size: {
        width: 300,
        height: 20
      },
      style: {
        fontSize: 16,
        fontWeight: 'normal',
        color: '#6b7280'
      },
      isVisible: true,
      isRequired: true
    }, {
      id: 'company-element',
      type: 'company',
      position: {
        x: 16,
        y: 84
      },
      size: {
        width: 300,
        height: 20
      },
      style: {
        fontSize: 14,
        fontWeight: '500',
        color: '#374151'
      },
      isVisible: true,
      isRequired: true
    }, {
      id: 'qr-element',
      type: 'qr-code',
      position: {
        x: 250,
        y: 120
      },
      size: {
        width: 80,
        height: 80
      },
      style: {},
      isVisible: true,
      isRequired: false
    }],
    isPopular: true,
    isPremium: false,
    previewImage: 'https://example.com/template-preview.png'
  };
  var mockFormData = {
    basicInfo: {
      name: 'John Smith',
      title: 'CEO & Founder',
      company: 'TechStart Inc.',
      email: 'john@techstart.com',
      phone: '+1-555-123-4567',
      location: 'San Francisco, CA',
      bio: 'Building the future of technology.',
      profilePhoto: 'https://example.com/profile.jpg',
      companyLogo: 'https://example.com/logo.png'
    },
    startupInfo: {
      fundingStage: 'seed',
      teamSize: '11-25',
      industry: ['Technology', 'SaaS'],
      businessModel: 'b2b',
      revenue: '0-10k',
      seekingFunding: true,
      seekingTalent: true,
      seekingPartners: false,
      seekingMentors: true
    },
    socialLinks: {
      linkedin: 'https://linkedin.com/in/johnsmith',
      twitter: 'https://twitter.com/johnsmith',
      website: 'https://techstart.com',
      github: 'https://github.com/johnsmith'
    },
    customFields: [{
      id: '1',
      label: 'Investment Focus',
      value: 'B2B SaaS, AI',
      type: 'text',
      icon: 'ðŸ’¼',
      isPublic: true,
      order: 1
    }],
    themeId: mockTheme.id,
    templateId: mockTemplate.id,
    isDefault: false,
    isPublic: true
  };
  var mockBusinessCard = Object.assign({
    id: 'card-123',
    userId: 'user-456'
  }, mockFormData, {
    theme: mockTheme,
    template: mockTemplate,
    shareCode: 'abc123def456',
    isActive: true,
    createdAt: '2024-01-15T10:30:00Z',
    updatedAt: '2024-01-15T10:30:00Z',
    lastSharedAt: '2024-01-15T15:45:00Z'
  });
  describe('Basic Rendering', function () {
    test('should render card preview with form data', function () {
      var onClose = jest.fn();
      var onEdit = jest.fn();
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CardPreview.default, {
          formData: mockFormData,
          onClose: onClose,
          onEdit: onEdit
        })),
        getByText = _render.getByText,
        getByTestId = _render.getByTestId;
      expect(getByText('John Smith')).toBeTruthy();
      expect(getByText('CEO & Founder')).toBeTruthy();
      expect(getByText('TechStart Inc.')).toBeTruthy();
    });
    test('should render card preview with business card data', function () {
      var onClose = jest.fn();
      var onEdit = jest.fn();
      var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CardPreview.default, {
          card: mockBusinessCard,
          onClose: onClose,
          onEdit: onEdit
        })),
        getByText = _render2.getByText;
      expect(getByText('John Smith')).toBeTruthy();
      expect(getByText('CEO & Founder')).toBeTruthy();
      expect(getByText('TechStart Inc.')).toBeTruthy();
    });
    test('should handle missing data gracefully', function () {
      var minimalFormData = {
        basicInfo: {
          name: 'Jane Doe',
          title: 'Developer',
          company: 'DevCorp',
          email: 'jane@devcorp.com'
        },
        socialLinks: {},
        customFields: [],
        themeId: 'theme-1',
        templateId: 'template-1'
      };
      var onClose = jest.fn();
      var onEdit = jest.fn();
      var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CardPreview.default, {
          formData: minimalFormData,
          onClose: onClose,
          onEdit: onEdit
        })),
        getByText = _render3.getByText;
      expect(getByText('Jane Doe')).toBeTruthy();
      expect(getByText('Developer')).toBeTruthy();
      expect(getByText('DevCorp')).toBeTruthy();
    });
  });
  describe('Theme Application', function () {
    test('should apply theme colors correctly', function () {
      var styledElement = (0, _cardRendering.applyThemeStyles)(mockTheme, 'name', {
        fontSize: 24,
        fontWeight: 'bold'
      });
      expect(styledElement.color).toBe(mockTheme.textColor);
      expect(styledElement.fontFamily).toBe(mockTheme.fontFamily);
      expect(styledElement.fontSize).toBe(24);
    });
    test('should validate theme structure', function () {
      expect((0, _cardRendering.validateTheme)(mockTheme)).toBe(true);
      var invalidTheme = Object.assign({}, mockTheme, {
        primaryColor: null
      });
      expect((0, _cardRendering.validateTheme)(invalidTheme)).toBe(false);
    });
    test('should handle theme with gradients', function () {
      var gradientTheme = Object.assign({}, mockTheme, {
        gradient: {
          type: 'linear',
          colors: ['#3b82f6', '#1e40af'],
          direction: 45
        }
      });
      expect((0, _cardRendering.validateTheme)(gradientTheme)).toBe(true);
    });
    test('should handle theme with shadows', function () {
      var shadowTheme = Object.assign({}, mockTheme, {
        shadow: {
          color: '#000000',
          opacity: 0.1,
          offsetX: 0,
          offsetY: 2,
          blur: 4
        }
      });
      expect((0, _cardRendering.validateTheme)(shadowTheme)).toBe(true);
    });
    test('should handle theme with patterns', function () {
      var patternTheme = Object.assign({}, mockTheme, {
        pattern: {
          type: 'dots',
          color: '#e5e7eb',
          opacity: 0.3,
          size: 4
        }
      });
      expect((0, _cardRendering.validateTheme)(patternTheme)).toBe(true);
    });
  });
  describe('Layout Calculations', function () {
    test('should calculate card dimensions correctly', function () {
      var dimensions = (0, _cardRendering.calculateCardDimensions)('business-card', 'portrait');
      expect(dimensions.width).toBe(350);
      expect(dimensions.height).toBe(200);
      expect(dimensions.aspectRatio).toBeCloseTo(1.75);
    });
    test('should calculate dimensions for different card sizes', function () {
      var businessCard = (0, _cardRendering.calculateCardDimensions)('business-card', 'portrait');
      var postcard = (0, _cardRendering.calculateCardDimensions)('postcard', 'landscape');
      var flyer = (0, _cardRendering.calculateCardDimensions)('flyer', 'portrait');
      expect(businessCard.width).toBe(350);
      expect(postcard.width).toBe(400);
      expect(flyer.width).toBe(300);
    });
    test('should handle landscape orientation', function () {
      var landscapeDimensions = (0, _cardRendering.calculateCardDimensions)('business-card', 'landscape');
      expect(landscapeDimensions.width).toBe(350);
      expect(landscapeDimensions.height).toBe(200);
    });
    test('should layout card elements correctly', function () {
      var layout = (0, _cardRendering.layoutCardElements)(mockTemplate, mockFormData);
      expect(layout.elements).toHaveLength(mockTemplate.elements.length);
      expect(layout.totalHeight).toBeGreaterThan(0);
      expect(layout.contentAreas).toBeDefined();
    });
    test('should handle overlapping elements', function () {
      var overlappingTemplate = Object.assign({}, mockTemplate, {
        elements: [{
          id: 'element1',
          type: 'name',
          position: {
            x: 10,
            y: 10
          },
          size: {
            width: 100,
            height: 50
          },
          style: {},
          isVisible: true,
          isRequired: true
        }, {
          id: 'element2',
          type: 'title',
          position: {
            x: 50,
            y: 30
          },
          size: {
            width: 100,
            height: 50
          },
          style: {},
          isVisible: true,
          isRequired: true
        }]
      });
      var layout = (0, _cardRendering.layoutCardElements)(overlappingTemplate, mockFormData);
      expect(layout.hasOverlaps).toBe(true);
      expect(layout.overlappingPairs).toHaveLength(1);
    });
  });
  describe('Visual Elements', function () {
    test('should render all element types', function () {
      var elementTypes = ['name', 'title', 'company', 'email', 'phone', 'location', 'bio', 'profile-photo', 'company-logo', 'social-links', 'custom-field', 'qr-code'];
      elementTypes.forEach(function (elementType) {
        var element = {
          id: `${elementType}-test`,
          type: elementType,
          position: {
            x: 0,
            y: 0
          },
          size: {
            width: 100,
            height: 20
          },
          style: {},
          isVisible: true,
          isRequired: false
        };
        expect(function () {
          (0, _cardRendering.renderCardWithTheme)(mockFormData, mockTheme, [element]);
        }).not.toThrow();
      });
    });
    test('should handle missing images gracefully', function () {
      var cardWithMissingImages = Object.assign({}, mockFormData, {
        basicInfo: Object.assign({}, mockFormData.basicInfo, {
          profilePhoto: '',
          companyLogo: ''
        })
      });
      expect(function () {
        (0, _cardRendering.renderCardWithTheme)(cardWithMissingImages, mockTheme, mockTemplate.elements);
      }).not.toThrow();
    });
    test('should render QR code element', function () {
      var onClose = jest.fn();
      var onEdit = jest.fn();
      var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CardPreview.default, {
          formData: mockFormData,
          onClose: onClose,
          onEdit: onEdit,
          showQRCode: true
        })),
        getByTestId = _render4.getByTestId;
      expect(getByTestId('qr-code')).toBeTruthy();
    });
    test('should handle social links rendering', function () {
      var cardWithManySocials = Object.assign({}, mockFormData, {
        socialLinks: {
          linkedin: 'https://linkedin.com/in/john',
          twitter: 'https://twitter.com/john',
          github: 'https://github.com/john',
          instagram: 'https://instagram.com/john',
          facebook: 'https://facebook.com/john',
          youtube: 'https://youtube.com/john',
          website: 'https://johndoe.com'
        }
      });
      expect(function () {
        (0, _cardRendering.renderCardWithTheme)(cardWithManySocials, mockTheme, mockTemplate.elements);
      }).not.toThrow();
    });
  });
  describe('Responsive Design', function () {
    test('should optimize card for different screen sizes', function () {
      var mobileOptimized = (0, _cardRendering.optimizeCardForDisplay)(mockFormData, mockTheme, 'mobile');
      var tabletOptimized = (0, _cardRendering.optimizeCardForDisplay)(mockFormData, mockTheme, 'tablet');
      var desktopOptimized = (0, _cardRendering.optimizeCardForDisplay)(mockFormData, mockTheme, 'desktop');
      expect(mobileOptimized.scaleFactor).toBeLessThanOrEqual(1);
      expect(tabletOptimized.scaleFactor).toBeLessThanOrEqual(1.2);
      expect(desktopOptimized.scaleFactor).toBeLessThanOrEqual(1.5);
    });
    test('should handle high DPI displays', function () {
      require('react-native').PixelRatio.get.mockReturnValue(3);
      var optimized = (0, _cardRendering.optimizeCardForDisplay)(mockFormData, mockTheme, 'mobile');
      expect(optimized.dpiScale).toBe(3);
    });
    test('should adjust for font scaling', function () {
      require('react-native').PixelRatio.getFontScale.mockReturnValue(1.3);
      var optimized = (0, _cardRendering.optimizeCardForDisplay)(mockFormData, mockTheme, 'mobile');
      expect(optimized.fontScale).toBe(1.3);
    });
  });
  describe('Interaction Handling', function () {
    test('should handle close button press', function () {
      var onClose = jest.fn();
      var onEdit = jest.fn();
      var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CardPreview.default, {
          formData: mockFormData,
          onClose: onClose,
          onEdit: onEdit
        })),
        getByText = _render5.getByText;
      var closeButton = getByText('Close');
      _reactNative.fireEvent.press(closeButton);
      expect(onClose).toHaveBeenCalled();
    });
    test('should handle edit button press', function () {
      var onClose = jest.fn();
      var onEdit = jest.fn();
      var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CardPreview.default, {
          formData: mockFormData,
          onClose: onClose,
          onEdit: onEdit
        })),
        getByText = _render6.getByText;
      var editButton = getByText('Edit');
      _reactNative.fireEvent.press(editButton);
      expect(onEdit).toHaveBeenCalled();
    });
    test('should handle element tap interactions', (0, _asyncToGenerator2.default)(function* () {
      var onElementTap = jest.fn();
      var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CardPreview.default, {
          formData: mockFormData,
          onClose: jest.fn(),
          onEdit: jest.fn(),
          onElementTap: onElementTap
        })),
        getByText = _render7.getByText;
      var nameElement = getByText('John Smith');
      _reactNative.fireEvent.press(nameElement);
      yield (0, _reactNative.waitFor)(function () {
        expect(onElementTap).toHaveBeenCalledWith('name', expect.any(Object));
      });
    }));
  });
  describe('Loading and Error States', function () {
    test('should show loading state', function () {
      var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CardPreview.default, {
          formData: mockFormData,
          onClose: jest.fn(),
          onEdit: jest.fn(),
          isLoading: true
        })),
        getByTestId = _render8.getByTestId;
      expect(getByTestId('loading-indicator')).toBeTruthy();
    });
    test('should show error state', function () {
      var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CardPreview.default, {
          formData: mockFormData,
          onClose: jest.fn(),
          onEdit: jest.fn(),
          error: "Failed to load theme"
        })),
        getByText = _render9.getByText;
      expect(getByText('Failed to load theme')).toBeTruthy();
    });
    test('should handle image loading errors', function () {
      var cardWithBadImages = Object.assign({}, mockFormData, {
        basicInfo: Object.assign({}, mockFormData.basicInfo, {
          profilePhoto: 'https://invalid-url.com/photo.jpg',
          companyLogo: 'https://invalid-url.com/logo.png'
        })
      });
      expect(function () {
        (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CardPreview.default, {
          formData: cardWithBadImages,
          onClose: jest.fn(),
          onEdit: jest.fn()
        }));
      }).not.toThrow();
    });
  });
  describe('Performance Optimization', function () {
    test('should memoize theme calculations', function () {
      var spy = jest.spyOn(console, 'log');
      var onClose = jest.fn();
      var onEdit = jest.fn();
      var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CardPreview.default, {
          formData: mockFormData,
          onClose: onClose,
          onEdit: onEdit
        })),
        rerender = _render0.rerender;
      rerender((0, _jsxRuntime.jsx)(_CardPreview.default, {
        formData: mockFormData,
        onClose: onClose,
        onEdit: onEdit
      }));
      expect(spy).not.toHaveBeenCalledWith('Recalculating theme styles');
      spy.mockRestore();
    });
    test('should handle large datasets efficiently', function () {
      var cardWithManyFields = Object.assign({}, mockFormData, {
        customFields: Array.from({
          length: 50
        }, function (_, i) {
          return {
            id: String(i),
            label: `Field ${i}`,
            value: `Value ${i}`,
            type: 'text',
            isPublic: true,
            order: i
          };
        })
      });
      var startTime = performance.now();
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CardPreview.default, {
        formData: cardWithManyFields,
        onClose: jest.fn(),
        onEdit: jest.fn()
      }));
      var endTime = performance.now();
      var renderTime = endTime - startTime;
      expect(renderTime).toBeLessThan(2000);
    });
  });
  describe('Accessibility', function () {
    test('should have proper accessibility labels', function () {
      var _render1 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CardPreview.default, {
          formData: mockFormData,
          onClose: jest.fn(),
          onEdit: jest.fn()
        })),
        getByLabelText = _render1.getByLabelText;
      expect(getByLabelText('Business card preview')).toBeTruthy();
      expect(getByLabelText('Close preview')).toBeTruthy();
      expect(getByLabelText('Edit card')).toBeTruthy();
    });
    test('should support screen reader navigation', function () {
      var _render10 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CardPreview.default, {
          formData: mockFormData,
          onClose: jest.fn(),
          onEdit: jest.fn()
        })),
        getByRole = _render10.getByRole;
      expect(getByRole('button', {
        name: /close/i
      })).toBeTruthy();
      expect(getByRole('button', {
        name: /edit/i
      })).toBeTruthy();
    });
    test('should have proper contrast ratios', function () {
      var contrastRatio = calculateContrastRatio(mockTheme.textColor, mockTheme.backgroundColor);
      expect(contrastRatio).toBeGreaterThan(4.5);
    });
  });
  describe('Export and Sharing', function () {
    test('should capture preview for sharing', (0, _asyncToGenerator2.default)(function* () {
      var onCapture = jest.fn();
      var _render11 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CardPreview.default, {
          formData: mockFormData,
          onClose: jest.fn(),
          onEdit: jest.fn(),
          onCapture: onCapture
        })),
        getByTestId = _render11.getByTestId;
      var viewShot = getByTestId('view-shot');
      expect(viewShot).toBeTruthy();
      (0, _reactNative.fireEvent)(viewShot, 'capture');
      yield (0, _reactNative.waitFor)(function () {
        expect(onCapture).toHaveBeenCalled();
      });
    }));
    test('should handle different export formats', function () {
      var exportFormats = ['png', 'jpg', 'pdf', 'svg'];
      exportFormats.forEach(function (format) {
        expect(function () {
          (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CardPreview.default, {
            formData: mockFormData,
            onClose: jest.fn(),
            onEdit: jest.fn(),
            exportFormat: format
          }));
        }).not.toThrow();
      });
    });
  });
});
function calculateContrastRatio(foreground, background) {
  return 7;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,