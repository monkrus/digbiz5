45ac6e7541f8d57c168c462c3282d7e9
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _contactDatabaseService = require("../../src/services/contactDatabaseService");
var createMockContact = function createMockContact(overrides) {
  return Object.assign({
    id: (overrides == null ? void 0 : overrides.id) || `test-contact-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
    fields: [{
      id: 'field-1',
      type: 'name',
      label: 'Full Name',
      value: 'John Doe',
      isEditable: true,
      confidence: 0.9
    }, {
      id: 'field-2',
      type: 'email',
      label: 'Email',
      value: 'john@example.com',
      isEditable: true,
      confidence: 0.8
    }, {
      id: 'field-3',
      type: 'phone',
      label: 'Phone',
      value: '+1-555-0123',
      isEditable: true,
      confidence: 0.85
    }],
    source: 'manual',
    confidence: 0.85,
    createdAt: '2024-01-01T00:00:00.000Z',
    updatedAt: '2024-01-01T00:00:00.000Z',
    tags: ['business', 'client'],
    isVerified: true,
    needsReview: false,
    isFavorite: false
  }, overrides);
};
var createMockNote = function createMockNote(contactId, overrides) {
  return Object.assign({
    id: 'note-1',
    contactId: contactId,
    content: 'This is a test note',
    createdAt: '2024-01-01T00:00:00.000Z',
    updatedAt: '2024-01-01T00:00:00.000Z',
    type: 'general',
    isPrivate: false
  }, overrides);
};
describe('ContactDatabaseService', function () {
  beforeEach((0, _asyncToGenerator2.default)(function* () {
    jest.clearAllMocks();
    yield _contactDatabaseService.contactDatabaseService.initialize();
  }));
  afterEach((0, _asyncToGenerator2.default)(function* () {
    yield _contactDatabaseService.contactDatabaseService.deleteAllContacts();
  }));
  describe('Database Initialization', function () {
    it('should initialize database successfully', (0, _asyncToGenerator2.default)(function* () {
      var isInitialized = yield _contactDatabaseService.contactDatabaseService.initialize();
      expect(isInitialized).toBe(true);
    }));
    it('should create required tables', (0, _asyncToGenerator2.default)(function* () {
      yield _contactDatabaseService.contactDatabaseService.initialize();
      var contacts = yield _contactDatabaseService.contactDatabaseService.getAllContacts();
      expect(Array.isArray(contacts)).toBe(true);
    }));
    it('should handle database initialization errors gracefully', (0, _asyncToGenerator2.default)(function* () {
      var mockDb = require('react-native-sqlite-storage');
      mockDb.openDatabase.mockImplementationOnce(function () {
        throw new Error('Database initialization failed');
      });
      var result = yield _contactDatabaseService.contactDatabaseService.initialize();
      expect(result).toBe(false);
    }));
  });
  describe('Contact CRUD Operations', function () {
    describe('Create Contact', function () {
      it('should create a new contact successfully', (0, _asyncToGenerator2.default)(function* () {
        var mockContact = createMockContact();
        yield _contactDatabaseService.contactDatabaseService.saveContact(mockContact);
        var createdContact = yield _contactDatabaseService.contactDatabaseService.getContact(mockContact.id);
        expect(createdContact).toBeDefined();
        expect(createdContact.id).toBe(mockContact.id);
        expect(createdContact.fields).toHaveLength(3);
        expect(createdContact.source).toBe('manual');
      }));
      it('should generate unique IDs for contacts', (0, _asyncToGenerator2.default)(function* () {
        var contact1 = createMockContact();
        var contact2 = createMockContact();
        yield _contactDatabaseService.contactDatabaseService.saveContact(contact1);
        yield _contactDatabaseService.contactDatabaseService.saveContact(contact2);
        var created1 = yield _contactDatabaseService.contactDatabaseService.getContact(contact1.id);
        var created2 = yield _contactDatabaseService.contactDatabaseService.getContact(contact2.id);
        expect(created1.id).toBeDefined();
        expect(created2.id).toBeDefined();
        expect(created1.id).not.toBe(created2.id);
      }));
      it('should handle duplicate contact creation', (0, _asyncToGenerator2.default)(function* () {
        var mockContact = createMockContact();
        yield _contactDatabaseService.contactDatabaseService.saveContact(mockContact);
        yield expect(_contactDatabaseService.contactDatabaseService.saveContact(mockContact)).rejects.toThrow();
      }));
      it('should validate required fields', (0, _asyncToGenerator2.default)(function* () {
        var invalidContact = createMockContact({
          fields: []
        });
        yield expect(_contactDatabaseService.contactDatabaseService.saveContact(invalidContact)).rejects.toThrow('Contact must have at least one field');
      }));
    });
    describe('Read Contact', function () {
      it('should retrieve contact by ID', (0, _asyncToGenerator2.default)(function* () {
        var mockContact = createMockContact();
        yield _contactDatabaseService.contactDatabaseService.saveContact(mockContact);
        var retrievedContact = yield _contactDatabaseService.contactDatabaseService.getContact(mockContact.id);
        expect(retrievedContact).toBeDefined();
        expect(retrievedContact == null ? void 0 : retrievedContact.id).toBe(mockContact.id);
        expect(retrievedContact == null ? void 0 : retrievedContact.fields).toHaveLength(3);
      }));
      it('should return null for non-existent contact', (0, _asyncToGenerator2.default)(function* () {
        var contact = yield _contactDatabaseService.contactDatabaseService.getContact('non-existent-id');
        expect(contact).toBeNull();
      }));
      it('should retrieve all contacts', (0, _asyncToGenerator2.default)(function* () {
        var contact1 = createMockContact({
          id: 'contact-1'
        });
        var contact2 = createMockContact({
          id: 'contact-2'
        });
        yield _contactDatabaseService.contactDatabaseService.saveContact(contact1);
        yield _contactDatabaseService.contactDatabaseService.saveContact(contact2);
        var allContacts = yield _contactDatabaseService.contactDatabaseService.getAllContacts();
        expect(allContacts).toHaveLength(2);
        expect(allContacts.map(function (c) {
          return c.id;
        })).toContain('contact-1');
        expect(allContacts.map(function (c) {
          return c.id;
        })).toContain('contact-2');
      }));
      it('should paginate contacts correctly', (0, _asyncToGenerator2.default)(function* () {
        for (var i = 0; i < 10; i++) {
          yield _contactDatabaseService.contactDatabaseService.saveContact(createMockContact({
            id: `contact-${i}`
          }));
        }
        var page1 = yield _contactDatabaseService.contactDatabaseService.getAllContacts(0, 5);
        var page2 = yield _contactDatabaseService.contactDatabaseService.getAllContacts(5, 5);
        expect(page1).toHaveLength(5);
        expect(page2).toHaveLength(5);
        var page1Ids = page1.map(function (c) {
          return c.id;
        });
        var page2Ids = page2.map(function (c) {
          return c.id;
        });
        expect(page1Ids.some(function (id) {
          return page2Ids.includes(id);
        })).toBe(false);
      }));
    });
    describe('Update Contact', function () {
      it('should update contact successfully', (0, _asyncToGenerator2.default)(function* () {
        var mockContact = createMockContact();
        yield _contactDatabaseService.contactDatabaseService.saveContact(mockContact);
        var updatedContact = Object.assign({}, mockContact, {
          fields: [].concat((0, _toConsumableArray2.default)(mockContact.fields), [{
            id: 'field-4',
            type: 'company',
            label: 'Company',
            value: 'Acme Corp',
            isEditable: true,
            confidence: 0.9
          }]),
          tags: [].concat((0, _toConsumableArray2.default)(mockContact.tags), ['updated'])
        });
        var result = yield _contactDatabaseService.contactDatabaseService.updateContact(updatedContact);
        expect(result).toBeDefined();
        expect(result.fields).toHaveLength(4);
        expect(result.tags).toContain('updated');
        expect(new Date(result.updatedAt)).toBeInstanceOf(Date);
      }));
      it('should handle partial updates', (0, _asyncToGenerator2.default)(function* () {
        var mockContact = createMockContact();
        yield _contactDatabaseService.contactDatabaseService.saveContact(mockContact);
        var partialUpdate = Object.assign({}, mockContact, {
          tags: ['new-tag'],
          isFavorite: true
        });
        var result = yield _contactDatabaseService.contactDatabaseService.updateContact(partialUpdate);
        expect(result.tags).toEqual(['new-tag']);
        expect(result.isFavorite).toBe(true);
        expect(result.fields).toHaveLength(3);
      }));
      it('should fail to update non-existent contact', (0, _asyncToGenerator2.default)(function* () {
        var nonExistentContact = createMockContact({
          id: 'non-existent'
        });
        yield expect(_contactDatabaseService.contactDatabaseService.updateContact(nonExistentContact)).rejects.toThrow();
      }));
    });
    describe('Delete Contact', function () {
      it('should delete contact successfully', (0, _asyncToGenerator2.default)(function* () {
        var mockContact = createMockContact();
        yield _contactDatabaseService.contactDatabaseService.saveContact(mockContact);
        var deleted = yield _contactDatabaseService.contactDatabaseService.deleteContact(mockContact.id);
        expect(deleted).toBe(true);
        var retrievedContact = yield _contactDatabaseService.contactDatabaseService.getContact(mockContact.id);
        expect(retrievedContact).toBeNull();
      }));
      it('should delete contact with notes and interactions', (0, _asyncToGenerator2.default)(function* () {
        var mockContact = createMockContact();
        yield _contactDatabaseService.contactDatabaseService.saveContact(mockContact);
        var note = createMockNote(mockContact.id);
        yield _contactDatabaseService.contactDatabaseService.addNote(note);
        var interaction = {
          id: 'interaction-1',
          contactId: mockContact.id,
          type: 'call',
          description: 'Test call',
          timestamp: '2024-01-01T00:00:00.000Z'
        };
        yield _contactDatabaseService.contactDatabaseService.addInteraction(interaction);
        var deleted = yield _contactDatabaseService.contactDatabaseService.deleteContact(mockContact.id);
        expect(deleted).toBe(true);
        var notes = yield _contactDatabaseService.contactDatabaseService.getNotesByContactId(mockContact.id);
        var interactions = yield _contactDatabaseService.contactDatabaseService.getInteractionsByContactId(mockContact.id);
        expect(notes).toHaveLength(0);
        expect(interactions).toHaveLength(0);
      }));
      it('should return false for non-existent contact deletion', (0, _asyncToGenerator2.default)(function* () {
        var deleted = yield _contactDatabaseService.contactDatabaseService.deleteContact('non-existent');
        expect(deleted).toBe(false);
      }));
    });
  });
  describe('Search Operations', function () {
    beforeEach((0, _asyncToGenerator2.default)(function* () {
      var contacts = [createMockContact({
        id: 'contact-1',
        fields: [{
          id: 'f1',
          type: 'name',
          label: 'Name',
          value: 'John Doe',
          isEditable: true
        }, {
          id: 'f2',
          type: 'email',
          label: 'Email',
          value: 'john@acme.com',
          isEditable: true
        }, {
          id: 'f3',
          type: 'company',
          label: 'Company',
          value: 'Acme Corp',
          isEditable: true
        }],
        tags: ['client', 'business']
      }), createMockContact({
        id: 'contact-2',
        fields: [{
          id: 'f4',
          type: 'name',
          label: 'Name',
          value: 'Jane Smith',
          isEditable: true
        }, {
          id: 'f5',
          type: 'email',
          label: 'Email',
          value: 'jane@example.com',
          isEditable: true
        }, {
          id: 'f6',
          type: 'company',
          label: 'Company',
          value: 'Example Inc',
          isEditable: true
        }],
        tags: ['prospect']
      })];
      for (var contact of contacts) {
        yield _contactDatabaseService.contactDatabaseService.saveContact(contact);
      }
    }));
    it('should search contacts by name', (0, _asyncToGenerator2.default)(function* () {
      var results = yield _contactDatabaseService.contactDatabaseService.searchContacts({
        query: 'John'
      });
      expect(results.contacts).toHaveLength(1);
      expect(results.contacts[0].id).toBe('contact-1');
      expect(results.totalCount).toBe(1);
    }));
    it('should search contacts by email', (0, _asyncToGenerator2.default)(function* () {
      var results = yield _contactDatabaseService.contactDatabaseService.searchContacts({
        query: 'jane@example.com'
      });
      expect(results.contacts).toHaveLength(1);
      expect(results.contacts[0].id).toBe('contact-2');
    }));
    it('should search contacts by company', (0, _asyncToGenerator2.default)(function* () {
      var results = yield _contactDatabaseService.contactDatabaseService.searchContacts({
        query: 'Acme'
      });
      expect(results.contacts).toHaveLength(1);
      expect(results.contacts[0].id).toBe('contact-1');
    }));
    it('should filter contacts by tags', (0, _asyncToGenerator2.default)(function* () {
      var results = yield _contactDatabaseService.contactDatabaseService.searchContacts({
        tags: ['client']
      });
      expect(results.contacts).toHaveLength(1);
      expect(results.contacts[0].id).toBe('contact-1');
    }));
    it('should combine query and filters', (0, _asyncToGenerator2.default)(function* () {
      var results = yield _contactDatabaseService.contactDatabaseService.searchContacts({
        query: 'John',
        tags: ['business']
      });
      expect(results.contacts).toHaveLength(1);
      expect(results.contacts[0].id).toBe('contact-1');
    }));
    it('should return empty results for non-matching search', (0, _asyncToGenerator2.default)(function* () {
      var results = yield _contactDatabaseService.contactDatabaseService.searchContacts({
        query: 'NonExistentName'
      });
      expect(results.contacts).toHaveLength(0);
      expect(results.totalCount).toBe(0);
    }));
    it('should provide search facets', (0, _asyncToGenerator2.default)(function* () {
      var results = yield _contactDatabaseService.contactDatabaseService.searchContacts({});
      expect(results.facets).toBeDefined();
      expect(results.facets.tags).toContainEqual({
        name: 'client',
        count: 1
      });
      expect(results.facets.tags).toContainEqual({
        name: 'business',
        count: 1
      });
      expect(results.facets.tags).toContainEqual({
        name: 'prospect',
        count: 1
      });
    }));
  });
  describe('Notes Management', function () {
    var testContactId;
    beforeEach((0, _asyncToGenerator2.default)(function* () {
      var contact = createMockContact();
      yield _contactDatabaseService.contactDatabaseService.saveContact(contact);
      testContactId = contact.id;
    }));
    it('should add note to contact', (0, _asyncToGenerator2.default)(function* () {
      var note = createMockNote(testContactId);
      var addedNote = yield _contactDatabaseService.contactDatabaseService.addNote(note);
      expect(addedNote).toBeDefined();
      expect(addedNote.id).toBe(note.id);
      expect(addedNote.contactId).toBe(testContactId);
      expect(addedNote.content).toBe(note.content);
    }));
    it('should retrieve notes by contact ID', (0, _asyncToGenerator2.default)(function* () {
      var note1 = createMockNote(testContactId, {
        id: 'note-1',
        content: 'First note'
      });
      var note2 = createMockNote(testContactId, {
        id: 'note-2',
        content: 'Second note'
      });
      yield _contactDatabaseService.contactDatabaseService.addNote(note1);
      yield _contactDatabaseService.contactDatabaseService.addNote(note2);
      var notes = yield _contactDatabaseService.contactDatabaseService.getNotesByContactId(testContactId);
      expect(notes).toHaveLength(2);
      expect(notes.map(function (n) {
        return n.id;
      })).toContain('note-1');
      expect(notes.map(function (n) {
        return n.id;
      })).toContain('note-2');
    }));
    it('should update note', (0, _asyncToGenerator2.default)(function* () {
      var note = createMockNote(testContactId);
      yield _contactDatabaseService.contactDatabaseService.addNote(note);
      var updatedNote = Object.assign({}, note, {
        content: 'Updated note content',
        type: 'meeting'
      });
      var result = yield _contactDatabaseService.contactDatabaseService.updateNote(updatedNote);
      expect(result.content).toBe('Updated note content');
      expect(result.type).toBe('meeting');
    }));
    it('should delete note', (0, _asyncToGenerator2.default)(function* () {
      var note = createMockNote(testContactId);
      yield _contactDatabaseService.contactDatabaseService.addNote(note);
      var deleted = yield _contactDatabaseService.contactDatabaseService.deleteNote(note.id);
      expect(deleted).toBe(true);
      var notes = yield _contactDatabaseService.contactDatabaseService.getNotesByContactId(testContactId);
      expect(notes).toHaveLength(0);
    }));
  });
  describe('Interactions Management', function () {
    var testContactId;
    beforeEach((0, _asyncToGenerator2.default)(function* () {
      var contact = createMockContact();
      yield _contactDatabaseService.contactDatabaseService.saveContact(contact);
      testContactId = contact.id;
    }));
    it('should add interaction to contact', (0, _asyncToGenerator2.default)(function* () {
      var interaction = {
        id: 'interaction-1',
        contactId: testContactId,
        type: 'call',
        description: 'Business call about project',
        timestamp: '2024-01-01T10:00:00.000Z',
        duration: 1800
      };
      var addedInteraction = yield _contactDatabaseService.contactDatabaseService.addInteraction(interaction);
      expect(addedInteraction).toBeDefined();
      expect(addedInteraction.id).toBe(interaction.id);
      expect(addedInteraction.type).toBe('call');
      expect(addedInteraction.duration).toBe(1800);
    }));
    it('should retrieve interactions by contact ID', (0, _asyncToGenerator2.default)(function* () {
      var interaction1 = {
        id: 'int-1',
        contactId: testContactId,
        type: 'email',
        description: 'Sent project proposal',
        timestamp: '2024-01-01T09:00:00.000Z'
      };
      var interaction2 = {
        id: 'int-2',
        contactId: testContactId,
        type: 'meeting',
        description: 'Project kickoff meeting',
        timestamp: '2024-01-01T14:00:00.000Z',
        duration: 3600,
        participants: ['john@acme.com', 'jane@example.com']
      };
      yield _contactDatabaseService.contactDatabaseService.addInteraction(interaction1);
      yield _contactDatabaseService.contactDatabaseService.addInteraction(interaction2);
      var interactions = yield _contactDatabaseService.contactDatabaseService.getInteractionsByContactId(testContactId);
      expect(interactions).toHaveLength(2);
      expect(interactions.map(function (i) {
        return i.type;
      })).toContain('email');
      expect(interactions.map(function (i) {
        return i.type;
      })).toContain('meeting');
    }));
    it('should delete interaction', (0, _asyncToGenerator2.default)(function* () {
      var interaction = {
        id: 'interaction-1',
        contactId: testContactId,
        type: 'call',
        description: 'Test call',
        timestamp: '2024-01-01T10:00:00.000Z'
      };
      yield _contactDatabaseService.contactDatabaseService.addInteraction(interaction);
      var deleted = yield _contactDatabaseService.contactDatabaseService.deleteInteraction(interaction.id);
      expect(deleted).toBe(true);
      var interactions = yield _contactDatabaseService.contactDatabaseService.getInteractionsByContactId(testContactId);
      expect(interactions).toHaveLength(0);
    }));
  });
  describe('Performance Tests', function () {
    it('should handle large number of contacts efficiently', (0, _asyncToGenerator2.default)(function* () {
      var startTime = Date.now();
      var promises = [];
      for (var i = 0; i < 1000; i++) {
        var contact = createMockContact({
          id: `perf-contact-${i}`,
          fields: [{
            id: `field-${i}`,
            type: 'name',
            label: 'Name',
            value: `Test User ${i}`,
            isEditable: true
          }]
        });
        promises.push(_contactDatabaseService.contactDatabaseService.saveContact(contact));
      }
      yield Promise.all(promises);
      var creationTime = Date.now() - startTime;
      expect(creationTime).toBeLessThan(30000);
      var retrievalStart = Date.now();
      var allContacts = yield _contactDatabaseService.contactDatabaseService.getAllContacts();
      var retrievalTime = Date.now() - retrievalStart;
      expect(allContacts).toHaveLength(1000);
      expect(retrievalTime).toBeLessThan(5000);
    }));
    it('should perform search efficiently on large dataset', (0, _asyncToGenerator2.default)(function* () {
      for (var i = 0; i < 500; i++) {
        var contact = createMockContact({
          id: `search-contact-${i}`,
          fields: [{
            id: `name-${i}`,
            type: 'name',
            label: 'Name',
            value: i % 2 === 0 ? `John Smith ${i}` : `Jane Doe ${i}`,
            isEditable: true
          }]
        });
        yield _contactDatabaseService.contactDatabaseService.saveContact(contact);
      }
      var searchStart = Date.now();
      var results = yield _contactDatabaseService.contactDatabaseService.searchContacts({
        query: 'John'
      });
      var searchTime = Date.now() - searchStart;
      expect(results.contacts.length).toBeGreaterThan(0);
      expect(searchTime).toBeLessThan(2000);
    }));
  });
  describe('Data Integrity', function () {
    it('should maintain referential integrity', (0, _asyncToGenerator2.default)(function* () {
      var contact = createMockContact();
      yield _contactDatabaseService.contactDatabaseService.saveContact(contact);
      var note = createMockNote(contact.id);
      yield _contactDatabaseService.contactDatabaseService.addNote(note);
      yield _contactDatabaseService.contactDatabaseService.deleteContact(contact.id);
      var orphanedNotes = yield _contactDatabaseService.contactDatabaseService.getNotesByContactId(contact.id);
      expect(orphanedNotes).toHaveLength(0);
    }));
    it('should handle concurrent operations safely', (0, _asyncToGenerator2.default)(function* () {
      var contact = createMockContact();
      yield _contactDatabaseService.contactDatabaseService.saveContact(contact);
      var updatePromises = [];
      for (var i = 0; i < 10; i++) {
        var updatedContact = Object.assign({}, contact, {
          tags: [].concat((0, _toConsumableArray2.default)(contact.tags), [`tag-${i}`])
        });
        updatePromises.push(_contactDatabaseService.contactDatabaseService.updateContact(updatedContact));
      }
      var results = yield Promise.allSettled(updatePromises);
      var successful = results.filter(function (r) {
        return r.status === 'fulfilled';
      });
      expect(successful.length).toBeGreaterThan(0);
      var finalContact = yield _contactDatabaseService.contactDatabaseService.getContact(contact.id);
      expect(finalContact).toBeDefined();
      expect(Array.isArray(finalContact == null ? void 0 : finalContact.tags)).toBe(true);
    }));
    it('should validate field constraints', (0, _asyncToGenerator2.default)(function* () {
      var invalidContact = createMockContact({
        fields: [{
          id: '',
          type: 'name',
          label: 'Name',
          value: 'John Doe',
          isEditable: true
        }]
      });
      yield expect(_contactDatabaseService.contactDatabaseService.saveContact(invalidContact)).rejects.toThrow();
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,