4e4cbf9e86c3c566cdac3c9c456ab1ec
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _NativePlatformConstantsIOS = _interopRequireDefault(require("./NativePlatformConstantsIOS"));
var Platform = {
  __constants: null,
  OS: 'ios',
  get Version() {
    return this.constants.osVersion;
  },
  get constants() {
    if (this.__constants == null) {
      this.__constants = _NativePlatformConstantsIOS.default.getConstants();
    }
    return this.__constants;
  },
  get isPad() {
    return this.constants.interfaceIdiom === 'pad';
  },
  get isTV() {
    return this.constants.interfaceIdiom === 'tv';
  },
  get isVision() {
    return this.constants.interfaceIdiom === 'vision';
  },
  get isTesting() {
    if (__DEV__) {
      return this.constants.isTesting;
    }
    return false;
  },
  get isDisableAnimations() {
    var _this$constants$isDis;
    return (_this$constants$isDis = this.constants.isDisableAnimations) != null ? _this$constants$isDis : this.isTesting;
  },
  get isMacCatalyst() {
    var _this$constants$isMac;
    return (_this$constants$isMac = this.constants.isMacCatalyst) != null ? _this$constants$isMac : false;
  },
  select: function select(spec) {
    return 'ios' in spec ? spec.ios : 'native' in spec ? spec.native : spec.default;
  }
};
var _default = exports.default = Platform;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfTmF0aXZlUGxhdGZvcm1Db25zdGFudHNJT1MiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIlBsYXRmb3JtIiwiX19jb25zdGFudHMiLCJPUyIsIlZlcnNpb24iLCJjb25zdGFudHMiLCJvc1ZlcnNpb24iLCJOYXRpdmVQbGF0Zm9ybUNvbnN0YW50c0lPUyIsImdldENvbnN0YW50cyIsImlzUGFkIiwiaW50ZXJmYWNlSWRpb20iLCJpc1RWIiwiaXNWaXNpb24iLCJpc1Rlc3RpbmciLCJfX0RFVl9fIiwiaXNEaXNhYmxlQW5pbWF0aW9ucyIsIl90aGlzJGNvbnN0YW50cyRpc0RpcyIsImlzTWFjQ2F0YWx5c3QiLCJfdGhpcyRjb25zdGFudHMkaXNNYWMiLCJzZWxlY3QiLCJzcGVjIiwiaW9zIiwibmF0aXZlIiwiZGVmYXVsdCIsIl9kZWZhdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIlBsYXRmb3JtLmlvcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3cgc3RyaWN0XG4gKiBAZm9ybWF0XG4gKi9cblxuaW1wb3J0IHR5cGUge1BsYXRmb3JtU2VsZWN0U3BlYywgUGxhdGZvcm1UeXBlfSBmcm9tICcuL1BsYXRmb3JtVHlwZXMnO1xuXG5pbXBvcnQgTmF0aXZlUGxhdGZvcm1Db25zdGFudHNJT1MgZnJvbSAnLi9OYXRpdmVQbGF0Zm9ybUNvbnN0YW50c0lPUyc7XG5cbmNvbnN0IFBsYXRmb3JtOiBQbGF0Zm9ybVR5cGUgPSB7XG4gIF9fY29uc3RhbnRzOiBudWxsLFxuICBPUzogJ2lvcycsXG4gIC8vICRGbG93Rml4TWVbdW5zYWZlLWdldHRlcnMtc2V0dGVyc11cbiAgZ2V0IFZlcnNpb24oKTogc3RyaW5nIHtcbiAgICAvLyAkRmxvd0ZpeE1lW29iamVjdC10aGlzLXJlZmVyZW5jZV1cbiAgICByZXR1cm4gdGhpcy5jb25zdGFudHMub3NWZXJzaW9uO1xuICB9LFxuICAvLyAkRmxvd0ZpeE1lW3Vuc2FmZS1nZXR0ZXJzLXNldHRlcnNdXG4gIGdldCBjb25zdGFudHMoKToge1xuICAgIGZvcmNlVG91Y2hBdmFpbGFibGU6IGJvb2xlYW4sXG4gICAgaW50ZXJmYWNlSWRpb206IHN0cmluZyxcbiAgICBpc1Rlc3Rpbmc6IGJvb2xlYW4sXG4gICAgaXNEaXNhYmxlQW5pbWF0aW9ucz86IGJvb2xlYW4sXG4gICAgb3NWZXJzaW9uOiBzdHJpbmcsXG4gICAgcmVhY3ROYXRpdmVWZXJzaW9uOiB7XG4gICAgICBtYWpvcjogbnVtYmVyLFxuICAgICAgbWlub3I6IG51bWJlcixcbiAgICAgIHBhdGNoOiBudW1iZXIsXG4gICAgICBwcmVyZWxlYXNlOiA/c3RyaW5nLFxuICAgIH0sXG4gICAgc3lzdGVtTmFtZTogc3RyaW5nLFxuICAgIGlzTWFjQ2F0YWx5c3Q/OiBib29sZWFuLFxuICB9IHtcbiAgICAvLyAkRmxvd0ZpeE1lW29iamVjdC10aGlzLXJlZmVyZW5jZV1cbiAgICBpZiAodGhpcy5fX2NvbnN0YW50cyA9PSBudWxsKSB7XG4gICAgICAvLyAkRmxvd0ZpeE1lW29iamVjdC10aGlzLXJlZmVyZW5jZV1cbiAgICAgIHRoaXMuX19jb25zdGFudHMgPSBOYXRpdmVQbGF0Zm9ybUNvbnN0YW50c0lPUy5nZXRDb25zdGFudHMoKTtcbiAgICB9XG4gICAgLy8gJEZsb3dGaXhNZVtvYmplY3QtdGhpcy1yZWZlcmVuY2VdXG4gICAgcmV0dXJuIHRoaXMuX19jb25zdGFudHM7XG4gIH0sXG4gIC8vICRGbG93Rml4TWVbdW5zYWZlLWdldHRlcnMtc2V0dGVyc11cbiAgZ2V0IGlzUGFkKCk6IGJvb2xlYW4ge1xuICAgIC8vICRGbG93Rml4TWVbb2JqZWN0LXRoaXMtcmVmZXJlbmNlXVxuICAgIHJldHVybiB0aGlzLmNvbnN0YW50cy5pbnRlcmZhY2VJZGlvbSA9PT0gJ3BhZCc7XG4gIH0sXG4gIC8vICRGbG93Rml4TWVbdW5zYWZlLWdldHRlcnMtc2V0dGVyc11cbiAgZ2V0IGlzVFYoKTogYm9vbGVhbiB7XG4gICAgLy8gJEZsb3dGaXhNZVtvYmplY3QtdGhpcy1yZWZlcmVuY2VdXG4gICAgcmV0dXJuIHRoaXMuY29uc3RhbnRzLmludGVyZmFjZUlkaW9tID09PSAndHYnO1xuICB9LFxuICAvLyAkRmxvd0ZpeE1lW3Vuc2FmZS1nZXR0ZXJzLXNldHRlcnNdXG4gIGdldCBpc1Zpc2lvbigpOiBib29sZWFuIHtcbiAgICAvLyAkRmxvd0ZpeE1lW29iamVjdC10aGlzLXJlZmVyZW5jZV1cbiAgICByZXR1cm4gdGhpcy5jb25zdGFudHMuaW50ZXJmYWNlSWRpb20gPT09ICd2aXNpb24nO1xuICB9LFxuICAvLyAkRmxvd0ZpeE1lW3Vuc2FmZS1nZXR0ZXJzLXNldHRlcnNdXG4gIGdldCBpc1Rlc3RpbmcoKTogYm9vbGVhbiB7XG4gICAgaWYgKF9fREVWX18pIHtcbiAgICAgIC8vICRGbG93Rml4TWVbb2JqZWN0LXRoaXMtcmVmZXJlbmNlXVxuICAgICAgcmV0dXJuIHRoaXMuY29uc3RhbnRzLmlzVGVzdGluZztcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICAvLyAkRmxvd0ZpeE1lW3Vuc2FmZS1nZXR0ZXJzLXNldHRlcnNdXG4gIGdldCBpc0Rpc2FibGVBbmltYXRpb25zKCk6IGJvb2xlYW4ge1xuICAgIC8vICRGbG93Rml4TWVbb2JqZWN0LXRoaXMtcmVmZXJlbmNlXVxuICAgIHJldHVybiB0aGlzLmNvbnN0YW50cy5pc0Rpc2FibGVBbmltYXRpb25zID8/IHRoaXMuaXNUZXN0aW5nO1xuICB9LFxuICAvLyAkRmxvd0ZpeE1lW3Vuc2FmZS1nZXR0ZXJzLXNldHRlcnNdXG4gIGdldCBpc01hY0NhdGFseXN0KCk6IGJvb2xlYW4ge1xuICAgIC8vICRGbG93Rml4TWVbb2JqZWN0LXRoaXMtcmVmZXJlbmNlXVxuICAgIHJldHVybiB0aGlzLmNvbnN0YW50cy5pc01hY0NhdGFseXN0ID8/IGZhbHNlO1xuICB9LFxuICBzZWxlY3Q6IDxUPihzcGVjOiBQbGF0Zm9ybVNlbGVjdFNwZWM8VD4pOiBUID0+XG4gICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtcmV0dXJuXVxuICAgICdpb3MnIGluIHNwZWMgPyBzcGVjLmlvcyA6ICduYXRpdmUnIGluIHNwZWMgPyBzcGVjLm5hdGl2ZSA6IHNwZWMuZGVmYXVsdCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFBsYXRmb3JtO1xuIl0sIm1hcHBpbmdzIjoiOzs7OztBQVlBLElBQUFBLDJCQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFFQSxJQUFNQyxRQUFzQixHQUFHO0VBQzdCQyxXQUFXLEVBQUUsSUFBSTtFQUNqQkMsRUFBRSxFQUFFLEtBQUs7RUFFVCxJQUFJQyxPQUFPQSxDQUFBLEVBQVc7SUFFcEIsT0FBTyxJQUFJLENBQUNDLFNBQVMsQ0FBQ0MsU0FBUztFQUNqQyxDQUFDO0VBRUQsSUFBSUQsU0FBU0EsQ0FBQSxFQWNYO0lBRUEsSUFBSSxJQUFJLENBQUNILFdBQVcsSUFBSSxJQUFJLEVBQUU7TUFFNUIsSUFBSSxDQUFDQSxXQUFXLEdBQUdLLG1DQUEwQixDQUFDQyxZQUFZLENBQUMsQ0FBQztJQUM5RDtJQUVBLE9BQU8sSUFBSSxDQUFDTixXQUFXO0VBQ3pCLENBQUM7RUFFRCxJQUFJTyxLQUFLQSxDQUFBLEVBQVk7SUFFbkIsT0FBTyxJQUFJLENBQUNKLFNBQVMsQ0FBQ0ssY0FBYyxLQUFLLEtBQUs7RUFDaEQsQ0FBQztFQUVELElBQUlDLElBQUlBLENBQUEsRUFBWTtJQUVsQixPQUFPLElBQUksQ0FBQ04sU0FBUyxDQUFDSyxjQUFjLEtBQUssSUFBSTtFQUMvQyxDQUFDO0VBRUQsSUFBSUUsUUFBUUEsQ0FBQSxFQUFZO0lBRXRCLE9BQU8sSUFBSSxDQUFDUCxTQUFTLENBQUNLLGNBQWMsS0FBSyxRQUFRO0VBQ25ELENBQUM7RUFFRCxJQUFJRyxTQUFTQSxDQUFBLEVBQVk7SUFDdkIsSUFBSUMsT0FBTyxFQUFFO01BRVgsT0FBTyxJQUFJLENBQUNULFNBQVMsQ0FBQ1EsU0FBUztJQUNqQztJQUNBLE9BQU8sS0FBSztFQUNkLENBQUM7RUFFRCxJQUFJRSxtQkFBbUJBLENBQUEsRUFBWTtJQUFBLElBQUFDLHFCQUFBO0lBRWpDLFFBQUFBLHFCQUFBLEdBQU8sSUFBSSxDQUFDWCxTQUFTLENBQUNVLG1CQUFtQixZQUFBQyxxQkFBQSxHQUFJLElBQUksQ0FBQ0gsU0FBUztFQUM3RCxDQUFDO0VBRUQsSUFBSUksYUFBYUEsQ0FBQSxFQUFZO0lBQUEsSUFBQUMscUJBQUE7SUFFM0IsUUFBQUEscUJBQUEsR0FBTyxJQUFJLENBQUNiLFNBQVMsQ0FBQ1ksYUFBYSxZQUFBQyxxQkFBQSxHQUFJLEtBQUs7RUFDOUMsQ0FBQztFQUNEQyxNQUFNLEVBQUUsU0FBUkEsTUFBTUEsQ0FBTUMsSUFBMkI7SUFBQSxPQUVyQyxLQUFLLElBQUlBLElBQUksR0FBR0EsSUFBSSxDQUFDQyxHQUFHLEdBQUcsUUFBUSxJQUFJRCxJQUFJLEdBQUdBLElBQUksQ0FBQ0UsTUFBTSxHQUFHRixJQUFJLENBQUNHLE9BQU87RUFBQTtBQUM1RSxDQUFDO0FBQUMsSUFBQUMsUUFBQSxHQUFBQyxPQUFBLENBQUFGLE9BQUEsR0FFYXRCLFFBQVEiLCJpZ25vcmVMaXN0IjpbXX0=