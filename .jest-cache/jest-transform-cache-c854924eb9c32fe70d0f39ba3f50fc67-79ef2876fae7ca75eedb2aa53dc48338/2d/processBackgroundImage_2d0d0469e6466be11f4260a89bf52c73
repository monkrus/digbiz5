f1d641116899da106b6f5ff02d1ceca3
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = processBackgroundImage;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var processColor = require('./processColor').default;
var LINEAR_GRADIENT_DIRECTION_REGEX = /^to\s+(?:top|bottom|left|right)(?:\s+(?:top|bottom|left|right))?/i;
var LINEAR_GRADIENT_ANGLE_UNIT_REGEX = /^([+-]?\d*\.?\d+)(deg|grad|rad|turn)$/i;
var LINEAR_GRADIENT_DEFAULT_DIRECTION = {
  type: 'angle',
  value: 180
};
var DEFAULT_RADIAL_SHAPE = 'ellipse';
var DEFAULT_RADIAL_SIZE = 'farthest-corner';
var DEFAULT_RADIAL_POSITION = {
  top: '50%',
  left: '50%'
};
function processBackgroundImage(backgroundImage) {
  var result = [];
  if (backgroundImage == null) {
    return result;
  }
  if (typeof backgroundImage === 'string') {
    result = parseBackgroundImageCSSString(backgroundImage.replace(/\n/g, ' '));
  } else if (Array.isArray(backgroundImage)) {
    for (var bgImage of backgroundImage) {
      var processedColorStops = processColorStops(bgImage);
      if (processedColorStops == null) {
        return [];
      }
      if (bgImage.type === 'linear-gradient') {
        var direction = LINEAR_GRADIENT_DEFAULT_DIRECTION;
        var bgDirection = bgImage.direction != null ? bgImage.direction.toLowerCase() : null;
        if (bgDirection != null) {
          if (LINEAR_GRADIENT_ANGLE_UNIT_REGEX.test(bgDirection)) {
            var parsedAngle = getAngleInDegrees(bgDirection);
            if (parsedAngle != null) {
              direction = {
                type: 'angle',
                value: parsedAngle
              };
            } else {
              return [];
            }
          } else if (LINEAR_GRADIENT_DIRECTION_REGEX.test(bgDirection)) {
            var parsedDirection = getDirectionForKeyword(bgDirection);
            if (parsedDirection != null) {
              direction = parsedDirection;
            } else {
              return [];
            }
          } else {
            return [];
          }
        }
        result = result.concat({
          type: 'linear-gradient',
          direction: direction,
          colorStops: processedColorStops
        });
      } else if (bgImage.type === 'radial-gradient') {
        var shape = DEFAULT_RADIAL_SHAPE;
        var size = DEFAULT_RADIAL_SIZE;
        var position = Object.assign({}, DEFAULT_RADIAL_POSITION);
        if (bgImage.shape != null) {
          if (bgImage.shape === 'circle' || bgImage.shape === 'ellipse') {
            shape = bgImage.shape;
          } else {
            return [];
          }
        }
        if (bgImage.size != null) {
          if (typeof bgImage.size === 'string' && (bgImage.size === 'closest-side' || bgImage.size === 'closest-corner' || bgImage.size === 'farthest-side' || bgImage.size === 'farthest-corner')) {
            size = bgImage.size;
          } else if (typeof bgImage.size === 'object' && bgImage.size.x != null && bgImage.size.y != null) {
            size = {
              x: bgImage.size.x,
              y: bgImage.size.y
            };
          } else {
            return [];
          }
        }
        if (bgImage.position != null) {
          position = bgImage.position;
        }
        result = result.concat({
          type: 'radial-gradient',
          shape: shape,
          size: size,
          position: position,
          colorStops: processedColorStops
        });
      }
    }
  }
  return result;
}
function processColorStops(bgImage) {
  var processedColorStops = [];
  for (var index = 0; index < bgImage.colorStops.length; index++) {
    var colorStop = bgImage.colorStops[index];
    var positions = colorStop.positions;
    if (colorStop.color == null && Array.isArray(positions) && positions.length === 1) {
      var position = positions[0];
      if (typeof position === 'number' || typeof position === 'string' && position.endsWith('%')) {
        processedColorStops.push({
          color: null,
          position: position
        });
      } else {
        return null;
      }
    } else {
      var processedColor = processColor(colorStop.color);
      if (processedColor == null) {
        return null;
      }
      if (positions != null && positions.length > 0) {
        for (var _position of positions) {
          if (typeof _position === 'number' || typeof _position === 'string' && _position.endsWith('%')) {
            processedColorStops.push({
              color: processedColor,
              position: _position
            });
          } else {
            return null;
          }
        }
      } else {
        processedColorStops.push({
          color: processedColor,
          position: null
        });
      }
    }
  }
  return processedColorStops;
}
function parseBackgroundImageCSSString(cssString) {
  var gradients = [];
  var bgImageStrings = splitGradients(cssString);
  for (var bgImageString of bgImageStrings) {
    var bgImage = bgImageString.toLowerCase();
    var gradientRegex = /^(linear|radial)-gradient\(((?:\([^)]*\)|[^()])*)\)/;
    var match = gradientRegex.exec(bgImage);
    if (match) {
      var _match = (0, _slicedToArray2.default)(match, 3),
        type = _match[1],
        gradientContent = _match[2];
      var isRadial = type.toLowerCase() === 'radial';
      var gradient = isRadial ? parseRadialGradientCSSString(gradientContent) : parseLinearGradientCSSString(gradientContent);
      if (gradient != null) {
        gradients.push(gradient);
      }
    }
  }
  return gradients;
}
function parseRadialGradientCSSString(gradientContent) {
  var shape = DEFAULT_RADIAL_SHAPE;
  var size = DEFAULT_RADIAL_SIZE;
  var position = Object.assign({}, DEFAULT_RADIAL_POSITION);
  var parts = gradientContent.split(/,(?![^(]*\))/);
  var firstPartStr = parts[0].trim();
  var remainingParts = (0, _toConsumableArray2.default)(parts);
  var hasShapeSizeOrPositionString = false;
  var hasExplicitSingleSize = false;
  var hasExplicitShape = false;
  var firstPartTokens = firstPartStr.split(/\s+/);
  while (firstPartTokens.length > 0) {
    var token = firstPartTokens.shift();
    if (token == null) {
      continue;
    }
    var tokenTrimmed = token.toLowerCase().trim();
    if (tokenTrimmed === 'circle' || tokenTrimmed === 'ellipse') {
      shape = tokenTrimmed === 'circle' ? 'circle' : 'ellipse';
      hasShapeSizeOrPositionString = true;
      hasExplicitShape = true;
    } else if (tokenTrimmed === 'closest-corner' || tokenTrimmed === 'farthest-corner' || tokenTrimmed === 'closest-side' || tokenTrimmed === 'farthest-side') {
      size = tokenTrimmed;
      hasShapeSizeOrPositionString = true;
    } else if (tokenTrimmed.endsWith('px') || tokenTrimmed.endsWith('%')) {
      var sizeX = getPositionFromCSSValue(tokenTrimmed);
      if (sizeX == null) {
        return null;
      }
      if (typeof sizeX === 'number' && sizeX < 0) {
        return null;
      }
      hasShapeSizeOrPositionString = true;
      size = {
        x: sizeX,
        y: sizeX
      };
      token = firstPartTokens.shift();
      if (token == null) {
        hasExplicitSingleSize = true;
        continue;
      }
      tokenTrimmed = token.toLowerCase().trim();
      if (tokenTrimmed.endsWith('px') || tokenTrimmed.endsWith('%')) {
        var sizeY = getPositionFromCSSValue(tokenTrimmed);
        if (sizeY == null) {
          return null;
        }
        if (typeof sizeY === 'number' && sizeY < 0) {
          return null;
        }
        size = {
          x: sizeX,
          y: sizeY
        };
      } else {
        hasExplicitSingleSize = true;
      }
    } else if (tokenTrimmed === 'at') {
      var top = void 0;
      var left = void 0;
      var right = void 0;
      var bottom = void 0;
      hasShapeSizeOrPositionString = true;
      if (firstPartTokens.length === 0) {
        return null;
      }
      if (firstPartTokens.length === 1) {
        token = firstPartTokens.shift();
        if (token == null) {
          return null;
        }
        tokenTrimmed = token.toLowerCase().trim();
        if (tokenTrimmed === 'left') {
          left = '0%';
          top = '50%';
        } else if (tokenTrimmed === 'center') {
          left = '50%';
          top = '50%';
        } else if (tokenTrimmed === 'right') {
          left = '100%';
          top = '50%';
        } else if (tokenTrimmed === 'top') {
          left = '50%';
          top = '0%';
        } else if (tokenTrimmed === 'bottom') {
          left = '50%';
          top = '100%';
        } else if (tokenTrimmed.endsWith('px') || tokenTrimmed.endsWith('%')) {
          var value = getPositionFromCSSValue(tokenTrimmed);
          if (value == null) {
            return null;
          }
          left = value;
          top = '50%';
        }
      }
      if (firstPartTokens.length === 2) {
        var t1 = firstPartTokens.shift();
        var t2 = firstPartTokens.shift();
        if (t1 == null || t2 == null) {
          return null;
        }
        var token1 = t1.toLowerCase().trim();
        var token2 = t2.toLowerCase().trim();
        var horizontalPositions = ['left', 'center', 'right'];
        var verticalPositions = ['top', 'center', 'bottom'];
        if (horizontalPositions.includes(token1) && verticalPositions.includes(token2)) {
          left = token1 === 'left' ? '0%' : token1 === 'center' ? '50%' : '100%';
          top = token2 === 'top' ? '0%' : token2 === 'center' ? '50%' : '100%';
        } else if (verticalPositions.includes(token1) && horizontalPositions.includes(token2)) {
          left = token2 === 'left' ? '0%' : token2 === 'center' ? '50%' : '100%';
          top = token1 === 'top' ? '0%' : token1 === 'center' ? '50%' : '100%';
        } else {
          if (token1 === 'left') {
            left = '0%';
          } else if (token1 === 'center') {
            left = '50%';
          } else if (token1 === 'right') {
            left = '100%';
          } else if (token1.endsWith('px') || token1.endsWith('%')) {
            var _value = getPositionFromCSSValue(token1);
            if (_value == null) {
              return null;
            }
            left = _value;
          } else {
            return null;
          }
          if (token2 === 'top') {
            top = '0%';
          } else if (token2 === 'center') {
            top = '50%';
          } else if (token2 === 'bottom') {
            top = '100%';
          } else if (token2.endsWith('px') || token2.endsWith('%')) {
            var _value2 = getPositionFromCSSValue(token2);
            if (_value2 == null) {
              return null;
            }
            top = _value2;
          } else {
            return null;
          }
        }
      }
      if (firstPartTokens.length === 4) {
        var _t = firstPartTokens.shift();
        var _t2 = firstPartTokens.shift();
        var t3 = firstPartTokens.shift();
        var t4 = firstPartTokens.shift();
        if (_t == null || _t2 == null || t3 == null || t4 == null) {
          return null;
        }
        var _token = _t.toLowerCase().trim();
        var _token2 = _t2.toLowerCase().trim();
        var token3 = t3.toLowerCase().trim();
        var token4 = t4.toLowerCase().trim();
        var keyword1 = _token;
        var value1 = getPositionFromCSSValue(_token2);
        var keyword2 = token3;
        var value2 = getPositionFromCSSValue(token4);
        if (value1 == null || value2 == null) {
          return null;
        }
        if (keyword1 === 'left') {
          left = value1;
        } else if (keyword1 === 'right') {
          right = value1;
        } else if (keyword1 === 'top') {
          top = value1;
        } else if (keyword1 === 'bottom') {
          bottom = value1;
        } else {
          return null;
        }
        if (keyword2 === 'left') {
          left = value2;
        } else if (keyword2 === 'right') {
          right = value2;
        } else if (keyword2 === 'top') {
          top = value2;
        } else if (keyword2 === 'bottom') {
          bottom = value2;
        } else {
          return null;
        }
      }
      if (top != null && left != null) {
        position = {
          top: top,
          left: left
        };
      } else if (bottom != null && right != null) {
        position = {
          bottom: bottom,
          right: right
        };
      } else if (top != null && right != null) {
        position = {
          top: top,
          right: right
        };
      } else if (bottom != null && left != null) {
        position = {
          bottom: bottom,
          left: left
        };
      } else {
        return null;
      }
      break;
    }
    if (!hasShapeSizeOrPositionString) {
      break;
    }
  }
  if (hasShapeSizeOrPositionString) {
    remainingParts.shift();
    if (!hasExplicitShape && hasExplicitSingleSize) {
      shape = 'circle';
    }
    if (hasExplicitSingleSize && hasExplicitShape && shape === 'ellipse') {
      return null;
    }
  }
  var colorStops = parseColorStopsCSSString(remainingParts);
  if (colorStops == null) {
    return null;
  }
  return {
    type: 'radial-gradient',
    shape: shape,
    size: size,
    position: position,
    colorStops: colorStops
  };
}
function parseLinearGradientCSSString(gradientContent) {
  var parts = gradientContent.split(',');
  var direction = LINEAR_GRADIENT_DEFAULT_DIRECTION;
  var trimmedDirection = parts[0].trim().toLowerCase();
  if (LINEAR_GRADIENT_ANGLE_UNIT_REGEX.test(trimmedDirection)) {
    var parsedAngle = getAngleInDegrees(trimmedDirection);
    if (parsedAngle != null) {
      direction = {
        type: 'angle',
        value: parsedAngle
      };
      parts.shift();
    } else {
      return null;
    }
  } else if (LINEAR_GRADIENT_DIRECTION_REGEX.test(trimmedDirection)) {
    var parsedDirection = getDirectionForKeyword(trimmedDirection);
    if (parsedDirection != null) {
      direction = parsedDirection;
      parts.shift();
    } else {
      return null;
    }
  }
  var colorStops = parseColorStopsCSSString(parts);
  if (colorStops == null) {
    return null;
  }
  return {
    type: 'linear-gradient',
    direction: direction,
    colorStops: colorStops
  };
}
function parseColorStopsCSSString(parts) {
  var colorStopsString = parts.join(',');
  var colorStops = [];
  var stops = colorStopsString.split(/,(?![^(]*\))/);
  var prevStop = null;
  for (var i = 0; i < stops.length; i++) {
    var stop = stops[i];
    var trimmedStop = stop.trim().toLowerCase();
    var colorStopParts = trimmedStop.match(/\S+\([^)]*\)|\S+/g);
    if (colorStopParts == null) {
      return null;
    }
    if (colorStopParts.length === 3) {
      var color = colorStopParts[0];
      var position1 = getPositionFromCSSValue(colorStopParts[1]);
      var position2 = getPositionFromCSSValue(colorStopParts[2]);
      var processedColor = processColor(color);
      if (processedColor == null) {
        return null;
      }
      if (position1 == null || position2 == null) {
        return null;
      }
      colorStops.push({
        color: processedColor,
        position: position1
      });
      colorStops.push({
        color: processedColor,
        position: position2
      });
    } else if (colorStopParts.length === 2) {
      var _color = colorStopParts[0];
      var position = getPositionFromCSSValue(colorStopParts[1]);
      var _processedColor = processColor(_color);
      if (_processedColor == null) {
        return null;
      }
      if (position == null) {
        return null;
      }
      colorStops.push({
        color: _processedColor,
        position: position
      });
    } else if (colorStopParts.length === 1) {
      var _position2 = getPositionFromCSSValue(colorStopParts[0]);
      if (_position2 != null) {
        if (prevStop != null && prevStop.length === 1 && getPositionFromCSSValue(prevStop[0]) != null || i === stops.length - 1 || i === 0) {
          return null;
        }
        colorStops.push({
          color: null,
          position: _position2
        });
      } else {
        var _processedColor2 = processColor(colorStopParts[0]);
        if (_processedColor2 == null) {
          return null;
        }
        colorStops.push({
          color: _processedColor2,
          position: null
        });
      }
    } else {
      return null;
    }
    prevStop = colorStopParts;
  }
  return colorStops;
}
function getDirectionForKeyword(direction) {
  if (direction == null) {
    return null;
  }
  var normalized = direction.replace(/\s+/g, ' ').toLowerCase();
  switch (normalized) {
    case 'to top':
      return {
        type: 'angle',
        value: 0
      };
    case 'to right':
      return {
        type: 'angle',
        value: 90
      };
    case 'to bottom':
      return {
        type: 'angle',
        value: 180
      };
    case 'to left':
      return {
        type: 'angle',
        value: 270
      };
    case 'to top right':
    case 'to right top':
      return {
        type: 'keyword',
        value: 'to top right'
      };
    case 'to bottom right':
    case 'to right bottom':
      return {
        type: 'keyword',
        value: 'to bottom right'
      };
    case 'to top left':
    case 'to left top':
      return {
        type: 'keyword',
        value: 'to top left'
      };
    case 'to bottom left':
    case 'to left bottom':
      return {
        type: 'keyword',
        value: 'to bottom left'
      };
    default:
      return null;
  }
}
function getAngleInDegrees(angle) {
  if (angle == null) {
    return null;
  }
  var match = angle.match(LINEAR_GRADIENT_ANGLE_UNIT_REGEX);
  if (!match) {
    return null;
  }
  var _match2 = (0, _slicedToArray2.default)(match, 3),
    value = _match2[1],
    unit = _match2[2];
  var numericValue = parseFloat(value);
  switch (unit) {
    case 'deg':
      return numericValue;
    case 'grad':
      return numericValue * 0.9;
    case 'rad':
      return numericValue * 180 / Math.PI;
    case 'turn':
      return numericValue * 360;
    default:
      return null;
  }
}
function getPositionFromCSSValue(position) {
  if (position.endsWith('px')) {
    return parseFloat(position);
  }
  if (position.endsWith('%')) {
    return position;
  }
}
function splitGradients(input) {
  var result = [];
  var current = '';
  var depth = 0;
  for (var i = 0; i < input.length; i++) {
    var char = input[i];
    if (char === '(') {
      depth++;
    } else if (char === ')') {
      depth--;
    } else if (char === ',' && depth === 0) {
      result.push(current.trim());
      current = '';
      continue;
    }
    current += char;
  }
  if (current.trim() !== '') {
    result.push(current.trim());
  }
  return result;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,