38abd035ea0677b3d8c49e7a642339e8
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDefaultConfig = getDefaultConfig;
Object.defineProperty(exports, "mergeConfig", {
  enumerable: true,
  get: function get() {
    return _metroConfig.mergeConfig;
  }
});
exports.setFrameworkDefaults = setFrameworkDefaults;
var _metroConfig = require("metro-config");
var INTERNAL_CALLSITES_REGEX = new RegExp(["/Libraries/BatchedBridge/MessageQueue\\.js$", "/Libraries/Core/.+\\.js$", "/Libraries/LogBox/.+\\.js$", "/Libraries/Network/.+\\.js$", "/Libraries/Pressability/.+\\.js$", "/Libraries/Renderer/implementations/.+\\.js$", "/Libraries/Utilities/.+\\.js$", "/Libraries/vendor/.+\\.js$", "/Libraries/WebSocket/.+\\.js$", "/src/private/renderer/errorhandling/.+\\.js$", "/metro-runtime/.+\\.js$", "/node_modules/@babel/runtime/.+\\.js$", "/node_modules/@react-native/js-polyfills/.+\\.js$", "/node_modules/invariant/.+\\.js$", "/node_modules/react-devtools-core/.+\\.js$", "/node_modules/react-native/index.js$", "/node_modules/react-refresh/.+\\.js$", "/node_modules/scheduler/.+\\.js$", "^\\[native code\\]$"].map(function (pathPattern) {
  return pathPattern.replaceAll("/", "[/\\\\]");
}).join("|"));
var frameworkDefaults = {};
function setFrameworkDefaults(config) {
  frameworkDefaults = config;
}
function getDefaultConfig(projectRoot) {
  var reactNativeDefaults = {
    resolver: {
      resolverMainFields: ["react-native", "browser", "main"],
      platforms: ["android", "ios"],
      unstable_conditionNames: ["react-native"]
    },
    serializer: {
      getModulesRunBeforeMainModule: function getModulesRunBeforeMainModule() {
        return [require.resolve("react-native/Libraries/Core/InitializeCore")];
      },
      getPolyfills: function getPolyfills() {
        return require("@react-native/js-polyfills")();
      },
      isThirdPartyModule: function isThirdPartyModule(_ref) {
        var modulePath = _ref.path;
        return INTERNAL_CALLSITES_REGEX.test(modulePath) || /(?:^|[/\\])node_modules[/\\]/.test(modulePath);
      }
    },
    server: {
      port: Number(process.env.RCT_METRO_PORT) || 8081
    },
    symbolicator: {
      customizeFrame: function customizeFrame(frame) {
        var collapse = Boolean(frame.file != null && INTERNAL_CALLSITES_REGEX.test(frame.file));
        return {
          collapse: collapse
        };
      }
    },
    transformer: {
      allowOptionalDependencies: true,
      assetRegistryPath: "react-native/Libraries/Image/AssetRegistry",
      asyncRequireModulePath: require.resolve("metro-runtime/src/modules/asyncRequire"),
      babelTransformerPath: require.resolve("@react-native/metro-babel-transformer"),
      getTransformOptions: function () {
        var _getTransformOptions = (0, _asyncToGenerator2.default)(function* () {
          return {
            transform: {
              experimentalImportSupport: false,
              inlineRequires: true
            }
          };
        });
        function getTransformOptions() {
          return _getTransformOptions.apply(this, arguments);
        }
        return getTransformOptions;
      }()
    },
    watchFolders: []
  };
  global.__REACT_NATIVE_METRO_CONFIG_LOADED = true;
  var metroDefaults = _metroConfig.getDefaultConfig.getDefaultValues(projectRoot);
  return (0, _metroConfig.mergeConfig)(metroDefaults, reactNativeDefaults, frameworkDefaults);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,