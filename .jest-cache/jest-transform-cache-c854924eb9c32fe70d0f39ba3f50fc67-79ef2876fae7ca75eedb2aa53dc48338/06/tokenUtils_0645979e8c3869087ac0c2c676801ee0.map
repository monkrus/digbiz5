{"version":3,"names":["decodeJWTPayload","exports","token","cov_2cmvwkn4rz","f","s","parts","split","length","b","payload","paddedPayload","repeat","atob","decoded","JSON","parse","Buffer","from","toString","error","isTokenExpired","exp","currentTime","Math","floor","Date","now","getTokenExpirationTime","getTokenTimeRemaining","expirationTime","remaining","max","validateTokens","tokens","accessToken","isValid","isExpired","shouldRefresh","timeRemaining","expiresIn","getUserIdFromToken","sub","userId","id","getEmailFromToken","email","getRolesFromToken","roles","permissions","formatAuthHeader","tokenType","arguments","undefined","getOptimalRefreshTime","isRefreshTokenValid","refreshToken","getTokenInfo","issuedAt","iat","expiresAt"],"sources":["tokenUtils.ts"],"sourcesContent":["/**\n * JWT Token Utilities\n *\n * Provides utilities for JWT token validation, parsing, and management.\n * Handles token expiration checks and refresh logic.\n */\n\nimport { JWTTokens, TokenValidation } from '../types/auth';\n\n/**\n * Decodes JWT token payload without verification\n */\nexport const decodeJWTPayload = (token: string): any | null => {\n  try {\n    const parts = token.split('.');\n    if (parts.length !== 3) {\n      return null;\n    }\n\n    const payload = parts[1];\n    const paddedPayload = payload + '='.repeat((4 - (payload.length % 4)) % 4);\n\n    // Use atob for base64 decoding in browser/React Native environment\n    if (typeof atob !== 'undefined') {\n      const decoded = atob(paddedPayload);\n      return JSON.parse(decoded);\n    }\n\n    // Fallback to Buffer for Node.js environment (testing)\n    if (typeof Buffer !== 'undefined') {\n      const decoded = Buffer.from(paddedPayload, 'base64').toString('utf-8');\n      return JSON.parse(decoded);\n    }\n\n    return null;\n  } catch (error) {\n    return null;\n  }\n};\n\n/**\n * Checks if JWT token is expired\n */\nexport const isTokenExpired = (token: string): boolean => {\n  const payload = decodeJWTPayload(token);\n  if (!payload || !payload.exp) {\n    return true;\n  }\n\n  const currentTime = Math.floor(Date.now() / 1000);\n  return payload.exp < currentTime;\n};\n\n/**\n * Gets token expiration time in seconds\n */\nexport const getTokenExpirationTime = (token: string): number | null => {\n  const payload = decodeJWTPayload(token);\n  return payload?.exp || null;\n};\n\n/**\n * Gets remaining time until token expires (in seconds)\n */\nexport const getTokenTimeRemaining = (token: string): number => {\n  const expirationTime = getTokenExpirationTime(token);\n  if (!expirationTime) {\n    return 0;\n  }\n\n  const currentTime = Math.floor(Date.now() / 1000);\n  const remaining = expirationTime - currentTime;\n  return Math.max(0, remaining);\n};\n\n/**\n * Validates JWT tokens and determines if refresh is needed\n */\nexport const validateTokens = (tokens: JWTTokens): TokenValidation => {\n  if (!tokens || !tokens.accessToken) {\n    return {\n      isValid: false,\n      isExpired: true,\n      shouldRefresh: false,\n    };\n  }\n\n  const isExpired = isTokenExpired(tokens.accessToken);\n  const timeRemaining = getTokenTimeRemaining(tokens.accessToken);\n\n  // Refresh if token expires within 5 minutes (300 seconds)\n  const shouldRefresh = timeRemaining < 300;\n\n  return {\n    isValid: !isExpired,\n    isExpired,\n    expiresIn: timeRemaining,\n    shouldRefresh,\n  };\n};\n\n/**\n * Extracts user ID from JWT token\n */\nexport const getUserIdFromToken = (token: string): string | null => {\n  const payload = decodeJWTPayload(token);\n  return payload?.sub || payload?.userId || payload?.id || null;\n};\n\n/**\n * Extracts user email from JWT token\n */\nexport const getEmailFromToken = (token: string): string | null => {\n  const payload = decodeJWTPayload(token);\n  return payload?.email || null;\n};\n\n/**\n * Extracts user roles/permissions from JWT token\n */\nexport const getRolesFromToken = (token: string): string[] => {\n  const payload = decodeJWTPayload(token);\n  return payload?.roles || payload?.permissions || [];\n};\n\n/**\n * Formats authorization header for API requests\n */\nexport const formatAuthHeader = (\n  token: string,\n  tokenType: string = 'Bearer',\n): string => {\n  return `${tokenType} ${token}`;\n};\n\n/**\n * Calculates optimal refresh time (80% of token lifetime)\n */\nexport const getOptimalRefreshTime = (tokens: JWTTokens): number => {\n  const timeRemaining = getTokenTimeRemaining(tokens.accessToken);\n  // Refresh at 80% of remaining time, minimum 60 seconds\n  return Math.max(60, Math.floor(timeRemaining * 0.8));\n};\n\n/**\n * Checks if refresh token is still valid\n */\nexport const isRefreshTokenValid = (tokens: JWTTokens): boolean => {\n  if (!tokens.refreshToken) {\n    return false;\n  }\n\n  // If refresh token doesn't expire, assume it's valid\n  const payload = decodeJWTPayload(tokens.refreshToken);\n  if (!payload || !payload.exp) {\n    return true;\n  }\n\n  return !isTokenExpired(tokens.refreshToken);\n};\n\n/**\n * Token utilities for debugging and monitoring\n */\nexport const getTokenInfo = (token: string) => {\n  const payload = decodeJWTPayload(token);\n  if (!payload) {\n    return null;\n  }\n\n  const currentTime = Math.floor(Date.now() / 1000);\n  const issuedAt = payload.iat ? new Date(payload.iat * 1000) : null;\n  const expiresAt = payload.exp ? new Date(payload.exp * 1000) : null;\n  const timeRemaining = payload.exp ? payload.exp - currentTime : null;\n\n  return {\n    userId: payload.sub || payload.userId || payload.id,\n    email: payload.email,\n    roles: payload.roles || payload.permissions || [],\n    issuedAt,\n    expiresAt,\n    timeRemaining,\n    isExpired: timeRemaining ? timeRemaining <= 0 : false,\n  };\n};\n"],"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","ignoreList":[]}