5d73caf7c1081f2c6812344242f6a41f
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useOptionsGetters = useOptionsGetters;
var React = _interopRequireWildcard(require("react"));
var _NavigationBuilderContext = require("./NavigationBuilderContext.js");
var _NavigationStateContext = require("./NavigationStateContext.js");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function useOptionsGetters(_ref) {
  var key = _ref.key,
    options = _ref.options,
    navigation = _ref.navigation;
  var optionsRef = React.useRef(options);
  var optionsGettersFromChildRef = React.useRef({});
  var _React$useContext = React.useContext(_NavigationBuilderContext.NavigationBuilderContext),
    onOptionsChange = _React$useContext.onOptionsChange;
  var _React$useContext2 = React.useContext(_NavigationStateContext.NavigationStateContext),
    parentAddOptionsGetter = _React$useContext2.addOptionsGetter;
  var optionsChangeListener = React.useCallback(function () {
    var _navigation$isFocused;
    var isFocused = (_navigation$isFocused = navigation == null ? void 0 : navigation.isFocused()) != null ? _navigation$isFocused : true;
    var hasChildren = Object.keys(optionsGettersFromChildRef.current).length;
    if (isFocused && !hasChildren) {
      var _optionsRef$current;
      onOptionsChange((_optionsRef$current = optionsRef.current) != null ? _optionsRef$current : {});
    }
  }, [navigation, onOptionsChange]);
  React.useEffect(function () {
    optionsRef.current = options;
    optionsChangeListener();
    return navigation == null ? void 0 : navigation.addListener('focus', optionsChangeListener);
  }, [navigation, options, optionsChangeListener]);
  var getOptionsFromListener = React.useCallback(function () {
    for (var _key in optionsGettersFromChildRef.current) {
      if (_key in optionsGettersFromChildRef.current) {
        var _optionsGettersFromCh, _optionsGettersFromCh2;
        var result = (_optionsGettersFromCh = (_optionsGettersFromCh2 = optionsGettersFromChildRef.current)[_key]) == null ? void 0 : _optionsGettersFromCh.call(_optionsGettersFromCh2);
        if (result !== null) {
          return result;
        }
      }
    }
    return null;
  }, []);
  var getCurrentOptions = React.useCallback(function () {
    var _navigation$isFocused2;
    var isFocused = (_navigation$isFocused2 = navigation == null ? void 0 : navigation.isFocused()) != null ? _navigation$isFocused2 : true;
    if (!isFocused) {
      return null;
    }
    var optionsFromListener = getOptionsFromListener();
    if (optionsFromListener !== null) {
      return optionsFromListener;
    }
    return optionsRef.current;
  }, [navigation, getOptionsFromListener]);
  React.useEffect(function () {
    return parentAddOptionsGetter == null ? void 0 : parentAddOptionsGetter(key, getCurrentOptions);
  }, [getCurrentOptions, parentAddOptionsGetter, key]);
  var addOptionsGetter = React.useCallback(function (key, getter) {
    optionsGettersFromChildRef.current[key] = getter;
    optionsChangeListener();
    return function () {
      delete optionsGettersFromChildRef.current[key];
      optionsChangeListener();
    };
  }, [optionsChangeListener]);
  return {
    addOptionsGetter: addOptionsGetter,
    getCurrentOptions: getCurrentOptions
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9OYXZpZ2F0aW9uQnVpbGRlckNvbnRleHQiLCJfTmF2aWdhdGlvblN0YXRlQ29udGV4dCIsImUiLCJ0IiwiV2Vha01hcCIsInIiLCJuIiwiX19lc01vZHVsZSIsIm8iLCJpIiwiZiIsIl9fcHJvdG9fXyIsImRlZmF1bHQiLCJoYXMiLCJnZXQiLCJzZXQiLCJfdCIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwidXNlT3B0aW9uc0dldHRlcnMiLCJfcmVmIiwia2V5Iiwib3B0aW9ucyIsIm5hdmlnYXRpb24iLCJvcHRpb25zUmVmIiwidXNlUmVmIiwib3B0aW9uc0dldHRlcnNGcm9tQ2hpbGRSZWYiLCJfUmVhY3QkdXNlQ29udGV4dCIsInVzZUNvbnRleHQiLCJOYXZpZ2F0aW9uQnVpbGRlckNvbnRleHQiLCJvbk9wdGlvbnNDaGFuZ2UiLCJfUmVhY3QkdXNlQ29udGV4dDIiLCJOYXZpZ2F0aW9uU3RhdGVDb250ZXh0IiwicGFyZW50QWRkT3B0aW9uc0dldHRlciIsImFkZE9wdGlvbnNHZXR0ZXIiLCJvcHRpb25zQ2hhbmdlTGlzdGVuZXIiLCJ1c2VDYWxsYmFjayIsIl9uYXZpZ2F0aW9uJGlzRm9jdXNlZCIsImlzRm9jdXNlZCIsImhhc0NoaWxkcmVuIiwia2V5cyIsImN1cnJlbnQiLCJsZW5ndGgiLCJfb3B0aW9uc1JlZiRjdXJyZW50IiwidXNlRWZmZWN0IiwiYWRkTGlzdGVuZXIiLCJnZXRPcHRpb25zRnJvbUxpc3RlbmVyIiwiX29wdGlvbnNHZXR0ZXJzRnJvbUNoIiwiX29wdGlvbnNHZXR0ZXJzRnJvbUNoMiIsInJlc3VsdCIsImdldEN1cnJlbnRPcHRpb25zIiwiX25hdmlnYXRpb24kaXNGb2N1c2VkMiIsIm9wdGlvbnNGcm9tTGlzdGVuZXIiLCJnZXR0ZXIiXSwic291cmNlcyI6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