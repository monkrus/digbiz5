2cc690d8ddc3bb996b5d8bbaad5387de
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function cov_150n2h6aw0() {
  var path = "C:\\Users\\robot\\Desktop\\digbiz5\\digbiz5\\src\\components\\common\\LoadingSpinner.tsx";
  var hash = "8060ea789ef44b05d0e7e88621a4db543f891088";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\robot\\Desktop\\digbiz5\\digbiz5\\src\\components\\common\\LoadingSpinner.tsx",
    statementMap: {
      "0": {
        start: {
          line: 22,
          column: 54
        },
        end: {
          line: 34,
          column: 1
        }
      },
      "1": {
        start: {
          line: 28,
          column: 2
        },
        end: {
          line: 33,
          column: 4
        }
      },
      "2": {
        start: {
          line: 36,
          column: 15
        },
        end: {
          line: 48,
          column: 2
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 22,
            column: 54
          },
          end: {
            line: 22,
            column: 55
          }
        },
        loc: {
          start: {
            line: 27,
            column: 6
          },
          end: {
            line: 34,
            column: 1
          }
        },
        line: 27
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 23,
            column: 2
          },
          end: {
            line: 23,
            column: 16
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 23,
            column: 9
          },
          end: {
            line: 23,
            column: 16
          }
        }],
        line: 23
      },
      "1": {
        loc: {
          start: {
            line: 24,
            column: 2
          },
          end: {
            line: 24,
            column: 19
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 24,
            column: 10
          },
          end: {
            line: 24,
            column: 19
          }
        }],
        line: 24
      },
      "2": {
        loc: {
          start: {
            line: 31,
            column: 7
          },
          end: {
            line: 31,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 31,
            column: 7
          },
          end: {
            line: 31,
            column: 14
          }
        }, {
          start: {
            line: 31,
            column: 18
          },
          end: {
            line: 31,
            column: 63
          }
        }],
        line: 31
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0],
      "1": [0],
      "2": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "8060ea789ef44b05d0e7e88621a4db543f891088"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    cov_150n2h6aw0 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_150n2h6aw0();
cov_150n2h6aw0().s[0]++;
var LoadingSpinner = function LoadingSpinner(_ref) {
  var _ref$size = _ref.size,
    size = _ref$size === void 0 ? (cov_150n2h6aw0().b[0][0]++, 'large') : _ref$size,
    _ref$color = _ref.color,
    color = _ref$color === void 0 ? (cov_150n2h6aw0().b[1][0]++, '#007bff') : _ref$color,
    message = _ref.message,
    style = _ref.style;
  cov_150n2h6aw0().f[0]++;
  cov_150n2h6aw0().s[1]++;
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: [styles.container, style],
    children: [(0, _jsxRuntime.jsx)(_reactNative.ActivityIndicator, {
      size: size,
      color: color
    }), (cov_150n2h6aw0().b[2][0]++, message) && (cov_150n2h6aw0().b[2][1]++, (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: styles.message,
      children: message
    }))]
  });
};
var styles = (cov_150n2h6aw0().s[2]++, _reactNative.StyleSheet.create({
  container: {
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20
  },
  message: {
    fontSize: 14,
    color: '#6c757d',
    marginTop: 12,
    textAlign: 'center'
  }
}));
var _default = exports.default = LoadingSpinner;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9qc3hSdW50aW1lIiwiY292XzE1MG4yaDZhdzAiLCJwYXRoIiwiaGFzaCIsImdsb2JhbCIsIkZ1bmN0aW9uIiwiZ2N2IiwiY292ZXJhZ2VEYXRhIiwic3RhdGVtZW50TWFwIiwic3RhcnQiLCJsaW5lIiwiY29sdW1uIiwiZW5kIiwiZm5NYXAiLCJuYW1lIiwiZGVjbCIsImxvYyIsImJyYW5jaE1hcCIsInR5cGUiLCJsb2NhdGlvbnMiLCJzIiwiZiIsImIiLCJfY292ZXJhZ2VTY2hlbWEiLCJjb3ZlcmFnZSIsImFjdHVhbENvdmVyYWdlIiwiTG9hZGluZ1NwaW5uZXIiLCJfcmVmIiwiX3JlZiRzaXplIiwic2l6ZSIsIl9yZWYkY29sb3IiLCJjb2xvciIsIm1lc3NhZ2UiLCJzdHlsZSIsImpzeHMiLCJWaWV3Iiwic3R5bGVzIiwiY29udGFpbmVyIiwiY2hpbGRyZW4iLCJqc3giLCJBY3Rpdml0eUluZGljYXRvciIsIlRleHQiLCJTdHlsZVNoZWV0IiwiY3JlYXRlIiwianVzdGlmeUNvbnRlbnQiLCJhbGlnbkl0ZW1zIiwicGFkZGluZyIsImZvbnRTaXplIiwibWFyZ2luVG9wIiwidGV4dEFsaWduIiwiX2RlZmF1bHQiLCJleHBvcnRzIiwiZGVmYXVsdCJdLCJzb3VyY2VzIjpbIkxvYWRpbmdTcGlubmVyLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIExvYWRpbmcgU3Bpbm5lciBDb21wb25lbnRcbiAqXG4gKiBBbmltYXRlZCBsb2FkaW5nIGluZGljYXRvclxuICovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge1xuICBWaWV3LFxuICBTdHlsZVNoZWV0LFxuICBBY3Rpdml0eUluZGljYXRvcixcbiAgVGV4dCxcbn0gZnJvbSAncmVhY3QtbmF0aXZlJztcblxuaW50ZXJmYWNlIExvYWRpbmdTcGlubmVyUHJvcHMge1xuICBzaXplPzogJ3NtYWxsJyB8ICdsYXJnZSc7XG4gIGNvbG9yPzogc3RyaW5nO1xuICBtZXNzYWdlPzogc3RyaW5nO1xuICBzdHlsZT86IGFueTtcbn1cblxuY29uc3QgTG9hZGluZ1NwaW5uZXI6IFJlYWN0LkZDPExvYWRpbmdTcGlubmVyUHJvcHM+ID0gKHtcbiAgc2l6ZSA9ICdsYXJnZScsXG4gIGNvbG9yID0gJyMwMDdiZmYnLFxuICBtZXNzYWdlLFxuICBzdHlsZSxcbn0pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8VmlldyBzdHlsZT17W3N0eWxlcy5jb250YWluZXIsIHN0eWxlXX0+XG4gICAgICA8QWN0aXZpdHlJbmRpY2F0b3Igc2l6ZT17c2l6ZX0gY29sb3I9e2NvbG9yfSAvPlxuICAgICAge21lc3NhZ2UgJiYgPFRleHQgc3R5bGU9e3N0eWxlcy5tZXNzYWdlfT57bWVzc2FnZX08L1RleHQ+fVxuICAgIDwvVmlldz5cbiAgKTtcbn07XG5cbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgY29udGFpbmVyOiB7XG4gICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgIHBhZGRpbmc6IDIwLFxuICB9LFxuICBtZXNzYWdlOiB7XG4gICAgZm9udFNpemU6IDE0LFxuICAgIGNvbG9yOiAnIzZjNzU3ZCcsXG4gICAgbWFyZ2luVG9wOiAxMixcbiAgICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICB9LFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IExvYWRpbmdTcGlubmVyOyJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFNQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxZQUFBLEdBQUFELE9BQUE7QUFLc0IsSUFBQUUsV0FBQSxHQUFBRixPQUFBO0FBQUEsU0FBQUcsZUFBQTtFQUFBLElBQUFDLElBQUE7RUFBQSxJQUFBQyxJQUFBO0VBQUEsSUFBQUMsTUFBQSxPQUFBQyxRQUFBO0VBQUEsSUFBQUMsR0FBQTtFQUFBLElBQUFDLFlBQUE7SUFBQUwsSUFBQTtJQUFBTSxZQUFBO01BQUE7UUFBQUMsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO0lBQUE7SUFBQUUsS0FBQTtNQUFBO1FBQUFDLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtJQUFBO0lBQUFPLFNBQUE7TUFBQTtRQUFBRCxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7SUFBQTtJQUFBVSxDQUFBO01BQUE7TUFBQTtNQUFBO0lBQUE7SUFBQUMsQ0FBQTtNQUFBO0lBQUE7SUFBQUMsQ0FBQTtNQUFBO01BQUE7TUFBQTtJQUFBO0lBQUFDLGVBQUE7SUFBQXBCLElBQUE7RUFBQTtFQUFBLElBQUFxQixRQUFBLEdBQUFwQixNQUFBLENBQUFFLEdBQUEsTUFBQUYsTUFBQSxDQUFBRSxHQUFBO0VBQUEsS0FBQWtCLFFBQUEsQ0FBQXRCLElBQUEsS0FBQXNCLFFBQUEsQ0FBQXRCLElBQUEsRUFBQUMsSUFBQSxLQUFBQSxJQUFBO0lBQUFxQixRQUFBLENBQUF0QixJQUFBLElBQUFLLFlBQUE7RUFBQTtFQUFBLElBQUFrQixjQUFBLEdBQUFELFFBQUEsQ0FBQXRCLElBQUE7RUFBQTtJQUFBRCxjQUFBLFlBQUFBLENBQUE7TUFBQSxPQUFBd0IsY0FBQTtJQUFBO0VBQUE7RUFBQSxPQUFBQSxjQUFBO0FBQUE7QUFBQXhCLGNBQUE7QUFBQUEsY0FBQSxHQUFBbUIsQ0FBQTtBQVN0QixJQUFNTSxjQUE2QyxHQUFHLFNBQWhEQSxjQUE2Q0EsQ0FBQUMsSUFBQSxFQUs3QztFQUFBLElBQUFDLFNBQUEsR0FBQUQsSUFBQSxDQUpKRSxJQUFJO0lBQUpBLElBQUksR0FBQUQsU0FBQSxlQUFBM0IsY0FBQSxHQUFBcUIsQ0FBQSxVQUFHLE9BQU8sSUFBQU0sU0FBQTtJQUFBRSxVQUFBLEdBQUFILElBQUEsQ0FDZEksS0FBSztJQUFMQSxLQUFLLEdBQUFELFVBQUEsZUFBQTdCLGNBQUEsR0FBQXFCLENBQUEsVUFBRyxTQUFTLElBQUFRLFVBQUE7SUFDakJFLE9BQU8sR0FBQUwsSUFBQSxDQUFQSyxPQUFPO0lBQ1BDLEtBQUssR0FBQU4sSUFBQSxDQUFMTSxLQUFLO0VBQUFoQyxjQUFBLEdBQUFvQixDQUFBO0VBQUFwQixjQUFBLEdBQUFtQixDQUFBO0VBRUwsT0FDRSxJQUFBcEIsV0FBQSxDQUFBa0MsSUFBQSxFQUFDbkMsWUFBQSxDQUFBb0MsSUFBSTtJQUFDRixLQUFLLEVBQUUsQ0FBQ0csTUFBTSxDQUFDQyxTQUFTLEVBQUVKLEtBQUssQ0FBRTtJQUFBSyxRQUFBLEdBQ3JDLElBQUF0QyxXQUFBLENBQUF1QyxHQUFBLEVBQUN4QyxZQUFBLENBQUF5QyxpQkFBaUI7TUFBQ1gsSUFBSSxFQUFFQSxJQUFLO01BQUNFLEtBQUssRUFBRUE7SUFBTSxDQUFFLENBQUMsRUFDOUMsQ0FBQTlCLGNBQUEsR0FBQXFCLENBQUEsVUFBQVUsT0FBTyxNQUFBL0IsY0FBQSxHQUFBcUIsQ0FBQSxVQUFJLElBQUF0QixXQUFBLENBQUF1QyxHQUFBLEVBQUN4QyxZQUFBLENBQUEwQyxJQUFJO01BQUNSLEtBQUssRUFBRUcsTUFBTSxDQUFDSixPQUFRO01BQUFNLFFBQUEsRUFBRU47SUFBTyxDQUFPLENBQUM7RUFBQSxDQUNyRCxDQUFDO0FBRVgsQ0FBQztBQUVELElBQU1JLE1BQU0sSUFBQW5DLGNBQUEsR0FBQW1CLENBQUEsT0FBR3NCLHVCQUFVLENBQUNDLE1BQU0sQ0FBQztFQUMvQk4sU0FBUyxFQUFFO0lBQ1RPLGNBQWMsRUFBRSxRQUFRO0lBQ3hCQyxVQUFVLEVBQUUsUUFBUTtJQUNwQkMsT0FBTyxFQUFFO0VBQ1gsQ0FBQztFQUNEZCxPQUFPLEVBQUU7SUFDUGUsUUFBUSxFQUFFLEVBQUU7SUFDWmhCLEtBQUssRUFBRSxTQUFTO0lBQ2hCaUIsU0FBUyxFQUFFLEVBQUU7SUFDYkMsU0FBUyxFQUFFO0VBQ2I7QUFDRixDQUFDLENBQUM7QUFBQyxJQUFBQyxRQUFBLEdBQUFDLE9BQUEsQ0FBQUMsT0FBQSxHQUVZMUIsY0FBYyIsImlnbm9yZUxpc3QiOltdfQ==