e68e53556d25a8aba44424f79b2f299f
_getJestObj().mock('../../src/services/authService');
_getJestObj().mock('../../src/services/tokenStorage');
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _toolkit = require("@reduxjs/toolkit");
var _authService = require("../../src/services/authService");
var _tokenStorage = require("../../src/services/tokenStorage");
var _authSlice = _interopRequireWildcard(require("../../src/store/authSlice"));
var _testUtils = require("../utils/testUtils");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('Authentication Integration Flow', function () {
  var store;
  var mockAuthService;
  var mockTokenStorage;
  beforeEach(function () {
    (0, _testUtils.setupMocks)();
    store = (0, _toolkit.configureStore)({
      reducer: {
        auth: _authSlice.default
      },
      middleware: function middleware(getDefaultMiddleware) {
        return getDefaultMiddleware({
          serializableCheck: false
        });
      }
    });
    mockAuthService = _authService.authService;
    mockTokenStorage = _tokenStorage.tokenStorage;
  });
  afterEach(function () {
    (0, _testUtils.teardownMocks)();
  });
  describe('Complete Login Flow', function () {
    it('should handle successful login flow', (0, _asyncToGenerator2.default)(function* () {
      mockAuthService.login.mockResolvedValue({
        success: true,
        user: _testUtils.mockUser,
        tokens: _testUtils.mockTokens,
        message: 'Login successful'
      });
      mockTokenStorage.setTokens.mockResolvedValue();
      mockTokenStorage.hasValidTokens.mockResolvedValue(true);
      expect(store.getState().auth.isAuthenticated).toBe(false);
      expect(store.getState().auth.user).toBeNull();
      var loginCredentials = {
        email: 'test@example.com',
        password: 'password123'
      };
      var result = yield store.dispatch((0, _authSlice.loginWithEmail)(loginCredentials));
      yield (0, _testUtils.flushPromises)();
      expect(result.type).toBe('auth/loginWithEmail/fulfilled');
      expect(result.payload).toEqual({
        user: _testUtils.mockUser,
        tokens: _testUtils.mockTokens,
        message: 'Login successful'
      });
      var state = store.getState().auth;
      expect(state.isAuthenticated).toBe(true);
      expect(state.user).toEqual(_testUtils.mockUser);
      expect(state.tokens).toEqual(_testUtils.mockTokens);
      expect(state.isLoading).toBe(false);
      expect(state.error).toBeNull();
      expect(state.lastLoginAt).toBeTruthy();
      expect(mockAuthService.login).toHaveBeenCalledWith(loginCredentials);
      expect(mockTokenStorage.setTokens).toHaveBeenCalledWith(_testUtils.mockTokens);
    }));
    it('should handle failed login with invalid credentials', (0, _asyncToGenerator2.default)(function* () {
      mockAuthService.login.mockResolvedValue({
        success: false,
        message: 'Invalid email or password',
        code: 'INVALID_CREDENTIALS'
      });
      var loginCredentials = {
        email: 'test@example.com',
        password: 'wrongpassword'
      };
      var result = yield store.dispatch((0, _authSlice.loginWithEmail)(loginCredentials));
      yield (0, _testUtils.flushPromises)();
      expect(result.type).toBe('auth/loginWithEmail/rejected');
      var state = store.getState().auth;
      expect(state.isAuthenticated).toBe(false);
      expect(state.user).toBeNull();
      expect(state.tokens).toBeNull();
      expect(state.error).toBe('Invalid email or password');
      expect(state.isLoading).toBe(false);
    }));
    it('should handle account lockout after multiple failed attempts', (0, _asyncToGenerator2.default)(function* () {
      var lockUntil = Date.now() + 900000;
      mockAuthService.login.mockResolvedValueOnce({
        success: false,
        message: 'Invalid email or password',
        code: 'INVALID_CREDENTIALS'
      }).mockResolvedValueOnce({
        success: false,
        message: 'Invalid email or password',
        code: 'INVALID_CREDENTIALS'
      }).mockResolvedValueOnce({
        success: false,
        message: 'Account temporarily locked',
        code: 'ACCOUNT_LOCKED',
        lockUntil: lockUntil
      });
      var credentials = {
        email: 'test@example.com',
        password: 'wrongpassword'
      };
      yield store.dispatch((0, _authSlice.loginWithEmail)(credentials));
      var state = store.getState().auth;
      expect(state.loginAttempts).toBe(1);
      expect(state.isLocked).toBe(false);
      yield store.dispatch((0, _authSlice.loginWithEmail)(credentials));
      state = store.getState().auth;
      expect(state.loginAttempts).toBe(2);
      expect(state.isLocked).toBe(false);
      yield store.dispatch((0, _authSlice.loginWithEmail)(credentials));
      state = store.getState().auth;
      expect(state.loginAttempts).toBe(3);
      expect(state.isLocked).toBe(true);
      expect(state.lockUntil).toBe(lockUntil);
      expect(state.error).toBe('Account temporarily locked');
    }));
    it('should reset login attempts after successful login', (0, _asyncToGenerator2.default)(function* () {
      mockAuthService.login.mockResolvedValueOnce({
        success: false,
        message: 'Invalid email or password',
        code: 'INVALID_CREDENTIALS'
      }).mockResolvedValueOnce({
        success: true,
        user: _testUtils.mockUser,
        tokens: _testUtils.mockTokens,
        message: 'Login successful'
      });
      var credentials = {
        email: 'test@example.com',
        password: 'password123'
      };
      yield store.dispatch((0, _authSlice.loginWithEmail)(Object.assign({}, credentials, {
        password: 'wrong'
      })));
      var state = store.getState().auth;
      expect(state.loginAttempts).toBe(1);
      yield store.dispatch((0, _authSlice.loginWithEmail)(credentials));
      state = store.getState().auth;
      expect(state.loginAttempts).toBe(0);
      expect(state.isLocked).toBe(false);
      expect(state.lockUntil).toBeNull();
      expect(state.isAuthenticated).toBe(true);
    }));
  });
  describe('Registration Flow', function () {
    it('should handle successful registration', (0, _asyncToGenerator2.default)(function* () {
      mockAuthService.register.mockResolvedValue({
        success: true,
        user: _testUtils.mockUser,
        tokens: _testUtils.mockTokens,
        message: 'Registration successful'
      });
      var registerData = {
        email: 'test@example.com',
        password: 'password123',
        name: 'Test User',
        agreeToTerms: true
      };
      var result = yield store.dispatch((0, _authSlice.registerUser)(registerData));
      yield (0, _testUtils.flushPromises)();
      expect(result.type).toBe('auth/registerUser/fulfilled');
      var state = store.getState().auth;
      expect(state.isAuthenticated).toBe(true);
      expect(state.user).toEqual(_testUtils.mockUser);
      expect(state.tokens).toEqual(_testUtils.mockTokens);
    }));
    it('should handle registration with existing email', (0, _asyncToGenerator2.default)(function* () {
      mockAuthService.register.mockResolvedValue({
        success: false,
        message: 'An account with this email already exists',
        code: 'EMAIL_EXISTS'
      });
      var registerData = {
        email: 'existing@example.com',
        password: 'password123',
        name: 'Test User',
        agreeToTerms: true
      };
      var result = yield store.dispatch((0, _authSlice.registerUser)(registerData));
      expect(result.type).toBe('auth/registerUser/rejected');
      expect(store.getState().auth.error).toBe('An account with this email already exists');
    }));
  });
  describe('Logout Flow', function () {
    it('should handle successful logout', (0, _asyncToGenerator2.default)(function* () {
      store = (0, _toolkit.configureStore)({
        reducer: {
          auth: _authSlice.default
        },
        preloadedState: {
          auth: {
            user: _testUtils.mockUser,
            tokens: _testUtils.mockTokens,
            isAuthenticated: true,
            isLoading: false,
            error: null,
            lastLoginAt: new Date().toISOString(),
            loginAttempts: 0,
            isLocked: false,
            lockUntil: null
          }
        }
      });
      mockAuthService.logout.mockResolvedValue({
        success: true
      });
      mockTokenStorage.removeTokens.mockResolvedValue();
      var result = yield store.dispatch((0, _authSlice.logoutUser)());
      yield (0, _testUtils.flushPromises)();
      expect(result.type).toBe('auth/logoutUser/fulfilled');
      var state = store.getState().auth;
      expect(state.isAuthenticated).toBe(false);
      expect(state.user).toBeNull();
      expect(state.tokens).toBeNull();
      expect(state.error).toBeNull();
      expect(mockAuthService.logout).toHaveBeenCalled();
      expect(mockTokenStorage.removeTokens).toHaveBeenCalled();
    }));
    it('should handle logout failure gracefully', (0, _asyncToGenerator2.default)(function* () {
      store = (0, _toolkit.configureStore)({
        reducer: {
          auth: _authSlice.default
        },
        preloadedState: {
          auth: {
            user: _testUtils.mockUser,
            tokens: _testUtils.mockTokens,
            isAuthenticated: true,
            isLoading: false,
            error: null,
            lastLoginAt: new Date().toISOString(),
            loginAttempts: 0,
            isLocked: false,
            lockUntil: null
          }
        }
      });
      mockAuthService.logout.mockResolvedValue({
        success: false,
        message: 'Logout failed'
      });
      var result = yield store.dispatch((0, _authSlice.logoutUser)());
      expect(result.type).toBe('auth/logoutUser/fulfilled');
      var state = store.getState().auth;
      expect(state.isAuthenticated).toBe(false);
      expect(state.user).toBeNull();
      expect(state.tokens).toBeNull();
    }));
  });
  describe('Token Refresh Flow', function () {
    it('should refresh tokens successfully', (0, _asyncToGenerator2.default)(function* () {
      var newTokens = Object.assign({}, _testUtils.mockTokens, {
        accessToken: 'new_access_token'
      });
      store = (0, _toolkit.configureStore)({
        reducer: {
          auth: _authSlice.default
        },
        preloadedState: {
          auth: {
            user: _testUtils.mockUser,
            tokens: _testUtils.mockTokens,
            isAuthenticated: true,
            isLoading: false,
            error: null,
            lastLoginAt: new Date().toISOString(),
            loginAttempts: 0,
            isLocked: false,
            lockUntil: null
          }
        }
      });
      mockAuthService.refreshTokens.mockResolvedValue({
        success: true,
        tokens: newTokens
      });
      var result = yield store.dispatch((0, _authSlice.refreshTokens)());
      yield (0, _testUtils.flushPromises)();
      expect(result.type).toBe('auth/refreshTokens/fulfilled');
      var state = store.getState().auth;
      expect(state.tokens).toEqual(newTokens);
      expect(state.isAuthenticated).toBe(true);
      expect(state.error).toBeNull();
    }));
    it('should handle invalid refresh token', (0, _asyncToGenerator2.default)(function* () {
      store = (0, _toolkit.configureStore)({
        reducer: {
          auth: _authSlice.default
        },
        preloadedState: {
          auth: {
            user: _testUtils.mockUser,
            tokens: _testUtils.mockTokens,
            isAuthenticated: true,
            isLoading: false,
            error: null,
            lastLoginAt: new Date().toISOString(),
            loginAttempts: 0,
            isLocked: false,
            lockUntil: null
          }
        }
      });
      mockAuthService.refreshTokens.mockResolvedValue({
        success: false,
        message: 'Invalid refresh token',
        code: 'INVALID_REFRESH_TOKEN'
      });
      var result = yield store.dispatch((0, _authSlice.refreshTokens)());
      expect(result.type).toBe('auth/refreshTokens/rejected');
      var state = store.getState().auth;
      expect(state.isAuthenticated).toBe(false);
      expect(state.user).toBeNull();
      expect(state.tokens).toBeNull();
      expect(state.error).toBe('Invalid refresh token');
    }));
  });
  describe('Session Initialization', function () {
    it('should initialize with valid stored session', (0, _asyncToGenerator2.default)(function* () {
      mockTokenStorage.hasValidTokens.mockResolvedValue(true);
      mockTokenStorage.getTokens.mockResolvedValue(_testUtils.mockTokens);
      mockAuthService.getCurrentUser.mockResolvedValue({
        success: true,
        user: _testUtils.mockUser
      });
      var result = yield store.dispatch((0, _authSlice.initializeAuth)());
      yield (0, _testUtils.flushPromises)();
      expect(result.type).toBe('auth/initializeAuth/fulfilled');
      var state = store.getState().auth;
      expect(state.isAuthenticated).toBe(true);
      expect(state.user).toEqual(_testUtils.mockUser);
      expect(state.tokens).toEqual(_testUtils.mockTokens);
    }));
    it('should initialize with no stored session', (0, _asyncToGenerator2.default)(function* () {
      mockTokenStorage.hasValidTokens.mockResolvedValue(false);
      var result = yield store.dispatch((0, _authSlice.initializeAuth)());
      expect(result.type).toBe('auth/initializeAuth/fulfilled');
      var state = store.getState().auth;
      expect(state.isAuthenticated).toBe(false);
      expect(state.user).toBeNull();
      expect(state.tokens).toBeNull();
    }));
    it('should handle corrupted stored session', (0, _asyncToGenerator2.default)(function* () {
      mockTokenStorage.hasValidTokens.mockResolvedValue(true);
      mockTokenStorage.getTokens.mockResolvedValue(_testUtils.mockTokens);
      mockAuthService.getCurrentUser.mockResolvedValue({
        success: false,
        message: 'Unauthorized',
        code: 'UNAUTHORIZED'
      });
      mockAuthService.refreshTokens.mockResolvedValue({
        success: false,
        message: 'Invalid refresh token',
        code: 'INVALID_REFRESH_TOKEN'
      });
      var result = yield store.dispatch((0, _authSlice.initializeAuth)());
      expect(result.type).toBe('auth/initializeAuth/rejected');
      var state = store.getState().auth;
      expect(state.isAuthenticated).toBe(false);
      expect(state.user).toBeNull();
      expect(state.tokens).toBeNull();
    }));
  });
  describe('Concurrent Authentication Actions', function () {
    it('should handle concurrent login attempts gracefully', (0, _asyncToGenerator2.default)(function* () {
      var callCount = 0;
      mockAuthService.login.mockImplementation(function () {
        callCount++;
        return new Promise(function (resolve) {
          setTimeout(function () {
            resolve({
              success: true,
              user: _testUtils.mockUser,
              tokens: Object.assign({}, _testUtils.mockTokens, {
                accessToken: `token_${callCount}`
              }),
              message: 'Login successful'
            });
          }, 100);
        });
      });
      var credentials = {
        email: 'test@example.com',
        password: 'password123'
      };
      var _yield$Promise$all = yield Promise.all([store.dispatch((0, _authSlice.loginWithEmail)(credentials)), store.dispatch((0, _authSlice.loginWithEmail)(credentials)), store.dispatch((0, _authSlice.loginWithEmail)(credentials))]),
        _yield$Promise$all2 = (0, _slicedToArray2.default)(_yield$Promise$all, 3),
        result1 = _yield$Promise$all2[0],
        result2 = _yield$Promise$all2[1],
        result3 = _yield$Promise$all2[2];
      expect([result1.type, result2.type, result3.type]).toContain('auth/loginWithEmail/fulfilled');
      var state = store.getState().auth;
      expect(state.isAuthenticated).toBe(true);
      expect(state.user).toEqual(_testUtils.mockUser);
    }));
    it('should handle login during logout', (0, _asyncToGenerator2.default)(function* () {
      store = (0, _toolkit.configureStore)({
        reducer: {
          auth: _authSlice.default
        },
        preloadedState: {
          auth: {
            user: _testUtils.mockUser,
            tokens: _testUtils.mockTokens,
            isAuthenticated: true,
            isLoading: false,
            error: null,
            lastLoginAt: new Date().toISOString(),
            loginAttempts: 0,
            isLocked: false,
            lockUntil: null
          }
        }
      });
      mockAuthService.logout.mockImplementation(function () {
        return new Promise(function (resolve) {
          setTimeout(function () {
            return resolve({
              success: true
            });
          }, 100);
        });
      });
      mockAuthService.login.mockResolvedValue({
        success: true,
        user: _testUtils.mockUser,
        tokens: _testUtils.mockTokens,
        message: 'Login successful'
      });
      var _yield$Promise$all3 = yield Promise.all([store.dispatch((0, _authSlice.logoutUser)()), store.dispatch((0, _authSlice.loginWithEmail)({
          email: 'test@example.com',
          password: 'password123'
        }))]),
        _yield$Promise$all4 = (0, _slicedToArray2.default)(_yield$Promise$all3, 2),
        logoutResult = _yield$Promise$all4[0],
        loginResult = _yield$Promise$all4[1];
      var state = store.getState().auth;
      expect(state.isLoading).toBe(false);
      if (state.isAuthenticated) {
        expect(state.user).toBeTruthy();
        expect(state.tokens).toBeTruthy();
      } else {
        expect(state.user).toBeNull();
        expect(state.tokens).toBeNull();
      }
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,