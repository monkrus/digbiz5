{"version":3,"names":["_reactNativeMmkv","require","_cryptoJs","_interopRequireDefault","_tokenUtils","cov_ohi7jwkbn","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","_coverageSchema","coverage","actualCoverage","STORAGE_KEYS","ACCESS_TOKEN","REFRESH_TOKEN","TOKEN_EXPIRES_IN","TOKEN_TYPE","ENCRYPTION_KEY","SecureTokenStorage","exports","instanceId","arguments","length","_classCallCheck2","default","storage","MMKV","id","encryptionKey","getOrCreateEncryptionKey","_createClass2","key","value","getString","CryptoJS","lib","WordArray","random","toString","set","encrypt","data","AES","error","console","Error","decrypt","encryptedData","bytes","decrypted","enc","Utf8","_setTokens","_asyncToGenerator2","tokens","encryptedAccessToken","accessToken","encryptedRefreshToken","refreshToken","expiresIn","tokenType","log","setTokens","_x","apply","_getTokens","getNumber","removeTokens","getTokens","_removeTokens","delete","_hasValidTokens","validation","validateTokens","refreshTokenValid","isRefreshTokenValid","isValid","isExpired","hasValidTokens","_updateAccessToken","currentTokens","updatedTokens","Object","assign","updateAccessToken","_x2","_x3","_clearAll","clearAll","getStorageInfo","hasAccessToken","contains","hasRefreshToken","hasEncryptionKey","storageSize","size","tokenStorage","createTokenStorage"],"sources":["tokenStorage.ts"],"sourcesContent":["/**\n * Secure Token Storage Service\n *\n * Provides secure storage and retrieval of JWT tokens using MMKV.\n * Implements encryption and secure key management for token persistence.\n */\n\nimport { MMKV } from 'react-native-mmkv';\nimport CryptoJS from 'crypto-js';\nimport { JWTTokens, TokenStorage } from '../types/auth';\nimport { validateTokens, isRefreshTokenValid } from '../utils/tokenUtils';\n\n// Storage keys\nconst STORAGE_KEYS = {\n  ACCESS_TOKEN: 'auth.accessToken',\n  REFRESH_TOKEN: 'auth.refreshToken',\n  TOKEN_EXPIRES_IN: 'auth.expiresIn',\n  TOKEN_TYPE: 'auth.tokenType',\n  ENCRYPTION_KEY: 'auth.encryptionKey',\n} as const;\n\n/**\n * Secure Token Storage Implementation using MMKV\n */\nexport class SecureTokenStorage implements TokenStorage {\n  private storage: MMKV;\n  private encryptionKey: string;\n\n  constructor(instanceId: string = 'auth-storage') {\n    // Initialize MMKV first without encryption key\n    this.storage = new MMKV({\n      id: instanceId,\n    });\n\n    // Then get or create encryption key using the initialized storage\n    this.encryptionKey = this.getOrCreateEncryptionKey();\n\n    // Reinitialize with encryption key if needed\n    if (this.encryptionKey) {\n      this.storage = new MMKV({\n        id: instanceId,\n        encryptionKey: this.encryptionKey,\n      });\n    }\n  }\n\n  /**\n   * Gets or creates encryption key for additional token encryption\n   */\n  private getOrCreateEncryptionKey(): string {\n    let key = this.storage.getString(STORAGE_KEYS.ENCRYPTION_KEY);\n\n    if (!key) {\n      // Generate a random encryption key\n      key = CryptoJS.lib.WordArray.random(256 / 8).toString();\n      this.storage.set(STORAGE_KEYS.ENCRYPTION_KEY, key);\n    }\n\n    return key;\n  }\n\n  /**\n   * Encrypts sensitive data before storage\n   */\n  private encrypt(data: string): string {\n    try {\n      return CryptoJS.AES.encrypt(data, this.encryptionKey).toString();\n    } catch (error) {\n      console.error('Token encryption failed:', error);\n      throw new Error('Failed to encrypt token data');\n    }\n  }\n\n  /**\n   * Decrypts stored data\n   */\n  private decrypt(encryptedData: string): string {\n    try {\n      const bytes = CryptoJS.AES.decrypt(encryptedData, this.encryptionKey);\n      const decrypted = bytes.toString(CryptoJS.enc.Utf8);\n\n      if (!decrypted) {\n        throw new Error('Decryption resulted in empty string');\n      }\n\n      return decrypted;\n    } catch (error) {\n      console.error('Token decryption failed:', error);\n      throw new Error('Failed to decrypt token data');\n    }\n  }\n\n  /**\n   * Stores JWT tokens securely\n   */\n  async setTokens(tokens: JWTTokens): Promise<void> {\n    try {\n      // Encrypt tokens before storage\n      const encryptedAccessToken = this.encrypt(tokens.accessToken);\n      const encryptedRefreshToken = this.encrypt(tokens.refreshToken);\n\n      // Store encrypted tokens\n      this.storage.set(STORAGE_KEYS.ACCESS_TOKEN, encryptedAccessToken);\n      this.storage.set(STORAGE_KEYS.REFRESH_TOKEN, encryptedRefreshToken);\n      this.storage.set(STORAGE_KEYS.TOKEN_EXPIRES_IN, tokens.expiresIn);\n      this.storage.set(STORAGE_KEYS.TOKEN_TYPE, tokens.tokenType);\n\n      console.log('Tokens stored securely');\n    } catch (error) {\n      console.error('Failed to store tokens:', error);\n      throw new Error('Failed to store authentication tokens');\n    }\n  }\n\n  /**\n   * Retrieves JWT tokens from secure storage\n   */\n  async getTokens(): Promise<JWTTokens | null> {\n    try {\n      const encryptedAccessToken = this.storage.getString(\n        STORAGE_KEYS.ACCESS_TOKEN,\n      );\n      const encryptedRefreshToken = this.storage.getString(\n        STORAGE_KEYS.REFRESH_TOKEN,\n      );\n      const expiresIn = this.storage.getNumber(STORAGE_KEYS.TOKEN_EXPIRES_IN);\n      const tokenType = this.storage.getString(STORAGE_KEYS.TOKEN_TYPE);\n\n      if (\n        !encryptedAccessToken ||\n        !encryptedRefreshToken ||\n        !expiresIn ||\n        !tokenType\n      ) {\n        return null;\n      }\n\n      // Decrypt tokens\n      const accessToken = this.decrypt(encryptedAccessToken);\n      const refreshToken = this.decrypt(encryptedRefreshToken);\n\n      const tokens: JWTTokens = {\n        accessToken,\n        refreshToken,\n        expiresIn,\n        tokenType: tokenType as 'Bearer',\n      };\n\n      return tokens;\n    } catch (error) {\n      console.error('Failed to retrieve tokens:', error);\n      // Clear corrupted tokens\n      await this.removeTokens();\n      return null;\n    }\n  }\n\n  /**\n   * Removes all stored tokens\n   */\n  async removeTokens(): Promise<void> {\n    try {\n      this.storage.delete(STORAGE_KEYS.ACCESS_TOKEN);\n      this.storage.delete(STORAGE_KEYS.REFRESH_TOKEN);\n      this.storage.delete(STORAGE_KEYS.TOKEN_EXPIRES_IN);\n      this.storage.delete(STORAGE_KEYS.TOKEN_TYPE);\n\n      console.log('Tokens removed from storage');\n    } catch (error) {\n      console.error('Failed to remove tokens:', error);\n      throw new Error('Failed to clear authentication tokens');\n    }\n  }\n\n  /**\n   * Checks if valid tokens exist in storage\n   */\n  async hasValidTokens(): Promise<boolean> {\n    try {\n      const tokens = await this.getTokens();\n\n      if (!tokens) {\n        return false;\n      }\n\n      const validation = validateTokens(tokens);\n      const refreshTokenValid = isRefreshTokenValid(tokens);\n\n      // Valid if access token is not expired or refresh token is available\n      return validation.isValid || (validation.isExpired && refreshTokenValid);\n    } catch (error) {\n      console.error('Failed to validate stored tokens:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Updates only the access token (used after refresh)\n   */\n  async updateAccessToken(\n    accessToken: string,\n    expiresIn: number,\n  ): Promise<void> {\n    try {\n      const currentTokens = await this.getTokens();\n\n      if (!currentTokens) {\n        throw new Error('No existing tokens to update');\n      }\n\n      const updatedTokens: JWTTokens = {\n        ...currentTokens,\n        accessToken,\n        expiresIn,\n      };\n\n      await this.setTokens(updatedTokens);\n    } catch (error) {\n      console.error('Failed to update access token:', error);\n      throw new Error('Failed to update access token');\n    }\n  }\n\n  /**\n   * Clears all authentication data including encryption key\n   */\n  async clearAll(): Promise<void> {\n    try {\n      this.storage.clearAll();\n      console.log('All authentication data cleared');\n    } catch (error) {\n      console.error('Failed to clear all data:', error);\n      throw new Error('Failed to clear authentication data');\n    }\n  }\n\n  /**\n   * Gets storage information for debugging\n   */\n  getStorageInfo(): {\n    hasAccessToken: boolean;\n    hasRefreshToken: boolean;\n    hasEncryptionKey: boolean;\n    storageSize: number;\n  } {\n    return {\n      hasAccessToken: this.storage.contains(STORAGE_KEYS.ACCESS_TOKEN),\n      hasRefreshToken: this.storage.contains(STORAGE_KEYS.REFRESH_TOKEN),\n      hasEncryptionKey: this.storage.contains(STORAGE_KEYS.ENCRYPTION_KEY),\n      storageSize: this.storage.size,\n    };\n  }\n}\n\n// Default instance\nexport const tokenStorage = new SecureTokenStorage();\n\n// Factory function for creating custom instances\nexport const createTokenStorage = (instanceId: string): TokenStorage => {\n  return new SecureTokenStorage(instanceId);\n};\n"],"mappings":";;;;;;;;AAOA,IAAAA,gBAAA,GAAAC,OAAA;AACA,IAAAC,SAAA,GAAAC,sBAAA,CAAAF,OAAA;AAEA,IAAAG,WAAA,GAAAH,OAAA;AAA0E,SAAAI,cAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,MAAA,OAAAC,QAAA;EAAA,IAAAC,GAAA;EAAA,IAAAC,YAAA;IAAAL,IAAA;IAAAM,YAAA;MAAA;QAAAC,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;Q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","ignoreList":[]}