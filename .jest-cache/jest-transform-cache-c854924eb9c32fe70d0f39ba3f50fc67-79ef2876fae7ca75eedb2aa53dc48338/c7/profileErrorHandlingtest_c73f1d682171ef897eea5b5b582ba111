3a411f5735156aee427504b4d3ab1f0f
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _profileErrorHandling = require("../../../src/utils/profileErrorHandling");
describe('ProfileErrorHandler', function () {
  describe('Error Classification', function () {
    it('should classify network errors correctly', function () {
      var networkError = {
        name: 'NetworkError',
        message: 'Network connection failed'
      };
      var error = _profileErrorHandling.ProfileErrorHandler.handleError(networkError);
      expect(error.type).toBe(_profileErrorHandling.ProfileErrorType.NETWORK_ERROR);
      expect(error.retryable).toBe(true);
      expect(error.userMessage).toContain('Network connection error');
    });
    it('should classify validation errors correctly', function () {
      var validationError = {
        status: 400,
        errors: {
          name: 'Name is required',
          email: 'Invalid email'
        },
        message: 'Validation failed'
      };
      var error = _profileErrorHandling.ProfileErrorHandler.handleError(validationError);
      expect(error.type).toBe(_profileErrorHandling.ProfileErrorType.VALIDATION_ERROR);
      expect(error.retryable).toBe(false);
      expect(error.details.validationErrors).toEqual(validationError.errors);
    });
    it('should classify authentication errors correctly', function () {
      var authError = {
        status: 401,
        message: 'Unauthorized access'
      };
      var error = _profileErrorHandling.ProfileErrorHandler.handleError(authError);
      expect(error.type).toBe(_profileErrorHandling.ProfileErrorType.AUTHENTICATION_ERROR);
      expect(error.retryable).toBe(false);
      expect(error.userMessage).toContain('Authentication failed');
    });
    it('should classify permission errors correctly', function () {
      var permissionError = {
        status: 403,
        message: 'Forbidden'
      };
      var error = _profileErrorHandling.ProfileErrorHandler.handleError(permissionError);
      expect(error.type).toBe(_profileErrorHandling.ProfileErrorType.PERMISSION_ERROR);
      expect(error.retryable).toBe(false);
    });
    it('should classify file upload errors correctly', function () {
      var uploadError = {
        code: 'FILE_UPLOAD_ERROR',
        message: 'File upload failed'
      };
      var error = _profileErrorHandling.ProfileErrorHandler.handleError(uploadError);
      expect(error.type).toBe(_profileErrorHandling.ProfileErrorType.FILE_UPLOAD_ERROR);
      expect(error.retryable).toBe(true);
    });
    it('should classify not found errors correctly', function () {
      var notFoundError = {
        status: 404,
        message: 'Profile not found'
      };
      var error = _profileErrorHandling.ProfileErrorHandler.handleError(notFoundError);
      expect(error.type).toBe(_profileErrorHandling.ProfileErrorType.NOT_FOUND_ERROR);
      expect(error.retryable).toBe(false);
    });
    it('should classify rate limit errors correctly', function () {
      var rateLimitError = {
        status: 429,
        message: 'Too many requests'
      };
      var error = _profileErrorHandling.ProfileErrorHandler.handleError(rateLimitError);
      expect(error.type).toBe(_profileErrorHandling.ProfileErrorType.RATE_LIMIT_ERROR);
      expect(error.retryable).toBe(true);
    });
    it('should classify server errors correctly', function () {
      var serverError = {
        status: 500,
        message: 'Internal server error'
      };
      var error = _profileErrorHandling.ProfileErrorHandler.handleError(serverError);
      expect(error.type).toBe(_profileErrorHandling.ProfileErrorType.SERVER_ERROR);
      expect(error.retryable).toBe(true);
    });
    it('should classify unknown errors correctly', function () {
      var unknownError = {
        message: 'Something went wrong'
      };
      var error = _profileErrorHandling.ProfileErrorHandler.handleError(unknownError);
      expect(error.type).toBe(_profileErrorHandling.ProfileErrorType.UNKNOWN_ERROR);
      expect(error.retryable).toBe(false);
      expect(error.userMessage).toContain('unexpected error');
    });
    it('should include context in error details', function () {
      var context = {
        operation: 'createProfile',
        userId: 'user-123',
        metadata: {
          attempt: 1
        }
      };
      var error = _profileErrorHandling.ProfileErrorHandler.handleError(new Error('Test error'), context);
      expect(error.details.context).toEqual(context);
    });
  });
  describe('User-Friendly Messages', function () {
    it('should return context-specific server error messages', function () {
      var serverError = {
        type: _profileErrorHandling.ProfileErrorType.SERVER_ERROR,
        message: 'Server error',
        timestamp: new Date(),
        retryable: true,
        userMessage: 'Server error occurred'
      };
      var createContext = {
        operation: 'create'
      };
      var updateContext = {
        operation: 'update'
      };
      var uploadContext = {
        operation: 'upload'
      };
      expect(_profileErrorHandling.ProfileErrorHandler.getUserFriendlyMessage(serverError, createContext)).toContain('Failed to create profile');
      expect(_profileErrorHandling.ProfileErrorHandler.getUserFriendlyMessage(serverError, updateContext)).toContain('Failed to update profile');
      expect(_profileErrorHandling.ProfileErrorHandler.getUserFriendlyMessage(serverError, uploadContext)).toContain('Failed to upload photo');
    });
    it('should return specific validation error messages', function () {
      var validationError = {
        type: _profileErrorHandling.ProfileErrorType.VALIDATION_ERROR,
        message: 'Validation failed',
        timestamp: new Date(),
        retryable: false,
        userMessage: 'Please check your input',
        details: {
          validationErrors: {
            name: 'Name is required',
            email: 'Invalid email format'
          }
        }
      };
      var fieldContext = {
        field: 'name'
      };
      var message = _profileErrorHandling.ProfileErrorHandler.getUserFriendlyMessage(validationError, fieldContext);
      expect(message).toBe('Name is required');
    });
    it('should return generic validation message when no specific field', function () {
      var validationError = {
        type: _profileErrorHandling.ProfileErrorType.VALIDATION_ERROR,
        message: 'Validation failed',
        timestamp: new Date(),
        retryable: false,
        userMessage: 'Please check your input',
        details: {
          validationErrors: {
            name: 'Name is required'
          }
        }
      };
      var message = _profileErrorHandling.ProfileErrorHandler.getUserFriendlyMessage(validationError);
      expect(message).toBe('Name is required');
    });
    it('should handle different error types with appropriate messages', function () {
      var errorTypes = [{
        type: _profileErrorHandling.ProfileErrorType.NETWORK_ERROR,
        expectedText: 'internet connection'
      }, {
        type: _profileErrorHandling.ProfileErrorType.AUTHENTICATION_ERROR,
        expectedText: 'session has expired'
      }, {
        type: _profileErrorHandling.ProfileErrorType.PERMISSION_ERROR,
        expectedText: 'permission'
      }, {
        type: _profileErrorHandling.ProfileErrorType.FILE_UPLOAD_ERROR,
        expectedText: 'Failed to upload'
      }, {
        type: _profileErrorHandling.ProfileErrorType.RATE_LIMIT_ERROR,
        expectedText: 'too many requests'
      }];
      errorTypes.forEach(function (_ref) {
        var type = _ref.type,
          expectedText = _ref.expectedText;
        var error = {
          type: type,
          message: 'Test error',
          timestamp: new Date(),
          retryable: true,
          userMessage: 'Generic message'
        };
        var message = _profileErrorHandling.ProfileErrorHandler.getUserFriendlyMessage(error);
        expect(message.toLowerCase()).toContain(expectedText.toLowerCase());
      });
    });
  });
  describe('Retry Logic', function () {
    it('should allow retry for retryable errors under max attempts', function () {
      var retryableError = {
        type: _profileErrorHandling.ProfileErrorType.NETWORK_ERROR,
        message: 'Network error',
        timestamp: new Date(),
        retryable: true,
        userMessage: 'Network error'
      };
      expect(_profileErrorHandling.ProfileErrorHandler.shouldRetry(retryableError, 0)).toBe(true);
      expect(_profileErrorHandling.ProfileErrorHandler.shouldRetry(retryableError, 1)).toBe(true);
      expect(_profileErrorHandling.ProfileErrorHandler.shouldRetry(retryableError, 2)).toBe(true);
      expect(_profileErrorHandling.ProfileErrorHandler.shouldRetry(retryableError, 3)).toBe(false);
    });
    it('should not retry non-retryable errors', function () {
      var nonRetryableError = {
        type: _profileErrorHandling.ProfileErrorType.VALIDATION_ERROR,
        message: 'Validation failed',
        timestamp: new Date(),
        retryable: false,
        userMessage: 'Validation failed'
      };
      expect(_profileErrorHandling.ProfileErrorHandler.shouldRetry(nonRetryableError, 0)).toBe(false);
    });
    it('should not retry validation and permission errors even if marked retryable', function () {
      var validationError = {
        type: _profileErrorHandling.ProfileErrorType.VALIDATION_ERROR,
        message: 'Validation failed',
        timestamp: new Date(),
        retryable: true,
        userMessage: 'Validation failed'
      };
      var permissionError = {
        type: _profileErrorHandling.ProfileErrorType.PERMISSION_ERROR,
        message: 'Permission denied',
        timestamp: new Date(),
        retryable: true,
        userMessage: 'Permission denied'
      };
      expect(_profileErrorHandling.ProfileErrorHandler.shouldRetry(validationError, 0)).toBe(false);
      expect(_profileErrorHandling.ProfileErrorHandler.shouldRetry(permissionError, 0)).toBe(false);
    });
    it('should limit rate limit retries', function () {
      var rateLimitError = {
        type: _profileErrorHandling.ProfileErrorType.RATE_LIMIT_ERROR,
        message: 'Rate limit exceeded',
        timestamp: new Date(),
        retryable: true,
        userMessage: 'Rate limit exceeded'
      };
      expect(_profileErrorHandling.ProfileErrorHandler.shouldRetry(rateLimitError, 0)).toBe(true);
      expect(_profileErrorHandling.ProfileErrorHandler.shouldRetry(rateLimitError, 1)).toBe(true);
      expect(_profileErrorHandling.ProfileErrorHandler.shouldRetry(rateLimitError, 2)).toBe(false);
    });
  });
  describe('Retry Delays', function () {
    it('should calculate exponential backoff for rate limit errors', function () {
      var rateLimitError = {
        type: _profileErrorHandling.ProfileErrorType.RATE_LIMIT_ERROR,
        message: 'Rate limit',
        timestamp: new Date(),
        retryable: true,
        userMessage: 'Rate limit'
      };
      expect(_profileErrorHandling.ProfileErrorHandler.getRetryDelay(rateLimitError, 0)).toBe(2000);
      expect(_profileErrorHandling.ProfileErrorHandler.getRetryDelay(rateLimitError, 1)).toBe(4000);
      expect(_profileErrorHandling.ProfileErrorHandler.getRetryDelay(rateLimitError, 2)).toBe(8000);
    });
    it('should calculate linear increase for network errors', function () {
      var networkError = {
        type: _profileErrorHandling.ProfileErrorType.NETWORK_ERROR,
        message: 'Network error',
        timestamp: new Date(),
        retryable: true,
        userMessage: 'Network error'
      };
      expect(_profileErrorHandling.ProfileErrorHandler.getRetryDelay(networkError, 0)).toBe(1000);
      expect(_profileErrorHandling.ProfileErrorHandler.getRetryDelay(networkError, 1)).toBe(2000);
      expect(_profileErrorHandling.ProfileErrorHandler.getRetryDelay(networkError, 2)).toBe(3000);
    });
    it('should calculate exponential backoff for server errors', function () {
      var serverError = {
        type: _profileErrorHandling.ProfileErrorType.SERVER_ERROR,
        message: 'Server error',
        timestamp: new Date(),
        retryable: true,
        userMessage: 'Server error'
      };
      expect(_profileErrorHandling.ProfileErrorHandler.getRetryDelay(serverError, 0)).toBe(1000);
      expect(_profileErrorHandling.ProfileErrorHandler.getRetryDelay(serverError, 1)).toBe(2000);
      expect(_profileErrorHandling.ProfileErrorHandler.getRetryDelay(serverError, 2)).toBe(4000);
    });
    it('should cap retry delays at maximum values', function () {
      var rateLimitError = {
        type: _profileErrorHandling.ProfileErrorType.RATE_LIMIT_ERROR,
        message: 'Rate limit',
        timestamp: new Date(),
        retryable: true,
        userMessage: 'Rate limit'
      };
      var serverError = {
        type: _profileErrorHandling.ProfileErrorType.SERVER_ERROR,
        message: 'Server error',
        timestamp: new Date(),
        retryable: true,
        userMessage: 'Server error'
      };
      expect(_profileErrorHandling.ProfileErrorHandler.getRetryDelay(rateLimitError, 10)).toBeLessThanOrEqual(30000);
      expect(_profileErrorHandling.ProfileErrorHandler.getRetryDelay(serverError, 10)).toBeLessThanOrEqual(10000);
    });
  });
  describe('Error Utilities', function () {
    it('should create validation error from validation result', function () {
      var validationErrors = {
        name: 'Name is required',
        email: 'Invalid email format'
      };
      var error = _profileErrorHandling.ProfileErrorHandler.createValidationError(validationErrors);
      expect(error.type).toBe(_profileErrorHandling.ProfileErrorType.VALIDATION_ERROR);
      expect(error.retryable).toBe(false);
      expect(error.details.validationErrors).toEqual(validationErrors);
      expect(error.userMessage).toBe('Name is required');
    });
    it('should format validation errors for display', function () {
      var validationErrors = {
        name: 'Name is required',
        email: 'Invalid email format',
        phone: ''
      };
      var formatted = _profileErrorHandling.ProfileErrorHandler.formatValidationErrors(validationErrors);
      expect(formatted).toHaveLength(2);
      expect(formatted).toContain('Name: Name is required');
      expect(formatted).toContain('Email: Invalid email format');
      expect(formatted).not.toContain('Phone:');
    });
    it('should compare errors correctly', function () {
      var error1 = {
        type: _profileErrorHandling.ProfileErrorType.NETWORK_ERROR,
        message: 'Network error',
        code: 'NET_001',
        timestamp: new Date(),
        retryable: true,
        userMessage: 'Network error'
      };
      var error2 = {
        type: _profileErrorHandling.ProfileErrorType.NETWORK_ERROR,
        message: 'Network error',
        code: 'NET_001',
        timestamp: new Date(),
        retryable: true,
        userMessage: 'Network error'
      };
      var error3 = {
        type: _profileErrorHandling.ProfileErrorType.SERVER_ERROR,
        message: 'Server error',
        timestamp: new Date(),
        retryable: true,
        userMessage: 'Server error'
      };
      expect(_profileErrorHandling.ProfileErrorHandler.isSameError(error1, error2)).toBe(true);
      expect(_profileErrorHandling.ProfileErrorHandler.isSameError(error1, error3)).toBe(false);
    });
    it('should provide recovery suggestions for different error types', function () {
      var errorTypes = [{
        type: _profileErrorHandling.ProfileErrorType.NETWORK_ERROR,
        expectedSuggestions: ['internet connection', 'Try again']
      }, {
        type: _profileErrorHandling.ProfileErrorType.VALIDATION_ERROR,
        expectedSuggestions: ['highlighted fields', 'required fields']
      }, {
        type: _profileErrorHandling.ProfileErrorType.FILE_UPLOAD_ERROR,
        expectedSuggestions: ['10MB', 'image format']
      }, {
        type: _profileErrorHandling.ProfileErrorType.AUTHENTICATION_ERROR,
        expectedSuggestions: ['Log out', 'log in']
      }, {
        type: _profileErrorHandling.ProfileErrorType.RATE_LIMIT_ERROR,
        expectedSuggestions: ['Wait', 'rapid requests']
      }, {
        type: _profileErrorHandling.ProfileErrorType.SERVER_ERROR,
        expectedSuggestions: ['Try again later', 'support']
      }];
      errorTypes.forEach(function (_ref2) {
        var type = _ref2.type,
          expectedSuggestions = _ref2.expectedSuggestions;
        var error = {
          type: type,
          message: 'Test error',
          timestamp: new Date(),
          retryable: true,
          userMessage: 'Test error'
        };
        var suggestions = _profileErrorHandling.ProfileErrorHandler.getRecoverySuggestion(error);
        expect(suggestions.length).toBeGreaterThan(0);
        var allSuggestions = suggestions.join(' ').toLowerCase();
        expectedSuggestions.forEach(function (expectedText) {
          expect(allSuggestions).toContain(expectedText.toLowerCase());
        });
      });
    });
  });
  describe('Error Logging', function () {
    var consoleSpy;
    beforeEach(function () {
      consoleSpy = jest.spyOn(console, 'error').mockImplementation();
    });
    afterEach(function () {
      consoleSpy.mockRestore();
    });
    it('should log errors in development', function () {
      var originalDev = global.__DEV__;
      global.__DEV__ = true;
      var error = {
        type: _profileErrorHandling.ProfileErrorType.NETWORK_ERROR,
        message: 'Network error',
        timestamp: new Date(),
        retryable: true,
        userMessage: 'Network error'
      };
      var context = {
        operation: 'test'
      };
      _profileErrorHandling.ProfileErrorHandler.logError(error, context);
      expect(consoleSpy).toHaveBeenCalledWith('Profile Error:', expect.objectContaining({
        type: _profileErrorHandling.ProfileErrorType.NETWORK_ERROR,
        message: 'Network error',
        context: context
      }));
      global.__DEV__ = originalDev;
    });
    it('should not log to console in production', function () {
      var originalDev = global.__DEV__;
      global.__DEV__ = false;
      var error = {
        type: _profileErrorHandling.ProfileErrorType.NETWORK_ERROR,
        message: 'Network error',
        timestamp: new Date(),
        retryable: true,
        userMessage: 'Network error'
      };
      _profileErrorHandling.ProfileErrorHandler.logError(error);
      expect(consoleSpy).not.toHaveBeenCalled();
      global.__DEV__ = originalDev;
    });
  });
});
describe('Retry Functions', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe('retryWithBackoff', function () {
    it('should succeed on first attempt', (0, _asyncToGenerator2.default)(function* () {
      var operation = jest.fn().mockResolvedValue('success');
      var result = yield (0, _profileErrorHandling.retryWithBackoff)(operation);
      expect(result).toBe('success');
      expect(operation).toHaveBeenCalledTimes(1);
    }));
    it('should retry on retryable errors', (0, _asyncToGenerator2.default)(function* () {
      var operation = jest.fn().mockRejectedValueOnce(new Error('Network error')).mockRejectedValueOnce(new Error('Network error')).mockResolvedValue('success');
      var result = yield (0, _profileErrorHandling.retryWithBackoff)(operation, {
        operation: 'test'
      });
      expect(result).toBe('success');
      expect(operation).toHaveBeenCalledTimes(3);
    }));
    it('should not retry non-retryable errors', (0, _asyncToGenerator2.default)(function* () {
      var validationError = {
        status: 400,
        errors: {
          name: 'Required'
        }
      };
      var operation = jest.fn().mockRejectedValue(validationError);
      yield expect((0, _profileErrorHandling.retryWithBackoff)(operation, {
        operation: 'test'
      })).rejects.toMatchObject({
        type: _profileErrorHandling.ProfileErrorType.VALIDATION_ERROR
      });
      expect(operation).toHaveBeenCalledTimes(1);
    }));
    it('should respect max retries', (0, _asyncToGenerator2.default)(function* () {
      var networkError = {
        name: 'NetworkError',
        message: 'Network failed'
      };
      var operation = jest.fn().mockRejectedValue(networkError);
      yield expect((0, _profileErrorHandling.retryWithBackoff)(operation, {
        operation: 'test'
      }, 2)).rejects.toMatchObject({
        type: _profileErrorHandling.ProfileErrorType.NETWORK_ERROR
      });
      expect(operation).toHaveBeenCalledTimes(3);
    }));
    it('should wait between retries', (0, _asyncToGenerator2.default)(function* () {
      jest.useFakeTimers();
      var networkError = {
        name: 'NetworkError',
        message: 'Network failed'
      };
      var operation = jest.fn().mockRejectedValue(networkError);
      var promise = (0, _profileErrorHandling.retryWithBackoff)(operation, {
        operation: 'test'
      }, 1);
      jest.advanceTimersByTime(2000);
      yield expect(promise).rejects.toMatchObject({
        type: _profileErrorHandling.ProfileErrorType.NETWORK_ERROR
      });
      jest.useRealTimers();
    }), 10000);
  });
  describe('withProfileErrorHandling', function () {
    it('should return result on success', (0, _asyncToGenerator2.default)(function* () {
      var operation = jest.fn().mockResolvedValue('success');
      var result = yield (0, _profileErrorHandling.withProfileErrorHandling)(operation);
      expect(result).toBe('success');
      expect(operation).toHaveBeenCalledTimes(1);
    }));
    it('should wrap and throw ProfileError on failure', (0, _asyncToGenerator2.default)(function* () {
      var originalError = new Error('Original error');
      var operation = jest.fn().mockRejectedValue(originalError);
      yield expect((0, _profileErrorHandling.withProfileErrorHandling)(operation, {
        operation: 'test'
      })).rejects.toMatchObject({
        type: _profileErrorHandling.ProfileErrorType.UNKNOWN_ERROR,
        message: 'Original error'
      });
    }));
    it('should preserve error context', (0, _asyncToGenerator2.default)(function* () {
      var operation = jest.fn().mockRejectedValue(new Error('Test error'));
      var context = {
        operation: 'test',
        userId: 'user-123'
      };
      try {
        yield (0, _profileErrorHandling.withProfileErrorHandling)(operation, context);
      } catch (error) {
        expect(error.details.context).toEqual(context);
      }
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,