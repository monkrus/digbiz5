{"version":3,"names":["_testUtils","require","_tokenStorage","_reactNativeMmkv","describe","tokenStorage","mockMMKVInstance","beforeEach","setupMocks","mockMMKV","getString","mockReturnValue","MockedSecureTokenStorage","SecureTokenStorage","afterEach","teardownMocks","jest","clearAllMocks","it","expect","toHaveBeenCalledWith","mockCryptoJS","lib","WordArray","random","set","existingKey","not","toHaveBeenCalled","any","String","storage1","storage2","MMKV","id","encryptionKey","_asyncToGenerator2","default","AES","encrypt","mockReturnValueOnce","toString","setTokens","mockTokens","accessToken","refreshToken","expiresIn","tokenType","mockImplementation","Error","rejects","toThrow","getNumber","decrypt","fn","result","getTokens","toEqual","toBeNull","removeTokensSpy","spyOn","mockResolvedValue","newAccessToken","newExpiresIn","updateAccessToken","Date","now","_require","validateTokens","isRefreshTokenValid","isValid","isExpired","hasValidTokens","toBe","contains","size","info","getStorageInfo","hasAccessToken","hasRefreshToken","hasEncryptionKey","storageSize","removeTokens","delete","clearAll","objectContaining","toBeDefined","promises","Promise","all","resolves"],"sources":["tokenStorage.test.ts"],"sourcesContent":["/**\n * Secure Storage Encryption Tests\n * \n * Comprehensive tests for secure token storage including encryption,\n * decryption, key management, and security scenarios.\n */\n\nimport {\n  mockTokens,\n  mockMMKV,\n  mockCryptoJS,\n  setupMocks,\n  teardownMocks,\n} from '../utils/testUtils';\n\n// Import test target and dependencies\nimport { SecureTokenStorage } from '../../src/services/tokenStorage';\nimport { MMKV } from 'react-native-mmkv';\n\ndescribe('Secure Token Storage Encryption', () => {\n  let tokenStorage: any;\n  let mockMMKVInstance: jest.Mocked<typeof mockMMKV>;\n\n  beforeEach(() => {\n    setupMocks();\n    \n    // Get the mock instance that was set up in global test setup\n    mockMMKVInstance = mockMMKV as jest.Mocked<typeof mockMMKV>;\n    mockMMKVInstance.getString.mockReturnValue('test_encryption_key');\n    \n    // Create new instance using the mocked constructor\n    const MockedSecureTokenStorage = SecureTokenStorage as jest.MockedClass<typeof SecureTokenStorage>;\n    tokenStorage = new MockedSecureTokenStorage('test-storage');\n  });\n\n  afterEach(() => {\n    teardownMocks();\n    jest.clearAllMocks();\n  });\n\n  describe('Encryption Key Management', () => {\n    it('should generate encryption key on first initialization', () => {\n      mockMMKVInstance.getString.mockReturnValue(null); // No existing key\n      \n      new SecureTokenStorage('new-instance');\n      \n      expect(mockMMKVInstance.getString).toHaveBeenCalledWith('auth.encryptionKey');\n      expect(mockCryptoJS.lib.WordArray.random).toHaveBeenCalledWith(32); // 256 bits\n      expect(mockMMKVInstance.set).toHaveBeenCalledWith('auth.encryptionKey', 'random_key');\n    });\n\n    it('should use existing encryption key if available', () => {\n      const existingKey = 'existing_encryption_key';\n      mockMMKVInstance.getString.mockReturnValue(existingKey);\n      \n      new SecureTokenStorage('existing-instance');\n      \n      expect(mockMMKVInstance.getString).toHaveBeenCalledWith('auth.encryptionKey');\n      expect(mockCryptoJS.lib.WordArray.random).not.toHaveBeenCalled();\n      expect(mockMMKVInstance.set).not.toHaveBeenCalledWith('auth.encryptionKey', expect.any(String));\n    });\n\n    it('should use instance-specific encryption keys', () => {\n      const storage1 = new SecureTokenStorage('instance-1');\n      const storage2 = new SecureTokenStorage('instance-2');\n      \n      // Each instance should have been created with its own ID\n      expect(MMKV).toHaveBeenCalledWith({\n        id: 'instance-1',\n        encryptionKey: expect.any(String),\n      });\n      \n      expect(MMKV).toHaveBeenCalledWith({\n        id: 'instance-2',\n        encryptionKey: expect.any(String),\n      });\n    });\n  });\n\n  describe('Token Encryption', () => {\n    beforeEach(() => {\n      mockMMKVInstance.getString.mockReturnValue('test_encryption_key');\n    });\n\n    it('should encrypt tokens before storage', async () => {\n      mockCryptoJS.AES.encrypt\n        .mockReturnValueOnce({ toString: () => 'encrypted_access_token' } as any)\n        .mockReturnValueOnce({ toString: () => 'encrypted_refresh_token' } as any);\n      \n      await tokenStorage.setTokens(mockTokens);\n      \n      expect(mockCryptoJS.AES.encrypt).toHaveBeenCalledWith(\n        mockTokens.accessToken,\n        'test_encryption_key'\n      );\n      expect(mockCryptoJS.AES.encrypt).toHaveBeenCalledWith(\n        mockTokens.refreshToken,\n        'test_encryption_key'\n      );\n      \n      expect(mockMMKVInstance.set).toHaveBeenCalledWith(\n        'auth.accessToken',\n        'encrypted_access_token'\n      );\n      expect(mockMMKVInstance.set).toHaveBeenCalledWith(\n        'auth.refreshToken',\n        'encrypted_refresh_token'\n      );\n    });\n\n    it('should store non-sensitive data unencrypted', async () => {\n      await tokenStorage.setTokens(mockTokens);\n      \n      expect(mockMMKVInstance.set).toHaveBeenCalledWith(\n        'auth.expiresIn',\n        mockTokens.expiresIn\n      );\n      expect(mockMMKVInstance.set).toHaveBeenCalledWith(\n        'auth.tokenType',\n        mockTokens.tokenType\n      );\n    });\n\n    it('should handle encryption errors gracefully', async () => {\n      mockCryptoJS.AES.encrypt.mockImplementation(() => {\n        throw new Error('Encryption failed');\n      });\n      \n      await expect(tokenStorage.setTokens(mockTokens)).rejects.toThrow(\n        'Failed to store authentication tokens'\n      );\n    });\n  });\n\n  describe('Token Decryption', () => {\n    beforeEach(() => {\n      mockMMKVInstance.getString\n        .mockReturnValueOnce('test_encryption_key') // For constructor\n        .mockReturnValueOnce('encrypted_access_token') // For getTokens\n        .mockReturnValueOnce('encrypted_refresh_token') // For getTokens\n        .mockReturnValueOnce('Bearer'); // For tokenType\n      \n      mockMMKVInstance.getNumber.mockReturnValue(3600);\n      \n      mockCryptoJS.AES.decrypt\n        .mockReturnValueOnce({\n          toString: jest.fn().mockReturnValue(mockTokens.accessToken),\n        } as any)\n        .mockReturnValueOnce({\n          toString: jest.fn().mockReturnValue(mockTokens.refreshToken),\n        } as any);\n    });\n\n    it('should decrypt tokens when retrieving', async () => {\n      const result = await tokenStorage.getTokens();\n      \n      expect(mockCryptoJS.AES.decrypt).toHaveBeenCalledWith(\n        'encrypted_access_token',\n        'test_encryption_key'\n      );\n      expect(mockCryptoJS.AES.decrypt).toHaveBeenCalledWith(\n        'encrypted_refresh_token',\n        'test_encryption_key'\n      );\n      \n      expect(result).toEqual(mockTokens);\n    });\n\n    it('should return null if any token data is missing', async () => {\n      mockMMKVInstance.getString\n        .mockReturnValueOnce('test_encryption_key')\n        .mockReturnValueOnce(null) // Missing access token\n        .mockReturnValueOnce('encrypted_refresh_token');\n      \n      const result = await tokenStorage.getTokens();\n      \n      expect(result).toBeNull();\n    });\n\n    it('should handle decryption errors and clear corrupted tokens', async () => {\n      mockCryptoJS.AES.decrypt.mockImplementation(() => {\n        throw new Error('Decryption failed');\n      });\n      \n      const removeTokensSpy = jest.spyOn(tokenStorage, 'removeTokens');\n      removeTokensSpy.mockResolvedValue();\n      \n      const result = await tokenStorage.getTokens();\n      \n      expect(result).toBeNull();\n      expect(removeTokensSpy).toHaveBeenCalled();\n    });\n\n    it('should handle empty decryption result', async () => {\n      mockCryptoJS.AES.decrypt.mockReturnValue({\n        toString: jest.fn().mockReturnValue(''), // Empty decryption result\n      } as any);\n      \n      const removeTokensSpy = jest.spyOn(tokenStorage, 'removeTokens');\n      removeTokensSpy.mockResolvedValue();\n      \n      const result = await tokenStorage.getTokens();\n      \n      expect(result).toBeNull();\n      expect(removeTokensSpy).toHaveBeenCalled();\n    });\n  });\n\n  describe('Secure Operations', () => {\n    it('should securely update access token while preserving refresh token', async () => {\n      const newAccessToken = 'new_access_token';\n      const newExpiresIn = 7200;\n      \n      // Mock existing tokens\n      mockMMKVInstance.getString\n        .mockReturnValueOnce('test_encryption_key')\n        .mockReturnValueOnce('encrypted_access_token')\n        .mockReturnValueOnce('encrypted_refresh_token')\n        .mockReturnValueOnce('Bearer');\n      \n      mockMMKVInstance.getNumber.mockReturnValue(3600);\n      \n      mockCryptoJS.AES.decrypt\n        .mockReturnValueOnce({\n          toString: jest.fn().mockReturnValue(mockTokens.accessToken),\n        } as any)\n        .mockReturnValueOnce({\n          toString: jest.fn().mockReturnValue(mockTokens.refreshToken),\n        } as any);\n      \n      // Mock encryption for update\n      mockCryptoJS.AES.encrypt\n        .mockReturnValueOnce({ toString: () => 'encrypted_new_access_token' } as any)\n        .mockReturnValueOnce({ toString: () => 'encrypted_refresh_token' } as any);\n      \n      await tokenStorage.updateAccessToken(newAccessToken, newExpiresIn);\n      \n      expect(mockCryptoJS.AES.encrypt).toHaveBeenCalledWith(\n        newAccessToken,\n        'test_encryption_key'\n      );\n      expect(mockCryptoJS.AES.encrypt).toHaveBeenCalledWith(\n        mockTokens.refreshToken,\n        'test_encryption_key'\n      );\n      \n      expect(mockMMKVInstance.set).toHaveBeenCalledWith(\n        'auth.accessToken',\n        'encrypted_new_access_token'\n      );\n      expect(mockMMKVInstance.set).toHaveBeenCalledWith(\n        'auth.expiresIn',\n        newExpiresIn\n      );\n    });\n\n    it('should securely validate stored tokens', async () => {\n      mockMMKVInstance.getString\n        .mockReturnValueOnce('test_encryption_key')\n        .mockReturnValueOnce('encrypted_access_token')\n        .mockReturnValueOnce('encrypted_refresh_token')\n        .mockReturnValueOnce('Bearer');\n      \n      mockMMKVInstance.getNumber.mockReturnValue(Date.now() + 3600000); // Valid expiry\n      \n      mockCryptoJS.AES.decrypt\n        .mockReturnValueOnce({\n          toString: jest.fn().mockReturnValue(mockTokens.accessToken),\n        } as any)\n        .mockReturnValueOnce({\n          toString: jest.fn().mockReturnValue(mockTokens.refreshToken),\n        } as any);\n      \n      // Mock token validation\n      const { validateTokens, isRefreshTokenValid } = require('../../src/utils/tokenUtils');\n      validateTokens.mockReturnValue({ isValid: true, isExpired: false });\n      isRefreshTokenValid.mockReturnValue(true);\n      \n      const result = await tokenStorage.hasValidTokens();\n      \n      expect(result).toBe(true);\n    });\n\n    it('should detect token tampering', async () => {\n      mockMMKVInstance.getString\n        .mockReturnValueOnce('test_encryption_key')\n        .mockReturnValueOnce('tampered_encrypted_token') // Tampered token\n        .mockReturnValueOnce('encrypted_refresh_token')\n        .mockReturnValueOnce('Bearer');\n      \n      mockMMKVInstance.getNumber.mockReturnValue(3600);\n      \n      // Mock decryption failure due to tampering\n      mockCryptoJS.AES.decrypt.mockImplementation(() => {\n        throw new Error('Invalid ciphertext');\n      });\n      \n      const removeTokensSpy = jest.spyOn(tokenStorage, 'removeTokens');\n      removeTokensSpy.mockResolvedValue();\n      \n      const result = await tokenStorage.getTokens();\n      \n      expect(result).toBeNull();\n      expect(removeTokensSpy).toHaveBeenCalled();\n    });\n  });\n\n  describe('Storage Information and Cleanup', () => {\n    it('should provide storage information for debugging', () => {\n      mockMMKVInstance.contains\n        .mockReturnValueOnce(true) // hasAccessToken\n        .mockReturnValueOnce(true) // hasRefreshToken\n        .mockReturnValueOnce(true); // hasEncryptionKey\n      \n      mockMMKVInstance.size = 1024;\n      \n      const info = tokenStorage.getStorageInfo();\n      \n      expect(info).toEqual({\n        hasAccessToken: true,\n        hasRefreshToken: true,\n        hasEncryptionKey: true,\n        storageSize: 1024,\n      });\n    });\n\n    it('should securely remove all tokens', async () => {\n      await tokenStorage.removeTokens();\n      \n      expect(mockMMKVInstance.delete).toHaveBeenCalledWith('auth.accessToken');\n      expect(mockMMKVInstance.delete).toHaveBeenCalledWith('auth.refreshToken');\n      expect(mockMMKVInstance.delete).toHaveBeenCalledWith('auth.expiresIn');\n      expect(mockMMKVInstance.delete).toHaveBeenCalledWith('auth.tokenType');\n    });\n\n    it('should clear all data including encryption key', async () => {\n      await tokenStorage.clearAll();\n      \n      expect(mockMMKVInstance.clearAll).toHaveBeenCalled();\n    });\n\n    it('should handle storage errors gracefully', async () => {\n      mockMMKVInstance.delete.mockImplementation(() => {\n        throw new Error('Storage error');\n      });\n      \n      await expect(tokenStorage.removeTokens()).rejects.toThrow(\n        'Failed to clear authentication tokens'\n      );\n    });\n  });\n\n  describe('Encryption Algorithm Security', () => {\n    it('should use AES encryption with proper key size', () => {\n      expect(mockCryptoJS.lib.WordArray.random).toHaveBeenCalledWith(32); // 256 bits\n    });\n\n    it('should use different encryption keys for different instances', () => {\n      const storage1 = new SecureTokenStorage('instance-1');\n      const storage2 = new SecureTokenStorage('instance-2');\n      \n      expect(MMKV).toHaveBeenCalledWith(\n        expect.objectContaining({ id: 'instance-1' })\n      );\n      expect(MMKV).toHaveBeenCalledWith(\n        expect.objectContaining({ id: 'instance-2' })\n      );\n    });\n\n    it('should generate cryptographically secure random keys', () => {\n      mockMMKVInstance.getString.mockReturnValue(null);\n      \n      new SecureTokenStorage('secure-test');\n      \n      expect(mockCryptoJS.lib.WordArray.random).toHaveBeenCalledWith(32);\n    });\n\n    it('should not store encryption key in plain text', () => {\n      // The encryption key should be stored in MMKV which provides additional security\n      // but the key generation should be secure\n      expect(mockCryptoJS.lib.WordArray.random).toHaveBeenCalled();\n    });\n  });\n\n  describe('Key Rotation and Recovery', () => {\n    it('should handle encryption key corruption', async () => {\n      mockMMKVInstance.getString\n        .mockReturnValueOnce('corrupted_key')\n        .mockReturnValueOnce('encrypted_access_token')\n        .mockReturnValueOnce('encrypted_refresh_token');\n      \n      mockCryptoJS.AES.decrypt.mockImplementation(() => {\n        throw new Error('Invalid key');\n      });\n      \n      const removeTokensSpy = jest.spyOn(tokenStorage, 'removeTokens');\n      removeTokensSpy.mockResolvedValue();\n      \n      const result = await tokenStorage.getTokens();\n      \n      expect(result).toBeNull();\n      expect(removeTokensSpy).toHaveBeenCalled();\n    });\n\n    it('should support secure backup of encryption keys', () => {\n      // In a real implementation, you might want to support secure backup\n      // of encryption keys for recovery purposes\n      const info = tokenStorage.getStorageInfo();\n      \n      expect(info.hasEncryptionKey).toBeDefined();\n    });\n  });\n\n  describe('Performance and Memory Security', () => {\n    it('should not leak sensitive data in memory', async () => {\n      // This test ensures that sensitive operations don't leave traces\n      await tokenStorage.setTokens(mockTokens);\n      await tokenStorage.getTokens();\n      \n      // Verify that encryption/decryption operations were called\n      expect(mockCryptoJS.AES.encrypt).toHaveBeenCalled();\n      expect(mockCryptoJS.AES.decrypt).toHaveBeenCalled();\n      \n      // In a real implementation, you'd want to ensure that:\n      // 1. Plaintext tokens are not stored in variables longer than necessary\n      // 2. Sensitive data is cleared from memory after use\n      // 3. No sensitive data is logged or exposed in error messages\n    });\n\n    it('should handle concurrent access safely', async () => {\n      const promises = [\n        tokenStorage.setTokens(mockTokens),\n        tokenStorage.getTokens(),\n        tokenStorage.hasValidTokens(),\n      ];\n      \n      // Should not throw errors when accessed concurrently\n      await expect(Promise.all(promises)).resolves.toBeDefined();\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}