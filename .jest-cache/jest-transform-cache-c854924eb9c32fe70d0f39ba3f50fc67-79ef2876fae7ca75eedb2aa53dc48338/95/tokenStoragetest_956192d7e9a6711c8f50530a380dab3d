161e2c7d2ee215cf5a76fe0802c84f5c
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _testUtils = require("../utils/testUtils");
var _tokenStorage = require("../../src/services/tokenStorage");
var _reactNativeMmkv = require("react-native-mmkv");
describe('Secure Token Storage Encryption', function () {
  var tokenStorage;
  var mockMMKVInstance;
  beforeEach(function () {
    (0, _testUtils.setupMocks)();
    mockMMKVInstance = _testUtils.mockMMKV;
    mockMMKVInstance.getString.mockReturnValue('test_encryption_key');
    var MockedSecureTokenStorage = _tokenStorage.SecureTokenStorage;
    tokenStorage = new MockedSecureTokenStorage('test-storage');
  });
  afterEach(function () {
    (0, _testUtils.teardownMocks)();
    jest.clearAllMocks();
  });
  describe('Encryption Key Management', function () {
    it('should generate encryption key on first initialization', function () {
      mockMMKVInstance.getString.mockReturnValue(null);
      new _tokenStorage.SecureTokenStorage('new-instance');
      expect(mockMMKVInstance.getString).toHaveBeenCalledWith('auth.encryptionKey');
      expect(_testUtils.mockCryptoJS.lib.WordArray.random).toHaveBeenCalledWith(32);
      expect(mockMMKVInstance.set).toHaveBeenCalledWith('auth.encryptionKey', 'random_key');
    });
    it('should use existing encryption key if available', function () {
      var existingKey = 'existing_encryption_key';
      mockMMKVInstance.getString.mockReturnValue(existingKey);
      new _tokenStorage.SecureTokenStorage('existing-instance');
      expect(mockMMKVInstance.getString).toHaveBeenCalledWith('auth.encryptionKey');
      expect(_testUtils.mockCryptoJS.lib.WordArray.random).not.toHaveBeenCalled();
      expect(mockMMKVInstance.set).not.toHaveBeenCalledWith('auth.encryptionKey', expect.any(String));
    });
    it('should use instance-specific encryption keys', function () {
      var storage1 = new _tokenStorage.SecureTokenStorage('instance-1');
      var storage2 = new _tokenStorage.SecureTokenStorage('instance-2');
      expect(_reactNativeMmkv.MMKV).toHaveBeenCalledWith({
        id: 'instance-1',
        encryptionKey: expect.any(String)
      });
      expect(_reactNativeMmkv.MMKV).toHaveBeenCalledWith({
        id: 'instance-2',
        encryptionKey: expect.any(String)
      });
    });
  });
  describe('Token Encryption', function () {
    beforeEach(function () {
      mockMMKVInstance.getString.mockReturnValue('test_encryption_key');
    });
    it('should encrypt tokens before storage', (0, _asyncToGenerator2.default)(function* () {
      _testUtils.mockCryptoJS.AES.encrypt.mockReturnValueOnce({
        toString: function toString() {
          return 'encrypted_access_token';
        }
      }).mockReturnValueOnce({
        toString: function toString() {
          return 'encrypted_refresh_token';
        }
      });
      yield tokenStorage.setTokens(_testUtils.mockTokens);
      expect(_testUtils.mockCryptoJS.AES.encrypt).toHaveBeenCalledWith(_testUtils.mockTokens.accessToken, 'test_encryption_key');
      expect(_testUtils.mockCryptoJS.AES.encrypt).toHaveBeenCalledWith(_testUtils.mockTokens.refreshToken, 'test_encryption_key');
      expect(mockMMKVInstance.set).toHaveBeenCalledWith('auth.accessToken', 'encrypted_access_token');
      expect(mockMMKVInstance.set).toHaveBeenCalledWith('auth.refreshToken', 'encrypted_refresh_token');
    }));
    it('should store non-sensitive data unencrypted', (0, _asyncToGenerator2.default)(function* () {
      yield tokenStorage.setTokens(_testUtils.mockTokens);
      expect(mockMMKVInstance.set).toHaveBeenCalledWith('auth.expiresIn', _testUtils.mockTokens.expiresIn);
      expect(mockMMKVInstance.set).toHaveBeenCalledWith('auth.tokenType', _testUtils.mockTokens.tokenType);
    }));
    it('should handle encryption errors gracefully', (0, _asyncToGenerator2.default)(function* () {
      _testUtils.mockCryptoJS.AES.encrypt.mockImplementation(function () {
        throw new Error('Encryption failed');
      });
      yield expect(tokenStorage.setTokens(_testUtils.mockTokens)).rejects.toThrow('Failed to store authentication tokens');
    }));
  });
  describe('Token Decryption', function () {
    beforeEach(function () {
      mockMMKVInstance.getString.mockReturnValueOnce('test_encryption_key').mockReturnValueOnce('encrypted_access_token').mockReturnValueOnce('encrypted_refresh_token').mockReturnValueOnce('Bearer');
      mockMMKVInstance.getNumber.mockReturnValue(3600);
      _testUtils.mockCryptoJS.AES.decrypt.mockReturnValueOnce({
        toString: jest.fn().mockReturnValue(_testUtils.mockTokens.accessToken)
      }).mockReturnValueOnce({
        toString: jest.fn().mockReturnValue(_testUtils.mockTokens.refreshToken)
      });
    });
    it('should decrypt tokens when retrieving', (0, _asyncToGenerator2.default)(function* () {
      var result = yield tokenStorage.getTokens();
      expect(_testUtils.mockCryptoJS.AES.decrypt).toHaveBeenCalledWith('encrypted_access_token', 'test_encryption_key');
      expect(_testUtils.mockCryptoJS.AES.decrypt).toHaveBeenCalledWith('encrypted_refresh_token', 'test_encryption_key');
      expect(result).toEqual(_testUtils.mockTokens);
    }));
    it('should return null if any token data is missing', (0, _asyncToGenerator2.default)(function* () {
      mockMMKVInstance.getString.mockReturnValueOnce('test_encryption_key').mockReturnValueOnce(null).mockReturnValueOnce('encrypted_refresh_token');
      var result = yield tokenStorage.getTokens();
      expect(result).toBeNull();
    }));
    it('should handle decryption errors and clear corrupted tokens', (0, _asyncToGenerator2.default)(function* () {
      _testUtils.mockCryptoJS.AES.decrypt.mockImplementation(function () {
        throw new Error('Decryption failed');
      });
      var removeTokensSpy = jest.spyOn(tokenStorage, 'removeTokens');
      removeTokensSpy.mockResolvedValue();
      var result = yield tokenStorage.getTokens();
      expect(result).toBeNull();
      expect(removeTokensSpy).toHaveBeenCalled();
    }));
    it('should handle empty decryption result', (0, _asyncToGenerator2.default)(function* () {
      _testUtils.mockCryptoJS.AES.decrypt.mockReturnValue({
        toString: jest.fn().mockReturnValue('')
      });
      var removeTokensSpy = jest.spyOn(tokenStorage, 'removeTokens');
      removeTokensSpy.mockResolvedValue();
      var result = yield tokenStorage.getTokens();
      expect(result).toBeNull();
      expect(removeTokensSpy).toHaveBeenCalled();
    }));
  });
  describe('Secure Operations', function () {
    it('should securely update access token while preserving refresh token', (0, _asyncToGenerator2.default)(function* () {
      var newAccessToken = 'new_access_token';
      var newExpiresIn = 7200;
      mockMMKVInstance.getString.mockReturnValueOnce('test_encryption_key').mockReturnValueOnce('encrypted_access_token').mockReturnValueOnce('encrypted_refresh_token').mockReturnValueOnce('Bearer');
      mockMMKVInstance.getNumber.mockReturnValue(3600);
      _testUtils.mockCryptoJS.AES.decrypt.mockReturnValueOnce({
        toString: jest.fn().mockReturnValue(_testUtils.mockTokens.accessToken)
      }).mockReturnValueOnce({
        toString: jest.fn().mockReturnValue(_testUtils.mockTokens.refreshToken)
      });
      _testUtils.mockCryptoJS.AES.encrypt.mockReturnValueOnce({
        toString: function toString() {
          return 'encrypted_new_access_token';
        }
      }).mockReturnValueOnce({
        toString: function toString() {
          return 'encrypted_refresh_token';
        }
      });
      yield tokenStorage.updateAccessToken(newAccessToken, newExpiresIn);
      expect(_testUtils.mockCryptoJS.AES.encrypt).toHaveBeenCalledWith(newAccessToken, 'test_encryption_key');
      expect(_testUtils.mockCryptoJS.AES.encrypt).toHaveBeenCalledWith(_testUtils.mockTokens.refreshToken, 'test_encryption_key');
      expect(mockMMKVInstance.set).toHaveBeenCalledWith('auth.accessToken', 'encrypted_new_access_token');
      expect(mockMMKVInstance.set).toHaveBeenCalledWith('auth.expiresIn', newExpiresIn);
    }));
    it('should securely validate stored tokens', (0, _asyncToGenerator2.default)(function* () {
      mockMMKVInstance.getString.mockReturnValueOnce('test_encryption_key').mockReturnValueOnce('encrypted_access_token').mockReturnValueOnce('encrypted_refresh_token').mockReturnValueOnce('Bearer');
      mockMMKVInstance.getNumber.mockReturnValue(Date.now() + 3600000);
      _testUtils.mockCryptoJS.AES.decrypt.mockReturnValueOnce({
        toString: jest.fn().mockReturnValue(_testUtils.mockTokens.accessToken)
      }).mockReturnValueOnce({
        toString: jest.fn().mockReturnValue(_testUtils.mockTokens.refreshToken)
      });
      var _require = require('../../src/utils/tokenUtils'),
        validateTokens = _require.validateTokens,
        isRefreshTokenValid = _require.isRefreshTokenValid;
      validateTokens.mockReturnValue({
        isValid: true,
        isExpired: false
      });
      isRefreshTokenValid.mockReturnValue(true);
      var result = yield tokenStorage.hasValidTokens();
      expect(result).toBe(true);
    }));
    it('should detect token tampering', (0, _asyncToGenerator2.default)(function* () {
      mockMMKVInstance.getString.mockReturnValueOnce('test_encryption_key').mockReturnValueOnce('tampered_encrypted_token').mockReturnValueOnce('encrypted_refresh_token').mockReturnValueOnce('Bearer');
      mockMMKVInstance.getNumber.mockReturnValue(3600);
      _testUtils.mockCryptoJS.AES.decrypt.mockImplementation(function () {
        throw new Error('Invalid ciphertext');
      });
      var removeTokensSpy = jest.spyOn(tokenStorage, 'removeTokens');
      removeTokensSpy.mockResolvedValue();
      var result = yield tokenStorage.getTokens();
      expect(result).toBeNull();
      expect(removeTokensSpy).toHaveBeenCalled();
    }));
  });
  describe('Storage Information and Cleanup', function () {
    it('should provide storage information for debugging', function () {
      mockMMKVInstance.contains.mockReturnValueOnce(true).mockReturnValueOnce(true).mockReturnValueOnce(true);
      mockMMKVInstance.size = 1024;
      var info = tokenStorage.getStorageInfo();
      expect(info).toEqual({
        hasAccessToken: true,
        hasRefreshToken: true,
        hasEncryptionKey: true,
        storageSize: 1024
      });
    });
    it('should securely remove all tokens', (0, _asyncToGenerator2.default)(function* () {
      yield tokenStorage.removeTokens();
      expect(mockMMKVInstance.delete).toHaveBeenCalledWith('auth.accessToken');
      expect(mockMMKVInstance.delete).toHaveBeenCalledWith('auth.refreshToken');
      expect(mockMMKVInstance.delete).toHaveBeenCalledWith('auth.expiresIn');
      expect(mockMMKVInstance.delete).toHaveBeenCalledWith('auth.tokenType');
    }));
    it('should clear all data including encryption key', (0, _asyncToGenerator2.default)(function* () {
      yield tokenStorage.clearAll();
      expect(mockMMKVInstance.clearAll).toHaveBeenCalled();
    }));
    it('should handle storage errors gracefully', (0, _asyncToGenerator2.default)(function* () {
      mockMMKVInstance.delete.mockImplementation(function () {
        throw new Error('Storage error');
      });
      yield expect(tokenStorage.removeTokens()).rejects.toThrow('Failed to clear authentication tokens');
    }));
  });
  describe('Encryption Algorithm Security', function () {
    it('should use AES encryption with proper key size', function () {
      expect(_testUtils.mockCryptoJS.lib.WordArray.random).toHaveBeenCalledWith(32);
    });
    it('should use different encryption keys for different instances', function () {
      var storage1 = new _tokenStorage.SecureTokenStorage('instance-1');
      var storage2 = new _tokenStorage.SecureTokenStorage('instance-2');
      expect(_reactNativeMmkv.MMKV).toHaveBeenCalledWith(expect.objectContaining({
        id: 'instance-1'
      }));
      expect(_reactNativeMmkv.MMKV).toHaveBeenCalledWith(expect.objectContaining({
        id: 'instance-2'
      }));
    });
    it('should generate cryptographically secure random keys', function () {
      mockMMKVInstance.getString.mockReturnValue(null);
      new _tokenStorage.SecureTokenStorage('secure-test');
      expect(_testUtils.mockCryptoJS.lib.WordArray.random).toHaveBeenCalledWith(32);
    });
    it('should not store encryption key in plain text', function () {
      expect(_testUtils.mockCryptoJS.lib.WordArray.random).toHaveBeenCalled();
    });
  });
  describe('Key Rotation and Recovery', function () {
    it('should handle encryption key corruption', (0, _asyncToGenerator2.default)(function* () {
      mockMMKVInstance.getString.mockReturnValueOnce('corrupted_key').mockReturnValueOnce('encrypted_access_token').mockReturnValueOnce('encrypted_refresh_token');
      _testUtils.mockCryptoJS.AES.decrypt.mockImplementation(function () {
        throw new Error('Invalid key');
      });
      var removeTokensSpy = jest.spyOn(tokenStorage, 'removeTokens');
      removeTokensSpy.mockResolvedValue();
      var result = yield tokenStorage.getTokens();
      expect(result).toBeNull();
      expect(removeTokensSpy).toHaveBeenCalled();
    }));
    it('should support secure backup of encryption keys', function () {
      var info = tokenStorage.getStorageInfo();
      expect(info.hasEncryptionKey).toBeDefined();
    });
  });
  describe('Performance and Memory Security', function () {
    it('should not leak sensitive data in memory', (0, _asyncToGenerator2.default)(function* () {
      yield tokenStorage.setTokens(_testUtils.mockTokens);
      yield tokenStorage.getTokens();
      expect(_testUtils.mockCryptoJS.AES.encrypt).toHaveBeenCalled();
      expect(_testUtils.mockCryptoJS.AES.decrypt).toHaveBeenCalled();
    }));
    it('should handle concurrent access safely', (0, _asyncToGenerator2.default)(function* () {
      var promises = [tokenStorage.setTokens(_testUtils.mockTokens), tokenStorage.getTokens(), tokenStorage.hasValidTokens()];
      yield expect(Promise.all(promises)).resolves.toBeDefined();
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,