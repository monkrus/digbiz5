{"version":3,"names":["formatAuthHeader","exports","token","tokenType","arguments","length","undefined","decodeJWTPayload","parts","split","payload","paddedPayload","repeat","Buffer","decoded","from","toString","JSON","parse","error"],"sources":["simple-tokenUtils.ts"],"sourcesContent":["/**\n * Simplified tokenUtils for testing\n */\n\nexport const formatAuthHeader = (token: string, tokenType: string = 'Bearer'): string => {\n  return `${tokenType} ${token}`;\n};\n\nexport const decodeJWTPayload = (token: string): any | null => {\n  try {\n    const parts = token.split('.');\n    if (parts.length !== 3) {\n      return null;\n    }\n\n    const payload = parts[1];\n    const paddedPayload = payload + '='.repeat((4 - payload.length % 4) % 4);\n    \n    // Use Buffer for Node.js environment\n    if (typeof Buffer !== 'undefined') {\n      const decoded = Buffer.from(paddedPayload, 'base64').toString('utf-8');\n      return JSON.parse(decoded);\n    }\n    \n    // Fallback for other environments\n    return null;\n  } catch (error) {\n    return null;\n  }\n};"],"mappings":";;;;AAIO,IAAMA,gBAAgB,GAAAC,OAAA,CAAAD,gBAAA,GAAG,SAAnBA,gBAAgBA,CAAIE,KAAa,EAA2C;EAAA,IAAzCC,SAAiB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,QAAQ;EAC1E,OAAO,GAAGD,SAAS,IAAID,KAAK,EAAE;AAChC,CAAC;AAEM,IAAMK,gBAAgB,GAAAN,OAAA,CAAAM,gBAAA,GAAG,SAAnBA,gBAAgBA,CAAIL,KAAa,EAAiB;EAC7D,IAAI;IACF,IAAMM,KAAK,GAAGN,KAAK,CAACO,KAAK,CAAC,GAAG,CAAC;IAC9B,IAAID,KAAK,CAACH,MAAM,KAAK,CAAC,EAAE;MACtB,OAAO,IAAI;IACb;IAEA,IAAMK,OAAO,GAAGF,KAAK,CAAC,CAAC,CAAC;IACxB,IAAMG,aAAa,GAAGD,OAAO,GAAG,GAAG,CAACE,MAAM,CAAC,CAAC,CAAC,GAAGF,OAAO,CAACL,MAAM,GAAG,CAAC,IAAI,CAAC,CAAC;IAGxE,IAAI,OAAOQ,MAAM,KAAK,WAAW,EAAE;MACjC,IAAMC,OAAO,GAAGD,MAAM,CAACE,IAAI,CAACJ,aAAa,EAAE,QAAQ,CAAC,CAACK,QAAQ,CAAC,OAAO,CAAC;MACtE,OAAOC,IAAI,CAACC,KAAK,CAACJ,OAAO,CAAC;IAC5B;IAGA,OAAO,IAAI;EACb,CAAC,CAAC,OAAOK,KAAK,EAAE;IACd,OAAO,IAAI;EACb;AACF,CAAC","ignoreList":[]}