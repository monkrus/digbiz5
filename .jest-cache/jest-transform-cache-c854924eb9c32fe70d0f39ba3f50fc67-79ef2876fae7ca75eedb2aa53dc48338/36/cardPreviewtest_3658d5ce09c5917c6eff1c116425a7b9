529d6401e3101ad49c2449ea63b3c341
_getJestObj().mock('react-native', function () {
  return Object.assign({}, jest.requireActual('react-native'), {
    Dimensions: {
      get: jest.fn(function () {
        return {
          width: 375,
          height: 812
        };
      })
    },
    PixelRatio: {
      get: jest.fn(function () {
        return 2;
      }),
      getFontScale: jest.fn(function () {
        return 1;
      })
    }
  });
});
_getJestObj().mock('react-native-view-shot', function () {
  return {
    __esModule: true,
    default: function _default(_ref) {
      var children = _ref.children,
        props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
      var MockViewShot = function MockViewShot(_ref2) {
        var children = _ref2.children,
          props = (0, _objectWithoutProperties2.default)(_ref2, _excluded2);
        return (0, _jsxRuntime.jsx)("div", Object.assign({
          testID: "view-shot"
        }, props, {
          children: children
        }));
      };
      return (0, _jsxRuntime.jsx)(MockViewShot, Object.assign({}, props, {
        children: children
      }));
    }
  };
});
_getJestObj().mock('../../../src/components/common/QRCodeComponent', function () {
  return {
    __esModule: true,
    default: function _default(_ref3) {
      var data = _ref3.data,
        props = (0, _objectWithoutProperties2.default)(_ref3, _excluded3);
      var MockQRCode = function MockQRCode(_ref4) {
        var data = _ref4.data,
          props = (0, _objectWithoutProperties2.default)(_ref4, _excluded4);
        return (0, _jsxRuntime.jsxs)("div", Object.assign({
          testID: "qr-code"
        }, props, {
          children: ["QR: ", (data == null ? void 0 : data.data) || 'mock-qr-data']
        }));
      };
      return (0, _jsxRuntime.jsx)(MockQRCode, Object.assign({
        data: data
      }, props));
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _CardPreview = _interopRequireDefault(require("../../../src/components/businessCard/preview/CardPreview"));
var _cardRendering = require("../../../src/utils/cardRendering");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children"],
  _excluded2 = ["children"],
  _excluded3 = ["data"],
  _excluded4 = ["data"];
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('Card Preview Rendering', function () {
  var mockTheme = {
    id: 'professional-theme-1',
    name: 'Professional Blue',
    primaryColor: '#3b82f6',
    secondaryColor: '#1e40af',
    backgroundColor: '#ffffff',
    textColor: '#1f2937',
    accentColor: '#10b981',
    fontFamily: 'Inter',
    headerFontSize: 24,
    bodyFontSize: 14,
    borderRadius: 8,
    padding: 16,
    spacing: 8
  };
  var mockTemplate = {
    id: 'startup-template-1',
    name: 'Modern Startup',
    category: 'startup',
    layout: 'standard',
    elements: [{
      id: 'name-element',
      type: 'name',
      position: {
        x: 16,
        y: 16
      },
      size: {
        width: 300,
        height: 32
      },
      style: {
        fontSize: 24,
        fontWeight: 'bold',
        color: '#1f2937'
      },
      isVisible: true,
      isRequired: true
    }, {
      id: 'title-element',
      type: 'title',
      position: {
        x: 16,
        y: 56
      },
      size: {
        width: 300,
        height: 20
      },
      style: {
        fontSize: 16,
        fontWeight: 'normal',
        color: '#6b7280'
      },
      isVisible: true,
      isRequired: true
    }, {
      id: 'company-element',
      type: 'company',
      position: {
        x: 16,
        y: 84
      },
      size: {
        width: 300,
        height: 20
      },
      style: {
        fontSize: 14,
        fontWeight: '500',
        color: '#374151'
      },
      isVisible: true,
      isRequired: true
    }, {
      id: 'qr-element',
      type: 'qr-code',
      position: {
        x: 250,
        y: 120
      },
      size: {
        width: 80,
        height: 80
      },
      style: {},
      isVisible: true,
      isRequired: false
    }],
    isPopular: true,
    isPremium: false,
    previewImage: 'https://example.com/template-preview.png'
  };
  var mockFormData = {
    basicInfo: {
      name: 'John Smith',
      title: 'CEO & Founder',
      company: 'TechStart Inc.',
      email: 'john@techstart.com',
      phone: '+1-555-123-4567',
      location: 'San Francisco, CA',
      bio: 'Building the future of technology.',
      profilePhoto: 'https://example.com/profile.jpg',
      companyLogo: 'https://example.com/logo.png'
    },
    startupInfo: {
      fundingStage: 'seed',
      teamSize: '11-25',
      industry: ['Technology', 'SaaS'],
      businessModel: 'b2b',
      revenue: '0-10k',
      seekingFunding: true,
      seekingTalent: true,
      seekingPartners: false,
      seekingMentors: true
    },
    socialLinks: {
      linkedin: 'https://linkedin.com/in/johnsmith',
      twitter: 'https://twitter.com/johnsmith',
      website: 'https://techstart.com',
      github: 'https://github.com/johnsmith'
    },
    customFields: [{
      id: '1',
      label: 'Investment Focus',
      value: 'B2B SaaS, AI',
      type: 'text',
      icon: 'ðŸ’¼',
      isPublic: true,
      order: 1
    }],
    themeId: mockTheme.id,
    templateId: mockTemplate.id,
    isDefault: false,
    isPublic: true
  };
  var mockBusinessCard = Object.assign({
    id: 'card-123',
    userId: 'user-456'
  }, mockFormData, {
    theme: mockTheme,
    template: mockTemplate,
    shareCode: 'abc123def456',
    isActive: true,
    createdAt: '2024-01-15T10:30:00Z',
    updatedAt: '2024-01-15T10:30:00Z',
    lastSharedAt: '2024-01-15T15:45:00Z'
  });
  describe('Basic Rendering', function () {
    test('should render card preview with form data', function () {
      var onClose = jest.fn();
      var onEdit = jest.fn();
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CardPreview.default, {
          formData: mockFormData,
          onClose: onClose,
          onEdit: onEdit
        })),
        getByText = _render.getByText,
        getByTestId = _render.getByTestId;
      expect(getByText('John Smith')).toBeTruthy();
      expect(getByText('CEO & Founder')).toBeTruthy();
      expect(getByText('TechStart Inc.')).toBeTruthy();
    });
    test('should render card preview with business card data', function () {
      var onClose = jest.fn();
      var onEdit = jest.fn();
      var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CardPreview.default, {
          card: mockBusinessCard,
          onClose: onClose,
          onEdit: onEdit
        })),
        getByText = _render2.getByText;
      expect(getByText('John Smith')).toBeTruthy();
      expect(getByText('CEO & Founder')).toBeTruthy();
      expect(getByText('TechStart Inc.')).toBeTruthy();
    });
    test('should handle missing data gracefully', function () {
      var minimalFormData = {
        basicInfo: {
          name: 'Jane Doe',
          title: 'Developer',
          company: 'DevCorp',
          email: 'jane@devcorp.com'
        },
        socialLinks: {},
        customFields: [],
        themeId: 'theme-1',
        templateId: 'template-1'
      };
      var onClose = jest.fn();
      var onEdit = jest.fn();
      var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CardPreview.default, {
          formData: minimalFormData,
          onClose: onClose,
          onEdit: onEdit
        })),
        getByText = _render3.getByText;
      expect(getByText('Jane Doe')).toBeTruthy();
      expect(getByText('Developer')).toBeTruthy();
      expect(getByText('DevCorp')).toBeTruthy();
    });
  });
  describe('Theme Application', function () {
    test('should apply theme colors correctly', function () {
      var styledElement = (0, _cardRendering.applyThemeStyles)(mockTheme, 'name', {
        fontSize: 24,
        fontWeight: 'bold'
      });
      expect(styledElement.color).toBe(mockTheme.textColor);
      expect(styledElement.fontFamily).toBe(mockTheme.fontFamily);
      expect(styledElement.fontSize).toBe(24);
    });
    test('should validate theme structure', function () {
      expect((0, _cardRendering.validateTheme)(mockTheme)).toBe(true);
      var invalidTheme = Object.assign({}, mockTheme, {
        primaryColor: null
      });
      expect((0, _cardRendering.validateTheme)(invalidTheme)).toBe(false);
    });
    test('should handle theme with gradients', function () {
      var gradientTheme = Object.assign({}, mockTheme, {
        gradient: {
          type: 'linear',
          colors: ['#3b82f6', '#1e40af'],
          direction: 45
        }
      });
      expect((0, _cardRendering.validateTheme)(gradientTheme)).toBe(true);
    });
    test('should handle theme with shadows', function () {
      var shadowTheme = Object.assign({}, mockTheme, {
        shadow: {
          color: '#000000',
          opacity: 0.1,
          offsetX: 0,
          offsetY: 2,
          blur: 4
        }
      });
      expect((0, _cardRendering.validateTheme)(shadowTheme)).toBe(true);
    });
    test('should handle theme with patterns', function () {
      var patternTheme = Object.assign({}, mockTheme, {
        pattern: {
          type: 'dots',
          color: '#e5e7eb',
          opacity: 0.3,
          size: 4
        }
      });
      expect((0, _cardRendering.validateTheme)(patternTheme)).toBe(true);
    });
  });
  describe('Layout Calculations', function () {
    test('should calculate card dimensions correctly', function () {
      var dimensions = (0, _cardRendering.calculateCardDimensions)('business-card', 'portrait');
      expect(dimensions.width).toBe(350);
      expect(dimensions.height).toBe(200);
      expect(dimensions.aspectRatio).toBeCloseTo(1.75);
    });
    test('should calculate dimensions for different card sizes', function () {
      var businessCard = (0, _cardRendering.calculateCardDimensions)('business-card', 'portrait');
      var postcard = (0, _cardRendering.calculateCardDimensions)('postcard', 'landscape');
      var flyer = (0, _cardRendering.calculateCardDimensions)('flyer', 'portrait');
      expect(businessCard.width).toBe(350);
      expect(postcard.width).toBe(400);
      expect(flyer.width).toBe(300);
    });
    test('should handle landscape orientation', function () {
      var landscapeDimensions = (0, _cardRendering.calculateCardDimensions)('business-card', 'landscape');
      expect(landscapeDimensions.width).toBe(350);
      expect(landscapeDimensions.height).toBe(200);
    });
    test('should layout card elements correctly', function () {
      var layout = (0, _cardRendering.layoutCardElements)(mockTemplate, mockFormData);
      expect(layout.elements).toHaveLength(mockTemplate.elements.length);
      expect(layout.totalHeight).toBeGreaterThan(0);
      expect(layout.contentAreas).toBeDefined();
    });
    test('should handle overlapping elements', function () {
      var overlappingTemplate = Object.assign({}, mockTemplate, {
        elements: [{
          id: 'element1',
          type: 'name',
          position: {
            x: 10,
            y: 10
          },
          size: {
            width: 100,
            height: 50
          },
          style: {},
          isVisible: true,
          isRequired: true
        }, {
          id: 'element2',
          type: 'title',
          position: {
            x: 50,
            y: 30
          },
          size: {
            width: 100,
            height: 50
          },
          style: {},
          isVisible: true,
          isRequired: true
        }]
      });
      var layout = (0, _cardRendering.layoutCardElements)(overlappingTemplate, mockFormData);
      expect(layout.hasOverlaps).toBe(true);
      expect(layout.overlappingPairs).toHaveLength(1);
    });
  });
  describe('Visual Elements', function () {
    test('should render all element types', function () {
      var elementTypes = ['name', 'title', 'company', 'email', 'phone', 'location', 'bio', 'profile-photo', 'company-logo', 'social-links', 'custom-field', 'qr-code'];
      elementTypes.forEach(function (elementType) {
        var element = {
          id: `${elementType}-test`,
          type: elementType,
          position: {
            x: 0,
            y: 0
          },
          size: {
            width: 100,
            height: 20
          },
          style: {},
          isVisible: true,
          isRequired: false
        };
        expect(function () {
          (0, _cardRendering.renderCardWithTheme)(mockFormData, mockTheme, [element]);
        }).not.toThrow();
      });
    });
    test('should handle missing images gracefully', function () {
      var cardWithMissingImages = Object.assign({}, mockFormData, {
        basicInfo: Object.assign({}, mockFormData.basicInfo, {
          profilePhoto: '',
          companyLogo: ''
        })
      });
      expect(function () {
        (0, _cardRendering.renderCardWithTheme)(cardWithMissingImages, mockTheme, mockTemplate.elements);
      }).not.toThrow();
    });
    test('should render QR code element', function () {
      var onClose = jest.fn();
      var onEdit = jest.fn();
      var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CardPreview.default, {
          formData: mockFormData,
          onClose: onClose,
          onEdit: onEdit,
          showQRCode: true
        })),
        getByTestId = _render4.getByTestId;
      expect(getByTestId('qr-code')).toBeTruthy();
    });
    test('should handle social links rendering', function () {
      var cardWithManySocials = Object.assign({}, mockFormData, {
        socialLinks: {
          linkedin: 'https://linkedin.com/in/john',
          twitter: 'https://twitter.com/john',
          github: 'https://github.com/john',
          instagram: 'https://instagram.com/john',
          facebook: 'https://facebook.com/john',
          youtube: 'https://youtube.com/john',
          website: 'https://johndoe.com'
        }
      });
      expect(function () {
        (0, _cardRendering.renderCardWithTheme)(cardWithManySocials, mockTheme, mockTemplate.elements);
      }).not.toThrow();
    });
  });
  describe('Responsive Design', function () {
    test('should optimize card for different screen sizes', function () {
      var mobileOptimized = (0, _cardRendering.optimizeCardForDisplay)(mockFormData, mockTheme, 'mobile');
      var tabletOptimized = (0, _cardRendering.optimizeCardForDisplay)(mockFormData, mockTheme, 'tablet');
      var desktopOptimized = (0, _cardRendering.optimizeCardForDisplay)(mockFormData, mockTheme, 'desktop');
      expect(mobileOptimized.scaleFactor).toBeLessThanOrEqual(1);
      expect(tabletOptimized.scaleFactor).toBeLessThanOrEqual(1.2);
      expect(desktopOptimized.scaleFactor).toBeLessThanOrEqual(1.5);
    });
    test('should handle high DPI displays', function () {
      require('react-native').PixelRatio.get.mockReturnValue(3);
      var optimized = (0, _cardRendering.optimizeCardForDisplay)(mockFormData, mockTheme, 'mobile');
      expect(optimized.dpiScale).toBe(3);
    });
    test('should adjust for font scaling', function () {
      require('react-native').PixelRatio.getFontScale.mockReturnValue(1.3);
      var optimized = (0, _cardRendering.optimizeCardForDisplay)(mockFormData, mockTheme, 'mobile');
      expect(optimized.fontScale).toBe(1.3);
    });
  });
  describe('Interaction Handling', function () {
    test('should handle close button press', function () {
      var onClose = jest.fn();
      var onEdit = jest.fn();
      var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CardPreview.default, {
          formData: mockFormData,
          onClose: onClose,
          onEdit: onEdit
        })),
        getByText = _render5.getByText;
      var closeButton = getByText('Close');
      _reactNative.fireEvent.press(closeButton);
      expect(onClose).toHaveBeenCalled();
    });
    test('should handle edit button press', function () {
      var onClose = jest.fn();
      var onEdit = jest.fn();
      var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CardPreview.default, {
          formData: mockFormData,
          onClose: onClose,
          onEdit: onEdit
        })),
        getByText = _render6.getByText;
      var editButton = getByText('Edit');
      _reactNative.fireEvent.press(editButton);
      expect(onEdit).toHaveBeenCalled();
    });
    test('should handle element tap interactions', (0, _asyncToGenerator2.default)(function* () {
      var onElementTap = jest.fn();
      var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CardPreview.default, {
          formData: mockFormData,
          onClose: jest.fn(),
          onEdit: jest.fn(),
          onElementTap: onElementTap
        })),
        getByText = _render7.getByText;
      var nameElement = getByText('John Smith');
      _reactNative.fireEvent.press(nameElement);
      yield (0, _reactNative.waitFor)(function () {
        expect(onElementTap).toHaveBeenCalledWith('name', expect.any(Object));
      });
    }));
  });
  describe('Loading and Error States', function () {
    test('should show loading state', function () {
      var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CardPreview.default, {
          formData: mockFormData,
          onClose: jest.fn(),
          onEdit: jest.fn(),
          isLoading: true
        })),
        getByTestId = _render8.getByTestId;
      expect(getByTestId('loading-indicator')).toBeTruthy();
    });
    test('should show error state', function () {
      var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CardPreview.default, {
          formData: mockFormData,
          onClose: jest.fn(),
          onEdit: jest.fn(),
          error: "Failed to load theme"
        })),
        getByText = _render9.getByText;
      expect(getByText('Failed to load theme')).toBeTruthy();
    });
    test('should handle image loading errors', function () {
      var cardWithBadImages = Object.assign({}, mockFormData, {
        basicInfo: Object.assign({}, mockFormData.basicInfo, {
          profilePhoto: 'https://invalid-url.com/photo.jpg',
          companyLogo: 'https://invalid-url.com/logo.png'
        })
      });
      expect(function () {
        (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CardPreview.default, {
          formData: cardWithBadImages,
          onClose: jest.fn(),
          onEdit: jest.fn()
        }));
      }).not.toThrow();
    });
  });
  describe('Performance Optimization', function () {
    test('should memoize theme calculations', function () {
      var spy = jest.spyOn(console, 'log');
      var onClose = jest.fn();
      var onEdit = jest.fn();
      var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CardPreview.default, {
          formData: mockFormData,
          onClose: onClose,
          onEdit: onEdit
        })),
        rerender = _render0.rerender;
      rerender((0, _jsxRuntime.jsx)(_CardPreview.default, {
        formData: mockFormData,
        onClose: onClose,
        onEdit: onEdit
      }));
      expect(spy).not.toHaveBeenCalledWith('Recalculating theme styles');
      spy.mockRestore();
    });
    test('should handle large datasets efficiently', function () {
      var cardWithManyFields = Object.assign({}, mockFormData, {
        customFields: Array.from({
          length: 50
        }, function (_, i) {
          return {
            id: String(i),
            label: `Field ${i}`,
            value: `Value ${i}`,
            type: 'text',
            isPublic: true,
            order: i
          };
        })
      });
      var startTime = performance.now();
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CardPreview.default, {
        formData: cardWithManyFields,
        onClose: jest.fn(),
        onEdit: jest.fn()
      }));
      var endTime = performance.now();
      var renderTime = endTime - startTime;
      expect(renderTime).toBeLessThan(2000);
    });
  });
  describe('Accessibility', function () {
    test('should have proper accessibility labels', function () {
      var _render1 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CardPreview.default, {
          formData: mockFormData,
          onClose: jest.fn(),
          onEdit: jest.fn()
        })),
        getByLabelText = _render1.getByLabelText;
      expect(getByLabelText('Business card preview')).toBeTruthy();
      expect(getByLabelText('Close preview')).toBeTruthy();
      expect(getByLabelText('Edit card')).toBeTruthy();
    });
    test('should support screen reader navigation', function () {
      var _render10 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CardPreview.default, {
          formData: mockFormData,
          onClose: jest.fn(),
          onEdit: jest.fn()
        })),
        getByRole = _render10.getByRole;
      expect(getByRole('button', {
        name: /close/i
      })).toBeTruthy();
      expect(getByRole('button', {
        name: /edit/i
      })).toBeTruthy();
    });
    test('should have proper contrast ratios', function () {
      var contrastRatio = calculateContrastRatio(mockTheme.textColor, mockTheme.backgroundColor);
      expect(contrastRatio).toBeGreaterThan(4.5);
    });
  });
  describe('Export and Sharing', function () {
    test('should capture preview for sharing', (0, _asyncToGenerator2.default)(function* () {
      var onCapture = jest.fn();
      var _render11 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CardPreview.default, {
          formData: mockFormData,
          onClose: jest.fn(),
          onEdit: jest.fn(),
          onCapture: onCapture
        })),
        getByTestId = _render11.getByTestId;
      var viewShot = getByTestId('view-shot');
      expect(viewShot).toBeTruthy();
      (0, _reactNative.fireEvent)(viewShot, 'capture');
      yield (0, _reactNative.waitFor)(function () {
        expect(onCapture).toHaveBeenCalled();
      });
    }));
    test('should handle different export formats', function () {
      var exportFormats = ['png', 'jpg', 'pdf', 'svg'];
      exportFormats.forEach(function (format) {
        expect(function () {
          (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CardPreview.default, {
            formData: mockFormData,
            onClose: jest.fn(),
            onEdit: jest.fn(),
            exportFormat: format
          }));
        }).not.toThrow();
      });
    });
  });
  describe('Advanced Preview Features', function () {
    test('should render multiple card themes simultaneously', function () {
      var themes = ['professional', 'creative', 'minimal', 'tech'];
      themes.forEach(function (themeId) {
        var themedFormData = Object.assign({}, mockFormData, {
          themeId: themeId
        });
        expect(function () {
          (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CardPreview.default, {
            formData: themedFormData,
            onClose: jest.fn(),
            onEdit: jest.fn()
          }));
        }).not.toThrow();
      });
    });
    test('should handle dynamic theme switching', (0, _asyncToGenerator2.default)(function* () {
      var currentTheme = 'professional';
      var onClose = jest.fn();
      var onEdit = jest.fn();
      var _render12 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CardPreview.default, {
          formData: Object.assign({}, mockFormData, {
            themeId: currentTheme
          }),
          onClose: onClose,
          onEdit: onEdit
        })),
        rerender = _render12.rerender,
        getByTestId = _render12.getByTestId;
      currentTheme = 'creative';
      rerender((0, _jsxRuntime.jsx)(_CardPreview.default, {
        formData: Object.assign({}, mockFormData, {
          themeId: currentTheme
        }),
        onClose: onClose,
        onEdit: onEdit
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('card-preview')).toBeTruthy();
      });
    }));
    test('should render card with all custom field types', function () {
      var complexFormData = Object.assign({}, mockFormData, {
        customFields: [{
          id: '1',
          label: 'Website',
          value: 'https://example.com',
          type: 'url',
          isPublic: true,
          order: 1
        }, {
          id: '2',
          label: 'Birthday',
          value: '1990-01-01',
          type: 'date',
          isPublic: true,
          order: 2
        }, {
          id: '3',
          label: 'Years Experience',
          value: '10',
          type: 'number',
          isPublic: true,
          order: 3
        }, {
          id: '4',
          label: 'Skills',
          value: 'React, TypeScript',
          type: 'text',
          isPublic: true,
          order: 4
        }, {
          id: '5',
          label: 'Contact Email',
          value: 'contact@example.com',
          type: 'email',
          isPublic: true,
          order: 5
        }, {
          id: '6',
          label: 'WhatsApp',
          value: '+1234567890',
          type: 'phone',
          isPublic: true,
          order: 6
        }]
      });
      var _render13 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CardPreview.default, {
          formData: complexFormData,
          onClose: jest.fn(),
          onEdit: jest.fn()
        })),
        getByText = _render13.getByText;
      expect(getByText('https://example.com')).toBeTruthy();
      expect(getByText('10')).toBeTruthy();
      expect(getByText('React, TypeScript')).toBeTruthy();
    });
    test('should handle card preview in different orientations', function () {
      var orientations = ['portrait', 'landscape'];
      orientations.forEach(function (orientation) {
        var _render14 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CardPreview.default, {
            formData: mockFormData,
            onClose: jest.fn(),
            onEdit: jest.fn(),
            orientation: orientation
          })),
          getByTestId = _render14.getByTestId;
        expect(getByTestId('card-preview')).toBeTruthy();
      });
    });
    test('should render print preview mode', function () {
      var _render15 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CardPreview.default, {
          formData: mockFormData,
          onClose: jest.fn(),
          onEdit: jest.fn(),
          mode: "print"
        })),
        getByTestId = _render15.getByTestId;
      expect(getByTestId('print-preview')).toBeTruthy();
    });
    test('should render web preview mode', function () {
      var _render16 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CardPreview.default, {
          formData: mockFormData,
          onClose: jest.fn(),
          onEdit: jest.fn(),
          mode: "web"
        })),
        getByTestId = _render16.getByTestId;
      expect(getByTestId('web-preview')).toBeTruthy();
    });
    test('should handle real-time updates', (0, _asyncToGenerator2.default)(function* () {
      var formData = mockFormData;
      var onClose = jest.fn();
      var onEdit = jest.fn();
      var _render17 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CardPreview.default, {
          formData: formData,
          onClose: onClose,
          onEdit: onEdit
        })),
        rerender = _render17.rerender,
        getByText = _render17.getByText;
      expect(getByText('John Smith')).toBeTruthy();
      formData = Object.assign({}, formData, {
        basicInfo: Object.assign({}, formData.basicInfo, {
          name: 'Jane Doe'
        })
      });
      rerender((0, _jsxRuntime.jsx)(_CardPreview.default, {
        formData: formData,
        onClose: onClose,
        onEdit: onEdit
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText('Jane Doe')).toBeTruthy();
      });
    }));
  });
  describe('Card Export Preview', function () {
    test('should generate high-resolution preview for export', (0, _asyncToGenerator2.default)(function* () {
      var exportConfig = {
        format: 'png',
        quality: 1.0,
        width: 1080,
        height: 1920
      };
      var _render18 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CardPreview.default, {
          formData: mockFormData,
          onClose: jest.fn(),
          onEdit: jest.fn(),
          exportConfig: exportConfig
        })),
        getByTestId = _render18.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('high-res-preview')).toBeTruthy();
      });
    }));
    test('should preview different export formats', function () {
      var formats = ['png', 'jpg', 'pdf', 'svg'];
      formats.forEach(function (format) {
        var _render19 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CardPreview.default, {
            formData: mockFormData,
            onClose: jest.fn(),
            onEdit: jest.fn(),
            exportConfig: {
              format: format
            }
          })),
          getByTestId = _render19.getByTestId;
        expect(getByTestId('card-preview')).toBeTruthy();
      });
    });
    test('should handle batch preview for multiple cards', (0, _asyncToGenerator2.default)(function* () {
      var cards = [Object.assign({}, mockFormData, {
        basicInfo: Object.assign({}, mockFormData.basicInfo, {
          name: 'John Smith'
        })
      }), Object.assign({}, mockFormData, {
        basicInfo: Object.assign({}, mockFormData.basicInfo, {
          name: 'Jane Doe'
        })
      }), Object.assign({}, mockFormData, {
        basicInfo: Object.assign({}, mockFormData.basicInfo, {
          name: 'Bob Johnson'
        })
      })];
      var _render20 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(BatchCardPreview, {
          cards: cards,
          onClose: jest.fn(),
          onEdit: jest.fn()
        })),
        getAllByTestId = _render20.getAllByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getAllByTestId('card-preview')).toHaveLength(3);
      });
    }));
  });
  describe('Interactive Preview Elements', function () {
    test('should handle clickable links in preview', function () {
      var _render21 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CardPreview.default, {
          formData: mockFormData,
          onClose: jest.fn(),
          onEdit: jest.fn(),
          interactive: true
        })),
        getByText = _render21.getByText;
      var websiteLink = getByText('https://techstart.com');
      _reactNative.fireEvent.press(websiteLink);
      expect(Linking.openURL).toHaveBeenCalledWith('https://techstart.com');
    });
    test('should handle call action from phone number', function () {
      var _render22 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CardPreview.default, {
          formData: mockFormData,
          onClose: jest.fn(),
          onEdit: jest.fn(),
          interactive: true
        })),
        getByText = _render22.getByText;
      var phoneNumber = getByText('+1-555-123-4567');
      _reactNative.fireEvent.press(phoneNumber);
      expect(Linking.openURL).toHaveBeenCalledWith('tel:+15551234567');
    });
    test('should handle email action', function () {
      var _render23 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CardPreview.default, {
          formData: mockFormData,
          onClose: jest.fn(),
          onEdit: jest.fn(),
          interactive: true
        })),
        getByText = _render23.getByText;
      var email = getByText('john@techstart.com');
      _reactNative.fireEvent.press(email);
      expect(Linking.openURL).toHaveBeenCalledWith('mailto:john@techstart.com');
    });
    test('should handle social media links', function () {
      var socialLinks = [{
        platform: 'linkedin',
        url: 'https://linkedin.com/in/johnsmith'
      }, {
        platform: 'twitter',
        url: 'https://twitter.com/johnsmith'
      }, {
        platform: 'github',
        url: 'https://github.com/johnsmith'
      }];
      socialLinks.forEach(function (_ref1) {
        var platform = _ref1.platform,
          url = _ref1.url;
        var formDataWithSocial = Object.assign({}, mockFormData, {
          socialLinks: Object.assign({}, mockFormData.socialLinks, (0, _defineProperty2.default)({}, platform, url))
        });
        var _render24 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CardPreview.default, {
            formData: formDataWithSocial,
            onClose: jest.fn(),
            onEdit: jest.fn(),
            interactive: true
          })),
          getByTestId = _render24.getByTestId;
        var socialButton = getByTestId(`${platform}-link`);
        _reactNative.fireEvent.press(socialButton);
        expect(Linking.openURL).toHaveBeenCalledWith(url);
      });
    });
  });
  describe('Accessibility', function () {
    test('should have proper accessibility labels', function () {
      var _render25 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CardPreview.default, {
          formData: mockFormData,
          onClose: jest.fn(),
          onEdit: jest.fn()
        })),
        getByLabelText = _render25.getByLabelText;
      expect(getByLabelText('Business card preview')).toBeTruthy();
      expect(getByLabelText('Close preview')).toBeTruthy();
      expect(getByLabelText('Edit card')).toBeTruthy();
    });
    test('should support screen reader navigation', function () {
      var _render26 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CardPreview.default, {
          formData: mockFormData,
          onClose: jest.fn(),
          onEdit: jest.fn()
        })),
        getAllByRole = _render26.getAllByRole;
      var buttons = getAllByRole('button');
      expect(buttons.length).toBeGreaterThan(0);
    });
    test('should have sufficient color contrast', function () {
      var _render27 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CardPreview.default, {
          formData: mockFormData,
          onClose: jest.fn(),
          onEdit: jest.fn(),
          theme: Object.assign({}, mockTheme, {
            highContrast: true
          })
        })),
        getByTestId = _render27.getByTestId;
      expect(getByTestId('card-preview')).toBeTruthy();
    });
  });
  describe('Performance', function () {
    test('should render large cards efficiently', function () {
      var largeFormData = Object.assign({}, mockFormData, {
        customFields: Array.from({
          length: 20
        }, function (_, i) {
          return {
            id: String(i),
            label: `Field ${i}`,
            value: `Value ${i}`,
            type: 'text',
            isPublic: true,
            order: i
          };
        })
      });
      var startTime = Date.now();
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CardPreview.default, {
        formData: largeFormData,
        onClose: jest.fn(),
        onEdit: jest.fn()
      }));
      var renderTime = Date.now() - startTime;
      expect(renderTime).toBeLessThan(1000);
    });
    test('should handle rapid re-renders', (0, _asyncToGenerator2.default)(function* () {
      var counter = 0;
      var _render28 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CardPreview.default, {
          formData: Object.assign({}, mockFormData, {
            basicInfo: Object.assign({}, mockFormData.basicInfo, {
              name: `Name ${counter}`
            })
          }),
          onClose: jest.fn(),
          onEdit: jest.fn()
        })),
        rerender = _render28.rerender;
      for (var i = 0; i < 10; i++) {
        counter++;
        rerender((0, _jsxRuntime.jsx)(_CardPreview.default, {
          formData: Object.assign({}, mockFormData, {
            basicInfo: Object.assign({}, mockFormData.basicInfo, {
              name: `Name ${counter}`
            })
          }),
          onClose: jest.fn(),
          onEdit: jest.fn()
        }));
      }
      expect(counter).toBe(10);
    }));
  });
});
function calculateContrastRatio(foreground, background) {
  return 7;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJPYmplY3QiLCJhc3NpZ24iLCJqZXN0IiwicmVxdWlyZUFjdHVhbCIsIkRpbWVuc2lvbnMiLCJnZXQiLCJmbiIsIndpZHRoIiwiaGVpZ2h0IiwiUGl4ZWxSYXRpbyIsImdldEZvbnRTY2FsZSIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiX3JlZiIsImNoaWxkcmVuIiwicHJvcHMiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyIiwiX2V4Y2x1ZGVkIiwiTW9ja1ZpZXdTaG90IiwiX3JlZjIiLCJfZXhjbHVkZWQyIiwiX2pzeFJ1bnRpbWUiLCJqc3giLCJ0ZXN0SUQiLCJfcmVmMyIsImRhdGEiLCJfZXhjbHVkZWQzIiwiTW9ja1FSQ29kZSIsIl9yZWY0IiwiX2V4Y2x1ZGVkNCIsImpzeHMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9kZWZpbmVQcm9wZXJ0eTIiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJfcmVhY3QiLCJfcmVhY3ROYXRpdmUiLCJfQ2FyZFByZXZpZXciLCJfY2FyZFJlbmRlcmluZyIsIl9yZXF1aXJlIiwiZGVzY3JpYmUiLCJtb2NrVGhlbWUiLCJpZCIsIm5hbWUiLCJwcmltYXJ5Q29sb3IiLCJzZWNvbmRhcnlDb2xvciIsImJhY2tncm91bmRDb2xvciIsInRleHRDb2xvciIsImFjY2VudENvbG9yIiwiZm9udEZhbWlseSIsImhlYWRlckZvbnRTaXplIiwiYm9keUZvbnRTaXplIiwiYm9yZGVyUmFkaXVzIiwicGFkZGluZyIsInNwYWNpbmciLCJtb2NrVGVtcGxhdGUiLCJjYXRlZ29yeSIsImxheW91dCIsImVsZW1lbnRzIiwidHlwZSIsInBvc2l0aW9uIiwieCIsInkiLCJzaXplIiwic3R5bGUiLCJmb250U2l6ZSIsImZvbnRXZWlnaHQiLCJjb2xvciIsImlzVmlzaWJsZSIsImlzUmVxdWlyZWQiLCJpc1BvcHVsYXIiLCJpc1ByZW1pdW0iLCJwcmV2aWV3SW1hZ2UiLCJtb2NrRm9ybURhdGEiLCJiYXNpY0luZm8iLCJ0aXRsZSIsImNvbXBhbnkiLCJlbWFpbCIsInBob25lIiwibG9jYXRpb24iLCJiaW8iLCJwcm9maWxlUGhvdG8iLCJjb21wYW55TG9nbyIsInN0YXJ0dXBJbmZvIiwiZnVuZGluZ1N0YWdlIiwidGVhbVNpemUiLCJpbmR1c3RyeSIsImJ1c2luZXNzTW9kZWwiLCJyZXZlbnVlIiwic2Vla2luZ0Z1bmRpbmciLCJzZWVraW5nVGFsZW50Iiwic2Vla2luZ1BhcnRuZXJzIiwic2Vla2luZ01lbnRvcnMiLCJzb2NpYWxMaW5rcyIsImxpbmtlZGluIiwidHdpdHRlciIsIndlYnNpdGUiLCJnaXRodWIiLCJjdXN0b21GaWVsZHMiLCJsYWJlbCIsInZhbHVlIiwiaWNvbiIsImlzUHVibGljIiwib3JkZXIiLCJ0aGVtZUlkIiwidGVtcGxhdGVJZCIsImlzRGVmYXVsdCIsIm1vY2tCdXNpbmVzc0NhcmQiLCJ1c2VySWQiLCJ0aGVtZSIsInRlbXBsYXRlIiwic2hhcmVDb2RlIiwiaXNBY3RpdmUiLCJjcmVhdGVkQXQiLCJ1cGRhdGVkQXQiLCJsYXN0U2hhcmVkQXQiLCJ0ZXN0Iiwib25DbG9zZSIsIm9uRWRpdCIsIl9yZW5kZXIiLCJyZW5kZXIiLCJmb3JtRGF0YSIsImdldEJ5VGV4dCIsImdldEJ5VGVzdElkIiwiZXhwZWN0IiwidG9CZVRydXRoeSIsIl9yZW5kZXIyIiwiY2FyZCIsIm1pbmltYWxGb3JtRGF0YSIsIl9yZW5kZXIzIiwic3R5bGVkRWxlbWVudCIsImFwcGx5VGhlbWVTdHlsZXMiLCJ0b0JlIiwidmFsaWRhdGVUaGVtZSIsImludmFsaWRUaGVtZSIsImdyYWRpZW50VGhlbWUiLCJncmFkaWVudCIsImNvbG9ycyIsImRpcmVjdGlvbiIsInNoYWRvd1RoZW1lIiwic2hhZG93Iiwib3BhY2l0eSIsIm9mZnNldFgiLCJvZmZzZXRZIiwiYmx1ciIsInBhdHRlcm5UaGVtZSIsInBhdHRlcm4iLCJkaW1lbnNpb25zIiwiY2FsY3VsYXRlQ2FyZERpbWVuc2lvbnMiLCJhc3BlY3RSYXRpbyIsInRvQmVDbG9zZVRvIiwiYnVzaW5lc3NDYXJkIiwicG9zdGNhcmQiLCJmbHllciIsImxhbmRzY2FwZURpbWVuc2lvbnMiLCJsYXlvdXRDYXJkRWxlbWVudHMiLCJ0b0hhdmVMZW5ndGgiLCJsZW5ndGgiLCJ0b3RhbEhlaWdodCIsInRvQmVHcmVhdGVyVGhhbiIsImNvbnRlbnRBcmVhcyIsInRvQmVEZWZpbmVkIiwib3ZlcmxhcHBpbmdUZW1wbGF0ZSIsImhhc092ZXJsYXBzIiwib3ZlcmxhcHBpbmdQYWlycyIsImVsZW1lbnRUeXBlcyIsImZvckVhY2giLCJlbGVtZW50VHlwZSIsImVsZW1lbnQiLCJyZW5kZXJDYXJkV2l0aFRoZW1lIiwibm90IiwidG9UaHJvdyIsImNhcmRXaXRoTWlzc2luZ0ltYWdlcyIsIl9yZW5kZXI0Iiwic2hvd1FSQ29kZSIsImNhcmRXaXRoTWFueVNvY2lhbHMiLCJpbnN0YWdyYW0iLCJmYWNlYm9vayIsInlvdXR1YmUiLCJtb2JpbGVPcHRpbWl6ZWQiLCJvcHRpbWl6ZUNhcmRGb3JEaXNwbGF5IiwidGFibGV0T3B0aW1pemVkIiwiZGVza3RvcE9wdGltaXplZCIsInNjYWxlRmFjdG9yIiwidG9CZUxlc3NUaGFuT3JFcXVhbCIsIm1vY2tSZXR1cm5WYWx1ZSIsIm9wdGltaXplZCIsImRwaVNjYWxlIiwiZm9udFNjYWxlIiwiX3JlbmRlcjUiLCJjbG9zZUJ1dHRvbiIsImZpcmVFdmVudCIsInByZXNzIiwidG9IYXZlQmVlbkNhbGxlZCIsIl9yZW5kZXI2IiwiZWRpdEJ1dHRvbiIsIm9uRWxlbWVudFRhcCIsIl9yZW5kZXI3IiwibmFtZUVsZW1lbnQiLCJ3YWl0Rm9yIiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiLCJhbnkiLCJfcmVuZGVyOCIsImlzTG9hZGluZyIsIl9yZW5kZXI5IiwiZXJyb3IiLCJjYXJkV2l0aEJhZEltYWdlcyIsInNweSIsInNweU9uIiwiY29uc29sZSIsIl9yZW5kZXIwIiwicmVyZW5kZXIiLCJtb2NrUmVzdG9yZSIsImNhcmRXaXRoTWFueUZpZWxkcyIsIkFycmF5IiwiZnJvbSIsIl8iLCJpIiwiU3RyaW5nIiwic3RhcnRUaW1lIiwicGVyZm9ybWFuY2UiLCJub3ciLCJlbmRUaW1lIiwicmVuZGVyVGltZSIsInRvQmVMZXNzVGhhbiIsIl9yZW5kZXIxIiwiZ2V0QnlMYWJlbFRleHQiLCJfcmVuZGVyMTAiLCJnZXRCeVJvbGUiLCJjb250cmFzdFJhdGlvIiwiY2FsY3VsYXRlQ29udHJhc3RSYXRpbyIsIm9uQ2FwdHVyZSIsIl9yZW5kZXIxMSIsInZpZXdTaG90IiwiZXhwb3J0Rm9ybWF0cyIsImZvcm1hdCIsImV4cG9ydEZvcm1hdCIsInRoZW1lcyIsInRoZW1lZEZvcm1EYXRhIiwiY3VycmVudFRoZW1lIiwiX3JlbmRlcjEyIiwiY29tcGxleEZvcm1EYXRhIiwiX3JlbmRlcjEzIiwib3JpZW50YXRpb25zIiwib3JpZW50YXRpb24iLCJfcmVuZGVyMTQiLCJfcmVuZGVyMTUiLCJtb2RlIiwiX3JlbmRlcjE2IiwiX3JlbmRlcjE3IiwiZXhwb3J0Q29uZmlnIiwicXVhbGl0eSIsIl9yZW5kZXIxOCIsImZvcm1hdHMiLCJfcmVuZGVyMTkiLCJjYXJkcyIsIl9yZW5kZXIyMCIsIkJhdGNoQ2FyZFByZXZpZXciLCJnZXRBbGxCeVRlc3RJZCIsIl9yZW5kZXIyMSIsImludGVyYWN0aXZlIiwid2Vic2l0ZUxpbmsiLCJMaW5raW5nIiwib3BlblVSTCIsIl9yZW5kZXIyMiIsInBob25lTnVtYmVyIiwiX3JlbmRlcjIzIiwicGxhdGZvcm0iLCJ1cmwiLCJfcmVmMSIsImZvcm1EYXRhV2l0aFNvY2lhbCIsIl9yZW5kZXIyNCIsInNvY2lhbEJ1dHRvbiIsIl9yZW5kZXIyNSIsIl9yZW5kZXIyNiIsImdldEFsbEJ5Um9sZSIsImJ1dHRvbnMiLCJfcmVuZGVyMjciLCJoaWdoQ29udHJhc3QiLCJsYXJnZUZvcm1EYXRhIiwiRGF0ZSIsImNvdW50ZXIiLCJfcmVuZGVyMjgiLCJmb3JlZ3JvdW5kIiwiYmFja2dyb3VuZCJdLCJzb3VyY2VzIjpbImNhcmRQcmV2aWV3LnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ2FyZCBQcmV2aWV3IFJlbmRlcmluZyBUZXN0c1xuICogXG4gKiBDb21wcmVoZW5zaXZlIHRlc3RzIGZvciBidXNpbmVzcyBjYXJkIHByZXZpZXcgcmVuZGVyaW5nLCB0aGVtZXMsXG4gKiB0ZW1wbGF0ZXMsIGxheW91dCBjYWxjdWxhdGlvbnMsIGFuZCB2aXN1YWwgY29tcG9uZW50cy5cbiAqL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcmVuZGVyLCBmaXJlRXZlbnQsIHdhaXRGb3IgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgeyBWaWV3LCBUZXh0IH0gZnJvbSAncmVhY3QtbmF0aXZlJztcbmltcG9ydCBDYXJkUHJldmlldyBmcm9tICcuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9idXNpbmVzc0NhcmQvcHJldmlldy9DYXJkUHJldmlldyc7XG5pbXBvcnQgeyBcbiAgcmVuZGVyQ2FyZFdpdGhUaGVtZSxcbiAgY2FsY3VsYXRlQ2FyZERpbWVuc2lvbnMsXG4gIGFwcGx5VGhlbWVTdHlsZXMsXG4gIGxheW91dENhcmRFbGVtZW50cyxcbiAgdmFsaWRhdGVUaGVtZSxcbiAgb3B0aW1pemVDYXJkRm9yRGlzcGxheSxcbn0gZnJvbSAnLi4vLi4vLi4vc3JjL3V0aWxzL2NhcmRSZW5kZXJpbmcnO1xuXG5pbXBvcnQge1xuICBCdXNpbmVzc0NhcmQsXG4gIEJ1c2luZXNzQ2FyZEZvcm1EYXRhLFxuICBDYXJkVGhlbWUsXG4gIENhcmRUZW1wbGF0ZSxcbiAgRWxlbWVudFR5cGUsXG59IGZyb20gJy4uLy4uLy4uL3NyYy90eXBlcy9idXNpbmVzc0NhcmQnO1xuXG4vLyBNb2NrIHJlYWN0LW5hdGl2ZSBtb2R1bGVzXG5qZXN0Lm1vY2soJ3JlYWN0LW5hdGl2ZScsICgpID0+ICh7XG4gIC4uLmplc3QucmVxdWlyZUFjdHVhbCgncmVhY3QtbmF0aXZlJyksXG4gIERpbWVuc2lvbnM6IHtcbiAgICBnZXQ6IGplc3QuZm4oKCkgPT4gKHsgd2lkdGg6IDM3NSwgaGVpZ2h0OiA4MTIgfSkpLFxuICB9LFxuICBQaXhlbFJhdGlvOiB7XG4gICAgZ2V0OiBqZXN0LmZuKCgpID0+IDIpLFxuICAgIGdldEZvbnRTY2FsZTogamVzdC5mbigoKSA9PiAxKSxcbiAgfSxcbn0pKTtcblxuLy8gTW9jayBWaWV3U2hvdCBjb21wb25lbnRcbmplc3QubW9jaygncmVhY3QtbmF0aXZlLXZpZXctc2hvdCcsICgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBfX2VzTW9kdWxlOiB0cnVlLFxuICAgIGRlZmF1bHQ6ICh7IGNoaWxkcmVuLCAuLi5wcm9wcyB9OiBhbnkpID0+IHtcbiAgICAgIGNvbnN0IE1vY2tWaWV3U2hvdCA9ICh7IGNoaWxkcmVuLCAuLi5wcm9wcyB9OiBhbnkpID0+IChcbiAgICAgICAgPGRpdiB0ZXN0SUQ9XCJ2aWV3LXNob3RcIiB7Li4ucHJvcHN9PlxuICAgICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAgPC9kaXY+XG4gICAgICApO1xuICAgICAgcmV0dXJuIDxNb2NrVmlld1Nob3Qgey4uLnByb3BzfT57Y2hpbGRyZW59PC9Nb2NrVmlld1Nob3Q+O1xuICAgIH0sXG4gIH07XG59KTtcblxuLy8gTW9jayBRUiBDb2RlIGNvbXBvbmVudFxuamVzdC5tb2NrKCcuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9jb21tb24vUVJDb2RlQ29tcG9uZW50JywgKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIF9fZXNNb2R1bGU6IHRydWUsXG4gICAgZGVmYXVsdDogKHsgZGF0YSwgLi4ucHJvcHMgfTogYW55KSA9PiB7XG4gICAgICBjb25zdCBNb2NrUVJDb2RlID0gKHsgZGF0YSwgLi4ucHJvcHMgfTogYW55KSA9PiAoXG4gICAgICAgIDxkaXYgdGVzdElEPVwicXItY29kZVwiIHsuLi5wcm9wc30+XG4gICAgICAgICAgUVI6IHtkYXRhPy5kYXRhIHx8ICdtb2NrLXFyLWRhdGEnfVxuICAgICAgICA8L2Rpdj5cbiAgICAgICk7XG4gICAgICByZXR1cm4gPE1vY2tRUkNvZGUgZGF0YT17ZGF0YX0gey4uLnByb3BzfSAvPjtcbiAgICB9LFxuICB9O1xufSk7XG5cbmRlc2NyaWJlKCdDYXJkIFByZXZpZXcgUmVuZGVyaW5nJywgKCkgPT4ge1xuICBjb25zdCBtb2NrVGhlbWU6IENhcmRUaGVtZSA9IHtcbiAgICBpZDogJ3Byb2Zlc3Npb25hbC10aGVtZS0xJyxcbiAgICBuYW1lOiAnUHJvZmVzc2lvbmFsIEJsdWUnLFxuICAgIHByaW1hcnlDb2xvcjogJyMzYjgyZjYnLFxuICAgIHNlY29uZGFyeUNvbG9yOiAnIzFlNDBhZicsXG4gICAgYmFja2dyb3VuZENvbG9yOiAnI2ZmZmZmZicsXG4gICAgdGV4dENvbG9yOiAnIzFmMjkzNycsXG4gICAgYWNjZW50Q29sb3I6ICcjMTBiOTgxJyxcbiAgICBmb250RmFtaWx5OiAnSW50ZXInLFxuICAgIGhlYWRlckZvbnRTaXplOiAyNCxcbiAgICBib2R5Rm9udFNpemU6IDE0LFxuICAgIGJvcmRlclJhZGl1czogOCxcbiAgICBwYWRkaW5nOiAxNixcbiAgICBzcGFjaW5nOiA4LFxuICB9O1xuXG4gIGNvbnN0IG1vY2tUZW1wbGF0ZTogQ2FyZFRlbXBsYXRlID0ge1xuICAgIGlkOiAnc3RhcnR1cC10ZW1wbGF0ZS0xJyxcbiAgICBuYW1lOiAnTW9kZXJuIFN0YXJ0dXAnLFxuICAgIGNhdGVnb3J5OiAnc3RhcnR1cCcsXG4gICAgbGF5b3V0OiAnc3RhbmRhcmQnLFxuICAgIGVsZW1lbnRzOiBbXG4gICAgICB7XG4gICAgICAgIGlkOiAnbmFtZS1lbGVtZW50JyxcbiAgICAgICAgdHlwZTogJ25hbWUnLFxuICAgICAgICBwb3NpdGlvbjogeyB4OiAxNiwgeTogMTYgfSxcbiAgICAgICAgc2l6ZTogeyB3aWR0aDogMzAwLCBoZWlnaHQ6IDMyIH0sXG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgZm9udFNpemU6IDI0LFxuICAgICAgICAgIGZvbnRXZWlnaHQ6ICdib2xkJyxcbiAgICAgICAgICBjb2xvcjogJyMxZjI5MzcnLFxuICAgICAgICB9LFxuICAgICAgICBpc1Zpc2libGU6IHRydWUsXG4gICAgICAgIGlzUmVxdWlyZWQ6IHRydWUsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpZDogJ3RpdGxlLWVsZW1lbnQnLFxuICAgICAgICB0eXBlOiAndGl0bGUnLFxuICAgICAgICBwb3NpdGlvbjogeyB4OiAxNiwgeTogNTYgfSxcbiAgICAgICAgc2l6ZTogeyB3aWR0aDogMzAwLCBoZWlnaHQ6IDIwIH0sXG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgZm9udFNpemU6IDE2LFxuICAgICAgICAgIGZvbnRXZWlnaHQ6ICdub3JtYWwnLFxuICAgICAgICAgIGNvbG9yOiAnIzZiNzI4MCcsXG4gICAgICAgIH0sXG4gICAgICAgIGlzVmlzaWJsZTogdHJ1ZSxcbiAgICAgICAgaXNSZXF1aXJlZDogdHJ1ZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGlkOiAnY29tcGFueS1lbGVtZW50JyxcbiAgICAgICAgdHlwZTogJ2NvbXBhbnknLFxuICAgICAgICBwb3NpdGlvbjogeyB4OiAxNiwgeTogODQgfSxcbiAgICAgICAgc2l6ZTogeyB3aWR0aDogMzAwLCBoZWlnaHQ6IDIwIH0sXG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgZm9udFNpemU6IDE0LFxuICAgICAgICAgIGZvbnRXZWlnaHQ6ICc1MDAnLFxuICAgICAgICAgIGNvbG9yOiAnIzM3NDE1MScsXG4gICAgICAgIH0sXG4gICAgICAgIGlzVmlzaWJsZTogdHJ1ZSxcbiAgICAgICAgaXNSZXF1aXJlZDogdHJ1ZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGlkOiAncXItZWxlbWVudCcsXG4gICAgICAgIHR5cGU6ICdxci1jb2RlJyxcbiAgICAgICAgcG9zaXRpb246IHsgeDogMjUwLCB5OiAxMjAgfSxcbiAgICAgICAgc2l6ZTogeyB3aWR0aDogODAsIGhlaWdodDogODAgfSxcbiAgICAgICAgc3R5bGU6IHt9LFxuICAgICAgICBpc1Zpc2libGU6IHRydWUsXG4gICAgICAgIGlzUmVxdWlyZWQ6IGZhbHNlLFxuICAgICAgfSxcbiAgICBdLFxuICAgIGlzUG9wdWxhcjogdHJ1ZSxcbiAgICBpc1ByZW1pdW06IGZhbHNlLFxuICAgIHByZXZpZXdJbWFnZTogJ2h0dHBzOi8vZXhhbXBsZS5jb20vdGVtcGxhdGUtcHJldmlldy5wbmcnLFxuICB9O1xuXG4gIGNvbnN0IG1vY2tGb3JtRGF0YTogQnVzaW5lc3NDYXJkRm9ybURhdGEgPSB7XG4gICAgYmFzaWNJbmZvOiB7XG4gICAgICBuYW1lOiAnSm9obiBTbWl0aCcsXG4gICAgICB0aXRsZTogJ0NFTyAmIEZvdW5kZXInLFxuICAgICAgY29tcGFueTogJ1RlY2hTdGFydCBJbmMuJyxcbiAgICAgIGVtYWlsOiAnam9obkB0ZWNoc3RhcnQuY29tJyxcbiAgICAgIHBob25lOiAnKzEtNTU1LTEyMy00NTY3JyxcbiAgICAgIGxvY2F0aW9uOiAnU2FuIEZyYW5jaXNjbywgQ0EnLFxuICAgICAgYmlvOiAnQnVpbGRpbmcgdGhlIGZ1dHVyZSBvZiB0ZWNobm9sb2d5LicsXG4gICAgICBwcm9maWxlUGhvdG86ICdodHRwczovL2V4YW1wbGUuY29tL3Byb2ZpbGUuanBnJyxcbiAgICAgIGNvbXBhbnlMb2dvOiAnaHR0cHM6Ly9leGFtcGxlLmNvbS9sb2dvLnBuZycsXG4gICAgfSxcbiAgICBzdGFydHVwSW5mbzoge1xuICAgICAgZnVuZGluZ1N0YWdlOiAnc2VlZCcsXG4gICAgICB0ZWFtU2l6ZTogJzExLTI1JyxcbiAgICAgIGluZHVzdHJ5OiBbJ1RlY2hub2xvZ3knLCAnU2FhUyddLFxuICAgICAgYnVzaW5lc3NNb2RlbDogJ2IyYicsXG4gICAgICByZXZlbnVlOiAnMC0xMGsnLFxuICAgICAgc2Vla2luZ0Z1bmRpbmc6IHRydWUsXG4gICAgICBzZWVraW5nVGFsZW50OiB0cnVlLFxuICAgICAgc2Vla2luZ1BhcnRuZXJzOiBmYWxzZSxcbiAgICAgIHNlZWtpbmdNZW50b3JzOiB0cnVlLFxuICAgIH0sXG4gICAgc29jaWFsTGlua3M6IHtcbiAgICAgIGxpbmtlZGluOiAnaHR0cHM6Ly9saW5rZWRpbi5jb20vaW4vam9obnNtaXRoJyxcbiAgICAgIHR3aXR0ZXI6ICdodHRwczovL3R3aXR0ZXIuY29tL2pvaG5zbWl0aCcsXG4gICAgICB3ZWJzaXRlOiAnaHR0cHM6Ly90ZWNoc3RhcnQuY29tJyxcbiAgICAgIGdpdGh1YjogJ2h0dHBzOi8vZ2l0aHViLmNvbS9qb2huc21pdGgnLFxuICAgIH0sXG4gICAgY3VzdG9tRmllbGRzOiBbXG4gICAgICB7XG4gICAgICAgIGlkOiAnMScsXG4gICAgICAgIGxhYmVsOiAnSW52ZXN0bWVudCBGb2N1cycsXG4gICAgICAgIHZhbHVlOiAnQjJCIFNhYVMsIEFJJyxcbiAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICBpY29uOiAn8J+SvCcsXG4gICAgICAgIGlzUHVibGljOiB0cnVlLFxuICAgICAgICBvcmRlcjogMSxcbiAgICAgIH0sXG4gICAgXSxcbiAgICB0aGVtZUlkOiBtb2NrVGhlbWUuaWQsXG4gICAgdGVtcGxhdGVJZDogbW9ja1RlbXBsYXRlLmlkLFxuICAgIGlzRGVmYXVsdDogZmFsc2UsXG4gICAgaXNQdWJsaWM6IHRydWUsXG4gIH07XG5cbiAgY29uc3QgbW9ja0J1c2luZXNzQ2FyZDogQnVzaW5lc3NDYXJkID0ge1xuICAgIGlkOiAnY2FyZC0xMjMnLFxuICAgIHVzZXJJZDogJ3VzZXItNDU2JyxcbiAgICAuLi5tb2NrRm9ybURhdGEsXG4gICAgdGhlbWU6IG1vY2tUaGVtZSxcbiAgICB0ZW1wbGF0ZTogbW9ja1RlbXBsYXRlLFxuICAgIHNoYXJlQ29kZTogJ2FiYzEyM2RlZjQ1NicsXG4gICAgaXNBY3RpdmU6IHRydWUsXG4gICAgY3JlYXRlZEF0OiAnMjAyNC0wMS0xNVQxMDozMDowMFonLFxuICAgIHVwZGF0ZWRBdDogJzIwMjQtMDEtMTVUMTA6MzA6MDBaJyxcbiAgICBsYXN0U2hhcmVkQXQ6ICcyMDI0LTAxLTE1VDE1OjQ1OjAwWicsXG4gIH07XG5cbiAgZGVzY3JpYmUoJ0Jhc2ljIFJlbmRlcmluZycsICgpID0+IHtcbiAgICB0ZXN0KCdzaG91bGQgcmVuZGVyIGNhcmQgcHJldmlldyB3aXRoIGZvcm0gZGF0YScsICgpID0+IHtcbiAgICAgIGNvbnN0IG9uQ2xvc2UgPSBqZXN0LmZuKCk7XG4gICAgICBjb25zdCBvbkVkaXQgPSBqZXN0LmZuKCk7XG5cbiAgICAgIGNvbnN0IHsgZ2V0QnlUZXh0LCBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKFxuICAgICAgICA8Q2FyZFByZXZpZXdcbiAgICAgICAgICBmb3JtRGF0YT17bW9ja0Zvcm1EYXRhfVxuICAgICAgICAgIG9uQ2xvc2U9e29uQ2xvc2V9XG4gICAgICAgICAgb25FZGl0PXtvbkVkaXR9XG4gICAgICAgIC8+XG4gICAgICApO1xuXG4gICAgICBleHBlY3QoZ2V0QnlUZXh0KCdKb2huIFNtaXRoJykpLnRvQmVUcnV0aHkoKTtcbiAgICAgIGV4cGVjdChnZXRCeVRleHQoJ0NFTyAmIEZvdW5kZXInKSkudG9CZVRydXRoeSgpO1xuICAgICAgZXhwZWN0KGdldEJ5VGV4dCgnVGVjaFN0YXJ0IEluYy4nKSkudG9CZVRydXRoeSgpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIHJlbmRlciBjYXJkIHByZXZpZXcgd2l0aCBidXNpbmVzcyBjYXJkIGRhdGEnLCAoKSA9PiB7XG4gICAgICBjb25zdCBvbkNsb3NlID0gamVzdC5mbigpO1xuICAgICAgY29uc3Qgb25FZGl0ID0gamVzdC5mbigpO1xuXG4gICAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKFxuICAgICAgICA8Q2FyZFByZXZpZXdcbiAgICAgICAgICBjYXJkPXttb2NrQnVzaW5lc3NDYXJkfVxuICAgICAgICAgIG9uQ2xvc2U9e29uQ2xvc2V9XG4gICAgICAgICAgb25FZGl0PXtvbkVkaXR9XG4gICAgICAgIC8+XG4gICAgICApO1xuXG4gICAgICBleHBlY3QoZ2V0QnlUZXh0KCdKb2huIFNtaXRoJykpLnRvQmVUcnV0aHkoKTtcbiAgICAgIGV4cGVjdChnZXRCeVRleHQoJ0NFTyAmIEZvdW5kZXInKSkudG9CZVRydXRoeSgpO1xuICAgICAgZXhwZWN0KGdldEJ5VGV4dCgnVGVjaFN0YXJ0IEluYy4nKSkudG9CZVRydXRoeSgpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBtaXNzaW5nIGRhdGEgZ3JhY2VmdWxseScsICgpID0+IHtcbiAgICAgIGNvbnN0IG1pbmltYWxGb3JtRGF0YTogQnVzaW5lc3NDYXJkRm9ybURhdGEgPSB7XG4gICAgICAgIGJhc2ljSW5mbzoge1xuICAgICAgICAgIG5hbWU6ICdKYW5lIERvZScsXG4gICAgICAgICAgdGl0bGU6ICdEZXZlbG9wZXInLFxuICAgICAgICAgIGNvbXBhbnk6ICdEZXZDb3JwJyxcbiAgICAgICAgICBlbWFpbDogJ2phbmVAZGV2Y29ycC5jb20nLFxuICAgICAgICB9LFxuICAgICAgICBzb2NpYWxMaW5rczoge30sXG4gICAgICAgIGN1c3RvbUZpZWxkczogW10sXG4gICAgICAgIHRoZW1lSWQ6ICd0aGVtZS0xJyxcbiAgICAgICAgdGVtcGxhdGVJZDogJ3RlbXBsYXRlLTEnLFxuICAgICAgfTtcblxuICAgICAgY29uc3Qgb25DbG9zZSA9IGplc3QuZm4oKTtcbiAgICAgIGNvbnN0IG9uRWRpdCA9IGplc3QuZm4oKTtcblxuICAgICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlcihcbiAgICAgICAgPENhcmRQcmV2aWV3XG4gICAgICAgICAgZm9ybURhdGE9e21pbmltYWxGb3JtRGF0YX1cbiAgICAgICAgICBvbkNsb3NlPXtvbkNsb3NlfVxuICAgICAgICAgIG9uRWRpdD17b25FZGl0fVxuICAgICAgICAvPlxuICAgICAgKTtcblxuICAgICAgZXhwZWN0KGdldEJ5VGV4dCgnSmFuZSBEb2UnKSkudG9CZVRydXRoeSgpO1xuICAgICAgZXhwZWN0KGdldEJ5VGV4dCgnRGV2ZWxvcGVyJykpLnRvQmVUcnV0aHkoKTtcbiAgICAgIGV4cGVjdChnZXRCeVRleHQoJ0RldkNvcnAnKSkudG9CZVRydXRoeSgpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnVGhlbWUgQXBwbGljYXRpb24nLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIGFwcGx5IHRoZW1lIGNvbG9ycyBjb3JyZWN0bHknLCAoKSA9PiB7XG4gICAgICBjb25zdCBzdHlsZWRFbGVtZW50ID0gYXBwbHlUaGVtZVN0eWxlcyhtb2NrVGhlbWUsICduYW1lJywge1xuICAgICAgICBmb250U2l6ZTogMjQsXG4gICAgICAgIGZvbnRXZWlnaHQ6ICdib2xkJyxcbiAgICAgIH0pO1xuXG4gICAgICBleHBlY3Qoc3R5bGVkRWxlbWVudC5jb2xvcikudG9CZShtb2NrVGhlbWUudGV4dENvbG9yKTtcbiAgICAgIGV4cGVjdChzdHlsZWRFbGVtZW50LmZvbnRGYW1pbHkpLnRvQmUobW9ja1RoZW1lLmZvbnRGYW1pbHkpO1xuICAgICAgZXhwZWN0KHN0eWxlZEVsZW1lbnQuZm9udFNpemUpLnRvQmUoMjQpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIHZhbGlkYXRlIHRoZW1lIHN0cnVjdHVyZScsICgpID0+IHtcbiAgICAgIGV4cGVjdCh2YWxpZGF0ZVRoZW1lKG1vY2tUaGVtZSkpLnRvQmUodHJ1ZSk7XG5cbiAgICAgIGNvbnN0IGludmFsaWRUaGVtZSA9IHsgLi4ubW9ja1RoZW1lLCBwcmltYXJ5Q29sb3I6IG51bGwgfTtcbiAgICAgIGV4cGVjdCh2YWxpZGF0ZVRoZW1lKGludmFsaWRUaGVtZSBhcyBhbnkpKS50b0JlKGZhbHNlKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgdGhlbWUgd2l0aCBncmFkaWVudHMnLCAoKSA9PiB7XG4gICAgICBjb25zdCBncmFkaWVudFRoZW1lOiBDYXJkVGhlbWUgPSB7XG4gICAgICAgIC4uLm1vY2tUaGVtZSxcbiAgICAgICAgZ3JhZGllbnQ6IHtcbiAgICAgICAgICB0eXBlOiAnbGluZWFyJyxcbiAgICAgICAgICBjb2xvcnM6IFsnIzNiODJmNicsICcjMWU0MGFmJ10sXG4gICAgICAgICAgZGlyZWN0aW9uOiA0NSxcbiAgICAgICAgfSxcbiAgICAgIH07XG5cbiAgICAgIGV4cGVjdCh2YWxpZGF0ZVRoZW1lKGdyYWRpZW50VGhlbWUpKS50b0JlKHRydWUpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSB0aGVtZSB3aXRoIHNoYWRvd3MnLCAoKSA9PiB7XG4gICAgICBjb25zdCBzaGFkb3dUaGVtZTogQ2FyZFRoZW1lID0ge1xuICAgICAgICAuLi5tb2NrVGhlbWUsXG4gICAgICAgIHNoYWRvdzoge1xuICAgICAgICAgIGNvbG9yOiAnIzAwMDAwMCcsXG4gICAgICAgICAgb3BhY2l0eTogMC4xLFxuICAgICAgICAgIG9mZnNldFg6IDAsXG4gICAgICAgICAgb2Zmc2V0WTogMixcbiAgICAgICAgICBibHVyOiA0LFxuICAgICAgICB9LFxuICAgICAgfTtcblxuICAgICAgZXhwZWN0KHZhbGlkYXRlVGhlbWUoc2hhZG93VGhlbWUpKS50b0JlKHRydWUpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSB0aGVtZSB3aXRoIHBhdHRlcm5zJywgKCkgPT4ge1xuICAgICAgY29uc3QgcGF0dGVyblRoZW1lOiBDYXJkVGhlbWUgPSB7XG4gICAgICAgIC4uLm1vY2tUaGVtZSxcbiAgICAgICAgcGF0dGVybjoge1xuICAgICAgICAgIHR5cGU6ICdkb3RzJyxcbiAgICAgICAgICBjb2xvcjogJyNlNWU3ZWInLFxuICAgICAgICAgIG9wYWNpdHk6IDAuMyxcbiAgICAgICAgICBzaXplOiA0LFxuICAgICAgICB9LFxuICAgICAgfTtcblxuICAgICAgZXhwZWN0KHZhbGlkYXRlVGhlbWUocGF0dGVyblRoZW1lKSkudG9CZSh0cnVlKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0xheW91dCBDYWxjdWxhdGlvbnMnLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIGNhbGN1bGF0ZSBjYXJkIGRpbWVuc2lvbnMgY29ycmVjdGx5JywgKCkgPT4ge1xuICAgICAgY29uc3QgZGltZW5zaW9ucyA9IGNhbGN1bGF0ZUNhcmREaW1lbnNpb25zKCdidXNpbmVzcy1jYXJkJywgJ3BvcnRyYWl0Jyk7XG5cbiAgICAgIGV4cGVjdChkaW1lbnNpb25zLndpZHRoKS50b0JlKDM1MCk7XG4gICAgICBleHBlY3QoZGltZW5zaW9ucy5oZWlnaHQpLnRvQmUoMjAwKTtcbiAgICAgIGV4cGVjdChkaW1lbnNpb25zLmFzcGVjdFJhdGlvKS50b0JlQ2xvc2VUbygxLjc1KTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBjYWxjdWxhdGUgZGltZW5zaW9ucyBmb3IgZGlmZmVyZW50IGNhcmQgc2l6ZXMnLCAoKSA9PiB7XG4gICAgICBjb25zdCBidXNpbmVzc0NhcmQgPSBjYWxjdWxhdGVDYXJkRGltZW5zaW9ucygnYnVzaW5lc3MtY2FyZCcsICdwb3J0cmFpdCcpO1xuICAgICAgY29uc3QgcG9zdGNhcmQgPSBjYWxjdWxhdGVDYXJkRGltZW5zaW9ucygncG9zdGNhcmQnLCAnbGFuZHNjYXBlJyk7XG4gICAgICBjb25zdCBmbHllciA9IGNhbGN1bGF0ZUNhcmREaW1lbnNpb25zKCdmbHllcicsICdwb3J0cmFpdCcpO1xuXG4gICAgICBleHBlY3QoYnVzaW5lc3NDYXJkLndpZHRoKS50b0JlKDM1MCk7XG4gICAgICBleHBlY3QocG9zdGNhcmQud2lkdGgpLnRvQmUoNDAwKTtcbiAgICAgIGV4cGVjdChmbHllci53aWR0aCkudG9CZSgzMDApO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBsYW5kc2NhcGUgb3JpZW50YXRpb24nLCAoKSA9PiB7XG4gICAgICBjb25zdCBsYW5kc2NhcGVEaW1lbnNpb25zID0gY2FsY3VsYXRlQ2FyZERpbWVuc2lvbnMoJ2J1c2luZXNzLWNhcmQnLCAnbGFuZHNjYXBlJyk7XG5cbiAgICAgIGV4cGVjdChsYW5kc2NhcGVEaW1lbnNpb25zLndpZHRoKS50b0JlKDM1MCk7XG4gICAgICBleHBlY3QobGFuZHNjYXBlRGltZW5zaW9ucy5oZWlnaHQpLnRvQmUoMjAwKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBsYXlvdXQgY2FyZCBlbGVtZW50cyBjb3JyZWN0bHknLCAoKSA9PiB7XG4gICAgICBjb25zdCBsYXlvdXQgPSBsYXlvdXRDYXJkRWxlbWVudHMobW9ja1RlbXBsYXRlLCBtb2NrRm9ybURhdGEpO1xuXG4gICAgICBleHBlY3QobGF5b3V0LmVsZW1lbnRzKS50b0hhdmVMZW5ndGgobW9ja1RlbXBsYXRlLmVsZW1lbnRzLmxlbmd0aCk7XG4gICAgICBleHBlY3QobGF5b3V0LnRvdGFsSGVpZ2h0KS50b0JlR3JlYXRlclRoYW4oMCk7XG4gICAgICBleHBlY3QobGF5b3V0LmNvbnRlbnRBcmVhcykudG9CZURlZmluZWQoKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgb3ZlcmxhcHBpbmcgZWxlbWVudHMnLCAoKSA9PiB7XG4gICAgICBjb25zdCBvdmVybGFwcGluZ1RlbXBsYXRlOiBDYXJkVGVtcGxhdGUgPSB7XG4gICAgICAgIC4uLm1vY2tUZW1wbGF0ZSxcbiAgICAgICAgZWxlbWVudHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZDogJ2VsZW1lbnQxJyxcbiAgICAgICAgICAgIHR5cGU6ICduYW1lJyxcbiAgICAgICAgICAgIHBvc2l0aW9uOiB7IHg6IDEwLCB5OiAxMCB9LFxuICAgICAgICAgICAgc2l6ZTogeyB3aWR0aDogMTAwLCBoZWlnaHQ6IDUwIH0sXG4gICAgICAgICAgICBzdHlsZToge30sXG4gICAgICAgICAgICBpc1Zpc2libGU6IHRydWUsXG4gICAgICAgICAgICBpc1JlcXVpcmVkOiB0cnVlLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaWQ6ICdlbGVtZW50MicsXG4gICAgICAgICAgICB0eXBlOiAndGl0bGUnLFxuICAgICAgICAgICAgcG9zaXRpb246IHsgeDogNTAsIHk6IDMwIH0sIC8vIE92ZXJsYXBzIHdpdGggZWxlbWVudDFcbiAgICAgICAgICAgIHNpemU6IHsgd2lkdGg6IDEwMCwgaGVpZ2h0OiA1MCB9LFxuICAgICAgICAgICAgc3R5bGU6IHt9LFxuICAgICAgICAgICAgaXNWaXNpYmxlOiB0cnVlLFxuICAgICAgICAgICAgaXNSZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgfTtcblxuICAgICAgY29uc3QgbGF5b3V0ID0gbGF5b3V0Q2FyZEVsZW1lbnRzKG92ZXJsYXBwaW5nVGVtcGxhdGUsIG1vY2tGb3JtRGF0YSk7XG4gICAgICBleHBlY3QobGF5b3V0Lmhhc092ZXJsYXBzKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KGxheW91dC5vdmVybGFwcGluZ1BhaXJzKS50b0hhdmVMZW5ndGgoMSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdWaXN1YWwgRWxlbWVudHMnLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIHJlbmRlciBhbGwgZWxlbWVudCB0eXBlcycsICgpID0+IHtcbiAgICAgIGNvbnN0IGVsZW1lbnRUeXBlczogRWxlbWVudFR5cGVbXSA9IFtcbiAgICAgICAgJ25hbWUnLCAndGl0bGUnLCAnY29tcGFueScsICdlbWFpbCcsICdwaG9uZScsICdsb2NhdGlvbicsICdiaW8nLFxuICAgICAgICAncHJvZmlsZS1waG90bycsICdjb21wYW55LWxvZ28nLCAnc29jaWFsLWxpbmtzJywgJ2N1c3RvbS1maWVsZCcsICdxci1jb2RlJ1xuICAgICAgXTtcblxuICAgICAgZWxlbWVudFR5cGVzLmZvckVhY2goZWxlbWVudFR5cGUgPT4ge1xuICAgICAgICBjb25zdCBlbGVtZW50ID0ge1xuICAgICAgICAgIGlkOiBgJHtlbGVtZW50VHlwZX0tdGVzdGAsXG4gICAgICAgICAgdHlwZTogZWxlbWVudFR5cGUsXG4gICAgICAgICAgcG9zaXRpb246IHsgeDogMCwgeTogMCB9LFxuICAgICAgICAgIHNpemU6IHsgd2lkdGg6IDEwMCwgaGVpZ2h0OiAyMCB9LFxuICAgICAgICAgIHN0eWxlOiB7fSxcbiAgICAgICAgICBpc1Zpc2libGU6IHRydWUsXG4gICAgICAgICAgaXNSZXF1aXJlZDogZmFsc2UsXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gU2hvdWxkIG5vdCB0aHJvdyB3aGVuIHJlbmRlcmluZyBhbnkgZWxlbWVudCB0eXBlXG4gICAgICAgIGV4cGVjdCgoKSA9PiB7XG4gICAgICAgICAgcmVuZGVyQ2FyZFdpdGhUaGVtZShtb2NrRm9ybURhdGEsIG1vY2tUaGVtZSwgW2VsZW1lbnRdKTtcbiAgICAgICAgfSkubm90LnRvVGhyb3coKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBtaXNzaW5nIGltYWdlcyBncmFjZWZ1bGx5JywgKCkgPT4ge1xuICAgICAgY29uc3QgY2FyZFdpdGhNaXNzaW5nSW1hZ2VzOiBCdXNpbmVzc0NhcmRGb3JtRGF0YSA9IHtcbiAgICAgICAgLi4ubW9ja0Zvcm1EYXRhLFxuICAgICAgICBiYXNpY0luZm86IHtcbiAgICAgICAgICAuLi5tb2NrRm9ybURhdGEuYmFzaWNJbmZvLFxuICAgICAgICAgIHByb2ZpbGVQaG90bzogJycsXG4gICAgICAgICAgY29tcGFueUxvZ286ICcnLFxuICAgICAgICB9LFxuICAgICAgfTtcblxuICAgICAgZXhwZWN0KCgpID0+IHtcbiAgICAgICAgcmVuZGVyQ2FyZFdpdGhUaGVtZShjYXJkV2l0aE1pc3NpbmdJbWFnZXMsIG1vY2tUaGVtZSwgbW9ja1RlbXBsYXRlLmVsZW1lbnRzKTtcbiAgICAgIH0pLm5vdC50b1Rocm93KCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgcmVuZGVyIFFSIGNvZGUgZWxlbWVudCcsICgpID0+IHtcbiAgICAgIGNvbnN0IG9uQ2xvc2UgPSBqZXN0LmZuKCk7XG4gICAgICBjb25zdCBvbkVkaXQgPSBqZXN0LmZuKCk7XG5cbiAgICAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQgfSA9IHJlbmRlcihcbiAgICAgICAgPENhcmRQcmV2aWV3XG4gICAgICAgICAgZm9ybURhdGE9e21vY2tGb3JtRGF0YX1cbiAgICAgICAgICBvbkNsb3NlPXtvbkNsb3NlfVxuICAgICAgICAgIG9uRWRpdD17b25FZGl0fVxuICAgICAgICAgIHNob3dRUkNvZGU9e3RydWV9XG4gICAgICAgIC8+XG4gICAgICApO1xuXG4gICAgICBleHBlY3QoZ2V0QnlUZXN0SWQoJ3FyLWNvZGUnKSkudG9CZVRydXRoeSgpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBzb2NpYWwgbGlua3MgcmVuZGVyaW5nJywgKCkgPT4ge1xuICAgICAgY29uc3QgY2FyZFdpdGhNYW55U29jaWFsczogQnVzaW5lc3NDYXJkRm9ybURhdGEgPSB7XG4gICAgICAgIC4uLm1vY2tGb3JtRGF0YSxcbiAgICAgICAgc29jaWFsTGlua3M6IHtcbiAgICAgICAgICBsaW5rZWRpbjogJ2h0dHBzOi8vbGlua2VkaW4uY29tL2luL2pvaG4nLFxuICAgICAgICAgIHR3aXR0ZXI6ICdodHRwczovL3R3aXR0ZXIuY29tL2pvaG4nLFxuICAgICAgICAgIGdpdGh1YjogJ2h0dHBzOi8vZ2l0aHViLmNvbS9qb2huJyxcbiAgICAgICAgICBpbnN0YWdyYW06ICdodHRwczovL2luc3RhZ3JhbS5jb20vam9obicsXG4gICAgICAgICAgZmFjZWJvb2s6ICdodHRwczovL2ZhY2Vib29rLmNvbS9qb2huJyxcbiAgICAgICAgICB5b3V0dWJlOiAnaHR0cHM6Ly95b3V0dWJlLmNvbS9qb2huJyxcbiAgICAgICAgICB3ZWJzaXRlOiAnaHR0cHM6Ly9qb2huZG9lLmNvbScsXG4gICAgICAgIH0sXG4gICAgICB9O1xuXG4gICAgICBleHBlY3QoKCkgPT4ge1xuICAgICAgICByZW5kZXJDYXJkV2l0aFRoZW1lKGNhcmRXaXRoTWFueVNvY2lhbHMsIG1vY2tUaGVtZSwgbW9ja1RlbXBsYXRlLmVsZW1lbnRzKTtcbiAgICAgIH0pLm5vdC50b1Rocm93KCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdSZXNwb25zaXZlIERlc2lnbicsICgpID0+IHtcbiAgICB0ZXN0KCdzaG91bGQgb3B0aW1pemUgY2FyZCBmb3IgZGlmZmVyZW50IHNjcmVlbiBzaXplcycsICgpID0+IHtcbiAgICAgIGNvbnN0IG1vYmlsZU9wdGltaXplZCA9IG9wdGltaXplQ2FyZEZvckRpc3BsYXkobW9ja0Zvcm1EYXRhLCBtb2NrVGhlbWUsICdtb2JpbGUnKTtcbiAgICAgIGNvbnN0IHRhYmxldE9wdGltaXplZCA9IG9wdGltaXplQ2FyZEZvckRpc3BsYXkobW9ja0Zvcm1EYXRhLCBtb2NrVGhlbWUsICd0YWJsZXQnKTtcbiAgICAgIGNvbnN0IGRlc2t0b3BPcHRpbWl6ZWQgPSBvcHRpbWl6ZUNhcmRGb3JEaXNwbGF5KG1vY2tGb3JtRGF0YSwgbW9ja1RoZW1lLCAnZGVza3RvcCcpO1xuXG4gICAgICBleHBlY3QobW9iaWxlT3B0aW1pemVkLnNjYWxlRmFjdG9yKS50b0JlTGVzc1RoYW5PckVxdWFsKDEpO1xuICAgICAgZXhwZWN0KHRhYmxldE9wdGltaXplZC5zY2FsZUZhY3RvcikudG9CZUxlc3NUaGFuT3JFcXVhbCgxLjIpO1xuICAgICAgZXhwZWN0KGRlc2t0b3BPcHRpbWl6ZWQuc2NhbGVGYWN0b3IpLnRvQmVMZXNzVGhhbk9yRXF1YWwoMS41KTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgaGlnaCBEUEkgZGlzcGxheXMnLCAoKSA9PiB7XG4gICAgICAocmVxdWlyZSgncmVhY3QtbmF0aXZlJykuUGl4ZWxSYXRpby5nZXQgYXMgamVzdC5Nb2NrKS5tb2NrUmV0dXJuVmFsdWUoMyk7XG5cbiAgICAgIGNvbnN0IG9wdGltaXplZCA9IG9wdGltaXplQ2FyZEZvckRpc3BsYXkobW9ja0Zvcm1EYXRhLCBtb2NrVGhlbWUsICdtb2JpbGUnKTtcbiAgICAgIGV4cGVjdChvcHRpbWl6ZWQuZHBpU2NhbGUpLnRvQmUoMyk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgYWRqdXN0IGZvciBmb250IHNjYWxpbmcnLCAoKSA9PiB7XG4gICAgICAocmVxdWlyZSgncmVhY3QtbmF0aXZlJykuUGl4ZWxSYXRpby5nZXRGb250U2NhbGUgYXMgamVzdC5Nb2NrKS5tb2NrUmV0dXJuVmFsdWUoMS4zKTtcblxuICAgICAgY29uc3Qgb3B0aW1pemVkID0gb3B0aW1pemVDYXJkRm9yRGlzcGxheShtb2NrRm9ybURhdGEsIG1vY2tUaGVtZSwgJ21vYmlsZScpO1xuICAgICAgZXhwZWN0KG9wdGltaXplZC5mb250U2NhbGUpLnRvQmUoMS4zKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0ludGVyYWN0aW9uIEhhbmRsaW5nJywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgY2xvc2UgYnV0dG9uIHByZXNzJywgKCkgPT4ge1xuICAgICAgY29uc3Qgb25DbG9zZSA9IGplc3QuZm4oKTtcbiAgICAgIGNvbnN0IG9uRWRpdCA9IGplc3QuZm4oKTtcblxuICAgICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlcihcbiAgICAgICAgPENhcmRQcmV2aWV3XG4gICAgICAgICAgZm9ybURhdGE9e21vY2tGb3JtRGF0YX1cbiAgICAgICAgICBvbkNsb3NlPXtvbkNsb3NlfVxuICAgICAgICAgIG9uRWRpdD17b25FZGl0fVxuICAgICAgICAvPlxuICAgICAgKTtcblxuICAgICAgY29uc3QgY2xvc2VCdXR0b24gPSBnZXRCeVRleHQoJ0Nsb3NlJyk7XG4gICAgICBmaXJlRXZlbnQucHJlc3MoY2xvc2VCdXR0b24pO1xuXG4gICAgICBleHBlY3Qob25DbG9zZSkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBlZGl0IGJ1dHRvbiBwcmVzcycsICgpID0+IHtcbiAgICAgIGNvbnN0IG9uQ2xvc2UgPSBqZXN0LmZuKCk7XG4gICAgICBjb25zdCBvbkVkaXQgPSBqZXN0LmZuKCk7XG5cbiAgICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoXG4gICAgICAgIDxDYXJkUHJldmlld1xuICAgICAgICAgIGZvcm1EYXRhPXttb2NrRm9ybURhdGF9XG4gICAgICAgICAgb25DbG9zZT17b25DbG9zZX1cbiAgICAgICAgICBvbkVkaXQ9e29uRWRpdH1cbiAgICAgICAgLz5cbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IGVkaXRCdXR0b24gPSBnZXRCeVRleHQoJ0VkaXQnKTtcbiAgICAgIGZpcmVFdmVudC5wcmVzcyhlZGl0QnV0dG9uKTtcblxuICAgICAgZXhwZWN0KG9uRWRpdCkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBlbGVtZW50IHRhcCBpbnRlcmFjdGlvbnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBvbkVsZW1lbnRUYXAgPSBqZXN0LmZuKCk7XG4gICAgICBcbiAgICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoXG4gICAgICAgIDxDYXJkUHJldmlld1xuICAgICAgICAgIGZvcm1EYXRhPXttb2NrRm9ybURhdGF9XG4gICAgICAgICAgb25DbG9zZT17amVzdC5mbigpfVxuICAgICAgICAgIG9uRWRpdD17amVzdC5mbigpfVxuICAgICAgICAgIG9uRWxlbWVudFRhcD17b25FbGVtZW50VGFwfVxuICAgICAgICAvPlxuICAgICAgKTtcblxuICAgICAgY29uc3QgbmFtZUVsZW1lbnQgPSBnZXRCeVRleHQoJ0pvaG4gU21pdGgnKTtcbiAgICAgIGZpcmVFdmVudC5wcmVzcyhuYW1lRWxlbWVudCk7XG5cbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICBleHBlY3Qob25FbGVtZW50VGFwKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnbmFtZScsIGV4cGVjdC5hbnkoT2JqZWN0KSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0xvYWRpbmcgYW5kIEVycm9yIFN0YXRlcycsICgpID0+IHtcbiAgICB0ZXN0KCdzaG91bGQgc2hvdyBsb2FkaW5nIHN0YXRlJywgKCkgPT4ge1xuICAgICAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKFxuICAgICAgICA8Q2FyZFByZXZpZXdcbiAgICAgICAgICBmb3JtRGF0YT17bW9ja0Zvcm1EYXRhfVxuICAgICAgICAgIG9uQ2xvc2U9e2plc3QuZm4oKX1cbiAgICAgICAgICBvbkVkaXQ9e2plc3QuZm4oKX1cbiAgICAgICAgICBpc0xvYWRpbmc9e3RydWV9XG4gICAgICAgIC8+XG4gICAgICApO1xuXG4gICAgICBleHBlY3QoZ2V0QnlUZXN0SWQoJ2xvYWRpbmctaW5kaWNhdG9yJykpLnRvQmVUcnV0aHkoKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBzaG93IGVycm9yIHN0YXRlJywgKCkgPT4ge1xuICAgICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlcihcbiAgICAgICAgPENhcmRQcmV2aWV3XG4gICAgICAgICAgZm9ybURhdGE9e21vY2tGb3JtRGF0YX1cbiAgICAgICAgICBvbkNsb3NlPXtqZXN0LmZuKCl9XG4gICAgICAgICAgb25FZGl0PXtqZXN0LmZuKCl9XG4gICAgICAgICAgZXJyb3I9XCJGYWlsZWQgdG8gbG9hZCB0aGVtZVwiXG4gICAgICAgIC8+XG4gICAgICApO1xuXG4gICAgICBleHBlY3QoZ2V0QnlUZXh0KCdGYWlsZWQgdG8gbG9hZCB0aGVtZScpKS50b0JlVHJ1dGh5KCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIGltYWdlIGxvYWRpbmcgZXJyb3JzJywgKCkgPT4ge1xuICAgICAgY29uc3QgY2FyZFdpdGhCYWRJbWFnZXM6IEJ1c2luZXNzQ2FyZEZvcm1EYXRhID0ge1xuICAgICAgICAuLi5tb2NrRm9ybURhdGEsXG4gICAgICAgIGJhc2ljSW5mbzoge1xuICAgICAgICAgIC4uLm1vY2tGb3JtRGF0YS5iYXNpY0luZm8sXG4gICAgICAgICAgcHJvZmlsZVBob3RvOiAnaHR0cHM6Ly9pbnZhbGlkLXVybC5jb20vcGhvdG8uanBnJyxcbiAgICAgICAgICBjb21wYW55TG9nbzogJ2h0dHBzOi8vaW52YWxpZC11cmwuY29tL2xvZ28ucG5nJyxcbiAgICAgICAgfSxcbiAgICAgIH07XG5cbiAgICAgIGV4cGVjdCgoKSA9PiB7XG4gICAgICAgIHJlbmRlcihcbiAgICAgICAgICA8Q2FyZFByZXZpZXdcbiAgICAgICAgICAgIGZvcm1EYXRhPXtjYXJkV2l0aEJhZEltYWdlc31cbiAgICAgICAgICAgIG9uQ2xvc2U9e2plc3QuZm4oKX1cbiAgICAgICAgICAgIG9uRWRpdD17amVzdC5mbigpfVxuICAgICAgICAgIC8+XG4gICAgICAgICk7XG4gICAgICB9KS5ub3QudG9UaHJvdygpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnUGVyZm9ybWFuY2UgT3B0aW1pemF0aW9uJywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCBtZW1vaXplIHRoZW1lIGNhbGN1bGF0aW9ucycsICgpID0+IHtcbiAgICAgIGNvbnN0IHNweSA9IGplc3Quc3B5T24oY29uc29sZSwgJ2xvZycpO1xuICAgICAgXG4gICAgICAvLyBSZW5kZXIgc2FtZSBjYXJkIG11bHRpcGxlIHRpbWVzXG4gICAgICBjb25zdCBvbkNsb3NlID0gamVzdC5mbigpO1xuICAgICAgY29uc3Qgb25FZGl0ID0gamVzdC5mbigpO1xuXG4gICAgICBjb25zdCB7IHJlcmVuZGVyIH0gPSByZW5kZXIoXG4gICAgICAgIDxDYXJkUHJldmlldyBmb3JtRGF0YT17bW9ja0Zvcm1EYXRhfSBvbkNsb3NlPXtvbkNsb3NlfSBvbkVkaXQ9e29uRWRpdH0gLz5cbiAgICAgICk7XG5cbiAgICAgIHJlcmVuZGVyKFxuICAgICAgICA8Q2FyZFByZXZpZXcgZm9ybURhdGE9e21vY2tGb3JtRGF0YX0gb25DbG9zZT17b25DbG9zZX0gb25FZGl0PXtvbkVkaXR9IC8+XG4gICAgICApO1xuXG4gICAgICAvLyBTaG91bGQgbm90IHJlY2FsY3VsYXRlIHRoZW1lIGlmIGRhdGEgaGFzbid0IGNoYW5nZWRcbiAgICAgIGV4cGVjdChzcHkpLm5vdC50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnUmVjYWxjdWxhdGluZyB0aGVtZSBzdHlsZXMnKTtcbiAgICAgIHNweS5tb2NrUmVzdG9yZSgpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBsYXJnZSBkYXRhc2V0cyBlZmZpY2llbnRseScsICgpID0+IHtcbiAgICAgIGNvbnN0IGNhcmRXaXRoTWFueUZpZWxkczogQnVzaW5lc3NDYXJkRm9ybURhdGEgPSB7XG4gICAgICAgIC4uLm1vY2tGb3JtRGF0YSxcbiAgICAgICAgY3VzdG9tRmllbGRzOiBBcnJheS5mcm9tKHsgbGVuZ3RoOiA1MCB9LCAoXywgaSkgPT4gKHtcbiAgICAgICAgICBpZDogU3RyaW5nKGkpLFxuICAgICAgICAgIGxhYmVsOiBgRmllbGQgJHtpfWAsXG4gICAgICAgICAgdmFsdWU6IGBWYWx1ZSAke2l9YCxcbiAgICAgICAgICB0eXBlOiAndGV4dCcgYXMgY29uc3QsXG4gICAgICAgICAgaXNQdWJsaWM6IHRydWUsXG4gICAgICAgICAgb3JkZXI6IGksXG4gICAgICAgIH0pKSxcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHN0YXJ0VGltZSA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgXG4gICAgICByZW5kZXIoXG4gICAgICAgIDxDYXJkUHJldmlld1xuICAgICAgICAgIGZvcm1EYXRhPXtjYXJkV2l0aE1hbnlGaWVsZHN9XG4gICAgICAgICAgb25DbG9zZT17amVzdC5mbigpfVxuICAgICAgICAgIG9uRWRpdD17amVzdC5mbigpfVxuICAgICAgICAvPlxuICAgICAgKTtcblxuICAgICAgY29uc3QgZW5kVGltZSA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgY29uc3QgcmVuZGVyVGltZSA9IGVuZFRpbWUgLSBzdGFydFRpbWU7XG5cbiAgICAgIC8vIFNob3VsZCByZW5kZXIgd2l0aGluIHJlYXNvbmFibGUgdGltZSAoMiBzZWNvbmRzIGZvciBtYW55IGZpZWxkcylcbiAgICAgIGV4cGVjdChyZW5kZXJUaW1lKS50b0JlTGVzc1RoYW4oMjAwMCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdBY2Nlc3NpYmlsaXR5JywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCBoYXZlIHByb3BlciBhY2Nlc3NpYmlsaXR5IGxhYmVscycsICgpID0+IHtcbiAgICAgIGNvbnN0IHsgZ2V0QnlMYWJlbFRleHQgfSA9IHJlbmRlcihcbiAgICAgICAgPENhcmRQcmV2aWV3XG4gICAgICAgICAgZm9ybURhdGE9e21vY2tGb3JtRGF0YX1cbiAgICAgICAgICBvbkNsb3NlPXtqZXN0LmZuKCl9XG4gICAgICAgICAgb25FZGl0PXtqZXN0LmZuKCl9XG4gICAgICAgIC8+XG4gICAgICApO1xuXG4gICAgICBleHBlY3QoZ2V0QnlMYWJlbFRleHQoJ0J1c2luZXNzIGNhcmQgcHJldmlldycpKS50b0JlVHJ1dGh5KCk7XG4gICAgICBleHBlY3QoZ2V0QnlMYWJlbFRleHQoJ0Nsb3NlIHByZXZpZXcnKSkudG9CZVRydXRoeSgpO1xuICAgICAgZXhwZWN0KGdldEJ5TGFiZWxUZXh0KCdFZGl0IGNhcmQnKSkudG9CZVRydXRoeSgpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIHN1cHBvcnQgc2NyZWVuIHJlYWRlciBuYXZpZ2F0aW9uJywgKCkgPT4ge1xuICAgICAgY29uc3QgeyBnZXRCeVJvbGUgfSA9IHJlbmRlcihcbiAgICAgICAgPENhcmRQcmV2aWV3XG4gICAgICAgICAgZm9ybURhdGE9e21vY2tGb3JtRGF0YX1cbiAgICAgICAgICBvbkNsb3NlPXtqZXN0LmZuKCl9XG4gICAgICAgICAgb25FZGl0PXtqZXN0LmZuKCl9XG4gICAgICAgIC8+XG4gICAgICApO1xuXG4gICAgICBleHBlY3QoZ2V0QnlSb2xlKCdidXR0b24nLCB7IG5hbWU6IC9jbG9zZS9pIH0pKS50b0JlVHJ1dGh5KCk7XG4gICAgICBleHBlY3QoZ2V0QnlSb2xlKCdidXR0b24nLCB7IG5hbWU6IC9lZGl0L2kgfSkpLnRvQmVUcnV0aHkoKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBoYXZlIHByb3BlciBjb250cmFzdCByYXRpb3MnLCAoKSA9PiB7XG4gICAgICBjb25zdCBjb250cmFzdFJhdGlvID0gY2FsY3VsYXRlQ29udHJhc3RSYXRpbyhcbiAgICAgICAgbW9ja1RoZW1lLnRleHRDb2xvcixcbiAgICAgICAgbW9ja1RoZW1lLmJhY2tncm91bmRDb2xvclxuICAgICAgKTtcblxuICAgICAgZXhwZWN0KGNvbnRyYXN0UmF0aW8pLnRvQmVHcmVhdGVyVGhhbig0LjUpOyAvLyBXQ0FHIEFBIHN0YW5kYXJkXG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdFeHBvcnQgYW5kIFNoYXJpbmcnLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIGNhcHR1cmUgcHJldmlldyBmb3Igc2hhcmluZycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG9uQ2FwdHVyZSA9IGplc3QuZm4oKTtcbiAgICAgIFxuICAgICAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKFxuICAgICAgICA8Q2FyZFByZXZpZXdcbiAgICAgICAgICBmb3JtRGF0YT17bW9ja0Zvcm1EYXRhfVxuICAgICAgICAgIG9uQ2xvc2U9e2plc3QuZm4oKX1cbiAgICAgICAgICBvbkVkaXQ9e2plc3QuZm4oKX1cbiAgICAgICAgICBvbkNhcHR1cmU9e29uQ2FwdHVyZX1cbiAgICAgICAgLz5cbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IHZpZXdTaG90ID0gZ2V0QnlUZXN0SWQoJ3ZpZXctc2hvdCcpO1xuICAgICAgZXhwZWN0KHZpZXdTaG90KS50b0JlVHJ1dGh5KCk7XG5cbiAgICAgIC8vIFNpbXVsYXRlIGNhcHR1cmVcbiAgICAgIGZpcmVFdmVudCh2aWV3U2hvdCwgJ2NhcHR1cmUnKTtcbiAgICAgIFxuICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICAgIGV4cGVjdChvbkNhcHR1cmUpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBkaWZmZXJlbnQgZXhwb3J0IGZvcm1hdHMnLCAoKSA9PiB7XG4gICAgICBjb25zdCBleHBvcnRGb3JtYXRzID0gWydwbmcnLCAnanBnJywgJ3BkZicsICdzdmcnXTtcbiAgICAgIFxuICAgICAgZXhwb3J0Rm9ybWF0cy5mb3JFYWNoKGZvcm1hdCA9PiB7XG4gICAgICAgIGV4cGVjdCgoKSA9PiB7XG4gICAgICAgICAgcmVuZGVyKFxuICAgICAgICAgICAgPENhcmRQcmV2aWV3XG4gICAgICAgICAgICAgIGZvcm1EYXRhPXttb2NrRm9ybURhdGF9XG4gICAgICAgICAgICAgIG9uQ2xvc2U9e2plc3QuZm4oKX1cbiAgICAgICAgICAgICAgb25FZGl0PXtqZXN0LmZuKCl9XG4gICAgICAgICAgICAgIGV4cG9ydEZvcm1hdD17Zm9ybWF0IGFzIGFueX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKTtcbiAgICAgICAgfSkubm90LnRvVGhyb3coKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnQWR2YW5jZWQgUHJldmlldyBGZWF0dXJlcycsICgpID0+IHtcbiAgICB0ZXN0KCdzaG91bGQgcmVuZGVyIG11bHRpcGxlIGNhcmQgdGhlbWVzIHNpbXVsdGFuZW91c2x5JywgKCkgPT4ge1xuICAgICAgY29uc3QgdGhlbWVzID0gWydwcm9mZXNzaW9uYWwnLCAnY3JlYXRpdmUnLCAnbWluaW1hbCcsICd0ZWNoJ107XG4gICAgICBcbiAgICAgIHRoZW1lcy5mb3JFYWNoKHRoZW1lSWQgPT4ge1xuICAgICAgICBjb25zdCB0aGVtZWRGb3JtRGF0YSA9IHtcbiAgICAgICAgICAuLi5tb2NrRm9ybURhdGEsXG4gICAgICAgICAgdGhlbWVJZCxcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIGV4cGVjdCgoKSA9PiB7XG4gICAgICAgICAgcmVuZGVyKFxuICAgICAgICAgICAgPENhcmRQcmV2aWV3XG4gICAgICAgICAgICAgIGZvcm1EYXRhPXt0aGVtZWRGb3JtRGF0YX1cbiAgICAgICAgICAgICAgb25DbG9zZT17amVzdC5mbigpfVxuICAgICAgICAgICAgICBvbkVkaXQ9e2plc3QuZm4oKX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKTtcbiAgICAgICAgfSkubm90LnRvVGhyb3coKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBkeW5hbWljIHRoZW1lIHN3aXRjaGluZycsIGFzeW5jICgpID0+IHtcbiAgICAgIGxldCBjdXJyZW50VGhlbWUgPSAncHJvZmVzc2lvbmFsJztcbiAgICAgIGNvbnN0IG9uQ2xvc2UgPSBqZXN0LmZuKCk7XG4gICAgICBjb25zdCBvbkVkaXQgPSBqZXN0LmZuKCk7XG4gICAgICBcbiAgICAgIGNvbnN0IHsgcmVyZW5kZXIsIGdldEJ5VGVzdElkIH0gPSByZW5kZXIoXG4gICAgICAgIDxDYXJkUHJldmlld1xuICAgICAgICAgIGZvcm1EYXRhPXt7Li4ubW9ja0Zvcm1EYXRhLCB0aGVtZUlkOiBjdXJyZW50VGhlbWV9fVxuICAgICAgICAgIG9uQ2xvc2U9e29uQ2xvc2V9XG4gICAgICAgICAgb25FZGl0PXtvbkVkaXR9XG4gICAgICAgIC8+XG4gICAgICApO1xuICAgICAgXG4gICAgICAvLyBTd2l0Y2ggdG8gZGlmZmVyZW50IHRoZW1lXG4gICAgICBjdXJyZW50VGhlbWUgPSAnY3JlYXRpdmUnO1xuICAgICAgcmVyZW5kZXIoXG4gICAgICAgIDxDYXJkUHJldmlld1xuICAgICAgICAgIGZvcm1EYXRhPXt7Li4ubW9ja0Zvcm1EYXRhLCB0aGVtZUlkOiBjdXJyZW50VGhlbWV9fVxuICAgICAgICAgIG9uQ2xvc2U9e29uQ2xvc2V9XG4gICAgICAgICAgb25FZGl0PXtvbkVkaXR9XG4gICAgICAgIC8+XG4gICAgICApO1xuICAgICAgXG4gICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgICAgZXhwZWN0KGdldEJ5VGVzdElkKCdjYXJkLXByZXZpZXcnKSkudG9CZVRydXRoeSgpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgcmVuZGVyIGNhcmQgd2l0aCBhbGwgY3VzdG9tIGZpZWxkIHR5cGVzJywgKCkgPT4ge1xuICAgICAgY29uc3QgY29tcGxleEZvcm1EYXRhOiBCdXNpbmVzc0NhcmRGb3JtRGF0YSA9IHtcbiAgICAgICAgLi4ubW9ja0Zvcm1EYXRhLFxuICAgICAgICBjdXN0b21GaWVsZHM6IFtcbiAgICAgICAgICB7IGlkOiAnMScsIGxhYmVsOiAnV2Vic2l0ZScsIHZhbHVlOiAnaHR0cHM6Ly9leGFtcGxlLmNvbScsIHR5cGU6ICd1cmwnLCBpc1B1YmxpYzogdHJ1ZSwgb3JkZXI6IDEgfSxcbiAgICAgICAgICB7IGlkOiAnMicsIGxhYmVsOiAnQmlydGhkYXknLCB2YWx1ZTogJzE5OTAtMDEtMDEnLCB0eXBlOiAnZGF0ZScsIGlzUHVibGljOiB0cnVlLCBvcmRlcjogMiB9LFxuICAgICAgICAgIHsgaWQ6ICczJywgbGFiZWw6ICdZZWFycyBFeHBlcmllbmNlJywgdmFsdWU6ICcxMCcsIHR5cGU6ICdudW1iZXInLCBpc1B1YmxpYzogdHJ1ZSwgb3JkZXI6IDMgfSxcbiAgICAgICAgICB7IGlkOiAnNCcsIGxhYmVsOiAnU2tpbGxzJywgdmFsdWU6ICdSZWFjdCwgVHlwZVNjcmlwdCcsIHR5cGU6ICd0ZXh0JywgaXNQdWJsaWM6IHRydWUsIG9yZGVyOiA0IH0sXG4gICAgICAgICAgeyBpZDogJzUnLCBsYWJlbDogJ0NvbnRhY3QgRW1haWwnLCB2YWx1ZTogJ2NvbnRhY3RAZXhhbXBsZS5jb20nLCB0eXBlOiAnZW1haWwnLCBpc1B1YmxpYzogdHJ1ZSwgb3JkZXI6IDUgfSxcbiAgICAgICAgICB7IGlkOiAnNicsIGxhYmVsOiAnV2hhdHNBcHAnLCB2YWx1ZTogJysxMjM0NTY3ODkwJywgdHlwZTogJ3Bob25lJywgaXNQdWJsaWM6IHRydWUsIG9yZGVyOiA2IH0sXG4gICAgICAgIF0sXG4gICAgICB9O1xuICAgICAgXG4gICAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKFxuICAgICAgICA8Q2FyZFByZXZpZXdcbiAgICAgICAgICBmb3JtRGF0YT17Y29tcGxleEZvcm1EYXRhfVxuICAgICAgICAgIG9uQ2xvc2U9e2plc3QuZm4oKX1cbiAgICAgICAgICBvbkVkaXQ9e2plc3QuZm4oKX1cbiAgICAgICAgLz5cbiAgICAgICk7XG4gICAgICBcbiAgICAgIGV4cGVjdChnZXRCeVRleHQoJ2h0dHBzOi8vZXhhbXBsZS5jb20nKSkudG9CZVRydXRoeSgpO1xuICAgICAgZXhwZWN0KGdldEJ5VGV4dCgnMTAnKSkudG9CZVRydXRoeSgpO1xuICAgICAgZXhwZWN0KGdldEJ5VGV4dCgnUmVhY3QsIFR5cGVTY3JpcHQnKSkudG9CZVRydXRoeSgpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBjYXJkIHByZXZpZXcgaW4gZGlmZmVyZW50IG9yaWVudGF0aW9ucycsICgpID0+IHtcbiAgICAgIGNvbnN0IG9yaWVudGF0aW9ucyA9IFsncG9ydHJhaXQnLCAnbGFuZHNjYXBlJ107XG4gICAgICBcbiAgICAgIG9yaWVudGF0aW9ucy5mb3JFYWNoKG9yaWVudGF0aW9uID0+IHtcbiAgICAgICAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKFxuICAgICAgICAgIDxDYXJkUHJldmlld1xuICAgICAgICAgICAgZm9ybURhdGE9e21vY2tGb3JtRGF0YX1cbiAgICAgICAgICAgIG9uQ2xvc2U9e2plc3QuZm4oKX1cbiAgICAgICAgICAgIG9uRWRpdD17amVzdC5mbigpfVxuICAgICAgICAgICAgb3JpZW50YXRpb249e29yaWVudGF0aW9uIGFzICdwb3J0cmFpdCcgfCAnbGFuZHNjYXBlJ31cbiAgICAgICAgICAvPlxuICAgICAgICApO1xuICAgICAgICBcbiAgICAgICAgZXhwZWN0KGdldEJ5VGVzdElkKCdjYXJkLXByZXZpZXcnKSkudG9CZVRydXRoeSgpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgcmVuZGVyIHByaW50IHByZXZpZXcgbW9kZScsICgpID0+IHtcbiAgICAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQgfSA9IHJlbmRlcihcbiAgICAgICAgPENhcmRQcmV2aWV3XG4gICAgICAgICAgZm9ybURhdGE9e21vY2tGb3JtRGF0YX1cbiAgICAgICAgICBvbkNsb3NlPXtqZXN0LmZuKCl9XG4gICAgICAgICAgb25FZGl0PXtqZXN0LmZuKCl9XG4gICAgICAgICAgbW9kZT1cInByaW50XCJcbiAgICAgICAgLz5cbiAgICAgICk7XG4gICAgICBcbiAgICAgIGV4cGVjdChnZXRCeVRlc3RJZCgncHJpbnQtcHJldmlldycpKS50b0JlVHJ1dGh5KCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgcmVuZGVyIHdlYiBwcmV2aWV3IG1vZGUnLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IGdldEJ5VGVzdElkIH0gPSByZW5kZXIoXG4gICAgICAgIDxDYXJkUHJldmlld1xuICAgICAgICAgIGZvcm1EYXRhPXttb2NrRm9ybURhdGF9XG4gICAgICAgICAgb25DbG9zZT17amVzdC5mbigpfVxuICAgICAgICAgIG9uRWRpdD17amVzdC5mbigpfVxuICAgICAgICAgIG1vZGU9XCJ3ZWJcIlxuICAgICAgICAvPlxuICAgICAgKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KGdldEJ5VGVzdElkKCd3ZWItcHJldmlldycpKS50b0JlVHJ1dGh5KCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIHJlYWwtdGltZSB1cGRhdGVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbGV0IGZvcm1EYXRhID0gbW9ja0Zvcm1EYXRhO1xuICAgICAgY29uc3Qgb25DbG9zZSA9IGplc3QuZm4oKTtcbiAgICAgIGNvbnN0IG9uRWRpdCA9IGplc3QuZm4oKTtcbiAgICAgIFxuICAgICAgY29uc3QgeyByZXJlbmRlciwgZ2V0QnlUZXh0IH0gPSByZW5kZXIoXG4gICAgICAgIDxDYXJkUHJldmlld1xuICAgICAgICAgIGZvcm1EYXRhPXtmb3JtRGF0YX1cbiAgICAgICAgICBvbkNsb3NlPXtvbkNsb3NlfVxuICAgICAgICAgIG9uRWRpdD17b25FZGl0fVxuICAgICAgICAvPlxuICAgICAgKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KGdldEJ5VGV4dCgnSm9obiBTbWl0aCcpKS50b0JlVHJ1dGh5KCk7XG4gICAgICBcbiAgICAgIC8vIFVwZGF0ZSBuYW1lXG4gICAgICBmb3JtRGF0YSA9IHtcbiAgICAgICAgLi4uZm9ybURhdGEsXG4gICAgICAgIGJhc2ljSW5mbzoge1xuICAgICAgICAgIC4uLmZvcm1EYXRhLmJhc2ljSW5mbyxcbiAgICAgICAgICBuYW1lOiAnSmFuZSBEb2UnLFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICAgIFxuICAgICAgcmVyZW5kZXIoXG4gICAgICAgIDxDYXJkUHJldmlld1xuICAgICAgICAgIGZvcm1EYXRhPXtmb3JtRGF0YX1cbiAgICAgICAgICBvbkNsb3NlPXtvbkNsb3NlfVxuICAgICAgICAgIG9uRWRpdD17b25FZGl0fVxuICAgICAgICAvPlxuICAgICAgKTtcbiAgICAgIFxuICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICAgIGV4cGVjdChnZXRCeVRleHQoJ0phbmUgRG9lJykpLnRvQmVUcnV0aHkoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnQ2FyZCBFeHBvcnQgUHJldmlldycsICgpID0+IHtcbiAgICB0ZXN0KCdzaG91bGQgZ2VuZXJhdGUgaGlnaC1yZXNvbHV0aW9uIHByZXZpZXcgZm9yIGV4cG9ydCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGV4cG9ydENvbmZpZyA9IHtcbiAgICAgICAgZm9ybWF0OiAncG5nJyxcbiAgICAgICAgcXVhbGl0eTogMS4wLFxuICAgICAgICB3aWR0aDogMTA4MCxcbiAgICAgICAgaGVpZ2h0OiAxOTIwLFxuICAgICAgfTtcbiAgICAgIFxuICAgICAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKFxuICAgICAgICA8Q2FyZFByZXZpZXdcbiAgICAgICAgICBmb3JtRGF0YT17bW9ja0Zvcm1EYXRhfVxuICAgICAgICAgIG9uQ2xvc2U9e2plc3QuZm4oKX1cbiAgICAgICAgICBvbkVkaXQ9e2plc3QuZm4oKX1cbiAgICAgICAgICBleHBvcnRDb25maWc9e2V4cG9ydENvbmZpZ31cbiAgICAgICAgLz5cbiAgICAgICk7XG4gICAgICBcbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICBleHBlY3QoZ2V0QnlUZXN0SWQoJ2hpZ2gtcmVzLXByZXZpZXcnKSkudG9CZVRydXRoeSgpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgcHJldmlldyBkaWZmZXJlbnQgZXhwb3J0IGZvcm1hdHMnLCAoKSA9PiB7XG4gICAgICBjb25zdCBmb3JtYXRzID0gWydwbmcnLCAnanBnJywgJ3BkZicsICdzdmcnXTtcbiAgICAgIFxuICAgICAgZm9ybWF0cy5mb3JFYWNoKGZvcm1hdCA9PiB7XG4gICAgICAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQgfSA9IHJlbmRlcihcbiAgICAgICAgICA8Q2FyZFByZXZpZXdcbiAgICAgICAgICAgIGZvcm1EYXRhPXttb2NrRm9ybURhdGF9XG4gICAgICAgICAgICBvbkNsb3NlPXtqZXN0LmZuKCl9XG4gICAgICAgICAgICBvbkVkaXQ9e2plc3QuZm4oKX1cbiAgICAgICAgICAgIGV4cG9ydENvbmZpZz17eyBmb3JtYXQgfX1cbiAgICAgICAgICAvPlxuICAgICAgICApO1xuICAgICAgICBcbiAgICAgICAgZXhwZWN0KGdldEJ5VGVzdElkKCdjYXJkLXByZXZpZXcnKSkudG9CZVRydXRoeSgpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIGJhdGNoIHByZXZpZXcgZm9yIG11bHRpcGxlIGNhcmRzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgY2FyZHMgPSBbXG4gICAgICAgIHsgLi4ubW9ja0Zvcm1EYXRhLCBiYXNpY0luZm86IHsgLi4ubW9ja0Zvcm1EYXRhLmJhc2ljSW5mbywgbmFtZTogJ0pvaG4gU21pdGgnIH0gfSxcbiAgICAgICAgeyAuLi5tb2NrRm9ybURhdGEsIGJhc2ljSW5mbzogeyAuLi5tb2NrRm9ybURhdGEuYmFzaWNJbmZvLCBuYW1lOiAnSmFuZSBEb2UnIH0gfSxcbiAgICAgICAgeyAuLi5tb2NrRm9ybURhdGEsIGJhc2ljSW5mbzogeyAuLi5tb2NrRm9ybURhdGEuYmFzaWNJbmZvLCBuYW1lOiAnQm9iIEpvaG5zb24nIH0gfSxcbiAgICAgIF07XG4gICAgICBcbiAgICAgIGNvbnN0IHsgZ2V0QWxsQnlUZXN0SWQgfSA9IHJlbmRlcihcbiAgICAgICAgPEJhdGNoQ2FyZFByZXZpZXdcbiAgICAgICAgICBjYXJkcz17Y2FyZHN9XG4gICAgICAgICAgb25DbG9zZT17amVzdC5mbigpfVxuICAgICAgICAgIG9uRWRpdD17amVzdC5mbigpfVxuICAgICAgICAvPlxuICAgICAgKTtcbiAgICAgIFxuICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICAgIGV4cGVjdChnZXRBbGxCeVRlc3RJZCgnY2FyZC1wcmV2aWV3JykpLnRvSGF2ZUxlbmd0aCgzKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnSW50ZXJhY3RpdmUgUHJldmlldyBFbGVtZW50cycsICgpID0+IHtcbiAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIGNsaWNrYWJsZSBsaW5rcyBpbiBwcmV2aWV3JywgKCkgPT4ge1xuICAgICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlcihcbiAgICAgICAgPENhcmRQcmV2aWV3XG4gICAgICAgICAgZm9ybURhdGE9e21vY2tGb3JtRGF0YX1cbiAgICAgICAgICBvbkNsb3NlPXtqZXN0LmZuKCl9XG4gICAgICAgICAgb25FZGl0PXtqZXN0LmZuKCl9XG4gICAgICAgICAgaW50ZXJhY3RpdmU9e3RydWV9XG4gICAgICAgIC8+XG4gICAgICApO1xuICAgICAgXG4gICAgICBjb25zdCB3ZWJzaXRlTGluayA9IGdldEJ5VGV4dCgnaHR0cHM6Ly90ZWNoc3RhcnQuY29tJyk7XG4gICAgICBmaXJlRXZlbnQucHJlc3Mod2Vic2l0ZUxpbmspO1xuICAgICAgXG4gICAgICAvLyBTaG91bGQgaGF2ZSBvcGVuZWQgbGlua1xuICAgICAgZXhwZWN0KExpbmtpbmcub3BlblVSTCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ2h0dHBzOi8vdGVjaHN0YXJ0LmNvbScpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBjYWxsIGFjdGlvbiBmcm9tIHBob25lIG51bWJlcicsICgpID0+IHtcbiAgICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoXG4gICAgICAgIDxDYXJkUHJldmlld1xuICAgICAgICAgIGZvcm1EYXRhPXttb2NrRm9ybURhdGF9XG4gICAgICAgICAgb25DbG9zZT17amVzdC5mbigpfVxuICAgICAgICAgIG9uRWRpdD17amVzdC5mbigpfVxuICAgICAgICAgIGludGVyYWN0aXZlPXt0cnVlfVxuICAgICAgICAvPlxuICAgICAgKTtcbiAgICAgIFxuICAgICAgY29uc3QgcGhvbmVOdW1iZXIgPSBnZXRCeVRleHQoJysxLTU1NS0xMjMtNDU2NycpO1xuICAgICAgZmlyZUV2ZW50LnByZXNzKHBob25lTnVtYmVyKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KExpbmtpbmcub3BlblVSTCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ3RlbDorMTU1NTEyMzQ1NjcnKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgZW1haWwgYWN0aW9uJywgKCkgPT4ge1xuICAgICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlcihcbiAgICAgICAgPENhcmRQcmV2aWV3XG4gICAgICAgICAgZm9ybURhdGE9e21vY2tGb3JtRGF0YX1cbiAgICAgICAgICBvbkNsb3NlPXtqZXN0LmZuKCl9XG4gICAgICAgICAgb25FZGl0PXtqZXN0LmZuKCl9XG4gICAgICAgICAgaW50ZXJhY3RpdmU9e3RydWV9XG4gICAgICAgIC8+XG4gICAgICApO1xuICAgICAgXG4gICAgICBjb25zdCBlbWFpbCA9IGdldEJ5VGV4dCgnam9obkB0ZWNoc3RhcnQuY29tJyk7XG4gICAgICBmaXJlRXZlbnQucHJlc3MoZW1haWwpO1xuICAgICAgXG4gICAgICBleHBlY3QoTGlua2luZy5vcGVuVVJMKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnbWFpbHRvOmpvaG5AdGVjaHN0YXJ0LmNvbScpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBzb2NpYWwgbWVkaWEgbGlua3MnLCAoKSA9PiB7XG4gICAgICBjb25zdCBzb2NpYWxMaW5rcyA9IFtcbiAgICAgICAgeyBwbGF0Zm9ybTogJ2xpbmtlZGluJywgdXJsOiAnaHR0cHM6Ly9saW5rZWRpbi5jb20vaW4vam9obnNtaXRoJyB9LFxuICAgICAgICB7IHBsYXRmb3JtOiAndHdpdHRlcicsIHVybDogJ2h0dHBzOi8vdHdpdHRlci5jb20vam9obnNtaXRoJyB9LFxuICAgICAgICB7IHBsYXRmb3JtOiAnZ2l0aHViJywgdXJsOiAnaHR0cHM6Ly9naXRodWIuY29tL2pvaG5zbWl0aCcgfSxcbiAgICAgIF07XG4gICAgICBcbiAgICAgIHNvY2lhbExpbmtzLmZvckVhY2goKHsgcGxhdGZvcm0sIHVybCB9KSA9PiB7XG4gICAgICAgIGNvbnN0IGZvcm1EYXRhV2l0aFNvY2lhbCA9IHtcbiAgICAgICAgICAuLi5tb2NrRm9ybURhdGEsXG4gICAgICAgICAgc29jaWFsTGlua3M6IHtcbiAgICAgICAgICAgIC4uLm1vY2tGb3JtRGF0YS5zb2NpYWxMaW5rcyxcbiAgICAgICAgICAgIFtwbGF0Zm9ybV06IHVybCxcbiAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKFxuICAgICAgICAgIDxDYXJkUHJldmlld1xuICAgICAgICAgICAgZm9ybURhdGE9e2Zvcm1EYXRhV2l0aFNvY2lhbH1cbiAgICAgICAgICAgIG9uQ2xvc2U9e2plc3QuZm4oKX1cbiAgICAgICAgICAgIG9uRWRpdD17amVzdC5mbigpfVxuICAgICAgICAgICAgaW50ZXJhY3RpdmU9e3RydWV9XG4gICAgICAgICAgLz5cbiAgICAgICAgKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHNvY2lhbEJ1dHRvbiA9IGdldEJ5VGVzdElkKGAke3BsYXRmb3JtfS1saW5rYCk7XG4gICAgICAgIGZpcmVFdmVudC5wcmVzcyhzb2NpYWxCdXR0b24pO1xuICAgICAgICBcbiAgICAgICAgZXhwZWN0KExpbmtpbmcub3BlblVSTCkudG9IYXZlQmVlbkNhbGxlZFdpdGgodXJsKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnQWNjZXNzaWJpbGl0eScsICgpID0+IHtcbiAgICB0ZXN0KCdzaG91bGQgaGF2ZSBwcm9wZXIgYWNjZXNzaWJpbGl0eSBsYWJlbHMnLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IGdldEJ5TGFiZWxUZXh0IH0gPSByZW5kZXIoXG4gICAgICAgIDxDYXJkUHJldmlld1xuICAgICAgICAgIGZvcm1EYXRhPXttb2NrRm9ybURhdGF9XG4gICAgICAgICAgb25DbG9zZT17amVzdC5mbigpfVxuICAgICAgICAgIG9uRWRpdD17amVzdC5mbigpfVxuICAgICAgICAvPlxuICAgICAgKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KGdldEJ5TGFiZWxUZXh0KCdCdXNpbmVzcyBjYXJkIHByZXZpZXcnKSkudG9CZVRydXRoeSgpO1xuICAgICAgZXhwZWN0KGdldEJ5TGFiZWxUZXh0KCdDbG9zZSBwcmV2aWV3JykpLnRvQmVUcnV0aHkoKTtcbiAgICAgIGV4cGVjdChnZXRCeUxhYmVsVGV4dCgnRWRpdCBjYXJkJykpLnRvQmVUcnV0aHkoKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBzdXBwb3J0IHNjcmVlbiByZWFkZXIgbmF2aWdhdGlvbicsICgpID0+IHtcbiAgICAgIGNvbnN0IHsgZ2V0QWxsQnlSb2xlIH0gPSByZW5kZXIoXG4gICAgICAgIDxDYXJkUHJldmlld1xuICAgICAgICAgIGZvcm1EYXRhPXttb2NrRm9ybURhdGF9XG4gICAgICAgICAgb25DbG9zZT17amVzdC5mbigpfVxuICAgICAgICAgIG9uRWRpdD17amVzdC5mbigpfVxuICAgICAgICAvPlxuICAgICAgKTtcbiAgICAgIFxuICAgICAgY29uc3QgYnV0dG9ucyA9IGdldEFsbEJ5Um9sZSgnYnV0dG9uJyk7XG4gICAgICBleHBlY3QoYnV0dG9ucy5sZW5ndGgpLnRvQmVHcmVhdGVyVGhhbigwKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBoYXZlIHN1ZmZpY2llbnQgY29sb3IgY29udHJhc3QnLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IGdldEJ5VGVzdElkIH0gPSByZW5kZXIoXG4gICAgICAgIDxDYXJkUHJldmlld1xuICAgICAgICAgIGZvcm1EYXRhPXttb2NrRm9ybURhdGF9XG4gICAgICAgICAgb25DbG9zZT17amVzdC5mbigpfVxuICAgICAgICAgIG9uRWRpdD17amVzdC5mbigpfVxuICAgICAgICAgIHRoZW1lPXt7IC4uLm1vY2tUaGVtZSwgaGlnaENvbnRyYXN0OiB0cnVlIH19XG4gICAgICAgIC8+XG4gICAgICApO1xuICAgICAgXG4gICAgICBleHBlY3QoZ2V0QnlUZXN0SWQoJ2NhcmQtcHJldmlldycpKS50b0JlVHJ1dGh5KCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdQZXJmb3JtYW5jZScsICgpID0+IHtcbiAgICB0ZXN0KCdzaG91bGQgcmVuZGVyIGxhcmdlIGNhcmRzIGVmZmljaWVudGx5JywgKCkgPT4ge1xuICAgICAgY29uc3QgbGFyZ2VGb3JtRGF0YSA9IHtcbiAgICAgICAgLi4ubW9ja0Zvcm1EYXRhLFxuICAgICAgICBjdXN0b21GaWVsZHM6IEFycmF5LmZyb20oeyBsZW5ndGg6IDIwIH0sIChfLCBpKSA9PiAoe1xuICAgICAgICAgIGlkOiBTdHJpbmcoaSksXG4gICAgICAgICAgbGFiZWw6IGBGaWVsZCAke2l9YCxcbiAgICAgICAgICB2YWx1ZTogYFZhbHVlICR7aX1gLFxuICAgICAgICAgIHR5cGU6ICd0ZXh0JyBhcyBjb25zdCxcbiAgICAgICAgICBpc1B1YmxpYzogdHJ1ZSxcbiAgICAgICAgICBvcmRlcjogaSxcbiAgICAgICAgfSkpLFxuICAgICAgfTtcbiAgICAgIFxuICAgICAgY29uc3Qgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgIFxuICAgICAgcmVuZGVyKFxuICAgICAgICA8Q2FyZFByZXZpZXdcbiAgICAgICAgICBmb3JtRGF0YT17bGFyZ2VGb3JtRGF0YX1cbiAgICAgICAgICBvbkNsb3NlPXtqZXN0LmZuKCl9XG4gICAgICAgICAgb25FZGl0PXtqZXN0LmZuKCl9XG4gICAgICAgIC8+XG4gICAgICApO1xuICAgICAgXG4gICAgICBjb25zdCByZW5kZXJUaW1lID0gRGF0ZS5ub3coKSAtIHN0YXJ0VGltZTtcbiAgICAgIGV4cGVjdChyZW5kZXJUaW1lKS50b0JlTGVzc1RoYW4oMTAwMCk7IC8vIFNob3VsZCByZW5kZXIgaW4gdW5kZXIgMSBzZWNvbmRcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgcmFwaWQgcmUtcmVuZGVycycsIGFzeW5jICgpID0+IHtcbiAgICAgIGxldCBjb3VudGVyID0gMDtcbiAgICAgIGNvbnN0IHsgcmVyZW5kZXIgfSA9IHJlbmRlcihcbiAgICAgICAgPENhcmRQcmV2aWV3XG4gICAgICAgICAgZm9ybURhdGE9e3suLi5tb2NrRm9ybURhdGEsIGJhc2ljSW5mbzogey4uLm1vY2tGb3JtRGF0YS5iYXNpY0luZm8sIG5hbWU6IGBOYW1lICR7Y291bnRlcn1gfX19XG4gICAgICAgICAgb25DbG9zZT17amVzdC5mbigpfVxuICAgICAgICAgIG9uRWRpdD17amVzdC5mbigpfVxuICAgICAgICAvPlxuICAgICAgKTtcbiAgICAgIFxuICAgICAgLy8gUmFwaWQgcmUtcmVuZGVyc1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG4gICAgICAgIGNvdW50ZXIrKztcbiAgICAgICAgcmVyZW5kZXIoXG4gICAgICAgICAgPENhcmRQcmV2aWV3XG4gICAgICAgICAgICBmb3JtRGF0YT17ey4uLm1vY2tGb3JtRGF0YSwgYmFzaWNJbmZvOiB7Li4ubW9ja0Zvcm1EYXRhLmJhc2ljSW5mbywgbmFtZTogYE5hbWUgJHtjb3VudGVyfWB9fX1cbiAgICAgICAgICAgIG9uQ2xvc2U9e2plc3QuZm4oKX1cbiAgICAgICAgICAgIG9uRWRpdD17amVzdC5mbigpfVxuICAgICAgICAgIC8+XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIFNob3VsZCBub3QgY3Jhc2ggb3IgY2F1c2UgbWVtb3J5IGxlYWtzXG4gICAgICBleHBlY3QoY291bnRlcikudG9CZSgxMCk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG5cbi8vIEhlbHBlciBmdW5jdGlvbiBmb3IgY29udHJhc3QgcmF0aW8gY2FsY3VsYXRpb25cbmZ1bmN0aW9uIGNhbGN1bGF0ZUNvbnRyYXN0UmF0aW8oZm9yZWdyb3VuZDogc3RyaW5nLCBiYWNrZ3JvdW5kOiBzdHJpbmcpOiBudW1iZXIge1xuICAvLyBTaW1wbGlmaWVkIGNvbnRyYXN0IHJhdGlvIGNhbGN1bGF0aW9uIGZvciB0ZXN0aW5nXG4gIC8vIEluIHJlYWwgaW1wbGVtZW50YXRpb24sIHRoaXMgd291bGQgY29udmVydCBoZXggdG8gUkdCIGFuZCBjYWxjdWxhdGUgcHJvcGVyIGNvbnRyYXN0XG4gIHJldHVybiA3OyAvLyBNb2NrIHZhbHVl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