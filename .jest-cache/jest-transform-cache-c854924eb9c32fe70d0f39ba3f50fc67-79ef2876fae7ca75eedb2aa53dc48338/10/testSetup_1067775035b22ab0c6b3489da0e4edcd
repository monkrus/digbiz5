7f61d1387d085b3e60714fd9f6f80050
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    getItem: jest.fn(),
    setItem: jest.fn(),
    removeItem: jest.fn(),
    clear: jest.fn(),
    getAllKeys: jest.fn(),
    multiGet: jest.fn(),
    multiSet: jest.fn(),
    multiRemove: jest.fn()
  };
});
_getJestObj().mock('react-native', function () {
  return {
    Alert: {
      alert: jest.fn()
    },
    Platform: {
      OS: 'ios',
      select: jest.fn(function (options) {
        return options.ios;
      })
    },
    Dimensions: {
      get: jest.fn(function () {
        return {
          width: 375,
          height: 812
        };
      }),
      addEventListener: jest.fn(),
      removeEventListener: jest.fn()
    },
    Linking: {
      openURL: jest.fn(function () {
        return Promise.resolve();
      }),
      canOpenURL: jest.fn(function () {
        return Promise.resolve(true);
      })
    },
    Share: {
      share: jest.fn(function () {
        return Promise.resolve();
      })
    },
    DevMenu: {
      reload: jest.fn(),
      addItem: jest.fn()
    },
    TurboModuleRegistry: {
      get: jest.fn(),
      getEnforcing: jest.fn()
    },
    StyleSheet: {
      create: jest.fn(function (styles) {
        return styles;
      })
    },
    View: 'View',
    Text: 'Text',
    ScrollView: 'ScrollView',
    TouchableOpacity: 'TouchableOpacity',
    TouchableHighlight: 'TouchableHighlight',
    TouchableWithoutFeedback: 'TouchableWithoutFeedback',
    FlatList: 'FlatList',
    TextInput: 'TextInput',
    Button: 'Button',
    Image: 'Image',
    ActivityIndicator: 'ActivityIndicator',
    StatusBar: 'StatusBar',
    Modal: 'Modal',
    Switch: 'Switch',
    Picker: 'Picker'
  };
});
_getJestObj().mock('react-native/Libraries/TurboModule/TurboModuleRegistry', function () {
  return {
    get: jest.fn(),
    getEnforcing: jest.fn()
  };
});
_getJestObj().mock('react-native-mmkv', function () {
  return {
    MMKV: jest.fn(function () {
      return mockMMKVInstance;
    })
  };
});
_getJestObj().mock('react-native-permissions', function () {
  return {
    check: jest.fn(),
    request: jest.fn(),
    requestMultiple: jest.fn(),
    openSettings: jest.fn(),
    PERMISSIONS: {
      IOS: {
        CAMERA: 'ios.permission.CAMERA',
        CONTACTS: 'ios.permission.CONTACTS',
        LOCATION_WHEN_IN_USE: 'ios.permission.LOCATION_WHEN_IN_USE',
        MICROPHONE: 'ios.permission.MICROPHONE',
        NOTIFICATIONS: 'ios.permission.NOTIFICATIONS'
      },
      ANDROID: {
        CAMERA: 'android.permission.CAMERA',
        READ_CONTACTS: 'android.permission.READ_CONTACTS',
        ACCESS_FINE_LOCATION: 'android.permission.ACCESS_FINE_LOCATION',
        RECORD_AUDIO: 'android.permission.RECORD_AUDIO',
        POST_NOTIFICATIONS: 'android.permission.POST_NOTIFICATIONS'
      }
    },
    RESULTS: {
      GRANTED: 'granted',
      DENIED: 'denied',
      BLOCKED: 'blocked',
      UNAVAILABLE: 'unavailable'
    }
  };
});
_getJestObj().mock('react-native-vector-icons/MaterialIcons', function () {
  return 'MaterialIcons';
});
_getJestObj().mock('react-native-vector-icons/FontAwesome', function () {
  return 'FontAwesome';
});
_getJestObj().mock('crypto-js', function () {
  return {
    AES: {
      encrypt: jest.fn(function (data) {
        return {
          toString: function toString() {
            return `encrypted_${data}`;
          }
        };
      }),
      decrypt: jest.fn(function (data) {
        return {
          toString: jest.fn(function () {
            return data.replace('encrypted_', '');
          })
        };
      })
    },
    lib: {
      WordArray: {
        random: jest.fn(function () {
          return {
            toString: function toString() {
              return 'random_key';
            }
          };
        })
      }
    },
    enc: {
      Utf8: 'utf8'
    }
  };
});
_getJestObj().mock('../../src/utils/tokenUtils', function () {
  return {
    validateTokens: jest.fn(function () {
      return {
        isValid: true,
        isExpired: false
      };
    }),
    isRefreshTokenValid: jest.fn(function () {
      return true;
    }),
    decodeJWTPayload: jest.fn(),
    isTokenExpired: jest.fn(function () {
      return false;
    }),
    getTokenExpirationTime: jest.fn(),
    getTokenTimeRemaining: jest.fn(),
    getUserIdFromToken: jest.fn(),
    getEmailFromToken: jest.fn(),
    getRolesFromToken: jest.fn(function () {
      return [];
    }),
    formatAuthHeader: jest.fn(),
    getOptimalRefreshTime: jest.fn()
  };
});
_getJestObj().mock('../../src/utils/config', function () {
  return {
    AppConfig: {
      apiUrl: 'https://api.test.com',
      timeout: 10000
    }
  };
});
_getJestObj().mock('../../src/config/env', function () {
  return {
    API_BASE_URL: 'https://api.test.com',
    API_TIMEOUT: 10000
  };
});
_getJestObj().mock('../../src/services/tokenStorage', function () {
  var mockTokenStorage = {
    setTokens: jest.fn(),
    getTokens: jest.fn(),
    removeTokens: jest.fn(),
    clearAll: jest.fn(),
    hasValidTokens: jest.fn(function () {
      return Promise.resolve(false);
    }),
    updateAccessToken: jest.fn(),
    getStorageInfo: jest.fn(function () {
      return {
        hasAccessToken: false,
        hasRefreshToken: false,
        hasEncryptionKey: false,
        storageSize: 0
      };
    })
  };
  return {
    SecureTokenStorage: jest.fn(function () {
      return mockTokenStorage;
    }),
    tokenStorage: mockTokenStorage,
    createTokenStorage: jest.fn(function () {
      return mockTokenStorage;
    })
  };
});
_getJestObj().mock('@react-navigation/native', function () {
  return Object.assign({}, jest.requireActual('@react-navigation/native'), {
    useNavigation: function useNavigation() {
      return {
        navigate: jest.fn(),
        goBack: jest.fn(),
        reset: jest.fn(),
        replace: jest.fn(),
        push: jest.fn(),
        pop: jest.fn(),
        popToTop: jest.fn(),
        setParams: jest.fn(),
        dispatch: jest.fn(),
        isFocused: jest.fn(function () {
          return true;
        }),
        canGoBack: jest.fn(function () {
          return true;
        }),
        getId: jest.fn(function () {
          return 'test-id';
        }),
        getState: jest.fn(),
        getParent: jest.fn(),
        addListener: jest.fn(function () {
          return jest.fn();
        }),
        removeListener: jest.fn()
      };
    },
    useRoute: function useRoute() {
      return {
        key: 'test-route',
        name: 'TestScreen',
        params: {},
        path: undefined
      };
    },
    useFocusEffect: jest.fn()
  });
});
_getJestObj().mock('react-native-safe-area-context', function () {
  return {
    SafeAreaProvider: function SafeAreaProvider(_ref) {
      var children = _ref.children;
      return children;
    },
    SafeAreaView: function SafeAreaView(_ref2) {
      var children = _ref2.children;
      return children;
    },
    useSafeAreaInsets: function useSafeAreaInsets() {
      return {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      };
    },
    useSafeAreaFrame: function useSafeAreaFrame() {
      return {
        x: 0,
        y: 0,
        width: 375,
        height: 812
      };
    }
  };
});
_getJestObj().mock('react-native-gesture-handler', function () {
  return Object.assign({}, jest.requireActual('react-native-gesture-handler'), {
    TouchableOpacity: 'TouchableOpacity',
    TouchableHighlight: 'TouchableHighlight',
    TouchableWithoutFeedback: 'TouchableWithoutFeedback',
    ScrollView: 'ScrollView',
    FlatList: 'FlatList',
    PanGestureHandler: 'PanGestureHandler',
    TapGestureHandler: 'TapGestureHandler',
    State: {
      BEGAN: 'BEGAN',
      FAILED: 'FAILED',
      CANCELLED: 'CANCELLED',
      SUCCEEDED: 'SUCCEEDED',
      END: 'END'
    }
  });
});
_getJestObj().mock('react-native-reanimated', function () {
  return {
    default: {
      View: 'Animated.View',
      Text: 'Animated.Text',
      ScrollView: 'Animated.ScrollView',
      createAnimatedComponent: jest.fn(),
      Value: jest.fn(),
      timing: jest.fn(),
      spring: jest.fn(),
      parallel: jest.fn(),
      sequence: jest.fn(),
      stagger: jest.fn(),
      interpolate: jest.fn()
    },
    Easing: {
      linear: jest.fn(),
      ease: jest.fn(),
      quad: jest.fn(),
      cubic: jest.fn()
    },
    Extrapolate: {
      EXTEND: 'extend',
      CLAMP: 'clamp',
      IDENTITY: 'identity'
    }
  };
});
_getJestObj().mock('react-native-screens', function () {
  return {
    enableScreens: jest.fn(),
    Screen: 'Screen',
    ScreenContainer: 'ScreenContainer'
  };
});
_getJestObj().mock('@react-native-google-signin/google-signin', function () {
  return {
    GoogleSignin: {
      configure: jest.fn(),
      hasPlayServices: jest.fn(function () {
        return Promise.resolve(true);
      }),
      signIn: jest.fn(function () {
        return Promise.resolve({
          user: {
            id: 'test-id',
            name: 'Test User',
            email: 'test@example.com',
            photo: null
          }
        });
      }),
      signInSilently: jest.fn(function () {
        return Promise.resolve();
      }),
      signOut: jest.fn(function () {
        return Promise.resolve();
      }),
      revokeAccess: jest.fn(function () {
        return Promise.resolve();
      }),
      getCurrentUser: jest.fn(function () {
        return Promise.resolve(null);
      }),
      getTokens: jest.fn(function () {
        return Promise.resolve({
          accessToken: 'test-access-token',
          idToken: 'test-id-token'
        });
      })
    },
    statusCodes: {
      SIGN_IN_CANCELLED: 'SIGN_IN_CANCELLED',
      IN_PROGRESS: 'IN_PROGRESS',
      PLAY_SERVICES_NOT_AVAILABLE: 'PLAY_SERVICES_NOT_AVAILABLE'
    }
  };
});
_getJestObj().mock('react-native-linkedin', function () {
  return {
    LinkedInModal: 'LinkedInModal'
  };
});
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
require('react-native-gesture-handler/jestSetup');
var mockMMKVInstance = {
  set: jest.fn(),
  getString: jest.fn(function () {
    return 'mock_key';
  }),
  getNumber: jest.fn(function () {
    return 0;
  }),
  getBoolean: jest.fn(function () {
    return false;
  }),
  contains: jest.fn(function () {
    return false;
  }),
  delete: jest.fn(),
  clearAll: jest.fn(),
  size: 0
};
global.fetch = jest.fn();
global.crypto = {
  getRandomValues: jest.fn(function (array) {
    for (var i = 0; i < array.length; i++) {
      array[i] = Math.floor(Math.random() * 256);
    }
    return array;
  })
};
var originalWarn = console.warn;
var originalError = console.error;
beforeEach(function () {
  console.warn = jest.fn(function (message) {
    if (message.includes('componentWillReceiveProps') || message.includes('componentWillMount') || message.includes('VirtualizedLists should never be nested')) {
      return;
    }
    originalWarn(message);
  });
  console.error = jest.fn(function (message) {
    if (message.includes('Warning: ReactDOM.render is no longer supported') || message.includes('Warning: validateDOMNesting')) {
      return;
    }
    originalError(message);
  });
});
afterEach(function () {
  console.warn = originalWarn;
  console.error = originalError;
});
global.flushPromises = function () {
  return new Promise(setImmediate);
};
global.withTimeout = function (promise) {
  var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5000;
  return Promise.race([promise, new Promise(function (_, reject) {
    return setTimeout(function () {
      return reject(new Error('Test timeout'));
    }, timeout);
  })]);
};
beforeEach(function () {
  jest.useFakeTimers();
});
afterEach(function () {
  jest.useRealTimers();
  jest.clearAllMocks();
  jest.restoreAllMocks();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,