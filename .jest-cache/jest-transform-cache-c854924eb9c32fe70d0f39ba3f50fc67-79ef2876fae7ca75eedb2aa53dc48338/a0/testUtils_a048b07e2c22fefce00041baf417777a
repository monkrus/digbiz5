4d821c7680cb1cd436b11a2e78e7be56
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.withTimeout = exports.waitForAsyncActions = exports.teardownMocks = exports.setupMocks = exports.renderWithProviders = exports.mockUser = exports.mockTokens = exports.mockRoute = exports.mockPermissions = exports.mockOnboardingData = exports.mockNavigation = exports.mockMMKV = exports.mockImagePicker = exports.mockFetchResponse = exports.mockFetchError = exports.mockCryptoJS = exports.mockCrypto = exports.mockAsyncStorage = exports.mockAlert = exports.initialTestState = exports.generateTestUser = exports.generateTestTokens = exports.flushPromises = exports.customMatchers = exports.createTestStore = void 0;
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _reactNative = require("@testing-library/react-native");
var _reactRedux = require("react-redux");
var _native = require("@react-navigation/native");
var _toolkit = require("@reduxjs/toolkit");
var _authSlice = _interopRequireDefault(require("../../src/store/authSlice"));
var _profileSlice = _interopRequireDefault(require("../../src/store/profileSlice"));
var _onboardingSlice = _interopRequireDefault(require("../../src/store/slices/onboardingSlice"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["preloadedState", "store", "withNavigation"];
var mockUser = exports.mockUser = {
  id: 'user123',
  email: 'test@example.com',
  name: 'Test User',
  title: 'Software Engineer',
  company: 'Test Company',
  bio: 'Test bio',
  profilePhoto: 'https://example.com/photo.jpg',
  isVerified: false,
  socialLinks: {
    linkedin: 'https://linkedin.com/in/testuser',
    twitter: null,
    github: null,
    instagram: null,
    facebook: null
  },
  skills: ['React', 'TypeScript', 'Testing'],
  location: 'San Francisco, CA',
  phone: '+1234567890',
  website: 'https://testuser.com',
  isPublic: true,
  createdAt: '2024-01-01T00:00:00Z',
  updatedAt: '2024-01-01T00:00:00Z'
};
var mockTokens = exports.mockTokens = {
  accessToken: 'mock_access_token',
  refreshToken: 'mock_refresh_token',
  expiresIn: 3600,
  tokenType: 'Bearer'
};
var mockOnboardingData = exports.mockOnboardingData = {
  userType: 'founder',
  industry: {
    id: 'software',
    name: 'Software & SaaS',
    category: 'technology',
    keywords: ['software', 'saas', 'platform']
  },
  location: {
    id: 'sf-ca-us',
    city: 'San Francisco',
    country: 'United States',
    timezone: 'America/Los_Angeles'
  },
  timezone: {
    id: 'pst',
    name: 'Pacific Time (PST)',
    offset: '-08:00',
    region: 'North America'
  },
  permissions: {
    contacts: true,
    notifications: true,
    location: false,
    camera: false,
    microphone: false
  },
  completedSteps: 5,
  isCompleted: true
};
var initialTestState = exports.initialTestState = {
  auth: {
    user: null,
    tokens: null,
    isAuthenticated: false,
    isLoading: false,
    error: null,
    lastLoginAt: null,
    loginAttempts: 0,
    isLocked: false,
    lockUntil: null
  },
  profile: {
    profiles: {},
    currentProfile: null,
    isLoading: false,
    error: null,
    uploadProgress: 0,
    lastUpdated: null
  },
  onboarding: {
    userType: null,
    industry: null,
    location: null,
    timezone: null,
    permissions: {
      contacts: false,
      notifications: false,
      location: false,
      camera: false,
      microphone: false
    },
    completedSteps: 0,
    isCompleted: false,
    isLoading: false,
    error: null,
    hasCompletedOnboarding: false,
    currentStep: 0
  }
};
var createTestStore = exports.createTestStore = function createTestStore(preloadedState) {
  return (0, _toolkit.configureStore)({
    reducer: {
      auth: _authSlice.default,
      profile: _profileSlice.default,
      onboarding: _onboardingSlice.default
    },
    preloadedState: preloadedState || initialTestState,
    middleware: function middleware(getDefaultMiddleware) {
      return getDefaultMiddleware({
        serializableCheck: false
      });
    }
  });
};
var renderWithProviders = exports.renderWithProviders = function renderWithProviders(ui) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
    preloadedState = _ref.preloadedState,
    _ref$store = _ref.store,
    store = _ref$store === void 0 ? createTestStore(preloadedState) : _ref$store,
    _ref$withNavigation = _ref.withNavigation,
    withNavigation = _ref$withNavigation === void 0 ? false : _ref$withNavigation,
    renderOptions = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var AllTheProviders = function AllTheProviders(_ref2) {
    var children = _ref2.children;
    var WrappedChildren = (0, _jsxRuntime.jsx)(_reactRedux.Provider, {
      store: store,
      children: children
    });
    if (withNavigation) {
      return (0, _jsxRuntime.jsx)(_native.NavigationContainer, {
        children: WrappedChildren
      });
    }
    return WrappedChildren;
  };
  return Object.assign({
    store: store
  }, (0, _reactNative.render)(ui, Object.assign({
    wrapper: AllTheProviders
  }, renderOptions)));
};
var mockAsyncStorage = exports.mockAsyncStorage = {
  getItem: jest.fn(),
  setItem: jest.fn(),
  removeItem: jest.fn(),
  clear: jest.fn(),
  getAllKeys: jest.fn(),
  multiGet: jest.fn(),
  multiSet: jest.fn(),
  multiRemove: jest.fn()
};
var mockMMKV = exports.mockMMKV = {
  set: jest.fn(),
  getString: jest.fn(),
  getNumber: jest.fn(),
  getBoolean: jest.fn(),
  contains: jest.fn(),
  delete: jest.fn(),
  clearAll: jest.fn(),
  size: 0
};
var mockFetchResponse = exports.mockFetchResponse = function mockFetchResponse(data) {
  var status = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 200;
  return Promise.resolve({
    ok: status >= 200 && status < 300,
    status: status,
    statusText: status === 200 ? 'OK' : 'Error',
    json: function json() {
      return Promise.resolve(data);
    },
    text: function text() {
      return Promise.resolve(JSON.stringify(data));
    },
    headers: new Headers()
  });
};
var mockFetchError = exports.mockFetchError = function mockFetchError() {
  var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Network error';
  return Promise.reject(new Error(message));
};
var mockPermissions = exports.mockPermissions = {
  check: jest.fn(),
  request: jest.fn(),
  requestMultiple: jest.fn(),
  openSettings: jest.fn()
};
var mockImagePicker = exports.mockImagePicker = {
  pickImage: jest.fn(),
  validateImage: jest.fn(),
  compressImage: jest.fn()
};
var mockNavigation = exports.mockNavigation = {
  navigate: jest.fn(),
  goBack: jest.fn(),
  reset: jest.fn(),
  replace: jest.fn(),
  push: jest.fn(),
  pop: jest.fn(),
  popToTop: jest.fn(),
  setParams: jest.fn(),
  dispatch: jest.fn(),
  isFocused: jest.fn(function () {
    return true;
  }),
  canGoBack: jest.fn(function () {
    return true;
  }),
  getId: jest.fn(function () {
    return 'test-id';
  }),
  getState: jest.fn(),
  getParent: jest.fn(),
  addListener: jest.fn(function () {
    return jest.fn();
  }),
  removeListener: jest.fn()
};
var mockRoute = exports.mockRoute = {
  key: 'test-route',
  name: 'TestScreen',
  params: {},
  path: undefined
};
var waitForAsyncActions = exports.waitForAsyncActions = function waitForAsyncActions() {
  return new Promise(function (resolve) {
    setTimeout(resolve, 0);
  });
};
var flushPromises = exports.flushPromises = function flushPromises() {
  return new Promise(function (resolve) {
    setImmediate(resolve);
  });
};
var mockCrypto = exports.mockCrypto = {
  getRandomValues: jest.fn(function (array) {
    for (var i = 0; i < array.length; i++) {
      array[i] = Math.floor(Math.random() * 256);
    }
    return array;
  })
};
var mockCryptoJS = exports.mockCryptoJS = {
  AES: {
    encrypt: jest.fn(function (data) {
      return {
        toString: function toString() {
          return `encrypted_${data}`;
        }
      };
    }),
    decrypt: jest.fn(function (data) {
      return {
        toString: jest.fn(function () {
          return data.replace('encrypted_', '');
        })
      };
    })
  },
  lib: {
    WordArray: {
      random: jest.fn(function () {
        return {
          toString: function toString() {
            return 'random_key';
          }
        };
      })
    }
  },
  enc: {
    Utf8: 'utf8'
  }
};
var generateTestUser = exports.generateTestUser = function generateTestUser() {
  var overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return Object.assign({}, mockUser, overrides);
};
var generateTestTokens = exports.generateTestTokens = function generateTestTokens() {
  var overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return Object.assign({}, mockTokens, overrides);
};
var mockAlert = exports.mockAlert = {
  alert: jest.fn()
};
var setupMocks = exports.setupMocks = function setupMocks() {
  jest.clearAllMocks();
  global.fetch = jest.fn();
  global.crypto = mockCrypto;
  jest.useFakeTimers();
};
var teardownMocks = exports.teardownMocks = function teardownMocks() {
  jest.useRealTimers();
  jest.restoreAllMocks();
};
var customMatchers = exports.customMatchers = {
  toBeAuthenticatedUser: function toBeAuthenticatedUser(received) {
    var pass = received && received.isAuthenticated && received.user && received.tokens;
    return {
      message: function message() {
        return `expected user to be authenticated`;
      },
      pass: pass
    };
  },
  toHaveValidTokens: function toHaveValidTokens(received) {
    var pass = received && received.accessToken && received.refreshToken && received.expiresIn > 0;
    return {
      message: function message() {
        return `expected tokens to be valid`;
      },
      pass: pass
    };
  },
  toBeValidProfile: function toBeValidProfile(received) {
    var pass = received && received.name && received.email && received.title;
    return {
      message: function message() {
        return `expected profile to be valid`;
      },
      pass: pass
    };
  }
};
var withTimeout = exports.withTimeout = function withTimeout(promise) {
  var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5000;
  return Promise.race([promise, new Promise(function (_, reject) {
    return setTimeout(function () {
      return reject(new Error('Test timeout'));
    }, timeout);
  })]);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,