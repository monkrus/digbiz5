767a47d6c2c58aab952aa1f4c9fe2463
_getJestObj().mock('../../../src/utils/config', function () {
  return {
    AppConfig: {
      apiUrl: 'https://api.digbiz.app',
      webUrl: 'https://digbiz.app'
    }
  };
});
var _qrCodeGenerator = require("../../../src/utils/qrCodeGenerator");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('QR Code Generation and Scanning', function () {
  var mockBusinessCard = {
    id: 'card-123',
    userId: 'user-456',
    basicInfo: {
      name: 'John Smith',
      title: 'CEO & Founder',
      company: 'TechStart Inc.',
      email: 'john@techstart.com',
      phone: '+1-555-123-4567',
      location: 'San Francisco, CA',
      bio: 'Experienced entrepreneur building innovative tech solutions.',
      profilePhoto: 'https://example.com/profile.jpg',
      companyLogo: 'https://example.com/logo.png'
    },
    startupInfo: {
      fundingStage: 'seed',
      fundingAmount: '$2M',
      fundingRound: 'Seed Round A',
      teamSize: '11-25',
      foundedYear: 2023,
      industry: ['Technology', 'SaaS', 'AI'],
      businessModel: 'b2b',
      revenue: '0-10k',
      customers: '50+ early adopters',
      growth: '20% MoM',
      seekingFunding: true,
      seekingTalent: true,
      seekingPartners: false,
      seekingMentors: true
    },
    socialLinks: {
      linkedin: 'https://linkedin.com/in/johnsmith',
      twitter: 'https://twitter.com/johnsmith',
      website: 'https://techstart.com',
      github: 'https://github.com/johnsmith',
      instagram: 'https://instagram.com/johnsmith'
    },
    customFields: [{
      id: '1',
      label: 'Investment Focus',
      value: 'B2B SaaS, AI, Fintech',
      type: 'text',
      icon: 'ðŸ’¼',
      isPublic: true,
      order: 1
    }],
    theme: {
      id: 'professional-theme-1',
      name: 'Professional Blue',
      primaryColor: '#3b82f6',
      secondaryColor: '#1e40af',
      backgroundColor: '#ffffff',
      textColor: '#1f2937',
      accentColor: '#10b981',
      fontFamily: 'Inter',
      headerFontSize: 24,
      bodyFontSize: 14,
      borderRadius: 8,
      padding: 16,
      spacing: 8
    },
    template: {
      id: 'startup-template-1',
      name: 'Modern Startup',
      category: 'startup',
      layout: 'standard',
      elements: [],
      isPopular: true,
      isPremium: false,
      previewImage: 'https://example.com/template-preview.png'
    },
    isDefault: false,
    isPublic: true,
    isActive: true,
    shareCode: 'abc123def456',
    createdAt: '2024-01-15T10:30:00Z',
    updatedAt: '2024-01-15T10:30:00Z',
    lastSharedAt: '2024-01-15T15:45:00Z'
  };
  describe('URL Generation', function () {
    test('should generate share URL with share code', function () {
      var url = (0, _qrCodeGenerator.generateCardShareUrl)(mockBusinessCard.id, mockBusinessCard.shareCode);
      expect(url).toBe('https://digbiz.app/card/abc123def456');
    });
    test('should generate share URL without share code', function () {
      var url = (0, _qrCodeGenerator.generateCardShareUrl)(mockBusinessCard.id);
      expect(url).toBe('https://digbiz.app/card/card-123');
    });
    test('should generate deep link', function () {
      var deepLink = (0, _qrCodeGenerator.generateDeepLink)(mockBusinessCard);
      expect(deepLink).toBe('digbiz://card/abc123def456');
    });
    test('should generate universal link', function () {
      var universalLink = (0, _qrCodeGenerator.generateUniversalLink)(mockBusinessCard);
      expect(universalLink).toBe('https://digbiz.app/open/card/abc123def456');
    });
  });
  describe('QR Code Data Generation', function () {
    test('should generate URL QR code data', function () {
      var qrData = (0, _qrCodeGenerator.generateCardUrlQR)(mockBusinessCard);
      expect(qrData.type).toBe('url');
      expect(qrData.data).toBe('https://digbiz.app/card/abc123def456');
      expect(qrData.size).toBe(200);
      expect(qrData.color).toBe('#000000');
      expect(qrData.backgroundColor).toBe('#FFFFFF');
    });
    test('should generate contact info QR code data', function () {
      var qrData = (0, _qrCodeGenerator.generateContactInfoQR)(mockBusinessCard);
      expect(qrData.type).toBe('text');
      expect(qrData.data).toContain('John Smith');
      expect(qrData.data).toContain('CEO & Founder');
      expect(qrData.data).toContain('TechStart Inc.');
      expect(qrData.data).toContain('john@techstart.com');
      expect(qrData.data).toContain('+1-555-123-4567');
      expect(qrData.data).toContain('https://digbiz.app/card/abc123def456');
    });
    test('should generate WiFi QR code data', function () {
      var qrData = (0, _qrCodeGenerator.generateWiFiQR)('TestNetwork', 'password123', 'WPA');
      expect(qrData.type).toBe('wifi');
      expect(qrData.data).toBe('WIFI:T:WPA;S:TestNetwork;P:password123;;');
    });
    test('should handle different WiFi security types', function () {
      var wpaData = (0, _qrCodeGenerator.generateWiFiQR)('Network1', 'pass1', 'WPA');
      var wepData = (0, _qrCodeGenerator.generateWiFiQR)('Network2', 'pass2', 'WEP');
      var openData = (0, _qrCodeGenerator.generateWiFiQR)('Network3', '', 'nopass');
      expect(wpaData.data).toContain('T:WPA');
      expect(wepData.data).toContain('T:WEP');
      expect(openData.data).toContain('T:nopass');
    });
  });
  describe('vCard Generation', function () {
    test('should generate complete vCard string', function () {
      var vCardString = (0, _qrCodeGenerator.generateVCardString)(mockBusinessCard);
      expect(vCardString).toContain('BEGIN:VCARD');
      expect(vCardString).toContain('VERSION:3.0');
      expect(vCardString).toContain('END:VCARD');
      expect(vCardString).toContain('FN:John Smith');
      expect(vCardString).toContain('TITLE:CEO & Founder');
      expect(vCardString).toContain('ORG:TechStart Inc.');
      expect(vCardString).toContain('EMAIL;TYPE=WORK:john@techstart.com');
      expect(vCardString).toContain('TEL;TYPE=WORK:+1-555-123-4567');
    });
    test('should include social media URLs in vCard', function () {
      var vCardString = (0, _qrCodeGenerator.generateVCardString)(mockBusinessCard);
      expect(vCardString).toContain('URL:https://techstart.com');
      expect(vCardString).toContain('URL;TYPE=LinkedIn:https://linkedin.com/in/johnsmith');
      expect(vCardString).toContain('URL;TYPE=Twitter:https://twitter.com/johnsmith');
      expect(vCardString).toContain('URL;TYPE=GitHub:https://github.com/johnsmith');
    });
    test('should handle bio with line breaks', function () {
      var cardWithMultilineBio = Object.assign({}, mockBusinessCard, {
        basicInfo: Object.assign({}, mockBusinessCard.basicInfo, {
          bio: 'Line 1\nLine 2\nLine 3'
        })
      });
      var vCardString = (0, _qrCodeGenerator.generateVCardString)(cardWithMultilineBio);
      expect(vCardString).toContain('NOTE:Line 1\\nLine 2\\nLine 3');
    });
    test('should include profile photo URL', function () {
      var vCardString = (0, _qrCodeGenerator.generateVCardString)(mockBusinessCard);
      expect(vCardString).toContain('PHOTO;TYPE=JPEG:https://example.com/profile.jpg');
    });
    test('should include digital card URL', function () {
      var vCardString = (0, _qrCodeGenerator.generateVCardString)(mockBusinessCard);
      expect(vCardString).toContain('URL;TYPE=DigitalCard:https://digbiz.app/card/abc123def456');
    });
    test('should generate vCard QR code data', function () {
      var qrData = (0, _qrCodeGenerator.generateVCardQR)(mockBusinessCard);
      expect(qrData.type).toBe('vcard');
      expect(qrData.data).toContain('BEGIN:VCARD');
      expect(qrData.data).toContain('FN:John Smith');
      expect(qrData.size).toBe(200);
    });
  });
  describe('QR Code Type Selection', function () {
    test('should generate URL QR by default', function () {
      var qrData = (0, _qrCodeGenerator.generateQRCode)(mockBusinessCard);
      expect(qrData.type).toBe('url');
    });
    test('should generate URL QR when specified', function () {
      var qrData = (0, _qrCodeGenerator.generateQRCode)(mockBusinessCard, 'url');
      expect(qrData.type).toBe('url');
    });
    test('should generate vCard QR when specified', function () {
      var qrData = (0, _qrCodeGenerator.generateQRCode)(mockBusinessCard, 'vcard');
      expect(qrData.type).toBe('vcard');
    });
    test('should generate contact info QR when specified', function () {
      var qrData = (0, _qrCodeGenerator.generateQRCode)(mockBusinessCard, 'contact');
      expect(qrData.type).toBe('text');
    });
  });
  describe('QR Data Validation', function () {
    test('should validate normal QR data', function () {
      var shortData = 'https://example.com';
      var result = (0, _qrCodeGenerator.validateQRData)(shortData);
      expect(result.isValid).toBe(true);
      expect(result.message).toBeUndefined();
    });
    test('should reject overly long QR data', function () {
      var longData = 'A'.repeat(3000);
      var result = (0, _qrCodeGenerator.validateQRData)(longData);
      expect(result.isValid).toBe(false);
      expect(result.message).toContain('QR code data too long');
      expect(result.message).toContain('3000 characters');
    });
    test('should handle edge case lengths', function () {
      var maxValidData = 'A'.repeat(2000);
      var tooLongData = 'A'.repeat(2001);
      expect((0, _qrCodeGenerator.validateQRData)(maxValidData).isValid).toBe(true);
      expect((0, _qrCodeGenerator.validateQRData)(tooLongData).isValid).toBe(false);
    });
  });
  describe('QR Scan Result Parsing', function () {
    test('should parse HTTP URLs', function () {
      var httpUrl = 'http://example.com';
      var result = (0, _qrCodeGenerator.parseQRScanResult)(httpUrl);
      expect(result.type).toBe('url');
      expect(result.parsed.url).toBe(httpUrl);
    });
    test('should parse HTTPS URLs', function () {
      var httpsUrl = 'https://example.com';
      var result = (0, _qrCodeGenerator.parseQRScanResult)(httpsUrl);
      expect(result.type).toBe('url');
      expect(result.parsed.url).toBe(httpsUrl);
    });
    test('should parse vCard data', function () {
      var vCardData = `BEGIN:VCARD
VERSION:3.0
FN:John Smith
TITLE:CEO
ORG:TechStart
EMAIL:john@techstart.com
TEL:+1-555-123-4567
URL:https://techstart.com
NOTE:Entrepreneur
END:VCARD`;
      var result = (0, _qrCodeGenerator.parseQRScanResult)(vCardData);
      expect(result.type).toBe('vcard');
      expect(result.parsed.name).toBe('John Smith');
      expect(result.parsed.title).toBe('CEO');
      expect(result.parsed.company).toBe('TechStart');
      expect(result.parsed.email).toBe('john@techstart.com');
      expect(result.parsed.phone).toBe('+1-555-123-4567');
      expect(result.parsed.website).toBe('https://techstart.com');
      expect(result.parsed.note).toBe('Entrepreneur');
    });
    test('should parse WiFi data', function () {
      var wifiData = 'WIFI:T:WPA;S:TestNetwork;P:password123;;';
      var result = (0, _qrCodeGenerator.parseQRScanResult)(wifiData);
      expect(result.type).toBe('wifi');
      expect(result.parsed.ssid).toBe('TestNetwork');
      expect(result.parsed.password).toBe('password123');
      expect(result.parsed.security).toBe('WPA');
    });
    test('should parse plain text as text type', function () {
      var textData = 'This is just plain text';
      var result = (0, _qrCodeGenerator.parseQRScanResult)(textData);
      expect(result.type).toBe('text');
      expect(result.parsed.text).toBe(textData);
    });
    test('should handle empty or invalid data', function () {
      var emptyResult = (0, _qrCodeGenerator.parseQRScanResult)('');
      var invalidResult = (0, _qrCodeGenerator.parseQRScanResult)('invalid-data');
      expect(emptyResult.type).toBe('text');
      expect(invalidResult.type).toBe('text');
    });
  });
  describe('Edge Cases and Error Handling', function () {
    test('should handle missing optional fields in business card', function () {
      var minimalCard = Object.assign({}, mockBusinessCard, {
        basicInfo: {
          name: 'Jane Doe',
          title: 'Developer',
          company: 'StartupCo',
          email: 'jane@startup.co'
        },
        socialLinks: {}
      });
      var urlQR = (0, _qrCodeGenerator.generateCardUrlQR)(minimalCard);
      var vCardQR = (0, _qrCodeGenerator.generateVCardQR)(minimalCard);
      var contactQR = (0, _qrCodeGenerator.generateContactInfoQR)(minimalCard);
      expect(urlQR.type).toBe('url');
      expect(vCardQR.type).toBe('vcard');
      expect(contactQR.type).toBe('text');
    });
    test('should handle special characters in QR data', function () {
      var cardWithSpecialChars = Object.assign({}, mockBusinessCard, {
        basicInfo: Object.assign({}, mockBusinessCard.basicInfo, {
          name: 'JosÃ© MarÃ­a Aznar-LÃ³pez',
          company: 'CafÃ© & Restaurantâ„¢',
          bio: 'Building apps with â™¥ & ðŸš€'
        })
      });
      var vCardString = (0, _qrCodeGenerator.generateVCardString)(cardWithSpecialChars);
      expect(vCardString).toContain('JosÃ© MarÃ­a Aznar-LÃ³pez');
      expect(vCardString).toContain('CafÃ© & Restaurantâ„¢');
      var validation = (0, _qrCodeGenerator.validateQRData)(vCardString);
      expect(validation.isValid).toBe(true);
    });
    test('should handle very long business card data', function () {
      var cardWithLongData = Object.assign({}, mockBusinessCard, {
        basicInfo: Object.assign({}, mockBusinessCard.basicInfo, {
          bio: 'A'.repeat(1000)
        }),
        customFields: Array.from({
          length: 10
        }, function (_, i) {
          return {
            id: String(i),
            label: `Field ${i}`,
            value: 'B'.repeat(100),
            type: 'text',
            isPublic: true,
            order: i
          };
        })
      });
      var vCardString = (0, _qrCodeGenerator.generateVCardString)(cardWithLongData);
      var validation = (0, _qrCodeGenerator.validateQRData)(vCardString);
      if (!validation.isValid) {
        expect(validation.message).toContain('too long');
      }
    });
    test('should handle missing share code gracefully', function () {
      var cardWithoutShareCode = Object.assign({}, mockBusinessCard, {
        shareCode: undefined
      });
      var url = (0, _qrCodeGenerator.generateCardShareUrl)(cardWithoutShareCode.id, cardWithoutShareCode.shareCode);
      expect(url).toBe('https://digbiz.app/card/card-123');
      var deepLink = (0, _qrCodeGenerator.generateDeepLink)(cardWithoutShareCode);
      expect(deepLink).toBe('digbiz://card/card-123');
    });
  });
  describe('QR Code Customization', function () {
    test('should use custom QR code properties', function () {
      var customQR = {
        type: 'url',
        data: 'https://example.com',
        size: 300,
        color: '#ff0000',
        backgroundColor: '#00ff00'
      };
      expect(customQR.size).toBe(300);
      expect(customQR.color).toBe('#ff0000');
      expect(customQR.backgroundColor).toBe('#00ff00');
    });
    test('should use default values when not specified', function () {
      var qrData = (0, _qrCodeGenerator.generateCardUrlQR)(mockBusinessCard);
      expect(qrData.size).toBe(200);
      expect(qrData.color).toBe('#000000');
      expect(qrData.backgroundColor).toBe('#FFFFFF');
    });
  });
  describe('Integration Scenarios', function () {
    test('should generate consistent QR data across different methods', function () {
      var urlQR1 = (0, _qrCodeGenerator.generateCardUrlQR)(mockBusinessCard);
      var urlQR2 = (0, _qrCodeGenerator.generateQRCode)(mockBusinessCard, 'url');
      expect(urlQR1.data).toBe(urlQR2.data);
      expect(urlQR1.type).toBe(urlQR2.type);
    });
    test('should parse generated vCard correctly', function () {
      var vCardString = (0, _qrCodeGenerator.generateVCardString)(mockBusinessCard);
      var parseResult = (0, _qrCodeGenerator.parseQRScanResult)(vCardString);
      expect(parseResult.type).toBe('vcard');
      expect(parseResult.parsed.name).toBe(mockBusinessCard.basicInfo.name);
      expect(parseResult.parsed.email).toBe(mockBusinessCard.basicInfo.email);
      expect(parseResult.parsed.company).toBe(mockBusinessCard.basicInfo.company);
    });
    test('should handle round-trip vCard generation and parsing', function () {
      var originalCard = mockBusinessCard;
      var vCardString = (0, _qrCodeGenerator.generateVCardString)(originalCard);
      var parsedData = (0, _qrCodeGenerator.parseQRScanResult)(vCardString);
      expect(parsedData.type).toBe('vcard');
      expect(parsedData.parsed.name).toBe(originalCard.basicInfo.name);
      expect(parsedData.parsed.title).toBe(originalCard.basicInfo.title);
      expect(parsedData.parsed.company).toBe(originalCard.basicInfo.company);
      expect(parsedData.parsed.email).toBe(originalCard.basicInfo.email);
      expect(parsedData.parsed.phone).toBe(originalCard.basicInfo.phone);
    });
    test('should generate valid QR data for all supported types', function () {
      var urlQR = (0, _qrCodeGenerator.generateQRCode)(mockBusinessCard, 'url');
      var vCardQR = (0, _qrCodeGenerator.generateQRCode)(mockBusinessCard, 'vcard');
      var contactQR = (0, _qrCodeGenerator.generateQRCode)(mockBusinessCard, 'contact');
      expect((0, _qrCodeGenerator.validateQRData)(urlQR.data).isValid).toBe(true);
      expect((0, _qrCodeGenerator.validateQRData)(vCardQR.data).isValid).toBe(true);
      expect((0, _qrCodeGenerator.validateQRData)(contactQR.data).isValid).toBe(true);
    });
  });
  describe('Advanced QR Code Scenarios', function () {
    test('should generate QR codes for different card themes', function () {
      var themes = ['professional', 'creative', 'minimal', 'tech', 'executive'];
      themes.forEach(function (theme) {
        var themedCard = Object.assign({}, mockBusinessCard, {
          themeId: theme
        });
        var qrData = (0, _qrCodeGenerator.generateCardUrlQR)(themedCard);
        expect(qrData.type).toBe('url');
        expect(qrData.data).toContain('digbiz.app');
        expect(qrData.data).toContain(themedCard.id);
      });
    });
    test('should handle batch QR generation', function () {
      var cards = [Object.assign({}, mockBusinessCard, {
        id: 'card1'
      }), Object.assign({}, mockBusinessCard, {
        id: 'card2'
      }), Object.assign({}, mockBusinessCard, {
        id: 'card3'
      })];
      var qrCodes = cards.map(function (card) {
        return (0, _qrCodeGenerator.generateVCardQR)(card);
      });
      expect(qrCodes).toHaveLength(3);
      qrCodes.forEach(function (qr, index) {
        expect(qr.type).toBe('vcard');
        expect(qr.data).toContain('BEGIN:VCARD');
        expect(qr.data).toContain(cards[index].basicInfo.name);
      });
    });
    test('should generate secure sharing codes', function () {
      var cards = Array.from({
        length: 100
      }, function (_, i) {
        return Object.assign({}, mockBusinessCard, {
          id: `card-${i}`,
          shareCode: `share-${i}`
        });
      });
      var urls = cards.map(function (card) {
        return (0, _qrCodeGenerator.generateCardShareUrl)(card.id, card.shareCode);
      });
      var uniqueUrls = new Set(urls);
      expect(uniqueUrls.size).toBe(100);
    });
    test('should support dynamic QR code regeneration', function () {
      var originalCard = mockBusinessCard;
      var qr1 = (0, _qrCodeGenerator.generateVCardQR)(originalCard);
      var updatedCard = Object.assign({}, originalCard, {
        basicInfo: Object.assign({}, originalCard.basicInfo, {
          phone: '+1-555-999-8888',
          email: 'john.updated@techstart.com'
        })
      });
      var qr2 = (0, _qrCodeGenerator.generateVCardQR)(updatedCard);
      expect(qr1.data).not.toBe(qr2.data);
      expect(qr2.data).toContain('john.updated@techstart.com');
      expect(qr2.data).toContain('+1-555-999-8888');
    });
    test('should handle QR code analytics tracking', function () {
      var _cardWithAnalytics$an;
      var cardWithAnalytics = Object.assign({}, mockBusinessCard, {
        analytics: {
          trackQRScans: true,
          trackShares: true,
          source: 'conference-booth'
        }
      });
      var urlQR = (0, _qrCodeGenerator.generateCardUrlQR)(cardWithAnalytics);
      expect(urlQR.data).toContain('digbiz.app/card/');
      if ((_cardWithAnalytics$an = cardWithAnalytics.analytics) != null && _cardWithAnalytics$an.trackQRScans) {
        expect(urlQR.data).toContain(cardWithAnalytics.id);
      }
    });
    test('should validate QR code size limits', function () {
      var validSizes = [100, 200, 300, 500, 1000];
      var invalidSizes = [50, 2000, -100];
      validSizes.forEach(function (size) {
        var qr = (0, _qrCodeGenerator.generateQRCode)(mockBusinessCard, 'url', {
          size: size
        });
        expect(qr.size).toBe(size);
      });
      invalidSizes.forEach(function (size) {
        var qr = (0, _qrCodeGenerator.generateQRCode)(mockBusinessCard, 'url', {
          size: size
        });
        expect(qr.size).toBe(200);
      });
    });
    test('should support different QR code formats', function () {
      var formats = ['png', 'svg', 'jpeg'];
      formats.forEach(function (format) {
        var qr = (0, _qrCodeGenerator.generateQRCode)(mockBusinessCard, 'url', {
          format: format
        });
        expect(['png', 'svg', 'jpeg']).toContain(format);
      });
    });
    test('should handle QR code error correction levels', function () {
      var levels = ['L', 'M', 'Q', 'H'];
      levels.forEach(function (level) {
        var qr = (0, _qrCodeGenerator.generateQRCode)(mockBusinessCard, 'vcard', {
          errorCorrectionLevel: level
        });
        expect(qr.type).toBe('vcard');
        expect(qr.data).toContain('BEGIN:VCARD');
      });
    });
    test('should generate branded QR codes with logo', function () {
      var _brandedCard$qrBrandi;
      var brandedCard = Object.assign({}, mockBusinessCard, {
        basicInfo: Object.assign({}, mockBusinessCard.basicInfo, {
          companyLogo: 'https://techstart.com/logo.png'
        }),
        qrBranding: {
          includeLogo: true,
          logoSize: 0.2,
          logoPosition: 'center'
        }
      });
      var qr = (0, _qrCodeGenerator.generateQRCode)(brandedCard, 'url', {
        includeLogo: (_brandedCard$qrBrandi = brandedCard.qrBranding) == null ? void 0 : _brandedCard$qrBrandi.includeLogo,
        logoUrl: brandedCard.basicInfo.companyLogo
      });
      expect(qr.type).toBe('url');
      expect(qr.data).toContain('digbiz.app');
    });
    test('should support QR code expiration', function () {
      var expiringCard = Object.assign({}, mockBusinessCard, {
        shareCode: 'temp-share-123',
        expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000)
      });
      var qr = (0, _qrCodeGenerator.generateCardUrlQR)(expiringCard);
      expect(qr.data).toContain('temp-share-123');
      var validation = (0, _qrCodeGenerator.validateQRData)(qr.data);
      expect(validation.isValid).toBe(true);
    });
  });
  describe('QR Code Security', function () {
    test('should not expose sensitive data in QR codes', function () {
      var sensitiveCard = Object.assign({}, mockBusinessCard, {
        privateNotes: 'Internal sensitive information',
        customFields: [{
          id: '1',
          label: 'Private Email',
          value: 'private@internal.com',
          type: 'email',
          isPublic: false,
          order: 1
        }, {
          id: '2',
          label: 'Public Phone',
          value: '+1-555-123-4567',
          type: 'phone',
          isPublic: true,
          order: 2
        }]
      });
      var vCardString = (0, _qrCodeGenerator.generateVCardString)(sensitiveCard);
      expect(vCardString).not.toContain('Internal sensitive information');
      expect(vCardString).not.toContain('private@internal.com');
      expect(vCardString).toContain('+1-555-123-4567');
    });
    test('should sanitize QR code data for security', function () {
      var maliciousCard = Object.assign({}, mockBusinessCard, {
        basicInfo: Object.assign({}, mockBusinessCard.basicInfo, {
          name: '<script>alert("xss")</script>John',
          bio: 'Bio with\nnewlines\tand\ttabs',
          website: 'https://example.com?param=<script>'
        })
      });
      var vCardString = (0, _qrCodeGenerator.generateVCardString)(maliciousCard);
      var validation = (0, _qrCodeGenerator.validateQRData)(vCardString);
      expect(validation.isValid).toBe(true);
      expect(vCardString).not.toContain('<script>');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,