{"version":3,"names":["immer_exports","__export","Immer","Immer2","applyPatches","castDraft","castImmutable","createDraft","current","enableMapSet","enablePatches","finishDraft","freeze","immerable","DRAFTABLE","isDraft","isDraftable","nothing","NOTHING","original","produce","produceWithPatches","setAutoFreeze","setUseStrictShallowCopy","module","exports","__toCommonJS","Symbol","for","DRAFT_STATE","errors","process","env","NODE_ENV","plugin","thing","data","die","error","e","_len","arguments","length","args","Array","_key","msg","apply","Error","getPrototypeOf","Object","value","_value$constructor","isPlainObject","isArray","constructor","isMap","isSet","objectCtorString","prototype","toString","proto","Ctor","hasOwnProperty","call","Function","base_","each","obj","iter","getArchtype","Reflect","ownKeys","forEach","key","entry","index","state","type_","has","prop","get","set","propOrOldValue","t","add","is","x","y","target","Map","Set","latest","copy_","shallowCopy","base","strict","slice","isPlain","descriptors","getOwnPropertyDescriptors","keys","i","desc","writable","configurable","enumerable","create","assign","deep","undefined","isFrozen","defineProperties","dontMutateFrozenCollections","clear","delete","values","plugins","getPlugin","pluginKey","loadPlugin","implementation","currentScope","getCurrentScope","createScope","parent_","immer_","drafts_","canAutoFreeze_","unfinalizedDrafts_","usePatchesInScope","scope","patchListener","patches_","inversePatches_","patchListener_","revokeScope","leaveScope","revokeDraft","enterScope","immer2","draft","revoke_","revoked_","processResult","result","baseDraft","isReplaced","modified_","finalize","maybeFreeze","generateReplacementPatches_","rootScope","path","childValue","finalizeProperty","scope_","finalized_","resultEach","isSet2","generatePatches_","parentState","targetObject","rootPath","targetIsSet","assigned_","concat","res","autoFreeze_","propertyIsEnumerable","createProxyProxy","parent","draft_","isManual_","traps","objectTraps","arrayTraps","_Proxy$revocable","Proxy","revocable","revoke","proxy","source","readPropFromProto","peek","prepareCopy","createProxy","getDescriptorFromProto","current2","currentState","markChanged","Number","isNaN","deleteProperty","getOwnPropertyDescriptor","owner","defineProperty","setPrototypeOf","fn","parseInt","_desc$get","useStrictShallowCopy_","config","_this","_classCallCheck2","default","recipe","defaultBase","self","curriedProduce","_this2","base2","_len2","_key2","_recipe","hasError","p","ip","_len3","_key3","patches","inversePatches","autoFreeze","useStrictShallowCopy","_createClass2","patch","op","applyPatchesImpl","applyPatches_","proxyMap_","proxySet_","push","currentImpl","copy","errorOffset","REPLACE","ADD","REMOVE","basePath","generatePatchesFromAssigned","generateArrayPatches","generateSetPatches","_ref","_ref2","clonePatchValueIfNeeded","assignedValue","origValue","unshift","baseValue","replacement","parentType","join","type","deepClonePatchValue","splice","map","from","entries","_ref3","_ref4","_slicedToArray2","k","v","cloned","DraftMap","_Map","_ref5","_this3","_callSuper","_inherits2","size","assertUnrevoked","prepareMapCopy","cb","thisArg","_this4","_value","_map","_this5","iterator","_defineProperty2","next","r","done","_this6","_wrapNativeSuper2","DraftSet","_Set","_ref8","_this7","prepareSetCopy","JSON","stringify","immer","bind"],"sources":["../../src/immer.ts","../../src/utils/env.ts","../../src/utils/errors.ts","../../src/utils/common.ts","../../src/utils/plugins.ts","../../src/core/scope.ts","../../src/core/finalize.ts","../../src/core/proxy.ts","../../src/core/immerClass.ts","../../src/core/current.ts","../../src/plugins/patches.ts","../../src/plugins/mapset.ts"],"sourcesContent":["import {\n\tIProduce,\n\tIProduceWithPatches,\n\tImmer,\n\tDraft,\n\tImmutable\n} from \"./internal\"\n\nexport {\n\tDraft,\n\tWritableDraft,\n\tImmutable,\n\tPatch,\n\tPatchListener,\n\tProducer,\n\toriginal,\n\tcurrent,\n\tisDraft,\n\tisDraftable,\n\tNOTHING as nothing,\n\tDRAFTABLE as immerable,\n\tfreeze,\n\tObjectish,\n\tStrictMode\n} from \"./internal\"\n\nconst immer = new Immer()\n\n/**\n * The `produce` function takes a value and a \"recipe function\" (whose\n * return value often depends on the base state). The recipe function is\n * free to mutate its first argument however it wants. All mutations are\n * only ever applied to a __copy__ of the base state.\n *\n * Pass only a function to create a \"curried producer\" which relieves you\n * from passing the recipe function every time.\n *\n * Only plain objects and arrays are made mutable. All other objects are\n * considered uncopyable.\n *\n * Note: This function is __bound__ to its `Immer` instance.\n *\n * @param {any} base - the initial state\n * @param {Function} producer - function that receives a proxy of the base state as first argument and which can be freely modified\n * @param {Function} patchListener - optional function that will be called with all the patches produced here\n * @returns {any} a new state, or the initial state if nothing was modified\n */\nexport const produce: IProduce = /* @__PURE__ */ immer.produce\n\n/**\n * Like `produce`, but `produceWithPatches` always returns a tuple\n * [nextState, patches, inversePatches] (instead of just the next state)\n */\nexport const produceWithPatches: IProduceWithPatches = /* @__PURE__ */ immer.produceWithPatches.bind(\n\timmer\n)\n\n/**\n * Pass true to automatically freeze all copies created by Immer.\n *\n * Always freeze by default, even in production mode\n */\nexport const setAutoFreeze = /* @__PURE__ */ immer.setAutoFreeze.bind(immer)\n\n/**\n * Pass true to enable strict shallow copy.\n *\n * By default, immer does not copy the object descriptors such as getter, setter and non-enumrable properties.\n */\nexport const setUseStrictShallowCopy = /* @__PURE__ */ immer.setUseStrictShallowCopy.bind(\n\timmer\n)\n\n/**\n * Apply an array of Immer patches to the first argument.\n *\n * This function is a producer, which means copy-on-write is in effect.\n */\nexport const applyPatches = /* @__PURE__ */ immer.applyPatches.bind(immer)\n\n/**\n * Create an Immer draft from the given base state, which may be a draft itself.\n * The draft can be modified until you finalize it with the `finishDraft` function.\n */\nexport const createDraft = /* @__PURE__ */ immer.createDraft.bind(immer)\n\n/**\n * Finalize an Immer draft from a `createDraft` call, returning the base state\n * (if no changes were made) or a modified copy. The draft must *not* be\n * mutated afterwards.\n *\n * Pass a function as the 2nd argument to generate Immer patches based on the\n * changes that were made.\n */\nexport const finishDraft = /* @__PURE__ */ immer.finishDraft.bind(immer)\n\n/**\n * This function is actually a no-op, but can be used to cast an immutable type\n * to an draft type and make TypeScript happy\n *\n * @param value\n */\nexport function castDraft<T>(value: T): Draft<T> {\n\treturn value as any\n}\n\n/**\n * This function is actually a no-op, but can be used to cast a mutable type\n * to an immutable type and make TypeScript happy\n * @param value\n */\nexport function castImmutable<T>(value: T): Immutable<T> {\n\treturn value as any\n}\n\nexport {Immer}\n\nexport {enablePatches} from \"./plugins/patches\"\nexport {enableMapSet} from \"./plugins/mapset\"\n","// Should be no imports here!\n\n/**\n * The sentinel value returned by producers to replace the draft with undefined.\n */\nexport const NOTHING: unique symbol = Symbol.for(\"immer-nothing\")\n\n/**\n * To let Immer treat your class instances as plain immutable objects\n * (albeit with a custom prototype), you must define either an instance property\n * or a static property on each of your custom classes.\n *\n * Otherwise, your class instance will never be drafted, which means it won't be\n * safe to mutate in a produce callback.\n */\nexport const DRAFTABLE: unique symbol = Symbol.for(\"immer-draftable\")\n\nexport const DRAFT_STATE: unique symbol = Symbol.for(\"immer-state\")\n","export const errors =\n\tprocess.env.NODE_ENV !== \"production\"\n\t\t? [\n\t\t\t\t// All error codes, starting by 0:\n\t\t\t\tfunction(plugin: string) {\n\t\t\t\t\treturn `The plugin for '${plugin}' has not been loaded into Immer. To enable the plugin, import and call \\`enable${plugin}()\\` when initializing your application.`\n\t\t\t\t},\n\t\t\t\tfunction(thing: string) {\n\t\t\t\t\treturn `produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '${thing}'`\n\t\t\t\t},\n\t\t\t\t\"This object has been frozen and should not be mutated\",\n\t\t\t\tfunction(data: any) {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t\"Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? \" +\n\t\t\t\t\t\tdata\n\t\t\t\t\t)\n\t\t\t\t},\n\t\t\t\t\"An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.\",\n\t\t\t\t\"Immer forbids circular references\",\n\t\t\t\t\"The first or second argument to `produce` must be a function\",\n\t\t\t\t\"The third argument to `produce` must be a function or undefined\",\n\t\t\t\t\"First argument to `createDraft` must be a plain object, an array, or an immerable object\",\n\t\t\t\t\"First argument to `finishDraft` must be a draft returned by `createDraft`\",\n\t\t\t\tfunction(thing: string) {\n\t\t\t\t\treturn `'current' expects a draft, got: ${thing}`\n\t\t\t\t},\n\t\t\t\t\"Object.defineProperty() cannot be used on an Immer draft\",\n\t\t\t\t\"Object.setPrototypeOf() cannot be used on an Immer draft\",\n\t\t\t\t\"Immer only supports deleting array indices\",\n\t\t\t\t\"Immer only supports setting array indices and the 'length' property\",\n\t\t\t\tfunction(thing: string) {\n\t\t\t\t\treturn `'original' expects a draft, got: ${thing}`\n\t\t\t\t}\n\t\t\t\t// Note: if more errors are added, the errorOffset in Patches.ts should be increased\n\t\t\t\t// See Patches.ts for additional errors\n\t\t  ]\n\t\t: []\n\nexport function die(error: number, ...args: any[]): never {\n\tif (process.env.NODE_ENV !== \"production\") {\n\t\tconst e = errors[error]\n\t\tconst msg = typeof e === \"function\" ? e.apply(null, args as any) : e\n\t\tthrow new Error(`[Immer] ${msg}`)\n\t}\n\tthrow new Error(\n\t\t`[Immer] minified error nr: ${error}. Full error at: https://bit.ly/3cXEKWf`\n\t)\n}\n","import {\n\tDRAFT_STATE,\n\tDRAFTABLE,\n\tObjectish,\n\tDrafted,\n\tAnyObject,\n\tAnyMap,\n\tAnySet,\n\tImmerState,\n\tArchType,\n\tdie,\n\tStrictMode\n} from \"../internal\"\n\nexport const getPrototypeOf = Object.getPrototypeOf\n\n/** Returns true if the given value is an Immer draft */\n/*#__PURE__*/\nexport function isDraft(value: any): boolean {\n\treturn !!value && !!value[DRAFT_STATE]\n}\n\n/** Returns true if the given value can be drafted by Immer */\n/*#__PURE__*/\nexport function isDraftable(value: any): boolean {\n\tif (!value) return false\n\treturn (\n\t\tisPlainObject(value) ||\n\t\tArray.isArray(value) ||\n\t\t!!value[DRAFTABLE] ||\n\t\t!!value.constructor?.[DRAFTABLE] ||\n\t\tisMap(value) ||\n\t\tisSet(value)\n\t)\n}\n\nconst objectCtorString = Object.prototype.constructor.toString()\n/*#__PURE__*/\nexport function isPlainObject(value: any): boolean {\n\tif (!value || typeof value !== \"object\") return false\n\tconst proto = getPrototypeOf(value)\n\tif (proto === null) {\n\t\treturn true\n\t}\n\tconst Ctor =\n\t\tObject.hasOwnProperty.call(proto, \"constructor\") && proto.constructor\n\n\tif (Ctor === Object) return true\n\n\treturn (\n\t\ttypeof Ctor == \"function\" &&\n\t\tFunction.toString.call(Ctor) === objectCtorString\n\t)\n}\n\n/** Get the underlying object that is represented by the given draft */\n/*#__PURE__*/\nexport function original<T>(value: T): T | undefined\nexport function original(value: Drafted<any>): any {\n\tif (!isDraft(value)) die(15, value)\n\treturn value[DRAFT_STATE].base_\n}\n\n/**\n * Each iterates a map, set or array.\n * Or, if any other kind of object, all of its own properties.\n * Regardless whether they are enumerable or symbols\n */\nexport function each<T extends Objectish>(\n\tobj: T,\n\titer: (key: string | number, value: any, source: T) => void\n): void\nexport function each(obj: any, iter: any) {\n\tif (getArchtype(obj) === ArchType.Object) {\n\t\tReflect.ownKeys(obj).forEach(key => {\n\t\t\titer(key, obj[key], obj)\n\t\t})\n\t} else {\n\t\tobj.forEach((entry: any, index: any) => iter(index, entry, obj))\n\t}\n}\n\n/*#__PURE__*/\nexport function getArchtype(thing: any): ArchType {\n\tconst state: undefined | ImmerState = thing[DRAFT_STATE]\n\treturn state\n\t\t? state.type_\n\t\t: Array.isArray(thing)\n\t\t? ArchType.Array\n\t\t: isMap(thing)\n\t\t? ArchType.Map\n\t\t: isSet(thing)\n\t\t? ArchType.Set\n\t\t: ArchType.Object\n}\n\n/*#__PURE__*/\nexport function has(thing: any, prop: PropertyKey): boolean {\n\treturn getArchtype(thing) === ArchType.Map\n\t\t? thing.has(prop)\n\t\t: Object.prototype.hasOwnProperty.call(thing, prop)\n}\n\n/*#__PURE__*/\nexport function get(thing: AnyMap | AnyObject, prop: PropertyKey): any {\n\t// @ts-ignore\n\treturn getArchtype(thing) === ArchType.Map ? thing.get(prop) : thing[prop]\n}\n\n/*#__PURE__*/\nexport function set(thing: any, propOrOldValue: PropertyKey, value: any) {\n\tconst t = getArchtype(thing)\n\tif (t === ArchType.Map) thing.set(propOrOldValue, value)\n\telse if (t === ArchType.Set) {\n\t\tthing.add(value)\n\t} else thing[propOrOldValue] = value\n}\n\n/*#__PURE__*/\nexport function is(x: any, y: any): boolean {\n\t// From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js\n\tif (x === y) {\n\t\treturn x !== 0 || 1 / x === 1 / y\n\t} else {\n\t\treturn x !== x && y !== y\n\t}\n}\n\n/*#__PURE__*/\nexport function isMap(target: any): target is AnyMap {\n\treturn target instanceof Map\n}\n\n/*#__PURE__*/\nexport function isSet(target: any): target is AnySet {\n\treturn target instanceof Set\n}\n/*#__PURE__*/\nexport function latest(state: ImmerState): any {\n\treturn state.copy_ || state.base_\n}\n\n/*#__PURE__*/\nexport function shallowCopy(base: any, strict: StrictMode) {\n\tif (isMap(base)) {\n\t\treturn new Map(base)\n\t}\n\tif (isSet(base)) {\n\t\treturn new Set(base)\n\t}\n\tif (Array.isArray(base)) return Array.prototype.slice.call(base)\n\n\tconst isPlain = isPlainObject(base)\n\n\tif (strict === true || (strict === \"class_only\" && !isPlain)) {\n\t\t// Perform a strict copy\n\t\tconst descriptors = Object.getOwnPropertyDescriptors(base)\n\t\tdelete descriptors[DRAFT_STATE as any]\n\t\tlet keys = Reflect.ownKeys(descriptors)\n\t\tfor (let i = 0; i < keys.length; i++) {\n\t\t\tconst key: any = keys[i]\n\t\t\tconst desc = descriptors[key]\n\t\t\tif (desc.writable === false) {\n\t\t\t\tdesc.writable = true\n\t\t\t\tdesc.configurable = true\n\t\t\t}\n\t\t\t// like object.assign, we will read any _own_, get/set accessors. This helps in dealing\n\t\t\t// with libraries that trap values, like mobx or vue\n\t\t\t// unlike object.assign, non-enumerables will be copied as well\n\t\t\tif (desc.get || desc.set)\n\t\t\t\tdescriptors[key] = {\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\twritable: true, // could live with !!desc.set as well here...\n\t\t\t\t\tenumerable: desc.enumerable,\n\t\t\t\t\tvalue: base[key]\n\t\t\t\t}\n\t\t}\n\t\treturn Object.create(getPrototypeOf(base), descriptors)\n\t} else {\n\t\t// perform a sloppy copy\n\t\tconst proto = getPrototypeOf(base)\n\t\tif (proto !== null && isPlain) {\n\t\t\treturn {...base} // assumption: better inner class optimization than the assign below\n\t\t}\n\t\tconst obj = Object.create(proto)\n\t\treturn Object.assign(obj, base)\n\t}\n}\n\n/**\n * Freezes draftable objects. Returns the original object.\n * By default freezes shallowly, but if the second argument is `true` it will freeze recursively.\n *\n * @param obj\n * @param deep\n */\nexport function freeze<T>(obj: T, deep?: boolean): T\nexport function freeze<T>(obj: any, deep: boolean = false): T {\n\tif (isFrozen(obj) || isDraft(obj) || !isDraftable(obj)) return obj\n\tif (getArchtype(obj) > 1 /* Map or Set */) {\n\t\t Object.defineProperties(obj, {\n                        set: {value: dontMutateFrozenCollections as any},\n                        add: {value: dontMutateFrozenCollections as any},\n                        clear: {value: dontMutateFrozenCollections as any},\n                        delete: {value: dontMutateFrozenCollections as any}\n                })\n\t}\n\tObject.freeze(obj)\n\tif (deep)\n\t\t// See #590, don't recurse into non-enumerable / Symbol properties when freezing\n\t\t// So use Object.values (only string-like, enumerables) instead of each()\n\t\tObject.values(obj).forEach(value => freeze(value, true))\n\treturn obj\n}\n\nfunction dontMutateFrozenCollections() {\n\tdie(2)\n}\n\nexport function isFrozen(obj: any): boolean {\n\treturn Object.isFrozen(obj)\n}\n","import {\n\tImmerState,\n\tPatch,\n\tDrafted,\n\tImmerBaseState,\n\tAnyMap,\n\tAnySet,\n\tArchType,\n\tdie\n} from \"../internal\"\n\n/** Plugin utilities */\nconst plugins: {\n\tPatches?: {\n\t\tgeneratePatches_(\n\t\t\tstate: ImmerState,\n\t\t\tbasePath: PatchPath,\n\t\t\tpatches: Patch[],\n\t\t\tinversePatches: Patch[]\n\t\t): void\n\t\tgenerateReplacementPatches_(\n\t\t\tbase: any,\n\t\t\treplacement: any,\n\t\t\tpatches: Patch[],\n\t\t\tinversePatches: Patch[]\n\t\t): void\n\t\tapplyPatches_<T>(draft: T, patches: readonly Patch[]): T\n\t}\n\tMapSet?: {\n\t\tproxyMap_<T extends AnyMap>(target: T, parent?: ImmerState): T\n\t\tproxySet_<T extends AnySet>(target: T, parent?: ImmerState): T\n\t}\n} = {}\n\ntype Plugins = typeof plugins\n\nexport function getPlugin<K extends keyof Plugins>(\n\tpluginKey: K\n): Exclude<Plugins[K], undefined> {\n\tconst plugin = plugins[pluginKey]\n\tif (!plugin) {\n\t\tdie(0, pluginKey)\n\t}\n\t// @ts-ignore\n\treturn plugin\n}\n\nexport function loadPlugin<K extends keyof Plugins>(\n\tpluginKey: K,\n\timplementation: Plugins[K]\n): void {\n\tif (!plugins[pluginKey]) plugins[pluginKey] = implementation\n}\n/** Map / Set plugin */\n\nexport interface MapState extends ImmerBaseState {\n\ttype_: ArchType.Map\n\tcopy_: AnyMap | undefined\n\tassigned_: Map<any, boolean> | undefined\n\tbase_: AnyMap\n\trevoked_: boolean\n\tdraft_: Drafted<AnyMap, MapState>\n}\n\nexport interface SetState extends ImmerBaseState {\n\ttype_: ArchType.Set\n\tcopy_: AnySet | undefined\n\tbase_: AnySet\n\tdrafts_: Map<any, Drafted> // maps the original value to the draft value in the new set\n\trevoked_: boolean\n\tdraft_: Drafted<AnySet, SetState>\n}\n\n/** Patches plugin */\n\nexport type PatchPath = (string | number)[]\n","import {\n\tPatch,\n\tPatchListener,\n\tDrafted,\n\tImmer,\n\tDRAFT_STATE,\n\tImmerState,\n\tArchType,\n\tgetPlugin\n} from \"../internal\"\n\n/** Each scope represents a `produce` call. */\n\nexport interface ImmerScope {\n\tpatches_?: Patch[]\n\tinversePatches_?: Patch[]\n\tcanAutoFreeze_: boolean\n\tdrafts_: any[]\n\tparent_?: ImmerScope\n\tpatchListener_?: PatchListener\n\timmer_: Immer\n\tunfinalizedDrafts_: number\n}\n\nlet currentScope: ImmerScope | undefined\n\nexport function getCurrentScope() {\n\treturn currentScope!\n}\n\nfunction createScope(\n\tparent_: ImmerScope | undefined,\n\timmer_: Immer\n): ImmerScope {\n\treturn {\n\t\tdrafts_: [],\n\t\tparent_,\n\t\timmer_,\n\t\t// Whenever the modified draft contains a draft from another scope, we\n\t\t// need to prevent auto-freezing so the unowned draft can be finalized.\n\t\tcanAutoFreeze_: true,\n\t\tunfinalizedDrafts_: 0\n\t}\n}\n\nexport function usePatchesInScope(\n\tscope: ImmerScope,\n\tpatchListener?: PatchListener\n) {\n\tif (patchListener) {\n\t\tgetPlugin(\"Patches\") // assert we have the plugin\n\t\tscope.patches_ = []\n\t\tscope.inversePatches_ = []\n\t\tscope.patchListener_ = patchListener\n\t}\n}\n\nexport function revokeScope(scope: ImmerScope) {\n\tleaveScope(scope)\n\tscope.drafts_.forEach(revokeDraft)\n\t// @ts-ignore\n\tscope.drafts_ = null\n}\n\nexport function leaveScope(scope: ImmerScope) {\n\tif (scope === currentScope) {\n\t\tcurrentScope = scope.parent_\n\t}\n}\n\nexport function enterScope(immer: Immer) {\n\treturn (currentScope = createScope(currentScope, immer))\n}\n\nfunction revokeDraft(draft: Drafted) {\n\tconst state: ImmerState = draft[DRAFT_STATE]\n\tif (state.type_ === ArchType.Object || state.type_ === ArchType.Array)\n\t\tstate.revoke_()\n\telse state.revoked_ = true\n}\n","import {\n\tImmerScope,\n\tDRAFT_STATE,\n\tisDraftable,\n\tNOTHING,\n\tPatchPath,\n\teach,\n\thas,\n\tfreeze,\n\tImmerState,\n\tisDraft,\n\tSetState,\n\tset,\n\tArchType,\n\tgetPlugin,\n\tdie,\n\trevokeScope,\n\tisFrozen,\n\tisMap\n} from \"../internal\"\n\nexport function processResult(result: any, scope: ImmerScope) {\n\tscope.unfinalizedDrafts_ = scope.drafts_.length\n\tconst baseDraft = scope.drafts_![0]\n\tconst isReplaced = result !== undefined && result !== baseDraft\n\tif (isReplaced) {\n\t\tif (baseDraft[DRAFT_STATE].modified_) {\n\t\t\trevokeScope(scope)\n\t\t\tdie(4)\n\t\t}\n\t\tif (isDraftable(result)) {\n\t\t\t// Finalize the result in case it contains (or is) a subset of the draft.\n\t\t\tresult = finalize(scope, result)\n\t\t\tif (!scope.parent_) maybeFreeze(scope, result)\n\t\t}\n\t\tif (scope.patches_) {\n\t\t\tgetPlugin(\"Patches\").generateReplacementPatches_(\n\t\t\t\tbaseDraft[DRAFT_STATE].base_,\n\t\t\t\tresult,\n\t\t\t\tscope.patches_,\n\t\t\t\tscope.inversePatches_!\n\t\t\t)\n\t\t}\n\t} else {\n\t\t// Finalize the base draft.\n\t\tresult = finalize(scope, baseDraft, [])\n\t}\n\trevokeScope(scope)\n\tif (scope.patches_) {\n\t\tscope.patchListener_!(scope.patches_, scope.inversePatches_!)\n\t}\n\treturn result !== NOTHING ? result : undefined\n}\n\nfunction finalize(rootScope: ImmerScope, value: any, path?: PatchPath) {\n\t// Don't recurse in tho recursive data structures\n\tif (isFrozen(value)) return value\n\n\tconst state: ImmerState = value[DRAFT_STATE]\n\t// A plain object, might need freezing, might contain drafts\n\tif (!state) {\n\t\teach(value, (key, childValue) =>\n\t\t\tfinalizeProperty(rootScope, state, value, key, childValue, path)\n\t\t)\n\t\treturn value\n\t}\n\t// Never finalize drafts owned by another scope.\n\tif (state.scope_ !== rootScope) return value\n\t// Unmodified draft, return the (frozen) original\n\tif (!state.modified_) {\n\t\tmaybeFreeze(rootScope, state.base_, true)\n\t\treturn state.base_\n\t}\n\t// Not finalized yet, let's do that now\n\tif (!state.finalized_) {\n\t\tstate.finalized_ = true\n\t\tstate.scope_.unfinalizedDrafts_--\n\t\tconst result = state.copy_\n\t\t// Finalize all children of the copy\n\t\t// For sets we clone before iterating, otherwise we can get in endless loop due to modifying during iteration, see #628\n\t\t// To preserve insertion order in all cases we then clear the set\n\t\t// And we let finalizeProperty know it needs to re-add non-draft children back to the target\n\t\tlet resultEach = result\n\t\tlet isSet = false\n\t\tif (state.type_ === ArchType.Set) {\n\t\t\tresultEach = new Set(result)\n\t\t\tresult.clear()\n\t\t\tisSet = true\n\t\t}\n\t\teach(resultEach, (key, childValue) =>\n\t\t\tfinalizeProperty(rootScope, state, result, key, childValue, path, isSet)\n\t\t)\n\t\t// everything inside is frozen, we can freeze here\n\t\tmaybeFreeze(rootScope, result, false)\n\t\t// first time finalizing, let's create those patches\n\t\tif (path && rootScope.patches_) {\n\t\t\tgetPlugin(\"Patches\").generatePatches_(\n\t\t\t\tstate,\n\t\t\t\tpath,\n\t\t\t\trootScope.patches_,\n\t\t\t\trootScope.inversePatches_!\n\t\t\t)\n\t\t}\n\t}\n\treturn state.copy_\n}\n\nfunction finalizeProperty(\n\trootScope: ImmerScope,\n\tparentState: undefined | ImmerState,\n\ttargetObject: any,\n\tprop: string | number,\n\tchildValue: any,\n\trootPath?: PatchPath,\n\ttargetIsSet?: boolean\n) {\n\tif (process.env.NODE_ENV !== \"production\" && childValue === targetObject)\n\t\tdie(5)\n\tif (isDraft(childValue)) {\n\t\tconst path =\n\t\t\trootPath &&\n\t\t\tparentState &&\n\t\t\tparentState!.type_ !== ArchType.Set && // Set objects are atomic since they have no keys.\n\t\t\t!has((parentState as Exclude<ImmerState, SetState>).assigned_!, prop) // Skip deep patches for assigned keys.\n\t\t\t\t? rootPath!.concat(prop)\n\t\t\t\t: undefined\n\t\t// Drafts owned by `scope` are finalized here.\n\t\tconst res = finalize(rootScope, childValue, path)\n\t\tset(targetObject, prop, res)\n\t\t// Drafts from another scope must prevented to be frozen\n\t\t// if we got a draft back from finalize, we're in a nested produce and shouldn't freeze\n\t\tif (isDraft(res)) {\n\t\t\trootScope.canAutoFreeze_ = false\n\t\t} else return\n\t} else if (targetIsSet) {\n\t\ttargetObject.add(childValue)\n\t}\n\t// Search new objects for unfinalized drafts. Frozen objects should never contain drafts.\n\tif (isDraftable(childValue) && !isFrozen(childValue)) {\n\t\tif (!rootScope.immer_.autoFreeze_ && rootScope.unfinalizedDrafts_ < 1) {\n\t\t\t// optimization: if an object is not a draft, and we don't have to\n\t\t\t// deepfreeze everything, and we are sure that no drafts are left in the remaining object\n\t\t\t// cause we saw and finalized all drafts already; we can stop visiting the rest of the tree.\n\t\t\t// This benefits especially adding large data tree's without further processing.\n\t\t\t// See add-data.js perf test\n\t\t\treturn\n\t\t}\n\t\tfinalize(rootScope, childValue)\n\t\t// Immer deep freezes plain objects, so if there is no parent state, we freeze as well\n\t\t// Per #590, we never freeze symbolic properties. Just to make sure don't accidentally interfere\n\t\t// with other frameworks.\n\t\tif (\n\t\t\t(!parentState || !parentState.scope_.parent_) &&\n\t\t\ttypeof prop !== \"symbol\" &&\n\t\t\t(isMap(targetObject)\n\t\t\t\t? targetObject.has(prop)\n\t\t\t\t: Object.prototype.propertyIsEnumerable.call(targetObject, prop))\n\t\t)\n\t\t\tmaybeFreeze(rootScope, childValue)\n\t}\n}\n\nfunction maybeFreeze(scope: ImmerScope, value: any, deep = false) {\n\t// we never freeze for a non-root scope; as it would prevent pruning for drafts inside wrapping objects\n\tif (!scope.parent_ && scope.immer_.autoFreeze_ && scope.canAutoFreeze_) {\n\t\tfreeze(value, deep)\n\t}\n}\n","import {\n\teach,\n\thas,\n\tis,\n\tisDraftable,\n\tshallowCopy,\n\tlatest,\n\tImmerBaseState,\n\tImmerState,\n\tDrafted,\n\tAnyObject,\n\tAnyArray,\n\tObjectish,\n\tgetCurrentScope,\n\tgetPrototypeOf,\n\tDRAFT_STATE,\n\tdie,\n\tcreateProxy,\n\tArchType,\n\tImmerScope\n} from \"../internal\"\n\ninterface ProxyBaseState extends ImmerBaseState {\n\tassigned_: {\n\t\t[property: string]: boolean\n\t}\n\tparent_?: ImmerState\n\trevoke_(): void\n}\n\nexport interface ProxyObjectState extends ProxyBaseState {\n\ttype_: ArchType.Object\n\tbase_: any\n\tcopy_: any\n\tdraft_: Drafted<AnyObject, ProxyObjectState>\n}\n\nexport interface ProxyArrayState extends ProxyBaseState {\n\ttype_: ArchType.Array\n\tbase_: AnyArray\n\tcopy_: AnyArray | null\n\tdraft_: Drafted<AnyArray, ProxyArrayState>\n}\n\ntype ProxyState = ProxyObjectState | ProxyArrayState\n\n/**\n * Returns a new draft of the `base` object.\n *\n * The second argument is the parent draft-state (used internally).\n */\nexport function createProxyProxy<T extends Objectish>(\n\tbase: T,\n\tparent?: ImmerState\n): Drafted<T, ProxyState> {\n\tconst isArray = Array.isArray(base)\n\tconst state: ProxyState = {\n\t\ttype_: isArray ? ArchType.Array : (ArchType.Object as any),\n\t\t// Track which produce call this is associated with.\n\t\tscope_: parent ? parent.scope_ : getCurrentScope()!,\n\t\t// True for both shallow and deep changes.\n\t\tmodified_: false,\n\t\t// Used during finalization.\n\t\tfinalized_: false,\n\t\t// Track which properties have been assigned (true) or deleted (false).\n\t\tassigned_: {},\n\t\t// The parent draft state.\n\t\tparent_: parent,\n\t\t// The base state.\n\t\tbase_: base,\n\t\t// The base proxy.\n\t\tdraft_: null as any, // set below\n\t\t// The base copy with any updated values.\n\t\tcopy_: null,\n\t\t// Called by the `produce` function.\n\t\trevoke_: null as any,\n\t\tisManual_: false\n\t}\n\n\t// the traps must target something, a bit like the 'real' base.\n\t// but also, we need to be able to determine from the target what the relevant state is\n\t// (to avoid creating traps per instance to capture the state in closure,\n\t// and to avoid creating weird hidden properties as well)\n\t// So the trick is to use 'state' as the actual 'target'! (and make sure we intercept everything)\n\t// Note that in the case of an array, we put the state in an array to have better Reflect defaults ootb\n\tlet target: T = state as any\n\tlet traps: ProxyHandler<object | Array<any>> = objectTraps\n\tif (isArray) {\n\t\ttarget = [state] as any\n\t\ttraps = arrayTraps\n\t}\n\n\tconst {revoke, proxy} = Proxy.revocable(target, traps)\n\tstate.draft_ = proxy as any\n\tstate.revoke_ = revoke\n\treturn proxy as any\n}\n\n/**\n * Object drafts\n */\nexport const objectTraps: ProxyHandler<ProxyState> = {\n\tget(state, prop) {\n\t\tif (prop === DRAFT_STATE) return state\n\n\t\tconst source = latest(state)\n\t\tif (!has(source, prop)) {\n\t\t\t// non-existing or non-own property...\n\t\t\treturn readPropFromProto(state, source, prop)\n\t\t}\n\t\tconst value = source[prop]\n\t\tif (state.finalized_ || !isDraftable(value)) {\n\t\t\treturn value\n\t\t}\n\t\t// Check for existing draft in modified state.\n\t\t// Assigned values are never drafted. This catches any drafts we created, too.\n\t\tif (value === peek(state.base_, prop)) {\n\t\t\tprepareCopy(state)\n\t\t\treturn (state.copy_![prop as any] = createProxy(value, state))\n\t\t}\n\t\treturn value\n\t},\n\thas(state, prop) {\n\t\treturn prop in latest(state)\n\t},\n\townKeys(state) {\n\t\treturn Reflect.ownKeys(latest(state))\n\t},\n\tset(\n\t\tstate: ProxyObjectState,\n\t\tprop: string /* strictly not, but helps TS */,\n\t\tvalue\n\t) {\n\t\tconst desc = getDescriptorFromProto(latest(state), prop)\n\t\tif (desc?.set) {\n\t\t\t// special case: if this write is captured by a setter, we have\n\t\t\t// to trigger it with the correct context\n\t\t\tdesc.set.call(state.draft_, value)\n\t\t\treturn true\n\t\t}\n\t\tif (!state.modified_) {\n\t\t\t// the last check is because we need to be able to distinguish setting a non-existing to undefined (which is a change)\n\t\t\t// from setting an existing property with value undefined to undefined (which is not a change)\n\t\t\tconst current = peek(latest(state), prop)\n\t\t\t// special case, if we assigning the original value to a draft, we can ignore the assignment\n\t\t\tconst currentState: ProxyObjectState = current?.[DRAFT_STATE]\n\t\t\tif (currentState && currentState.base_ === value) {\n\t\t\t\tstate.copy_![prop] = value\n\t\t\t\tstate.assigned_[prop] = false\n\t\t\t\treturn true\n\t\t\t}\n\t\t\tif (is(value, current) && (value !== undefined || has(state.base_, prop)))\n\t\t\t\treturn true\n\t\t\tprepareCopy(state)\n\t\t\tmarkChanged(state)\n\t\t}\n\n\t\tif (\n\t\t\t(state.copy_![prop] === value &&\n\t\t\t\t// special case: handle new props with value 'undefined'\n\t\t\t\t(value !== undefined || prop in state.copy_)) ||\n\t\t\t// special case: NaN\n\t\t\t(Number.isNaN(value) && Number.isNaN(state.copy_![prop]))\n\t\t)\n\t\t\treturn true\n\n\t\t// @ts-ignore\n\t\tstate.copy_![prop] = value\n\t\tstate.assigned_[prop] = true\n\t\treturn true\n\t},\n\tdeleteProperty(state, prop: string) {\n\t\t// The `undefined` check is a fast path for pre-existing keys.\n\t\tif (peek(state.base_, prop) !== undefined || prop in state.base_) {\n\t\t\tstate.assigned_[prop] = false\n\t\t\tprepareCopy(state)\n\t\t\tmarkChanged(state)\n\t\t} else {\n\t\t\t// if an originally not assigned property was deleted\n\t\t\tdelete state.assigned_[prop]\n\t\t}\n\t\tif (state.copy_) {\n\t\t\tdelete state.copy_[prop]\n\t\t}\n\t\treturn true\n\t},\n\t// Note: We never coerce `desc.value` into an Immer draft, because we can't make\n\t// the same guarantee in ES5 mode.\n\tgetOwnPropertyDescriptor(state, prop) {\n\t\tconst owner = latest(state)\n\t\tconst desc = Reflect.getOwnPropertyDescriptor(owner, prop)\n\t\tif (!desc) return desc\n\t\treturn {\n\t\t\twritable: true,\n\t\t\tconfigurable: state.type_ !== ArchType.Array || prop !== \"length\",\n\t\t\tenumerable: desc.enumerable,\n\t\t\tvalue: owner[prop]\n\t\t}\n\t},\n\tdefineProperty() {\n\t\tdie(11)\n\t},\n\tgetPrototypeOf(state) {\n\t\treturn getPrototypeOf(state.base_)\n\t},\n\tsetPrototypeOf() {\n\t\tdie(12)\n\t}\n}\n\n/**\n * Array drafts\n */\n\nconst arrayTraps: ProxyHandler<[ProxyArrayState]> = {}\neach(objectTraps, (key, fn) => {\n\t// @ts-ignore\n\tarrayTraps[key] = function() {\n\t\targuments[0] = arguments[0][0]\n\t\treturn fn.apply(this, arguments)\n\t}\n})\narrayTraps.deleteProperty = function(state, prop) {\n\tif (process.env.NODE_ENV !== \"production\" && isNaN(parseInt(prop as any)))\n\t\tdie(13)\n\t// @ts-ignore\n\treturn arrayTraps.set!.call(this, state, prop, undefined)\n}\narrayTraps.set = function(state, prop, value) {\n\tif (\n\t\tprocess.env.NODE_ENV !== \"production\" &&\n\t\tprop !== \"length\" &&\n\t\tisNaN(parseInt(prop as any))\n\t)\n\t\tdie(14)\n\treturn objectTraps.set!.call(this, state[0], prop, value, state[0])\n}\n\n// Access a property without creating an Immer draft.\nfunction peek(draft: Drafted, prop: PropertyKey) {\n\tconst state = draft[DRAFT_STATE]\n\tconst source = state ? latest(state) : draft\n\treturn source[prop]\n}\n\nfunction readPropFromProto(state: ImmerState, source: any, prop: PropertyKey) {\n\tconst desc = getDescriptorFromProto(source, prop)\n\treturn desc\n\t\t? `value` in desc\n\t\t\t? desc.value\n\t\t\t: // This is a very special case, if the prop is a getter defined by the\n\t\t\t  // prototype, we should invoke it with the draft as context!\n\t\t\t  desc.get?.call(state.draft_)\n\t\t: undefined\n}\n\nfunction getDescriptorFromProto(\n\tsource: any,\n\tprop: PropertyKey\n): PropertyDescriptor | undefined {\n\t// 'in' checks proto!\n\tif (!(prop in source)) return undefined\n\tlet proto = getPrototypeOf(source)\n\twhile (proto) {\n\t\tconst desc = Object.getOwnPropertyDescriptor(proto, prop)\n\t\tif (desc) return desc\n\t\tproto = getPrototypeOf(proto)\n\t}\n\treturn undefined\n}\n\nexport function markChanged(state: ImmerState) {\n\tif (!state.modified_) {\n\t\tstate.modified_ = true\n\t\tif (state.parent_) {\n\t\t\tmarkChanged(state.parent_)\n\t\t}\n\t}\n}\n\nexport function prepareCopy(state: {\n\tbase_: any\n\tcopy_: any\n\tscope_: ImmerScope\n}) {\n\tif (!state.copy_) {\n\t\tstate.copy_ = shallowCopy(\n\t\t\tstate.base_,\n\t\t\tstate.scope_.immer_.useStrictShallowCopy_\n\t\t)\n\t}\n}\n","import {\n\tIProduceWithPatches,\n\tIProduce,\n\tImmerState,\n\tDrafted,\n\tisDraftable,\n\tprocessResult,\n\tPatch,\n\tObjectish,\n\tDRAFT_STATE,\n\tDraft,\n\tPatchListener,\n\tisDraft,\n\tisMap,\n\tisSet,\n\tcreateProxyProxy,\n\tgetPlugin,\n\tdie,\n\tenterScope,\n\trevokeScope,\n\tleaveScope,\n\tusePatchesInScope,\n\tgetCurrentScope,\n\tNOTHING,\n\tfreeze,\n\tcurrent\n} from \"../internal\"\n\ninterface ProducersFns {\n\tproduce: IProduce\n\tproduceWithPatches: IProduceWithPatches\n}\n\nexport type StrictMode = boolean | \"class_only\";\n\nexport class Immer implements ProducersFns {\n\tautoFreeze_: boolean = true\n\tuseStrictShallowCopy_: StrictMode = false\n\n\tconstructor(config?: {\n\t\tautoFreeze?: boolean\n\t\tuseStrictShallowCopy?: StrictMode\n\t}) {\n\t\tif (typeof config?.autoFreeze === \"boolean\")\n\t\t\tthis.setAutoFreeze(config!.autoFreeze)\n\t\tif (typeof config?.useStrictShallowCopy === \"boolean\")\n\t\t\tthis.setUseStrictShallowCopy(config!.useStrictShallowCopy)\n\t}\n\n\t/**\n\t * The `produce` function takes a value and a \"recipe function\" (whose\n\t * return value often depends on the base state). The recipe function is\n\t * free to mutate its first argument however it wants. All mutations are\n\t * only ever applied to a __copy__ of the base state.\n\t *\n\t * Pass only a function to create a \"curried producer\" which relieves you\n\t * from passing the recipe function every time.\n\t *\n\t * Only plain objects and arrays are made mutable. All other objects are\n\t * considered uncopyable.\n\t *\n\t * Note: This function is __bound__ to its `Immer` instance.\n\t *\n\t * @param {any} base - the initial state\n\t * @param {Function} recipe - function that receives a proxy of the base state as first argument and which can be freely modified\n\t * @param {Function} patchListener - optional function that will be called with all the patches produced here\n\t * @returns {any} a new state, or the initial state if nothing was modified\n\t */\n\tproduce: IProduce = (base: any, recipe?: any, patchListener?: any) => {\n\t\t// curried invocation\n\t\tif (typeof base === \"function\" && typeof recipe !== \"function\") {\n\t\t\tconst defaultBase = recipe\n\t\t\trecipe = base\n\n\t\t\tconst self = this\n\t\t\treturn function curriedProduce(\n\t\t\t\tthis: any,\n\t\t\t\tbase = defaultBase,\n\t\t\t\t...args: any[]\n\t\t\t) {\n\t\t\t\treturn self.produce(base, (draft: Drafted) => recipe.call(this, draft, ...args)) // prettier-ignore\n\t\t\t}\n\t\t}\n\n\t\tif (typeof recipe !== \"function\") die(6)\n\t\tif (patchListener !== undefined && typeof patchListener !== \"function\")\n\t\t\tdie(7)\n\n\t\tlet result\n\n\t\t// Only plain objects, arrays, and \"immerable classes\" are drafted.\n\t\tif (isDraftable(base)) {\n\t\t\tconst scope = enterScope(this)\n\t\t\tconst proxy = createProxy(base, undefined)\n\t\t\tlet hasError = true\n\t\t\ttry {\n\t\t\t\tresult = recipe(proxy)\n\t\t\t\thasError = false\n\t\t\t} finally {\n\t\t\t\t// finally instead of catch + rethrow better preserves original stack\n\t\t\t\tif (hasError) revokeScope(scope)\n\t\t\t\telse leaveScope(scope)\n\t\t\t}\n\t\t\tusePatchesInScope(scope, patchListener)\n\t\t\treturn processResult(result, scope)\n\t\t} else if (!base || typeof base !== \"object\") {\n\t\t\tresult = recipe(base)\n\t\t\tif (result === undefined) result = base\n\t\t\tif (result === NOTHING) result = undefined\n\t\t\tif (this.autoFreeze_) freeze(result, true)\n\t\t\tif (patchListener) {\n\t\t\t\tconst p: Patch[] = []\n\t\t\t\tconst ip: Patch[] = []\n\t\t\t\tgetPlugin(\"Patches\").generateReplacementPatches_(base, result, p, ip)\n\t\t\t\tpatchListener(p, ip)\n\t\t\t}\n\t\t\treturn result\n\t\t} else die(1, base)\n\t}\n\n\tproduceWithPatches: IProduceWithPatches = (base: any, recipe?: any): any => {\n\t\t// curried invocation\n\t\tif (typeof base === \"function\") {\n\t\t\treturn (state: any, ...args: any[]) =>\n\t\t\t\tthis.produceWithPatches(state, (draft: any) => base(draft, ...args))\n\t\t}\n\n\t\tlet patches: Patch[], inversePatches: Patch[]\n\t\tconst result = this.produce(base, recipe, (p: Patch[], ip: Patch[]) => {\n\t\t\tpatches = p\n\t\t\tinversePatches = ip\n\t\t})\n\t\treturn [result, patches!, inversePatches!]\n\t}\n\n\tcreateDraft<T extends Objectish>(base: T): Draft<T> {\n\t\tif (!isDraftable(base)) die(8)\n\t\tif (isDraft(base)) base = current(base)\n\t\tconst scope = enterScope(this)\n\t\tconst proxy = createProxy(base, undefined)\n\t\tproxy[DRAFT_STATE].isManual_ = true\n\t\tleaveScope(scope)\n\t\treturn proxy as any\n\t}\n\n\tfinishDraft<D extends Draft<any>>(\n\t\tdraft: D,\n\t\tpatchListener?: PatchListener\n\t): D extends Draft<infer T> ? T : never {\n\t\tconst state: ImmerState = draft && (draft as any)[DRAFT_STATE]\n\t\tif (!state || !state.isManual_) die(9)\n\t\tconst {scope_: scope} = state\n\t\tusePatchesInScope(scope, patchListener)\n\t\treturn processResult(undefined, scope)\n\t}\n\n\t/**\n\t * Pass true to automatically freeze all copies created by Immer.\n\t *\n\t * By default, auto-freezing is enabled.\n\t */\n\tsetAutoFreeze(value: boolean) {\n\t\tthis.autoFreeze_ = value\n\t}\n\n\t/**\n\t * Pass true to enable strict shallow copy.\n\t *\n\t * By default, immer does not copy the object descriptors such as getter, setter and non-enumrable properties.\n\t */\n\tsetUseStrictShallowCopy(value: StrictMode) {\n\t\tthis.useStrictShallowCopy_ = value\n\t}\n\n\tapplyPatches<T extends Objectish>(base: T, patches: readonly Patch[]): T {\n\t\t// If a patch replaces the entire state, take that replacement as base\n\t\t// before applying patches\n\t\tlet i: number\n\t\tfor (i = patches.length - 1; i >= 0; i--) {\n\t\t\tconst patch = patches[i]\n\t\t\tif (patch.path.length === 0 && patch.op === \"replace\") {\n\t\t\t\tbase = patch.value\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\t// If there was a patch that replaced the entire state, start from the\n\t\t// patch after that.\n\t\tif (i > -1) {\n\t\t\tpatches = patches.slice(i + 1)\n\t\t}\n\n\t\tconst applyPatchesImpl = getPlugin(\"Patches\").applyPatches_\n\t\tif (isDraft(base)) {\n\t\t\t// N.B: never hits if some patch a replacement, patches are never drafts\n\t\t\treturn applyPatchesImpl(base, patches)\n\t\t}\n\t\t// Otherwise, produce a copy of the base state.\n\t\treturn this.produce(base, (draft: Drafted) =>\n\t\t\tapplyPatchesImpl(draft, patches)\n\t\t)\n\t}\n}\n\nexport function createProxy<T extends Objectish>(\n\tvalue: T,\n\tparent?: ImmerState\n): Drafted<T, ImmerState> {\n\t// precondition: createProxy should be guarded by isDraftable, so we know we can safely draft\n\tconst draft: Drafted = isMap(value)\n\t\t? getPlugin(\"MapSet\").proxyMap_(value, parent)\n\t\t: isSet(value)\n\t\t? getPlugin(\"MapSet\").proxySet_(value, parent)\n\t\t: createProxyProxy(value, parent)\n\n\tconst scope = parent ? parent.scope_ : getCurrentScope()\n\tscope.drafts_.push(draft)\n\treturn draft\n}\n","import {\n\tdie,\n\tisDraft,\n\tshallowCopy,\n\teach,\n\tDRAFT_STATE,\n\tset,\n\tImmerState,\n\tisDraftable,\n\tisFrozen\n} from \"../internal\"\n\n/** Takes a snapshot of the current state of a draft and finalizes it (but without freezing). This is a great utility to print the current state during debugging (no Proxies in the way). The output of current can also be safely leaked outside the producer. */\nexport function current<T>(value: T): T\nexport function current(value: any): any {\n\tif (!isDraft(value)) die(10, value)\n\treturn currentImpl(value)\n}\n\nfunction currentImpl(value: any): any {\n\tif (!isDraftable(value) || isFrozen(value)) return value\n\tconst state: ImmerState | undefined = value[DRAFT_STATE]\n\tlet copy: any\n\tif (state) {\n\t\tif (!state.modified_) return state.base_\n\t\t// Optimization: avoid generating new drafts during copying\n\t\tstate.finalized_ = true\n\t\tcopy = shallowCopy(value, state.scope_.immer_.useStrictShallowCopy_)\n\t} else {\n\t\tcopy = shallowCopy(value, true)\n\t}\n\t// recurse\n\teach(copy, (key, childValue) => {\n\t\tset(copy, key, currentImpl(childValue))\n\t})\n\tif (state) {\n\t\tstate.finalized_ = false\n\t}\n\treturn copy\n}\n","import {immerable} from \"../immer\"\nimport {\n\tImmerState,\n\tPatch,\n\tSetState,\n\tProxyArrayState,\n\tMapState,\n\tProxyObjectState,\n\tPatchPath,\n\tget,\n\teach,\n\thas,\n\tgetArchtype,\n\tgetPrototypeOf,\n\tisSet,\n\tisMap,\n\tloadPlugin,\n\tArchType,\n\tdie,\n\tisDraft,\n\tisDraftable,\n\tNOTHING,\n\terrors\n} from \"../internal\"\n\nexport function enablePatches() {\n\tconst errorOffset = 16\n\tif (process.env.NODE_ENV !== \"production\") {\n\t\terrors.push(\n\t\t\t'Sets cannot have \"replace\" patches.',\n\t\t\tfunction(op: string) {\n\t\t\t\treturn \"Unsupported patch operation: \" + op\n\t\t\t},\n\t\t\tfunction(path: string) {\n\t\t\t\treturn \"Cannot apply patch, path doesn't resolve: \" + path\n\t\t\t},\n\t\t\t\"Patching reserved attributes like __proto__, prototype and constructor is not allowed\"\n\t\t)\n\t}\n\n\tconst REPLACE = \"replace\"\n\tconst ADD = \"add\"\n\tconst REMOVE = \"remove\"\n\n\tfunction generatePatches_(\n\t\tstate: ImmerState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t): void {\n\t\tswitch (state.type_) {\n\t\t\tcase ArchType.Object:\n\t\t\tcase ArchType.Map:\n\t\t\t\treturn generatePatchesFromAssigned(\n\t\t\t\t\tstate,\n\t\t\t\t\tbasePath,\n\t\t\t\t\tpatches,\n\t\t\t\t\tinversePatches\n\t\t\t\t)\n\t\t\tcase ArchType.Array:\n\t\t\t\treturn generateArrayPatches(state, basePath, patches, inversePatches)\n\t\t\tcase ArchType.Set:\n\t\t\t\treturn generateSetPatches(\n\t\t\t\t\t(state as any) as SetState,\n\t\t\t\t\tbasePath,\n\t\t\t\t\tpatches,\n\t\t\t\t\tinversePatches\n\t\t\t\t)\n\t\t}\n\t}\n\n\tfunction generateArrayPatches(\n\t\tstate: ProxyArrayState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t) {\n\t\tlet {base_, assigned_} = state\n\t\tlet copy_ = state.copy_!\n\n\t\t// Reduce complexity by ensuring `base` is never longer.\n\t\tif (copy_.length < base_.length) {\n\t\t\t// @ts-ignore\n\t\t\t;[base_, copy_] = [copy_, base_]\n\t\t\t;[patches, inversePatches] = [inversePatches, patches]\n\t\t}\n\n\t\t// Process replaced indices.\n\t\tfor (let i = 0; i < base_.length; i++) {\n\t\t\tif (assigned_[i] && copy_[i] !== base_[i]) {\n\t\t\t\tconst path = basePath.concat([i])\n\t\t\t\tpatches.push({\n\t\t\t\t\top: REPLACE,\n\t\t\t\t\tpath,\n\t\t\t\t\t// Need to maybe clone it, as it can in fact be the original value\n\t\t\t\t\t// due to the base/copy inversion at the start of this function\n\t\t\t\t\tvalue: clonePatchValueIfNeeded(copy_[i])\n\t\t\t\t})\n\t\t\t\tinversePatches.push({\n\t\t\t\t\top: REPLACE,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue: clonePatchValueIfNeeded(base_[i])\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\n\t\t// Process added indices.\n\t\tfor (let i = base_.length; i < copy_.length; i++) {\n\t\t\tconst path = basePath.concat([i])\n\t\t\tpatches.push({\n\t\t\t\top: ADD,\n\t\t\t\tpath,\n\t\t\t\t// Need to maybe clone it, as it can in fact be the original value\n\t\t\t\t// due to the base/copy inversion at the start of this function\n\t\t\t\tvalue: clonePatchValueIfNeeded(copy_[i])\n\t\t\t})\n\t\t}\n\t\tfor (let i = copy_.length - 1; base_.length <= i; --i) {\n\t\t\tconst path = basePath.concat([i])\n\t\t\tinversePatches.push({\n\t\t\t\top: REMOVE,\n\t\t\t\tpath\n\t\t\t})\n\t\t}\n\t}\n\n\t// This is used for both Map objects and normal objects.\n\tfunction generatePatchesFromAssigned(\n\t\tstate: MapState | ProxyObjectState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t) {\n\t\tconst {base_, copy_} = state\n\t\teach(state.assigned_!, (key, assignedValue) => {\n\t\t\tconst origValue = get(base_, key)\n\t\t\tconst value = get(copy_!, key)\n\t\t\tconst op = !assignedValue ? REMOVE : has(base_, key) ? REPLACE : ADD\n\t\t\tif (origValue === value && op === REPLACE) return\n\t\t\tconst path = basePath.concat(key as any)\n\t\t\tpatches.push(op === REMOVE ? {op, path} : {op, path, value})\n\t\t\tinversePatches.push(\n\t\t\t\top === ADD\n\t\t\t\t\t? {op: REMOVE, path}\n\t\t\t\t\t: op === REMOVE\n\t\t\t\t\t? {op: ADD, path, value: clonePatchValueIfNeeded(origValue)}\n\t\t\t\t\t: {op: REPLACE, path, value: clonePatchValueIfNeeded(origValue)}\n\t\t\t)\n\t\t})\n\t}\n\n\tfunction generateSetPatches(\n\t\tstate: SetState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t) {\n\t\tlet {base_, copy_} = state\n\n\t\tlet i = 0\n\t\tbase_.forEach((value: any) => {\n\t\t\tif (!copy_!.has(value)) {\n\t\t\t\tconst path = basePath.concat([i])\n\t\t\t\tpatches.push({\n\t\t\t\t\top: REMOVE,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t\tinversePatches.unshift({\n\t\t\t\t\top: ADD,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t}\n\t\t\ti++\n\t\t})\n\t\ti = 0\n\t\tcopy_!.forEach((value: any) => {\n\t\t\tif (!base_.has(value)) {\n\t\t\t\tconst path = basePath.concat([i])\n\t\t\t\tpatches.push({\n\t\t\t\t\top: ADD,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t\tinversePatches.unshift({\n\t\t\t\t\top: REMOVE,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t}\n\t\t\ti++\n\t\t})\n\t}\n\n\tfunction generateReplacementPatches_(\n\t\tbaseValue: any,\n\t\treplacement: any,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t): void {\n\t\tpatches.push({\n\t\t\top: REPLACE,\n\t\t\tpath: [],\n\t\t\tvalue: replacement === NOTHING ? undefined : replacement\n\t\t})\n\t\tinversePatches.push({\n\t\t\top: REPLACE,\n\t\t\tpath: [],\n\t\t\tvalue: baseValue\n\t\t})\n\t}\n\n\tfunction applyPatches_<T>(draft: T, patches: readonly Patch[]): T {\n\t\tpatches.forEach(patch => {\n\t\t\tconst {path, op} = patch\n\n\t\t\tlet base: any = draft\n\t\t\tfor (let i = 0; i < path.length - 1; i++) {\n\t\t\t\tconst parentType = getArchtype(base)\n\t\t\t\tlet p = path[i]\n\t\t\t\tif (typeof p !== \"string\" && typeof p !== \"number\") {\n\t\t\t\t\tp = \"\" + p\n\t\t\t\t}\n\n\t\t\t\t// See #738, avoid prototype pollution\n\t\t\t\tif (\n\t\t\t\t\t(parentType === ArchType.Object || parentType === ArchType.Array) &&\n\t\t\t\t\t(p === \"__proto__\" || p === \"constructor\")\n\t\t\t\t)\n\t\t\t\t\tdie(errorOffset + 3)\n\t\t\t\tif (typeof base === \"function\" && p === \"prototype\")\n\t\t\t\t\tdie(errorOffset + 3)\n\t\t\t\tbase = get(base, p)\n\t\t\t\tif (typeof base !== \"object\") die(errorOffset + 2, path.join(\"/\"))\n\t\t\t}\n\n\t\t\tconst type = getArchtype(base)\n\t\t\tconst value = deepClonePatchValue(patch.value) // used to clone patch to ensure original patch is not modified, see #411\n\t\t\tconst key = path[path.length - 1]\n\t\t\tswitch (op) {\n\t\t\t\tcase REPLACE:\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase ArchType.Map:\n\t\t\t\t\t\t\treturn base.set(key, value)\n\t\t\t\t\t\t/* istanbul ignore next */\n\t\t\t\t\t\tcase ArchType.Set:\n\t\t\t\t\t\t\tdie(errorOffset)\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t// if value is an object, then it's assigned by reference\n\t\t\t\t\t\t\t// in the following add or remove ops, the value field inside the patch will also be modifyed\n\t\t\t\t\t\t\t// so we use value from the cloned patch\n\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\treturn (base[key] = value)\n\t\t\t\t\t}\n\t\t\t\tcase ADD:\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase ArchType.Array:\n\t\t\t\t\t\t\treturn key === \"-\"\n\t\t\t\t\t\t\t\t? base.push(value)\n\t\t\t\t\t\t\t\t: base.splice(key as any, 0, value)\n\t\t\t\t\t\tcase ArchType.Map:\n\t\t\t\t\t\t\treturn base.set(key, value)\n\t\t\t\t\t\tcase ArchType.Set:\n\t\t\t\t\t\t\treturn base.add(value)\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn (base[key] = value)\n\t\t\t\t\t}\n\t\t\t\tcase REMOVE:\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase ArchType.Array:\n\t\t\t\t\t\t\treturn base.splice(key as any, 1)\n\t\t\t\t\t\tcase ArchType.Map:\n\t\t\t\t\t\t\treturn base.delete(key)\n\t\t\t\t\t\tcase ArchType.Set:\n\t\t\t\t\t\t\treturn base.delete(patch.value)\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn delete base[key]\n\t\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t\tdie(errorOffset + 1, op)\n\t\t\t}\n\t\t})\n\n\t\treturn draft\n\t}\n\n\t// optimize: this is quite a performance hit, can we detect intelligently when it is needed?\n\t// E.g. auto-draft when new objects from outside are assigned and modified?\n\t// (See failing test when deepClone just returns obj)\n\tfunction deepClonePatchValue<T>(obj: T): T\n\tfunction deepClonePatchValue(obj: any) {\n\t\tif (!isDraftable(obj)) return obj\n\t\tif (Array.isArray(obj)) return obj.map(deepClonePatchValue)\n\t\tif (isMap(obj))\n\t\t\treturn new Map(\n\t\t\t\tArray.from(obj.entries()).map(([k, v]) => [k, deepClonePatchValue(v)])\n\t\t\t)\n\t\tif (isSet(obj)) return new Set(Array.from(obj).map(deepClonePatchValue))\n\t\tconst cloned = Object.create(getPrototypeOf(obj))\n\t\tfor (const key in obj) cloned[key] = deepClonePatchValue(obj[key])\n\t\tif (has(obj, immerable)) cloned[immerable] = obj[immerable]\n\t\treturn cloned\n\t}\n\n\tfunction clonePatchValueIfNeeded<T>(obj: T): T {\n\t\tif (isDraft(obj)) {\n\t\t\treturn deepClonePatchValue(obj)\n\t\t} else return obj\n\t}\n\n\tloadPlugin(\"Patches\", {\n\t\tapplyPatches_,\n\t\tgeneratePatches_,\n\t\tgenerateReplacementPatches_\n\t})\n}\n","// types only!\nimport {\n\tImmerState,\n\tAnyMap,\n\tAnySet,\n\tMapState,\n\tSetState,\n\tDRAFT_STATE,\n\tgetCurrentScope,\n\tlatest,\n\tisDraftable,\n\tcreateProxy,\n\tloadPlugin,\n\tmarkChanged,\n\tdie,\n\tArchType,\n\teach\n} from \"../internal\"\n\nexport function enableMapSet() {\n\tclass DraftMap extends Map {\n\t\t[DRAFT_STATE]: MapState\n\n\t\tconstructor(target: AnyMap, parent?: ImmerState) {\n\t\t\tsuper()\n\t\t\tthis[DRAFT_STATE] = {\n\t\t\t\ttype_: ArchType.Map,\n\t\t\t\tparent_: parent,\n\t\t\t\tscope_: parent ? parent.scope_ : getCurrentScope()!,\n\t\t\t\tmodified_: false,\n\t\t\t\tfinalized_: false,\n\t\t\t\tcopy_: undefined,\n\t\t\t\tassigned_: undefined,\n\t\t\t\tbase_: target,\n\t\t\t\tdraft_: this as any,\n\t\t\t\tisManual_: false,\n\t\t\t\trevoked_: false\n\t\t\t}\n\t\t}\n\n\t\tget size(): number {\n\t\t\treturn latest(this[DRAFT_STATE]).size\n\t\t}\n\n\t\thas(key: any): boolean {\n\t\t\treturn latest(this[DRAFT_STATE]).has(key)\n\t\t}\n\n\t\tset(key: any, value: any) {\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tif (!latest(state).has(key) || latest(state).get(key) !== value) {\n\t\t\t\tprepareMapCopy(state)\n\t\t\t\tmarkChanged(state)\n\t\t\t\tstate.assigned_!.set(key, true)\n\t\t\t\tstate.copy_!.set(key, value)\n\t\t\t\tstate.assigned_!.set(key, true)\n\t\t\t}\n\t\t\treturn this\n\t\t}\n\n\t\tdelete(key: any): boolean {\n\t\t\tif (!this.has(key)) {\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tprepareMapCopy(state)\n\t\t\tmarkChanged(state)\n\t\t\tif (state.base_.has(key)) {\n\t\t\t\tstate.assigned_!.set(key, false)\n\t\t\t} else {\n\t\t\t\tstate.assigned_!.delete(key)\n\t\t\t}\n\t\t\tstate.copy_!.delete(key)\n\t\t\treturn true\n\t\t}\n\n\t\tclear() {\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tif (latest(state).size) {\n\t\t\t\tprepareMapCopy(state)\n\t\t\t\tmarkChanged(state)\n\t\t\t\tstate.assigned_ = new Map()\n\t\t\t\teach(state.base_, key => {\n\t\t\t\t\tstate.assigned_!.set(key, false)\n\t\t\t\t})\n\t\t\t\tstate.copy_!.clear()\n\t\t\t}\n\t\t}\n\n\t\tforEach(cb: (value: any, key: any, self: any) => void, thisArg?: any) {\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tlatest(state).forEach((_value: any, key: any, _map: any) => {\n\t\t\t\tcb.call(thisArg, this.get(key), key, this)\n\t\t\t})\n\t\t}\n\n\t\tget(key: any): any {\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tconst value = latest(state).get(key)\n\t\t\tif (state.finalized_ || !isDraftable(value)) {\n\t\t\t\treturn value\n\t\t\t}\n\t\t\tif (value !== state.base_.get(key)) {\n\t\t\t\treturn value // either already drafted or reassigned\n\t\t\t}\n\t\t\t// despite what it looks, this creates a draft only once, see above condition\n\t\t\tconst draft = createProxy(value, state)\n\t\t\tprepareMapCopy(state)\n\t\t\tstate.copy_!.set(key, draft)\n\t\t\treturn draft\n\t\t}\n\n\t\tkeys(): IterableIterator<any> {\n\t\t\treturn latest(this[DRAFT_STATE]).keys()\n\t\t}\n\n\t\tvalues(): IterableIterator<any> {\n\t\t\tconst iterator = this.keys()\n\t\t\treturn {\n\t\t\t\t[Symbol.iterator]: () => this.values(),\n\t\t\t\tnext: () => {\n\t\t\t\t\tconst r = iterator.next()\n\t\t\t\t\t/* istanbul ignore next */\n\t\t\t\t\tif (r.done) return r\n\t\t\t\t\tconst value = this.get(r.value)\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdone: false,\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} as any\n\t\t}\n\n\t\tentries(): IterableIterator<[any, any]> {\n\t\t\tconst iterator = this.keys()\n\t\t\treturn {\n\t\t\t\t[Symbol.iterator]: () => this.entries(),\n\t\t\t\tnext: () => {\n\t\t\t\t\tconst r = iterator.next()\n\t\t\t\t\t/* istanbul ignore next */\n\t\t\t\t\tif (r.done) return r\n\t\t\t\t\tconst value = this.get(r.value)\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdone: false,\n\t\t\t\t\t\tvalue: [r.value, value]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} as any\n\t\t}\n\n\t\t[Symbol.iterator]() {\n\t\t\treturn this.entries()\n\t\t}\n\t}\n\n\tfunction proxyMap_<T extends AnyMap>(target: T, parent?: ImmerState): T {\n\t\t// @ts-ignore\n\t\treturn new DraftMap(target, parent)\n\t}\n\n\tfunction prepareMapCopy(state: MapState) {\n\t\tif (!state.copy_) {\n\t\t\tstate.assigned_ = new Map()\n\t\t\tstate.copy_ = new Map(state.base_)\n\t\t}\n\t}\n\n\tclass DraftSet extends Set {\n\t\t[DRAFT_STATE]: SetState\n\t\tconstructor(target: AnySet, parent?: ImmerState) {\n\t\t\tsuper()\n\t\t\tthis[DRAFT_STATE] = {\n\t\t\t\ttype_: ArchType.Set,\n\t\t\t\tparent_: parent,\n\t\t\t\tscope_: parent ? parent.scope_ : getCurrentScope()!,\n\t\t\t\tmodified_: false,\n\t\t\t\tfinalized_: false,\n\t\t\t\tcopy_: undefined,\n\t\t\t\tbase_: target,\n\t\t\t\tdraft_: this,\n\t\t\t\tdrafts_: new Map(),\n\t\t\t\trevoked_: false,\n\t\t\t\tisManual_: false\n\t\t\t}\n\t\t}\n\n\t\tget size(): number {\n\t\t\treturn latest(this[DRAFT_STATE]).size\n\t\t}\n\n\t\thas(value: any): boolean {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\t// bit of trickery here, to be able to recognize both the value, and the draft of its value\n\t\t\tif (!state.copy_) {\n\t\t\t\treturn state.base_.has(value)\n\t\t\t}\n\t\t\tif (state.copy_.has(value)) return true\n\t\t\tif (state.drafts_.has(value) && state.copy_.has(state.drafts_.get(value)))\n\t\t\t\treturn true\n\t\t\treturn false\n\t\t}\n\n\t\tadd(value: any): any {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tif (!this.has(value)) {\n\t\t\t\tprepareSetCopy(state)\n\t\t\t\tmarkChanged(state)\n\t\t\t\tstate.copy_!.add(value)\n\t\t\t}\n\t\t\treturn this\n\t\t}\n\n\t\tdelete(value: any): any {\n\t\t\tif (!this.has(value)) {\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tprepareSetCopy(state)\n\t\t\tmarkChanged(state)\n\t\t\treturn (\n\t\t\t\tstate.copy_!.delete(value) ||\n\t\t\t\t(state.drafts_.has(value)\n\t\t\t\t\t? state.copy_!.delete(state.drafts_.get(value))\n\t\t\t\t\t: /* istanbul ignore next */ false)\n\t\t\t)\n\t\t}\n\n\t\tclear() {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tif (latest(state).size) {\n\t\t\t\tprepareSetCopy(state)\n\t\t\t\tmarkChanged(state)\n\t\t\t\tstate.copy_!.clear()\n\t\t\t}\n\t\t}\n\n\t\tvalues(): IterableIterator<any> {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tprepareSetCopy(state)\n\t\t\treturn state.copy_!.values()\n\t\t}\n\n\t\tentries(): IterableIterator<[any, any]> {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tprepareSetCopy(state)\n\t\t\treturn state.copy_!.entries()\n\t\t}\n\n\t\tkeys(): IterableIterator<any> {\n\t\t\treturn this.values()\n\t\t}\n\n\t\t[Symbol.iterator]() {\n\t\t\treturn this.values()\n\t\t}\n\n\t\tforEach(cb: any, thisArg?: any) {\n\t\t\tconst iterator = this.values()\n\t\t\tlet result = iterator.next()\n\t\t\twhile (!result.done) {\n\t\t\t\tcb.call(thisArg, result.value, result.value, this)\n\t\t\t\tresult = iterator.next()\n\t\t\t}\n\t\t}\n\t}\n\tfunction proxySet_<T extends AnySet>(target: T, parent?: ImmerState): T {\n\t\t// @ts-ignore\n\t\treturn new DraftSet(target, parent)\n\t}\n\n\tfunction prepareSetCopy(state: SetState) {\n\t\tif (!state.copy_) {\n\t\t\t// create drafts for all entries to preserve insertion order\n\t\t\tstate.copy_ = new Set()\n\t\t\tstate.base_.forEach(value => {\n\t\t\t\tif (isDraftable(value)) {\n\t\t\t\t\tconst draft = createProxy(value, state)\n\t\t\t\t\tstate.drafts_.set(value, draft)\n\t\t\t\t\tstate.copy_!.add(draft)\n\t\t\t\t} else {\n\t\t\t\t\tstate.copy_!.add(value)\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}\n\n\tfunction assertUnrevoked(state: any /*ES5State | MapState | SetState*/) {\n\t\tif (state.revoked_) die(3, JSON.stringify(latest(state)))\n\t}\n\n\tloadPlugin(\"MapSet\", {proxyMap_, proxySet_})\n}\n"],"mappings":"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","ignoreList":[]}