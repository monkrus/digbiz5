{"version":3,"names":["_react","require","_reactNative","_defaultConfiguration","_interopRequireDefault","_nativeInterface","_state2","Types","_interopRequireWildcard","Object","keys","forEach","key","prototype","hasOwnProperty","call","_exportNames","exports","defineProperty","enumerable","get","_configuration","default","_state","createState","isRequestInProgress","requestQueue","configure","configuration","assign","tearDown","Platform","OS","fetch","requestedInterface","latest","refresh","Promise","resolve","push","_fetchCurrentState","then","result","finally","addEventListener","listener","add","remove","useNetInfo","_ref","useState","type","NetInfoStateType","unknown","isConnected","isInternetReachable","details","_ref2","_slicedToArray2","netInfo","setNetInfo","useEffect","unsubscribe","useNetInfoInstance","isPaused","arguments","length","undefined","_ref3","_ref4","networkInfoManager","setNetworkInfoManager","_ref5","_ref6","config","state","useCallback"],"sources":["index.ts"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport {useState, useEffect, useCallback} from 'react';\nimport {Platform} from 'react-native';\nimport DEFAULT_CONFIGURATION from './internal/defaultConfiguration';\nimport NativeInterface from './internal/nativeInterface';\nimport State from './internal/state';\nimport * as Types from './internal/types';\n\n// Stores the currently used configuration\nlet _configuration = DEFAULT_CONFIGURATION;\n\n// Stores the singleton reference to the state manager\nlet _state: State | null = null;\nconst createState = (): State => {\n  return new State(_configuration);\n};\n\n// Track ongoing requests\nlet isRequestInProgress = false;\nlet requestQueue: ((state: Types.NetInfoState) => void)[] = [];\n\n/**\n * Configures the library with the given configuration. Note that calling this will stop all\n * previously added listeners from being called again. It is best to call this right when your\n * application is started to avoid issues. The configuration sets up a global singleton instance.\n *\n * @param configuration The new configuration to set.\n */\nexport function configure(\n  configuration: Partial<Types.NetInfoConfiguration>,\n): void {\n  _configuration = {\n    ...DEFAULT_CONFIGURATION,\n    ...configuration,\n  };\n\n  if (_state) {\n    _state.tearDown();\n    _state = createState();\n  }\n\n  if (Platform.OS === 'ios') {\n    NativeInterface.configure(configuration);\n  }\n}\n\n/**\n * Returns a `Promise` that resolves to a `NetInfoState` object.\n * This function operates on the global singleton instance configured using `configure()`\n *\n * @param [requestedInterface] interface from which to obtain the information\n *\n * @returns A Promise which contains the current connection state.\n */\nexport function fetch(\n  requestedInterface?: string,\n): Promise<Types.NetInfoState> {\n  if (!_state) {\n    _state = createState();\n  }\n  return _state.latest(requestedInterface);\n}\n\n/**\n * Force-refreshes the internal state of the global singleton managed by this library.\n *\n * @returns A Promise which contains the updated connection state.\n */\nexport function refresh(): Promise<Types.NetInfoState> {\n  if (!_state) {\n    _state = createState();\n  }\n\n // If a request is already in progress, return a promise that will resolve when the current request finishes\n  if (isRequestInProgress) {\n    return new Promise((resolve) => {\n      requestQueue.push(resolve);\n    });\n  }\n\n  isRequestInProgress = true;\n\n  return _state._fetchCurrentState().then((result) => {\n    requestQueue.forEach((resolve) => resolve(result));\n    requestQueue = [];\n    return result;\n  }).finally(() => {\n    isRequestInProgress = false;\n  });\n}\n\n/**\n * Subscribe to the global singleton's connection information. The callback is called with a parameter of type\n * [`NetInfoState`](README.md#netinfostate) whenever the connection state changes. Your listener\n * will be called with the latest information soon after you subscribe and then with any\n * subsequent changes afterwards. You should not assume that the listener is called in the same\n * way across devices or platforms.\n *\n * @param listener The listener which is called when the network state changes.\n *\n * @returns A function which can be called to unsubscribe.\n */\nexport function addEventListener(\n  listener: Types.NetInfoChangeHandler,\n): Types.NetInfoSubscription {\n  if (!_state) {\n    _state = createState();\n  }\n\n  _state.add(listener);\n  return (): void => {\n    _state && _state.remove(listener);\n  };\n}\n\n/**\n * A React Hook into this library's singleton which updates when the connection state changes.\n *\n * @param {Partial<Types.NetInfoConfiguration>} configuration - Configure the isolated network checker managed by this hook\n *\n * @returns The connection state.\n */\nexport function useNetInfo(\n  configuration?: Partial<Types.NetInfoConfiguration>,\n): Types.NetInfoState {\n  if (configuration) {\n    configure(configuration);\n  }\n\n  const [netInfo, setNetInfo] = useState<Types.NetInfoState>({\n    type: Types.NetInfoStateType.unknown,\n    isConnected: null,\n    isInternetReachable: null,\n    details: null,\n  });\n\n  useEffect((): (() => void) => {\n    const unsubscribe = addEventListener(setNetInfo);\n    return () => unsubscribe();\n  }, []);\n\n  return netInfo;\n}\n\n/**\n * A React Hook which manages an isolated instance of the network info manager.\n * This is not a hook into a singleton shared state. NetInfo.configure, NetInfo.addEventListener,\n * NetInfo.fetch, NetInfo.refresh are performed on a global singleton and have no affect on this hook.\n * @param {boolean} isPaused - Pause the internal network checks.\n * @param {Partial<Types.NetInfoConfiguration>} configuration - Configure the isolated network checker managed by this hook\n *\n * @returns the netInfo state and a refresh function\n */\nexport function useNetInfoInstance(\n  isPaused = false,\n  configuration?: Partial<Types.NetInfoConfiguration>,\n) {\n  const [networkInfoManager, setNetworkInfoManager] = useState<State>();\n  const [netInfo, setNetInfo] = useState<Types.NetInfoState>({\n    type: Types.NetInfoStateType.unknown,\n    isConnected: null,\n    isInternetReachable: null,\n    details: null,\n  });\n\n  useEffect(() => {\n    if (isPaused) {\n      return;\n    }\n    const config = {\n      ...DEFAULT_CONFIGURATION,\n      ...configuration,\n    };\n    const state = new State(config);\n    setNetworkInfoManager(state);\n    state.add(setNetInfo);\n    return state.tearDown;\n  }, [isPaused, configuration]);\n\n  const refresh = useCallback(() => {\n    if (networkInfoManager && !isRequestInProgress) {\n      isRequestInProgress = true;\n      networkInfoManager._fetchCurrentState().finally(() => {\n        isRequestInProgress = false;\n      });\n    }\n  }, [networkInfoManager]);\n\n  return {\n    netInfo,\n    refresh,\n  };\n}\n\nexport * from './internal/types';\n\nexport default {\n  configure,\n  fetch,\n  refresh,\n  addEventListener,\n  useNetInfo,\n  useNetInfoInstance,\n};\n"],"mappings":"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","ignoreList":[]}