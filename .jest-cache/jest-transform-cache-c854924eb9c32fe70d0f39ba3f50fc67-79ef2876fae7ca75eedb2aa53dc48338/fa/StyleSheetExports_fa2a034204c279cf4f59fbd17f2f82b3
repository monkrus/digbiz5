2837cf5b65504f875de6e5ce9d41e76f
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _composeStyles = _interopRequireDefault(require("../../src/private/styles/composeStyles"));
var _flattenStyle = _interopRequireDefault(require("./flattenStyle"));
var ReactNativeStyleAttributes = require('../Components/View/ReactNativeStyleAttributes').default;
var PixelRatio = require('../Utilities/PixelRatio').default;
var hairlineWidth = PixelRatio.roundToNearestPixel(0.4);
if (hairlineWidth === 0) {
  hairlineWidth = 1 / PixelRatio.get();
}
var absoluteFill = {
  position: 'absolute',
  left: 0,
  right: 0,
  top: 0,
  bottom: 0
};
if (__DEV__) {
  Object.freeze(absoluteFill);
}
var _default = exports.default = {
  hairlineWidth: hairlineWidth,
  absoluteFill: absoluteFill,
  absoluteFillObject: absoluteFill,
  compose: _composeStyles.default,
  flatten: _flattenStyle.default,
  setStyleAttributePreprocessor: function setStyleAttributePreprocessor(property, process) {
    var _ReactNativeStyleAttr, _ReactNativeStyleAttr2;
    var value;
    if (ReactNativeStyleAttributes[property] === true) {
      value = {
        process: process
      };
    } else if (typeof ReactNativeStyleAttributes[property] === 'object') {
      value = Object.assign({}, ReactNativeStyleAttributes[property], {
        process: process
      });
    } else {
      console.error(`${property} is not a valid style attribute`);
      return;
    }
    if (__DEV__ && typeof value.process === 'function' && typeof ((_ReactNativeStyleAttr = ReactNativeStyleAttributes[property]) == null ? void 0 : _ReactNativeStyleAttr.process) === 'function' && value.process !== ((_ReactNativeStyleAttr2 = ReactNativeStyleAttributes[property]) == null ? void 0 : _ReactNativeStyleAttr2.process)) {
      console.warn(`Overwriting ${property} style attribute preprocessor`);
    }
    ReactNativeStyleAttributes[property] = value;
  },
  create: function create(obj) {
    if (__DEV__) {
      for (var key in obj) {
        if (obj[key]) {
          Object.freeze(obj[key]);
        }
      }
    }
    return obj;
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,