b0d8ed2f4425462ac947ae6e5f134cb8
_getJestObj().mock('react-native', function () {
  return {
    Linking: {
      openURL: jest.fn(),
      canOpenURL: jest.fn(),
      getInitialURL: jest.fn(),
      addEventListener: jest.fn(),
      removeEventListener: jest.fn()
    },
    Alert: {
      alert: jest.fn()
    },
    Platform: {
      OS: 'ios'
    }
  };
});
_getJestObj().mock('../../../src/utils/config', function () {
  return {
    AppConfig: {
      webUrl: 'https://digbiz.app',
      appScheme: 'digbiz'
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("react-native");
var _deepLinking = require("../../../src/utils/deepLinking");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockNavigate = jest.fn();
var mockNavigation = {
  navigate: mockNavigate,
  reset: jest.fn(),
  goBack: jest.fn()
};
describe('Deep Link Handling', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe('Deep Link Structure Validation', function () {
    test('should validate correct app scheme links', function () {
      var validLinks = ['digbiz://card/abc123', 'digbiz://card/def456', 'digbiz://profile/user123', 'digbiz://share/card123'];
      validLinks.forEach(function (link) {
        expect((0, _deepLinking.validateDeepLinkStructure)(link)).toBe(true);
      });
    });
    test('should reject invalid scheme links', function () {
      var invalidLinks = ['http://example.com', 'https://example.com', 'wrongscheme://card/123', 'digbiz://', 'digbiz:///', '', null, undefined];
      invalidLinks.forEach(function (link) {
        expect((0, _deepLinking.validateDeepLinkStructure)(link)).toBe(false);
      });
    });
    test('should validate universal links', function () {
      var validUniversalLinks = ['https://digbiz.app/open/card/abc123', 'https://digbiz.app/open/profile/user456', 'https://www.digbiz.app/open/card/def789'];
      validUniversalLinks.forEach(function (link) {
        expect((0, _deepLinking.validateDeepLinkStructure)(link)).toBe(true);
      });
    });
    test('should reject invalid universal links', function () {
      var invalidUniversalLinks = ['https://otherdomain.com/open/card/123', 'https://digbiz.app/card/123', 'https://digbiz.app/open/', 'http://digbiz.app/open/card/123'];
      invalidUniversalLinks.forEach(function (link) {
        expect((0, _deepLinking.validateDeepLinkStructure)(link)).toBe(false);
      });
    });
  });
  describe('Card ID Extraction', function () {
    test('should extract card ID from app scheme URLs', function () {
      var testCases = [{
        url: 'digbiz://card/abc123',
        expected: 'abc123'
      }, {
        url: 'digbiz://card/def456ghi789',
        expected: 'def456ghi789'
      }, {
        url: 'digbiz://card/card-with-dashes',
        expected: 'card-with-dashes'
      }];
      testCases.forEach(function (_ref) {
        var url = _ref.url,
          expected = _ref.expected;
        expect((0, _deepLinking.extractCardIdFromUrl)(url)).toBe(expected);
      });
    });
    test('should extract card ID from universal links', function () {
      var testCases = [{
        url: 'https://digbiz.app/open/card/abc123',
        expected: 'abc123'
      }, {
        url: 'https://digbiz.app/card/shared-code',
        expected: 'shared-code'
      }, {
        url: 'https://www.digbiz.app/card/xyz789',
        expected: 'xyz789'
      }];
      testCases.forEach(function (_ref2) {
        var url = _ref2.url,
          expected = _ref2.expected;
        expect((0, _deepLinking.extractCardIdFromUrl)(url)).toBe(expected);
      });
    });
    test('should handle URLs with query parameters', function () {
      var urlsWithParams = ['digbiz://card/abc123?ref=qr&source=scan', 'https://digbiz.app/card/def456?utm_source=share', 'https://digbiz.app/open/card/ghi789?action=view&from=email'];
      var expectedIds = ['abc123', 'def456', 'ghi789'];
      urlsWithParams.forEach(function (url, index) {
        expect((0, _deepLinking.extractCardIdFromUrl)(url)).toBe(expectedIds[index]);
      });
    });
    test('should return null for invalid URLs', function () {
      var invalidUrls = ['digbiz://card/', 'digbiz://profile/user123', 'https://otherdomain.com/card/123', 'invalid-url', '', null, undefined];
      invalidUrls.forEach(function (url) {
        expect((0, _deepLinking.extractCardIdFromUrl)(url)).toBeNull();
      });
    });
  });
  describe('Deep Link Parsing', function () {
    test('should parse card view deep links', function () {
      var cardLinks = ['digbiz://card/abc123', 'https://digbiz.app/card/def456', 'https://digbiz.app/open/card/ghi789'];
      cardLinks.forEach(function (link) {
        var parsed = (0, _deepLinking.parseDeepLink)(link);
        expect(parsed.type).toBe('card');
        expect(parsed.action).toBe('view');
        expect(parsed.cardId).toBeTruthy();
      });
    });
    test('should parse profile deep links', function () {
      var profileLinks = ['digbiz://profile/user123', 'https://digbiz.app/profile/user456'];
      profileLinks.forEach(function (link) {
        var parsed = (0, _deepLinking.parseDeepLink)(link);
        expect(parsed.type).toBe('profile');
        expect(parsed.userId).toBeTruthy();
      });
    });
    test('should parse share deep links', function () {
      var shareLinks = ['digbiz://share/card123', 'https://digbiz.app/share/card456'];
      shareLinks.forEach(function (link) {
        var parsed = (0, _deepLinking.parseDeepLink)(link);
        expect(parsed.type).toBe('share');
        expect(parsed.cardId).toBeTruthy();
      });
    });
    test('should extract query parameters', function () {
      var linkWithParams = 'digbiz://card/abc123?ref=qr&source=scan&action=save';
      var parsed = (0, _deepLinking.parseDeepLink)(linkWithParams);
      expect(parsed.params).toEqual({
        ref: 'qr',
        source: 'scan',
        action: 'save'
      });
    });
    test('should handle links without parameters', function () {
      var linkWithoutParams = 'digbiz://card/abc123';
      var parsed = (0, _deepLinking.parseDeepLink)(linkWithoutParams);
      expect(parsed.params).toEqual({});
    });
    test('should return null for invalid links', function () {
      var invalidLinks = ['https://otherdomain.com/card/123', 'wrongscheme://card/123', 'digbiz://unknown/path', 'invalid-url', '', null, undefined];
      invalidLinks.forEach(function (link) {
        expect((0, _deepLinking.parseDeepLink)(link)).toBeNull();
      });
    });
  });
  describe('Navigation Actions', function () {
    test('should create card view navigation action', function () {
      var action = (0, _deepLinking.createNavigationAction)('card', 'view', {
        cardId: 'abc123',
        params: {
          source: 'qr'
        }
      });
      expect(action.type).toBe('card');
      expect(action.screen).toBe('CardView');
      expect(action.params).toEqual({
        cardId: 'abc123',
        source: 'qr'
      });
    });
    test('should create card edit navigation action', function () {
      var action = (0, _deepLinking.createNavigationAction)('card', 'edit', {
        cardId: 'abc123'
      });
      expect(action.type).toBe('card');
      expect(action.screen).toBe('CardEdit');
      expect(action.params).toEqual({
        cardId: 'abc123'
      });
    });
    test('should create profile navigation action', function () {
      var action = (0, _deepLinking.createNavigationAction)('profile', 'view', {
        userId: 'user123'
      });
      expect(action.type).toBe('profile');
      expect(action.screen).toBe('Profile');
      expect(action.params).toEqual({
        userId: 'user123'
      });
    });
    test('should create share navigation action', function () {
      var action = (0, _deepLinking.createNavigationAction)('share', 'card', {
        cardId: 'abc123'
      });
      expect(action.type).toBe('share');
      expect(action.screen).toBe('ShareCard');
      expect(action.params).toEqual({
        cardId: 'abc123'
      });
    });
  });
  describe('Deep Link Handling', function () {
    test('should handle card view deep link', (0, _asyncToGenerator2.default)(function* () {
      var link = 'digbiz://card/abc123';
      var result = yield (0, _deepLinking.handleDeepLink)(link, mockNavigation);
      expect(result.success).toBe(true);
      expect(mockNavigate).toHaveBeenCalledWith('CardView', {
        cardId: 'abc123'
      });
    }));
    test('should handle card view with parameters', (0, _asyncToGenerator2.default)(function* () {
      var link = 'digbiz://card/abc123?source=qr&ref=scan';
      var result = yield (0, _deepLinking.handleDeepLink)(link, mockNavigation);
      expect(result.success).toBe(true);
      expect(mockNavigate).toHaveBeenCalledWith('CardView', {
        cardId: 'abc123',
        source: 'qr',
        ref: 'scan'
      });
    }));
    test('should handle profile deep link', (0, _asyncToGenerator2.default)(function* () {
      var link = 'digbiz://profile/user123';
      var result = yield (0, _deepLinking.handleDeepLink)(link, mockNavigation);
      expect(result.success).toBe(true);
      expect(mockNavigate).toHaveBeenCalledWith('Profile', {
        userId: 'user123'
      });
    }));
    test('should handle share deep link', (0, _asyncToGenerator2.default)(function* () {
      var link = 'digbiz://share/card123';
      var result = yield (0, _deepLinking.handleDeepLink)(link, mockNavigation);
      expect(result.success).toBe(true);
      expect(mockNavigate).toHaveBeenCalledWith('ShareCard', {
        cardId: 'card123'
      });
    }));
    test('should handle universal links', (0, _asyncToGenerator2.default)(function* () {
      var link = 'https://digbiz.app/card/abc123';
      var result = yield (0, _deepLinking.handleDeepLink)(link, mockNavigation);
      expect(result.success).toBe(true);
      expect(mockNavigate).toHaveBeenCalledWith('CardView', {
        cardId: 'abc123'
      });
    }));
    test('should return error for invalid links', (0, _asyncToGenerator2.default)(function* () {
      var invalidLink = 'invalid://link';
      var result = yield (0, _deepLinking.handleDeepLink)(invalidLink, mockNavigation);
      expect(result.success).toBe(false);
      expect(result.error).toContain('Invalid deep link');
      expect(mockNavigate).not.toHaveBeenCalled();
    }));
    test('should handle navigation errors', (0, _asyncToGenerator2.default)(function* () {
      mockNavigate.mockImplementationOnce(function () {
        throw new Error('Navigation failed');
      });
      var link = 'digbiz://card/abc123';
      var result = yield (0, _deepLinking.handleDeepLink)(link, mockNavigation);
      expect(result.success).toBe(false);
      expect(result.error).toContain('Navigation failed');
    }));
  });
  describe('Shareable Links Generation', function () {
    test('should generate all link types for a card', function () {
      var cardId = 'abc123';
      var shareCode = 'share456';
      var links = (0, _deepLinking.generateShareableLinks)(cardId, shareCode);
      expect(links.deepLink).toBe('digbiz://card/share456');
      expect(links.universalLink).toBe('https://digbiz.app/open/card/share456');
      expect(links.webLink).toBe('https://digbiz.app/card/share456');
      expect(links.qrLink).toBe('https://digbiz.app/card/share456');
    });
    test('should generate links without share code', function () {
      var cardId = 'abc123';
      var links = (0, _deepLinking.generateShareableLinks)(cardId);
      expect(links.deepLink).toBe('digbiz://card/abc123');
      expect(links.universalLink).toBe('https://digbiz.app/open/card/abc123');
      expect(links.webLink).toBe('https://digbiz.app/card/abc123');
      expect(links.qrLink).toBe('https://digbiz.app/card/abc123');
    });
    test('should generate links with custom parameters', function () {
      var cardId = 'abc123';
      var params = {
        source: 'email',
        campaign: 'launch'
      };
      var links = (0, _deepLinking.generateShareableLinks)(cardId, undefined, params);
      expect(links.deepLink).toContain('?source=email&campaign=launch');
      expect(links.universalLink).toContain('?source=email&campaign=launch');
      expect(links.webLink).toContain('?source=email&campaign=launch');
    });
  });
  describe('Platform-Specific Handling', function () {
    test('should handle iOS universal links', (0, _asyncToGenerator2.default)(function* () {
      var link = 'https://digbiz.app/card/abc123';
      require('react-native').Platform.OS = 'ios';
      var result = yield (0, _deepLinking.handleDeepLink)(link, mockNavigation);
      expect(result.success).toBe(true);
    }));
    test('should handle Android intent links', (0, _asyncToGenerator2.default)(function* () {
      var link = 'digbiz://card/abc123';
      require('react-native').Platform.OS = 'android';
      var result = yield (0, _deepLinking.handleDeepLink)(link, mockNavigation);
      expect(result.success).toBe(true);
    }));
  });
  describe('Error Scenarios', function () {
    test('should handle malformed URLs gracefully', function () {
      var malformedUrls = ['digbiz://', 'digbiz:///', 'digbiz://card', 'digbiz://card/', 'https://digbiz.app', 'https://digbiz.app/', 'https://digbiz.app/card', 'https://digbiz.app/card/'];
      malformedUrls.forEach(function (url) {
        var parsed = (0, _deepLinking.parseDeepLink)(url);
        expect(parsed).toBeNull();
      });
    });
    test('should handle URLs with special characters', function () {
      var specialCharUrls = ['digbiz://card/abc%20123', 'digbiz://card/abc+123', 'digbiz://card/abc@123', 'https://digbiz.app/card/abc%20123'];
      specialCharUrls.forEach(function (url) {
        var parsed = (0, _deepLinking.parseDeepLink)(url);
        expect(typeof parsed === 'object' || parsed === null).toBe(true);
      });
    });
    test('should handle very long URLs', function () {
      var longCardId = 'a'.repeat(1000);
      var longUrl = `digbiz://card/${longCardId}`;
      var parsed = (0, _deepLinking.parseDeepLink)(longUrl);
      expect(parsed == null ? void 0 : parsed.cardId).toBe(longCardId);
    });
    test('should handle navigation without navigation object', (0, _asyncToGenerator2.default)(function* () {
      var link = 'digbiz://card/abc123';
      var result = yield (0, _deepLinking.handleDeepLink)(link, null);
      expect(result.success).toBe(false);
      expect(result.error).toContain('navigation');
    }));
  });
  describe('Integration Scenarios', function () {
    test('should handle app launch from deep link', (0, _asyncToGenerator2.default)(function* () {
      var initialUrl = 'digbiz://card/abc123?source=notification';
      _reactNative.Linking.getInitialURL.mockResolvedValue(initialUrl);
      var url = yield _reactNative.Linking.getInitialURL();
      expect(url).toBe(initialUrl);
      var parsed = (0, _deepLinking.parseDeepLink)(url);
      expect(parsed == null ? void 0 : parsed.cardId).toBe('abc123');
      expect(parsed == null ? void 0 : parsed.params.source).toBe('notification');
    }));
    test('should handle app state change from deep link', function () {
      var callback = jest.fn();
      _reactNative.Linking.addEventListener.mockImplementation(function (event, cb) {
        if (event === 'url') {
          callback.mockImplementation(cb);
        }
      });
      _reactNative.Linking.addEventListener('url', callback);
      var url = 'digbiz://card/def456?source=share';
      callback({
        url: url
      });
      expect(callback).toHaveBeenCalledWith({
        url: url
      });
      var parsed = (0, _deepLinking.parseDeepLink)(url);
      expect(parsed == null ? void 0 : parsed.cardId).toBe('def456');
      expect(parsed == null ? void 0 : parsed.params.source).toBe('share');
    });
    test('should handle external link opening', (0, _asyncToGenerator2.default)(function* () {
      var externalUrl = 'https://example.com';
      _reactNative.Linking.canOpenURL.mockResolvedValue(true);
      _reactNative.Linking.openURL.mockResolvedValue(true);
      yield _reactNative.Linking.openURL(externalUrl);
      expect(_reactNative.Linking.canOpenURL).toHaveBeenCalledWith(externalUrl);
      expect(_reactNative.Linking.openURL).toHaveBeenCalledWith(externalUrl);
    }));
    test('should generate consistent links across different contexts', function () {
      var cardId = 'test123';
      var shareCode = 'share456';
      var links1 = (0, _deepLinking.generateShareableLinks)(cardId, shareCode);
      var links2 = (0, _deepLinking.generateShareableLinks)(cardId, shareCode);
      expect(links1.deepLink).toBe(links2.deepLink);
      expect(links1.universalLink).toBe(links2.universalLink);
      expect(links1.webLink).toBe(links2.webLink);
    });
  });
  describe('Analytics and Tracking', function () {
    test('should extract tracking parameters from deep links', function () {
      var link = 'digbiz://card/abc123?utm_source=email&utm_medium=share&utm_campaign=launch&ref=qr';
      var parsed = (0, _deepLinking.parseDeepLink)(link);
      expect(parsed == null ? void 0 : parsed.params).toEqual({
        utm_source: 'email',
        utm_medium: 'share',
        utm_campaign: 'launch',
        ref: 'qr'
      });
    });
    test('should handle multiple parameter formats', function () {
      var links = ['digbiz://card/abc123?source=qr&ref=scan', 'https://digbiz.app/card/abc123?utm_source=social&utm_campaign=growth', 'digbiz://card/abc123?ref=email&campaign=newsletter&medium=email'];
      links.forEach(function (link) {
        var parsed = (0, _deepLinking.parseDeepLink)(link);
        expect(parsed == null ? void 0 : parsed.params).toBeDefined();
        expect(Object.keys((parsed == null ? void 0 : parsed.params) || {}).length).toBeGreaterThan(0);
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,