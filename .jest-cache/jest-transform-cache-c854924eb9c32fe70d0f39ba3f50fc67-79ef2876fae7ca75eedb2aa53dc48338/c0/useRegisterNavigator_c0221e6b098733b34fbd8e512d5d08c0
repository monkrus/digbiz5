a38cf3819f191e6f40f8a7ea3aab82e1
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useRegisterNavigator = useRegisterNavigator;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _nonSecure = require("nanoid/non-secure");
var React = _interopRequireWildcard(require("react"));
var _EnsureSingleNavigator = require("./EnsureSingleNavigator.js");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function useRegisterNavigator() {
  var _React$useState = React.useState(function () {
      return (0, _nonSecure.nanoid)();
    }),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 1),
    key = _React$useState2[0];
  var container = React.useContext(_EnsureSingleNavigator.SingleNavigatorContext);
  if (container === undefined) {
    throw new Error("Couldn't register the navigator. Have you wrapped your app with 'NavigationContainer'?\n\nThis can also happen if there are multiple copies of '@react-navigation' packages installed.");
  }
  React.useEffect(function () {
    var register = container.register,
      unregister = container.unregister;
    register(key);
    return function () {
      return unregister(key);
    };
  }, [container, key]);
  return key;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbm9uU2VjdXJlIiwicmVxdWlyZSIsIlJlYWN0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfRW5zdXJlU2luZ2xlTmF2aWdhdG9yIiwiZSIsInQiLCJXZWFrTWFwIiwiciIsIm4iLCJfX2VzTW9kdWxlIiwibyIsImkiLCJmIiwiX19wcm90b19fIiwiZGVmYXVsdCIsImhhcyIsImdldCIsInNldCIsIl90IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ1c2VSZWdpc3Rlck5hdmlnYXRvciIsIl9SZWFjdCR1c2VTdGF0ZSIsInVzZVN0YXRlIiwibmFub2lkIiwiX1JlYWN0JHVzZVN0YXRlMiIsIl9zbGljZWRUb0FycmF5MiIsImtleSIsImNvbnRhaW5lciIsInVzZUNvbnRleHQiLCJTaW5nbGVOYXZpZ2F0b3JDb250ZXh0IiwidW5kZWZpbmVkIiwiRXJyb3IiLCJ1c2VFZmZlY3QiLCJyZWdpc3RlciIsInVucmVnaXN0ZXIiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvdXNlUmVnaXN0ZXJOYXZpZ2F0b3IudHN4Il0sInNvdXJjZXNDb250ZW50IjpbbnVsbF0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLElBQUFBLFVBQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLEtBQUEsR0FBQUMsdUJBQUEsQ0FBQUYsT0FBQTtBQUVBLElBQUFHLHNCQUFBLEdBQUFILE9BQUE7QUFBZ0UsU0FBQUUsd0JBQUFFLENBQUEsRUFBQUMsQ0FBQSw2QkFBQUMsT0FBQSxNQUFBQyxDQUFBLE9BQUFELE9BQUEsSUFBQUUsQ0FBQSxPQUFBRixPQUFBLFlBQUFKLHVCQUFBLFlBQUFBLHdCQUFBRSxDQUFBLEVBQUFDLENBQUEsU0FBQUEsQ0FBQSxJQUFBRCxDQUFBLElBQUFBLENBQUEsQ0FBQUssVUFBQSxTQUFBTCxDQUFBLE1BQUFNLENBQUEsRUFBQUMsQ0FBQSxFQUFBQyxDQUFBLEtBQUFDLFNBQUEsUUFBQUMsT0FBQSxFQUFBVixDQUFBLGlCQUFBQSxDQUFBLHVCQUFBQSxDQUFBLHlCQUFBQSxDQUFBLFNBQUFRLENBQUEsTUFBQUYsQ0FBQSxHQUFBTCxDQUFBLEdBQUFHLENBQUEsR0FBQUQsQ0FBQSxRQUFBRyxDQUFBLENBQUFLLEdBQUEsQ0FBQVgsQ0FBQSxVQUFBTSxDQUFBLENBQUFNLEdBQUEsQ0FBQVosQ0FBQSxHQUFBTSxDQUFBLENBQUFPLEdBQUEsQ0FBQWIsQ0FBQSxFQUFBUSxDQUFBLGNBQUFNLEVBQUEsSUFBQWQsQ0FBQSxnQkFBQWMsRUFBQSxPQUFBQyxjQUFBLENBQUFDLElBQUEsQ0FBQWhCLENBQUEsRUFBQWMsRUFBQSxPQUFBUCxDQUFBLElBQUFELENBQUEsR0FBQVcsTUFBQSxDQUFBQyxjQUFBLEtBQUFELE1BQUEsQ0FBQUUsd0JBQUEsQ0FBQW5CLENBQUEsRUFBQWMsRUFBQSxPQUFBUCxDQUFBLENBQUFLLEdBQUEsSUFBQUwsQ0FBQSxDQUFBTSxHQUFBLElBQUFQLENBQUEsQ0FBQUUsQ0FBQSxFQUFBTSxFQUFBLEVBQUFQLENBQUEsSUFBQUMsQ0FBQSxDQUFBTSxFQUFBLElBQUFkLENBQUEsQ0FBQWMsRUFBQSxXQUFBTixDQUFBLEtBQUFSLENBQUEsRUFBQUMsQ0FBQTtBQU16RCxTQUFTbUIsb0JBQW9CQSxDQUFBLEVBQUc7RUFDckMsSUFBQUMsZUFBQSxHQUFjeEIsS0FBSyxDQUFDeUIsUUFBUSxDQUFDO01BQUEsT0FBTSxJQUFBQyxpQkFBTSxFQUFDLENBQUM7SUFBQSxFQUFDO0lBQUFDLGdCQUFBLE9BQUFDLGVBQUEsQ0FBQWYsT0FBQSxFQUFBVyxlQUFBO0lBQXJDSyxHQUFHLEdBQUFGLGdCQUFBO0VBQ1YsSUFBTUcsU0FBUyxHQUFHOUIsS0FBSyxDQUFDK0IsVUFBVSxDQUFDQyw2Q0FBc0IsQ0FBQztFQUUxRCxJQUFJRixTQUFTLEtBQUtHLFNBQVMsRUFBRTtJQUMzQixNQUFNLElBQUlDLEtBQUssQ0FDYix3TEFDRixDQUFDO0VBQ0g7RUFFQWxDLEtBQUssQ0FBQ21DLFNBQVMsQ0FBQyxZQUFNO0lBQ3BCLElBQVFDLFFBQVEsR0FBaUJOLFNBQVMsQ0FBbENNLFFBQVE7TUFBRUMsVUFBQSxHQUFlUCxTQUFTLENBQXhCTyxVQUFBO0lBRWxCRCxRQUFRLENBQUNQLEdBQUcsQ0FBQztJQUViLE9BQU87TUFBQSxPQUFNUSxVQUFVLENBQUNSLEdBQUcsQ0FBQztJQUFBO0VBQzlCLENBQUMsRUFBRSxDQUFDQyxTQUFTLEVBQUVELEdBQUcsQ0FBQyxDQUFDO0VBRXBCLE9BQU9BLEdBQUc7QUFDWiIsImlnbm9yZUxpc3QiOltdfQ==