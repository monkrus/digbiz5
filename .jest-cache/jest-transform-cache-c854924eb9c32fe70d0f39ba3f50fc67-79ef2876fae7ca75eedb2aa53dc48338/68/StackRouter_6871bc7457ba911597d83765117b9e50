4dacec6d2d42630050bdb551557d5783
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StackActions = void 0;
exports.StackRouter = StackRouter;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _nonSecure = require("nanoid/non-secure");
var _BaseRouter = require("./BaseRouter.js");
var StackActions = exports.StackActions = {
  replace: function replace(name, params) {
    return {
      type: 'REPLACE',
      payload: {
        name: name,
        params: params
      }
    };
  },
  push: function push(name, params) {
    return {
      type: 'PUSH',
      payload: {
        name: name,
        params: params
      }
    };
  },
  pop: function pop() {
    var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
    return {
      type: 'POP',
      payload: {
        count: count
      }
    };
  },
  popToTop: function popToTop() {
    return {
      type: 'POP_TO_TOP'
    };
  },
  popTo: function popTo(name, params, options) {
    if (typeof options === 'boolean') {
      console.warn(`Passing a boolean as the third argument to 'popTo' is deprecated. Pass '{ merge: true }' instead.`);
    }
    return {
      type: 'POP_TO',
      payload: {
        name: name,
        params: params,
        merge: typeof options === 'boolean' ? options : options == null ? void 0 : options.merge
      }
    };
  }
};
function StackRouter(options) {
  var router = Object.assign({}, _BaseRouter.BaseRouter, {
    type: 'stack',
    getInitialState: function getInitialState(_ref) {
      var routeNames = _ref.routeNames,
        routeParamList = _ref.routeParamList;
      var initialRouteName = options.initialRouteName !== undefined && routeNames.includes(options.initialRouteName) ? options.initialRouteName : routeNames[0];
      return {
        stale: false,
        type: 'stack',
        key: `stack-${(0, _nonSecure.nanoid)()}`,
        index: 0,
        routeNames: routeNames,
        preloadedRoutes: [],
        routes: [{
          key: `${initialRouteName}-${(0, _nonSecure.nanoid)()}`,
          name: initialRouteName,
          params: routeParamList[initialRouteName]
        }]
      };
    },
    getRehydratedState: function getRehydratedState(partialState, _ref2) {
      var _state$preloadedRoute, _state$preloadedRoute2;
      var routeNames = _ref2.routeNames,
        routeParamList = _ref2.routeParamList;
      var state = partialState;
      if (state.stale === false) {
        return state;
      }
      var routes = state.routes.filter(function (route) {
        return routeNames.includes(route.name);
      }).map(function (route) {
        return Object.assign({}, route, {
          key: route.key || `${route.name}-${(0, _nonSecure.nanoid)()}`,
          params: routeParamList[route.name] !== undefined ? Object.assign({}, routeParamList[route.name], route.params) : route.params
        });
      });
      var preloadedRoutes = (_state$preloadedRoute = (_state$preloadedRoute2 = state.preloadedRoutes) == null ? void 0 : _state$preloadedRoute2.filter(function (route) {
        return routeNames.includes(route.name);
      }).map(function (route) {
        return Object.assign({}, route, {
          key: route.key || `${route.name}-${(0, _nonSecure.nanoid)()}`,
          params: routeParamList[route.name] !== undefined ? Object.assign({}, routeParamList[route.name], route.params) : route.params
        });
      })) != null ? _state$preloadedRoute : [];
      if (routes.length === 0) {
        var initialRouteName = options.initialRouteName !== undefined ? options.initialRouteName : routeNames[0];
        routes.push({
          key: `${initialRouteName}-${(0, _nonSecure.nanoid)()}`,
          name: initialRouteName,
          params: routeParamList[initialRouteName]
        });
      }
      return {
        stale: false,
        type: 'stack',
        key: `stack-${(0, _nonSecure.nanoid)()}`,
        index: routes.length - 1,
        routeNames: routeNames,
        routes: routes,
        preloadedRoutes: preloadedRoutes
      };
    },
    getStateForRouteNamesChange: function getStateForRouteNamesChange(state, _ref3) {
      var routeNames = _ref3.routeNames,
        routeParamList = _ref3.routeParamList,
        routeKeyChanges = _ref3.routeKeyChanges;
      var routes = state.routes.filter(function (route) {
        return routeNames.includes(route.name) && !routeKeyChanges.includes(route.name);
      });
      if (routes.length === 0) {
        var initialRouteName = options.initialRouteName !== undefined && routeNames.includes(options.initialRouteName) ? options.initialRouteName : routeNames[0];
        routes.push({
          key: `${initialRouteName}-${(0, _nonSecure.nanoid)()}`,
          name: initialRouteName,
          params: routeParamList[initialRouteName]
        });
      }
      return Object.assign({}, state, {
        routeNames: routeNames,
        routes: routes,
        index: Math.min(state.index, routes.length - 1)
      });
    },
    getStateForRouteFocus: function getStateForRouteFocus(state, key) {
      var index = state.routes.findIndex(function (r) {
        return r.key === key;
      });
      if (index === -1 || index === state.index) {
        return state;
      }
      return Object.assign({}, state, {
        index: index,
        routes: state.routes.slice(0, index + 1)
      });
    },
    getStateForAction: function getStateForAction(state, action, options) {
      var routeParamList = options.routeParamList;
      switch (action.type) {
        case 'REPLACE':
          {
            var index = action.target === state.key && action.source ? state.routes.findIndex(function (r) {
              return r.key === action.source;
            }) : state.index;
            if (index === -1) {
              return null;
            }
            var _action$payload = action.payload,
              name = _action$payload.name,
              params = _action$payload.params;
            if (!state.routeNames.includes(name)) {
              return null;
            }
            return Object.assign({}, state, {
              routes: state.routes.map(function (route, i) {
                return i === index ? {
                  key: `${name}-${(0, _nonSecure.nanoid)()}`,
                  name: name,
                  params: routeParamList[name] !== undefined ? Object.assign({}, routeParamList[name], params) : params
                } : route;
              })
            });
          }
        case 'PUSH':
        case 'NAVIGATE':
          {
            if (!state.routeNames.includes(action.payload.name)) {
              return null;
            }
            var getId = options.routeGetIdList[action.payload.name];
            var id = getId == null ? void 0 : getId({
              params: action.payload.params
            });
            var route;
            if (id !== undefined) {
              route = state.routes.findLast(function (route) {
                return route.name === action.payload.name && id === (getId == null ? void 0 : getId({
                  params: route.params
                }));
              });
            } else if (action.type === 'NAVIGATE') {
              var currentRoute = state.routes[state.index];
              if (action.payload.name === currentRoute.name) {
                route = currentRoute;
              } else if (action.payload.pop) {
                route = state.routes.findLast(function (route) {
                  return route.name === action.payload.name;
                });
              }
            }
            if (!route) {
              route = state.preloadedRoutes.find(function (route) {
                return route.name === action.payload.name && id === (getId == null ? void 0 : getId({
                  params: route.params
                }));
              });
            }
            var _params;
            if (action.type === 'NAVIGATE' && action.payload.merge && route) {
              _params = action.payload.params !== undefined || routeParamList[action.payload.name] !== undefined ? Object.assign({}, routeParamList[action.payload.name], route.params, action.payload.params) : route.params;
            } else {
              _params = routeParamList[action.payload.name] !== undefined ? Object.assign({}, routeParamList[action.payload.name], action.payload.params) : action.payload.params;
            }
            var routes;
            if (route) {
              if (action.type === 'NAVIGATE' && action.payload.pop) {
                routes = [];
                for (var r of state.routes) {
                  if (r.key === route.key) {
                    routes.push(Object.assign({}, route, {
                      path: action.payload.path !== undefined ? action.payload.path : route.path,
                      params: _params
                    }));
                    break;
                  }
                  routes.push(r);
                }
              } else {
                routes = state.routes.filter(function (r) {
                  return r.key !== route.key;
                });
                routes.push(Object.assign({}, route, {
                  path: action.type === 'NAVIGATE' && action.payload.path !== undefined ? action.payload.path : route.path,
                  params: _params
                }));
              }
            } else {
              routes = [].concat((0, _toConsumableArray2.default)(state.routes), [{
                key: `${action.payload.name}-${(0, _nonSecure.nanoid)()}`,
                name: action.payload.name,
                path: action.type === 'NAVIGATE' ? action.payload.path : undefined,
                params: _params
              }]);
            }
            return Object.assign({}, state, {
              index: routes.length - 1,
              preloadedRoutes: state.preloadedRoutes.filter(function (route) {
                return routes[routes.length - 1].key !== route.key;
              }),
              routes: routes
            });
          }
        case 'NAVIGATE_DEPRECATED':
          {
            if (state.preloadedRoutes.find(function (route) {
              return route.name === action.payload.name && _id === (_getId == null ? void 0 : _getId({
                params: route.params
              }));
            })) {
              return null;
            }
            if (!state.routeNames.includes(action.payload.name)) {
              return null;
            }
            var _index = -1;
            var _getId = options.routeGetIdList[action.payload.name];
            var _id = _getId == null ? void 0 : _getId({
              params: action.payload.params
            });
            if (_id) {
              _index = state.routes.findIndex(function (route) {
                return route.name === action.payload.name && _id === (_getId == null ? void 0 : _getId({
                  params: route.params
                }));
              });
            } else if (state.routes[state.index].name === action.payload.name) {
              _index = state.index;
            } else {
              for (var i = state.routes.length - 1; i >= 0; i--) {
                if (state.routes[i].name === action.payload.name) {
                  _index = i;
                  break;
                }
              }
            }
            if (_index === -1) {
              var _routes = [].concat((0, _toConsumableArray2.default)(state.routes), [{
                key: `${action.payload.name}-${(0, _nonSecure.nanoid)()}`,
                name: action.payload.name,
                params: routeParamList[action.payload.name] !== undefined ? Object.assign({}, routeParamList[action.payload.name], action.payload.params) : action.payload.params
              }]);
              return Object.assign({}, state, {
                routes: _routes,
                index: _routes.length - 1
              });
            }
            var _route = state.routes[_index];
            var _params2;
            if (action.payload.merge) {
              _params2 = action.payload.params !== undefined || routeParamList[_route.name] !== undefined ? Object.assign({}, routeParamList[_route.name], _route.params, action.payload.params) : _route.params;
            } else {
              _params2 = routeParamList[_route.name] !== undefined ? Object.assign({}, routeParamList[_route.name], action.payload.params) : action.payload.params;
            }
            return Object.assign({}, state, {
              index: _index,
              routes: [].concat((0, _toConsumableArray2.default)(state.routes.slice(0, _index)), [_params2 !== _route.params ? Object.assign({}, _route, {
                params: _params2
              }) : state.routes[_index]])
            });
          }
        case 'POP':
          {
            var _index2 = action.target === state.key && action.source ? state.routes.findIndex(function (r) {
              return r.key === action.source;
            }) : state.index;
            if (_index2 > 0) {
              var count = Math.max(_index2 - action.payload.count + 1, 1);
              var _routes2 = state.routes.slice(0, count).concat(state.routes.slice(_index2 + 1));
              return Object.assign({}, state, {
                index: _routes2.length - 1,
                routes: _routes2
              });
            }
            return null;
          }
        case 'POP_TO_TOP':
          return router.getStateForAction(state, {
            type: 'POP',
            payload: {
              count: state.routes.length - 1
            }
          }, options);
        case 'POP_TO':
          {
            if (!state.routeNames.includes(action.payload.name)) {
              return null;
            }
            var _index3 = -1;
            var _getId2 = options.routeGetIdList[action.payload.name];
            var _id2 = _getId2 == null ? void 0 : _getId2({
              params: action.payload.params
            });
            if (_id2) {
              _index3 = state.routes.findIndex(function (route) {
                return route.name === action.payload.name && _id2 === (_getId2 == null ? void 0 : _getId2({
                  params: route.params
                }));
              });
            } else if (state.routes[state.index].name === action.payload.name) {
              _index3 = state.index;
            } else {
              for (var _i = state.routes.length - 1; _i >= 0; _i--) {
                if (state.routes[_i].name === action.payload.name) {
                  _index3 = _i;
                  break;
                }
              }
            }
            if (_index3 === -1) {
              var _routes3 = [].concat((0, _toConsumableArray2.default)(state.routes.slice(0, -1)), [{
                key: `${action.payload.name}-${(0, _nonSecure.nanoid)()}`,
                name: action.payload.name,
                params: routeParamList[action.payload.name] !== undefined ? Object.assign({}, routeParamList[action.payload.name], action.payload.params) : action.payload.params
              }]);
              return Object.assign({}, state, {
                routes: _routes3,
                index: _routes3.length - 1
              });
            }
            var _route2 = state.routes[_index3];
            var _params3;
            if (action.payload.merge) {
              _params3 = action.payload.params !== undefined || routeParamList[_route2.name] !== undefined ? Object.assign({}, routeParamList[_route2.name], _route2.params, action.payload.params) : _route2.params;
            } else {
              _params3 = routeParamList[_route2.name] !== undefined ? Object.assign({}, routeParamList[_route2.name], action.payload.params) : action.payload.params;
            }
            return Object.assign({}, state, {
              index: _index3,
              routes: [].concat((0, _toConsumableArray2.default)(state.routes.slice(0, _index3)), [_params3 !== _route2.params ? Object.assign({}, _route2, {
                params: _params3
              }) : state.routes[_index3]])
            });
          }
        case 'GO_BACK':
          if (state.index > 0) {
            return router.getStateForAction(state, {
              type: 'POP',
              payload: {
                count: 1
              },
              target: action.target,
              source: action.source
            }, options);
          }
          return null;
        case 'PRELOAD':
          {
            var _getId3 = options.routeGetIdList[action.payload.name];
            var _id3 = _getId3 == null ? void 0 : _getId3({
              params: action.payload.params
            });
            var _route3;
            if (_id3 !== undefined) {
              _route3 = state.routes.find(function (route) {
                return route.name === action.payload.name && _id3 === (_getId3 == null ? void 0 : _getId3({
                  params: route.params
                }));
              });
            }
            if (_route3) {
              return Object.assign({}, state, {
                routes: state.routes.map(function (r) {
                  var _route4;
                  if (r.key !== ((_route4 = _route3) == null ? void 0 : _route4.key)) {
                    return r;
                  }
                  return Object.assign({}, r, {
                    params: routeParamList[action.payload.name] !== undefined ? Object.assign({}, routeParamList[action.payload.name], action.payload.params) : action.payload.params
                  });
                })
              });
            } else {
              return Object.assign({}, state, {
                preloadedRoutes: state.preloadedRoutes.filter(function (r) {
                  return r.name !== action.payload.name || _id3 !== (_getId3 == null ? void 0 : _getId3({
                    params: r.params
                  }));
                }).concat({
                  key: `${action.payload.name}-${(0, _nonSecure.nanoid)()}`,
                  name: action.payload.name,
                  params: routeParamList[action.payload.name] !== undefined ? Object.assign({}, routeParamList[action.payload.name], action.payload.params) : action.payload.params
                })
              });
            }
          }
        default:
          return _BaseRouter.BaseRouter.getStateForAction(state, action);
      }
    },
    actionCreators: StackActions
  });
  return router;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,