60e437890fcca22b18b9ce1ac0909cc6
var _child_process = require("child_process");
var fs = _interopRequireWildcard(require("fs"));
var path = _interopRequireWildcard(require("path"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
describe('iOS Build Verification', function () {
  var projectRoot = path.resolve(__dirname, '../..');
  var iosDir = path.join(projectRoot, 'ios');
  describe('iOS Project Structure', function () {
    test('should have iOS project directory', function () {
      expect(fs.existsSync(iosDir)).toBe(true);
    });
    test('should have Xcode project files', function () {
      var xcodeprojPath = path.join(iosDir, 'digbiz5.xcodeproj');
      var xcworkspacePath = path.join(iosDir, 'digbiz5.xcworkspace');
      expect(fs.existsSync(xcodeprojPath)).toBe(true);
      if (fs.existsSync(xcworkspacePath)) {
        expect(fs.statSync(xcworkspacePath).isDirectory()).toBe(true);
      }
    });
    test('should have Podfile for CocoaPods', function () {
      var podfilePath = path.join(iosDir, 'Podfile');
      expect(fs.existsSync(podfilePath)).toBe(true);
      var podfileContent = fs.readFileSync(podfilePath, 'utf8');
      expect(podfileContent).toContain('use_react_native!');
    });
    test('should have Info.plist file', function () {
      var infoPlistPath = path.join(iosDir, 'digbiz5/Info.plist');
      expect(fs.existsSync(infoPlistPath)).toBe(true);
    });
    test('should have AppDelegate files', function () {
      var appDelegateSwiftPath = path.join(iosDir, 'digbiz5/AppDelegate.swift');
      var appDelegateHPath = path.join(iosDir, 'digbiz5/AppDelegate.h');
      var appDelegateMPath = path.join(iosDir, 'digbiz5/AppDelegate.m');
      var appDelegateMmPath = path.join(iosDir, 'digbiz5/AppDelegate.mm');
      expect(fs.existsSync(appDelegateSwiftPath) || fs.existsSync(appDelegateHPath) && (fs.existsSync(appDelegateMPath) || fs.existsSync(appDelegateMmPath))).toBe(true);
    });
  });
  describe('iOS Configuration', function () {
    test('should have correct bundle identifier', function () {
      var infoPlistPath = path.join(iosDir, 'digbiz5/Info.plist');
      var infoPlistContent = fs.readFileSync(infoPlistPath, 'utf8');
      expect(infoPlistContent).toContain('CFBundleIdentifier');
      expect(infoPlistContent).toContain('$(PRODUCT_BUNDLE_IDENTIFIER)');
    });
    test('should have deployment target configured', function () {
      var podfilePath = path.join(iosDir, 'Podfile');
      var podfileContent = fs.readFileSync(podfilePath, 'utf8');
      expect(podfileContent.includes('platform :ios, min_ios_version_supported') || podfileContent.match(/platform :ios, ['"][\d.]+['"]/)).toBeTruthy();
    });
    test('should have React Native pods configured', function () {
      var podfilePath = path.join(iosDir, 'Podfile');
      var podfileContent = fs.readFileSync(podfilePath, 'utf8');
      expect(podfileContent).toContain('use_react_native!');
      expect(podfileContent).toContain('prepare_react_native_project!');
    });
  });
  describe('iOS Dependencies', function () {
    test('should install CocoaPods dependencies', function () {
      var podfileLockPath = path.join(iosDir, 'Podfile.lock');
      if (fs.existsSync(podfileLockPath)) {
        var podfileLockContent = fs.readFileSync(podfileLockPath, 'utf8');
        expect(podfileLockContent).toContain('React-Core');
        expect(podfileLockContent).toContain('SPEC CHECKSUMS');
      }
    });
    test.skip('should run pod install successfully', function () {
      jest.setTimeout(180000);
      expect(function () {
        (0, _child_process.execSync)('pod install --repo-update', {
          cwd: iosDir,
          stdio: 'pipe'
        });
      }).not.toThrow();
      var xcworkspacePath = path.join(iosDir, 'digbiz5.xcworkspace');
      expect(fs.existsSync(xcworkspacePath)).toBe(true);
    }, 180000);
    test('should have Pods directory after installation', function () {
      var podsDir = path.join(iosDir, 'Pods');
      if (fs.existsSync(podsDir)) {
        expect(fs.statSync(podsDir).isDirectory()).toBe(true);
        var reactCoreDir = path.join(podsDir, 'React-Core');
        if (fs.existsSync(reactCoreDir)) {
          expect(fs.statSync(reactCoreDir).isDirectory()).toBe(true);
        }
      }
    });
  });
  describe('iOS Build Process', function () {
    test.skip('should build iOS app successfully', function () {
      jest.setTimeout(600000);
      var xcworkspacePath = path.join(iosDir, 'digbiz5.xcworkspace');
      if (fs.existsSync(xcworkspacePath)) {
        expect(function () {
          (0, _child_process.execSync)(`xcodebuild -workspace digbiz5.xcworkspace -scheme digbiz5 -configuration Debug -destination 'platform=iOS Simulator,name=iPhone 15' build`, {
            cwd: iosDir,
            stdio: 'pipe'
          });
        }).not.toThrow();
      } else {
        expect(true).toBe(true);
      }
    }, 600000);
    test('should have valid scheme configuration', function () {
      var schemePath = path.join(iosDir, 'digbiz5.xcodeproj/xcshareddata/xcschemes/digbiz5.xcscheme');
      if (fs.existsSync(schemePath)) {
        var schemeContent = fs.readFileSync(schemePath, 'utf8');
        expect(schemeContent).toContain('BuildAction');
        expect(schemeContent).toContain('digbiz5');
      }
    });
  });
  describe('iOS Fastlane Integration', function () {
    test('should have iOS Fastlane configuration if it exists', function () {
      var iosFastfilePath = path.join(iosDir, 'fastlane/Fastfile');
      var iosAppfilePath = path.join(iosDir, 'fastlane/Appfile');
      if (fs.existsSync(iosFastfilePath)) {
        expect(fs.existsSync(iosAppfilePath)).toBe(true);
      } else {
        expect(true).toBe(true);
      }
    });
    test('should have valid Fastfile for iOS if it exists', function () {
      var fastfilePath = path.join(iosDir, 'fastlane/Fastfile');
      if (fs.existsSync(fastfilePath)) {
        var fastfileContent = fs.readFileSync(fastfilePath, 'utf8');
        expect(fastfileContent).toContain('platform :ios');
        expect(fastfileContent).toContain('build_app');
      } else {
        expect(true).toBe(true);
      }
    });
    test('should have iOS lanes configured if Fastfile exists', function () {
      var fastfilePath = path.join(iosDir, 'fastlane/Fastfile');
      if (fs.existsSync(fastfilePath)) {
        var fastfileContent = fs.readFileSync(fastfilePath, 'utf8');
        expect(fastfileContent).toContain('lane :build');
      } else {
        expect(true).toBe(true);
      }
    });
  });
  describe('iOS Platform Compatibility', function () {
    test('should be configured for modern iOS versions', function () {
      var podfilePath = path.join(iosDir, 'Podfile');
      var podfileContent = fs.readFileSync(podfilePath, 'utf8');
      var versionMatch = podfileContent.match(/platform :ios, ['"](\d+\.\d+)['"]/);
      if (versionMatch) {
        var iosVersion = parseFloat(versionMatch[1]);
        expect(iosVersion).toBeGreaterThanOrEqual(12.0);
      }
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,