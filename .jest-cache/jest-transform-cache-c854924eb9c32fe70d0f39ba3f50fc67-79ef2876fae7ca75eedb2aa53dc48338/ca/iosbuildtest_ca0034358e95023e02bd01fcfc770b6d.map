{"version":3,"names":["_child_process","require","fs","_interopRequireWildcard","path","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","_t","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","describe","projectRoot","resolve","__dirname","iosDir","join","test","expect","existsSync","toBe","xcodeprojPath","xcworkspacePath","statSync","isDirectory","podfilePath","podfileContent","readFileSync","toContain","infoPlistPath","appDelegateSwiftPath","appDelegateHPath","appDelegateMPath","appDelegateMmPath","infoPlistContent","includes","match","toBeTruthy","podfileLockPath","podfileLockContent","skip","jest","setTimeout","execSync","cwd","stdio","not","toThrow","podsDir","reactCoreDir","schemePath","schemeContent","iosFastfilePath","iosAppfilePath","fastfilePath","fastfileContent","versionMatch","iosVersion","parseFloat","toBeGreaterThanOrEqual"],"sources":["ios-build.test.ts"],"sourcesContent":["/**\n * iOS Build Verification Tests\n *\n * This test suite validates the iOS project structure, configuration, and build capabilities\n * for a React Native application. It ensures that all necessary iOS files, Xcode projects,\n * CocoaPods configuration, and build tools are properly set up for successful iOS app\n * compilation and deployment.\n *\n * What these tests verify:\n * - iOS project structure (Xcode projects, Podfile, Info.plist, AppDelegate)\n * - Build configuration (deployment targets, bundle identifiers, schemes)\n * - CocoaPods dependency management and React Native pod integration\n * - Fastlane integration for automated iOS builds and deployments\n * - Platform-specific requirements and compatibility settings\n * - Modern React Native iOS project structure (Swift vs Objective-C)\n *\n * These tests help catch iOS build issues early and ensure proper Xcode/iOS toolchain setup.\n */\n\nimport { execSync } from 'child_process';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\ndescribe('iOS Build Verification', () => {\n  const projectRoot = path.resolve(__dirname, '../..');\n  const iosDir = path.join(projectRoot, 'ios');\n\n  // Test Group: iOS Project Structure\n  // Validates that all essential iOS project files and directories exist\n  describe('iOS Project Structure', () => {\n    // Test: iOS Directory Existence\n    // Verifies that the main ios/ directory exists in the project root\n    test('should have iOS project directory', () => {\n      expect(fs.existsSync(iosDir)).toBe(true);\n    });\n\n    // Test: Xcode Project Files\n    // Checks for .xcodeproj file and optional .xcworkspace (created by CocoaPods)\n    test('should have Xcode project files', () => {\n      const xcodeprojPath = path.join(iosDir, 'digbiz5.xcodeproj');\n      const xcworkspacePath = path.join(iosDir, 'digbiz5.xcworkspace');\n\n      expect(fs.existsSync(xcodeprojPath)).toBe(true);\n\n      // Workspace may be created after pod install\n      if (fs.existsSync(xcworkspacePath)) {\n        expect(fs.statSync(xcworkspacePath).isDirectory()).toBe(true);\n      }\n    });\n\n    // Test: CocoaPods Podfile\n    // Validates that Podfile exists and contains React Native pod configuration\n    test('should have Podfile for CocoaPods', () => {\n      const podfilePath = path.join(iosDir, 'Podfile');\n      expect(fs.existsSync(podfilePath)).toBe(true);\n\n      const podfileContent = fs.readFileSync(podfilePath, 'utf8');\n      expect(podfileContent).toContain('use_react_native!');\n    });\n\n    // Test: Info.plist File Validation\n    // Ensures that iOS Info.plist configuration file exists with app metadata\n    test('should have Info.plist file', () => {\n      const infoPlistPath = path.join(iosDir, 'digbiz5/Info.plist');\n      expect(fs.existsSync(infoPlistPath)).toBe(true);\n    });\n\n    // Test: AppDelegate Files Validation\n    // Checks for AppDelegate files (Swift or Objective-C) required for iOS app lifecycle\n    test('should have AppDelegate files', () => {\n      const appDelegateSwiftPath = path.join(\n        iosDir,\n        'digbiz5/AppDelegate.swift',\n      );\n      const appDelegateHPath = path.join(iosDir, 'digbiz5/AppDelegate.h');\n      const appDelegateMPath = path.join(iosDir, 'digbiz5/AppDelegate.m');\n      const appDelegateMmPath = path.join(iosDir, 'digbiz5/AppDelegate.mm');\n\n      expect(\n        fs.existsSync(appDelegateSwiftPath) ||\n          (fs.existsSync(appDelegateHPath) &&\n            (fs.existsSync(appDelegateMPath) ||\n              fs.existsSync(appDelegateMmPath))),\n      ).toBe(true);\n    });\n  });\n\n  // Test Group: iOS Configuration\n  // Validates iOS app configuration settings and deployment parameters\n  describe('iOS Configuration', () => {\n    // Test: Bundle Identifier Configuration\n    // Verifies that iOS bundle identifier is properly set in Info.plist\n    test('should have correct bundle identifier', () => {\n      const infoPlistPath = path.join(iosDir, 'digbiz5/Info.plist');\n      const infoPlistContent = fs.readFileSync(infoPlistPath, 'utf8');\n\n      expect(infoPlistContent).toContain('CFBundleIdentifier');\n      expect(infoPlistContent).toContain('$(PRODUCT_BUNDLE_IDENTIFIER)');\n    });\n\n    // Test: iOS Deployment Target\n    // Verifies that minimum iOS version is configured for device compatibility\n    // Supports both modern (min_ios_version_supported) and legacy (hardcoded version) formats\n    test('should have deployment target configured', () => {\n      const podfilePath = path.join(iosDir, 'Podfile');\n      const podfileContent = fs.readFileSync(podfilePath, 'utf8');\n\n      expect(\n        podfileContent.includes('platform :ios, min_ios_version_supported') ||\n          podfileContent.match(/platform :ios, ['\"][\\d.]+['\"]/),\n      ).toBeTruthy();\n    });\n\n    // Test: React Native Pod Configuration\n    // Ensures React Native pods are properly configured in Podfile\n    test('should have React Native pods configured', () => {\n      const podfilePath = path.join(iosDir, 'Podfile');\n      const podfileContent = fs.readFileSync(podfilePath, 'utf8');\n\n      expect(podfileContent).toContain('use_react_native!');\n      expect(podfileContent).toContain('prepare_react_native_project!');\n    });\n  });\n\n  // Test Group: iOS Dependencies\n  // Validates CocoaPods dependency management and React Native pod integration\n  describe('iOS Dependencies', () => {\n    // Test: CocoaPods Dependencies Validation\n    // Checks that CocoaPods dependencies are properly installed and configured\n    test('should install CocoaPods dependencies', () => {\n      // This test checks if pod install can run successfully\n      const podfileLockPath = path.join(iosDir, 'Podfile.lock');\n\n      if (fs.existsSync(podfileLockPath)) {\n        const podfileLockContent = fs.readFileSync(podfileLockPath, 'utf8');\n        expect(podfileLockContent).toContain('React-Core');\n        expect(podfileLockContent).toContain('SPEC CHECKSUMS');\n      }\n    });\n\n    // eslint-disable-next-line jest/no-disabled-tests\n    test.skip('should run pod install successfully', () => {\n      jest.setTimeout(180000); // 3 minutes timeout\n\n      expect(() => {\n        execSync('pod install --repo-update', {\n          cwd: iosDir,\n          stdio: 'pipe',\n        });\n      }).not.toThrow();\n\n      const xcworkspacePath = path.join(iosDir, 'digbiz5.xcworkspace');\n      expect(fs.existsSync(xcworkspacePath)).toBe(true);\n    }, 180000);\n\n    // Test: Pods Directory Validation\n    // Verifies that Pods directory exists after CocoaPods installation\n    test('should have Pods directory after installation', () => {\n      const podsDir = path.join(iosDir, 'Pods');\n\n      if (fs.existsSync(podsDir)) {\n        expect(fs.statSync(podsDir).isDirectory()).toBe(true);\n\n        // Check for some essential pods\n        const reactCoreDir = path.join(podsDir, 'React-Core');\n        if (fs.existsSync(reactCoreDir)) {\n          expect(fs.statSync(reactCoreDir).isDirectory()).toBe(true);\n        }\n      }\n    });\n  });\n\n  // Test Group: iOS Build Process\n  // Validates iOS build capabilities and Xcode project configuration\n  describe('iOS Build Process', () => {\n    // This test is intensive and may take time, so it's marked as optional\n    // eslint-disable-next-line jest/no-disabled-tests\n    test.skip('should build iOS app successfully', () => {\n      jest.setTimeout(600000); // 10 minutes timeout\n\n      const xcworkspacePath = path.join(iosDir, 'digbiz5.xcworkspace');\n\n      // Only run if workspace exists (after pod install)\n      if (fs.existsSync(xcworkspacePath)) {\n        expect(() => {\n          execSync(\n            `xcodebuild -workspace digbiz5.xcworkspace -scheme digbiz5 -configuration Debug -destination 'platform=iOS Simulator,name=iPhone 15' build`,\n            {\n              cwd: iosDir,\n              stdio: 'pipe',\n            },\n          );\n        }).not.toThrow();\n      } else {\n        // Skip if workspace doesn't exist\n        expect(true).toBe(true);\n      }\n    }, 600000);\n\n    // Test: Xcode Scheme Validation\n    // Checks that Xcode scheme is properly configured for builds\n    test('should have valid scheme configuration', () => {\n      const schemePath = path.join(\n        iosDir,\n        'digbiz5.xcodeproj/xcshareddata/xcschemes/digbiz5.xcscheme',\n      );\n\n      if (fs.existsSync(schemePath)) {\n        const schemeContent = fs.readFileSync(schemePath, 'utf8');\n        expect(schemeContent).toContain('BuildAction');\n        expect(schemeContent).toContain('digbiz5');\n      }\n    });\n  });\n\n  // Test Group: iOS Fastlane Integration\n  // Validates Fastlane automation setup for iOS builds and deployments\n  describe('iOS Fastlane Integration', () => {\n    // Test: Fastlane Configuration Files\n    // Checks for Fastfile and Appfile in ios/fastlane directory\n    test('should have iOS Fastlane configuration if it exists', () => {\n      const iosFastfilePath = path.join(iosDir, 'fastlane/Fastfile');\n      const iosAppfilePath = path.join(iosDir, 'fastlane/Appfile');\n\n      if (fs.existsSync(iosFastfilePath)) {\n        expect(fs.existsSync(iosAppfilePath)).toBe(true);\n      } else {\n        // Pass if Fastlane is not configured\n        expect(true).toBe(true);\n      }\n    });\n\n    // Test: Fastfile Content Validation\n    // Verifies that Fastfile contains required iOS lanes and configuration\n    test('should have valid Fastfile for iOS if it exists', () => {\n      const fastfilePath = path.join(iosDir, 'fastlane/Fastfile');\n\n      if (fs.existsSync(fastfilePath)) {\n        const fastfileContent = fs.readFileSync(fastfilePath, 'utf8');\n        expect(fastfileContent).toContain('platform :ios');\n        expect(fastfileContent).toContain('build_app');\n      } else {\n        expect(true).toBe(true);\n      }\n    });\n\n    // Test: iOS Lanes Configuration\n    // Ensures iOS-specific automation lanes are configured in Fastfile\n    test('should have iOS lanes configured if Fastfile exists', () => {\n      const fastfilePath = path.join(iosDir, 'fastlane/Fastfile');\n\n      if (fs.existsSync(fastfilePath)) {\n        const fastfileContent = fs.readFileSync(fastfilePath, 'utf8');\n        expect(fastfileContent).toContain('lane :build');\n      } else {\n        expect(true).toBe(true);\n      }\n    });\n  });\n\n  // Test Group: iOS Platform Compatibility\n  // Validates iOS version compatibility and deployment target settings\n  describe('iOS Platform Compatibility', () => {\n    // Test: Modern iOS Version Support\n    // Verifies that iOS deployment target supports modern iOS versions (12.0+)\n    test('should be configured for modern iOS versions', () => {\n      const podfilePath = path.join(iosDir, 'Podfile');\n      const podfileContent = fs.readFileSync(podfilePath, 'utf8');\n\n      // Extract iOS version from Podfile\n      const versionMatch = podfileContent.match(\n        /platform :ios, ['\"](\\d+\\.\\d+)['\"]/,\n      );\n      if (versionMatch) {\n        const iosVersion = parseFloat(versionMatch[1]);\n        expect(iosVersion).toBeGreaterThanOrEqual(12.0); // Modern iOS support\n      }\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}