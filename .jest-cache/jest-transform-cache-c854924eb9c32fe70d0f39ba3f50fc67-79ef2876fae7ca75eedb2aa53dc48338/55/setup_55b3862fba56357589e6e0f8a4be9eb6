35c76cfbef2184520335910d74e3efbf
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("@react-native/js-polyfills/error-guard");
var _mock = _interopRequireDefault(require("./mock"));
global.IS_REACT_ACT_ENVIRONMENT = true;
global.IS_REACT_NATIVE_TEST_ENVIRONMENT = true;
Object.defineProperties(global, {
  __DEV__: {
    configurable: true,
    enumerable: true,
    value: true,
    writable: true
  },
  cancelAnimationFrame: {
    configurable: true,
    enumerable: true,
    value: function value(id) {
      return clearTimeout(id);
    },
    writable: true
  },
  nativeFabricUIManager: {
    configurable: true,
    enumerable: true,
    value: {},
    writable: true
  },
  performance: {
    configurable: true,
    enumerable: true,
    value: {
      now: jest.fn(Date.now)
    },
    writable: true
  },
  regeneratorRuntime: {
    configurable: true,
    enumerable: true,
    value: jest.requireActual('regenerator-runtime/runtime'),
    writable: true
  },
  requestAnimationFrame: {
    configurable: true,
    enumerable: true,
    value: function value(callback) {
      return setTimeout(function () {
        return callback(jest.now());
      }, 0);
    },
    writable: true
  },
  window: {
    configurable: true,
    enumerable: true,
    value: global,
    writable: true
  }
});
(0, _mock.default)('m#../Libraries/AppState/AppState', 'm#./mocks/AppState');
(0, _mock.default)('m#../Libraries/BatchedBridge/NativeModules', 'm#./mocks/NativeModules');
(0, _mock.default)('m#../Libraries/Components/AccessibilityInfo/AccessibilityInfo', 'm#./mocks/AccessibilityInfo');
(0, _mock.default)('m#../Libraries/Components/ActivityIndicator/ActivityIndicator', 'm#./mocks/ActivityIndicator');
(0, _mock.default)('m#../Libraries/Components/Clipboard/Clipboard', 'm#./mocks/Clipboard');
(0, _mock.default)('m#../Libraries/Components/RefreshControl/RefreshControl', 'm#./mocks/RefreshControl');
(0, _mock.default)('m#../Libraries/Components/ScrollView/ScrollView', 'm#./mocks/ScrollView');
(0, _mock.default)('m#../Libraries/Components/TextInput/TextInput', 'm#./mocks/TextInput');
(0, _mock.default)('m#../Libraries/Components/View/View', 'm#./mocks/View');
(0, _mock.default)('m#../Libraries/Components/View/ViewNativeComponent', 'm#./mocks/ViewNativeComponent');
(0, _mock.default)('m#../Libraries/Core/InitializeCore', 'm#./mocks/InitializeCore');
(0, _mock.default)('m#../Libraries/Core/NativeExceptionsManager');
(0, _mock.default)('m#../Libraries/Image/Image', 'm#./mocks/Image');
(0, _mock.default)('m#../Libraries/Linking/Linking', 'm#./mocks/Linking');
(0, _mock.default)('m#../Libraries/Modal/Modal', 'm#./mocks/Modal');
(0, _mock.default)('m#../Libraries/NativeComponent/NativeComponentRegistry', 'm#./mocks/NativeComponentRegistry');
(0, _mock.default)('m#../Libraries/ReactNative/RendererProxy', 'm#./mocks/RendererProxy');
(0, _mock.default)('m#../Libraries/ReactNative/requireNativeComponent', 'm#./mocks/requireNativeComponent');
(0, _mock.default)('m#../Libraries/ReactNative/UIManager', 'm#./mocks/UIManager');
(0, _mock.default)('m#../Libraries/Text/Text', 'm#./mocks/Text');
(0, _mock.default)('m#../Libraries/Utilities/useColorScheme', 'm#./mocks/useColorScheme');
(0, _mock.default)('m#../Libraries/Vibration/Vibration', 'm#./mocks/Vibration');
//# sourceMappingURL=data:application/json;charset=utf-8;base64,