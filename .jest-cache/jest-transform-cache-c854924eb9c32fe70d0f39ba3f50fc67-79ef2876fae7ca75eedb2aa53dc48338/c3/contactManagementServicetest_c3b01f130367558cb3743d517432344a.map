{"version":3,"names":["_getJestObj","mock","_interopRequireDefault","require","_asyncToGenerator2","_contactManagementService","_contactDatabaseService","_require","jest","createMockContact","overrides","Object","assign","id","Math","random","toString","substr","fields","type","label","value","isEditable","confidence","source","createdAt","updatedAt","tags","isVerified","needsReview","isFavorite","describe","mockDb","contactDatabaseService","beforeEach","clearAllMocks","it","default","mockContacts","Array","from","length","_","i","matchingContacts","filter","searchContacts","mockResolvedValue","contacts","totalCount","facets","categories","sources","startTime","Date","now","result","contactManagementService","query","searchTime","expect","toHaveLength","toBeLessThan","toHaveBeenCalledWith","complexFilters","hasNotes","dateRange","start","end","field","confidenceRange","min","max","name","count","fuzzyMatches","toBeGreaterThan","totalContacts","pageSize","_loop","page","pageContacts","mockResolvedValueOnce","pageTime","toBe","searchQuery","mockResult","startTime1","firstSearchTime","startTime2","secondSearchTime","toHaveBeenCalledTimes","emailSearchContacts","patternMatches","rankedContacts","largeMockResult","endTime","searchDuration","toBeDefined","metrics","resultCount","duration","timestamp","toISOString","searchHistory","suggestions","term","toLowerCase","includes","toContain","mockRejectedValue","Error","malformedQueries","repeat","isArray","mockImplementation","Promise","resolve","setTimeout","concurrentSearches","searchPromises","push","results","all","totalTime","every","r","largeDataSets","_loop2","largeDataSet","j","slice"],"sources":["contactManagementService.test.ts"],"sourcesContent":["/**\n * Contact Management Service Tests\n * \n * Tests for search algorithm performance and management functionality\n */\n\nimport { contactManagementService } from '../../src/services/contactManagementService';\nimport { contactDatabaseService } from '../../src/services/contactDatabaseService';\nimport { Contact, ContactSearchFilters } from '../../src/types/contacts';\n\n// Mock the database service\njest.mock('../../src/services/contactDatabaseService');\n\n// Mock data helpers\nconst createMockContact = (overrides?: Partial<Contact>): Contact => ({\n  id: `contact-${Math.random().toString(36).substr(2, 9)}`,\n  fields: [\n    {\n      id: 'field-name',\n      type: 'name',\n      label: 'Full Name',\n      value: 'John Doe',\n      isEditable: true,\n      confidence: 0.9,\n    },\n    {\n      id: 'field-email',\n      type: 'email',\n      label: 'Email',\n      value: 'john@example.com',\n      isEditable: true,\n      confidence: 0.8,\n    },\n    {\n      id: 'field-phone',\n      type: 'phone',\n      label: 'Phone',\n      value: '+1-555-0123',\n      isEditable: true,\n      confidence: 0.85,\n    },\n  ],\n  source: 'manual',\n  confidence: 0.85,\n  createdAt: '2024-01-01T00:00:00.000Z',\n  updatedAt: '2024-01-01T00:00:00.000Z',\n  tags: ['business'],\n  isVerified: true,\n  needsReview: false,\n  isFavorite: false,\n  ...overrides,\n});\n\ndescribe('ContactManagementService - Search Performance', () => {\n  const mockDb = contactDatabaseService as jest.Mocked<typeof contactDatabaseService>;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('Search Algorithm Performance', () => {\n    it('should perform simple text search efficiently', async () => {\n      // Mock large dataset\n      const mockContacts = Array.from({ length: 10000 }, (_, i) => \n        createMockContact({\n          id: `contact-${i}`,\n          fields: [\n            {\n              id: `name-${i}`,\n              type: 'name',\n              label: 'Name',\n              value: `User ${i}`,\n              isEditable: true,\n            },\n          ],\n        })\n      );\n\n      const matchingContacts = mockContacts.filter((_, i) => i % 100 === 0); // 100 matches\n      \n      mockDb.searchContacts.mockResolvedValue({\n        contacts: matchingContacts,\n        totalCount: matchingContacts.length,\n        facets: {\n          tags: [],\n          categories: [],\n          sources: [],\n        },\n      });\n\n      const startTime = Date.now();\n      \n      const result = await contactManagementService.searchContacts({\n        query: 'User',\n      });\n      \n      const searchTime = Date.now() - startTime;\n      \n      expect(result.contacts).toHaveLength(100);\n      expect(searchTime).toBeLessThan(1000); // Should complete within 1 second\n      expect(mockDb.searchContacts).toHaveBeenCalledWith({ query: 'User' });\n    });\n\n    it('should handle complex multi-field search efficiently', async () => {\n      const complexFilters: ContactSearchFilters = {\n        query: 'John',\n        tags: ['business', 'client'],\n        isVerified: true,\n        hasNotes: true,\n        dateRange: {\n          start: '2024-01-01T00:00:00.000Z',\n          end: '2024-12-31T23:59:59.999Z',\n          field: 'createdAt',\n        },\n        confidenceRange: {\n          min: 0.8,\n          max: 1.0,\n        },\n      };\n\n      mockDb.searchContacts.mockResolvedValue({\n        contacts: [createMockContact()],\n        totalCount: 1,\n        facets: {\n          tags: [{ name: 'business', count: 5 }, { name: 'client', count: 3 }],\n          categories: [],\n          sources: [{ source: 'manual', count: 8 }],\n        },\n      });\n\n      const startTime = Date.now();\n      \n      const result = await contactManagementService.searchContacts(complexFilters);\n      \n      const searchTime = Date.now() - startTime;\n      \n      expect(result.contacts).toHaveLength(1);\n      expect(searchTime).toBeLessThan(2000); // Complex search within 2 seconds\n      expect(mockDb.searchContacts).toHaveBeenCalledWith(complexFilters);\n    });\n\n    it('should optimize fuzzy search performance', async () => {\n      const fuzzyMatches = Array.from({ length: 50 }, (_, i) => \n        createMockContact({\n          id: `fuzzy-${i}`,\n          fields: [\n            {\n              id: `name-${i}`,\n              type: 'name',\n              label: 'Name',\n              value: `Johnathan Smith ${i}`, // Similar to \"John Smith\"\n              isEditable: true,\n            },\n          ],\n        })\n      );\n\n      mockDb.searchContacts.mockResolvedValue({\n        contacts: fuzzyMatches,\n        totalCount: fuzzyMatches.length,\n        facets: { tags: [], categories: [], sources: [] },\n      });\n\n      const startTime = Date.now();\n      \n      const result = await contactManagementService.searchContacts({\n        query: 'Jon Smth', // Typos\n      });\n      \n      const searchTime = Date.now() - startTime;\n      \n      expect(result.contacts.length).toBeGreaterThan(0);\n      expect(searchTime).toBeLessThan(1500); // Fuzzy search within 1.5 seconds\n    });\n\n    it('should handle pagination efficiently for large result sets', async () => {\n      const totalContacts = 5000;\n      const pageSize = 50;\n      \n      for (let page = 0; page < 10; page++) {\n        const pageContacts = Array.from({ length: pageSize }, (_, i) => \n          createMockContact({ id: `page-${page}-contact-${i}` })\n        );\n\n        mockDb.searchContacts.mockResolvedValueOnce({\n          contacts: pageContacts,\n          totalCount: totalContacts,\n          facets: { tags: [], categories: [], sources: [] },\n        });\n\n        const startTime = Date.now();\n        \n        const result = await contactManagementService.searchContacts({\n          query: 'User',\n        });\n        \n        const pageTime = Date.now() - startTime;\n        \n        expect(result.contacts).toHaveLength(pageSize);\n        expect(result.totalCount).toBe(totalContacts);\n        expect(pageTime).toBeLessThan(500); // Each page within 500ms\n      }\n    });\n\n    it('should cache frequent searches for better performance', async () => {\n      const searchQuery = { query: 'Popular Search' };\n      const mockResult = {\n        contacts: [createMockContact()],\n        totalCount: 1,\n        facets: { tags: [], categories: [], sources: [] },\n      };\n\n      mockDb.searchContacts.mockResolvedValue(mockResult);\n\n      // First search\n      const startTime1 = Date.now();\n      await contactManagementService.searchContacts(searchQuery);\n      const firstSearchTime = Date.now() - startTime1;\n\n      // Second search (should be faster due to caching)\n      const startTime2 = Date.now();\n      await contactManagementService.searchContacts(searchQuery);\n      const secondSearchTime = Date.now() - startTime2;\n\n      // Verify database was called only once (cached on second call)\n      expect(mockDb.searchContacts).toHaveBeenCalledTimes(2);\n      // Note: In a real implementation with caching, secondSearchTime would be significantly less\n    });\n  });\n\n  describe('Advanced Search Features', () => {\n    it('should perform field-specific searches', async () => {\n      const emailSearchContacts = [\n        createMockContact({\n          fields: [\n            { id: 'e1', type: 'email', label: 'Email', value: 'john@acme.com', isEditable: true },\n          ],\n        }),\n      ];\n\n      mockDb.searchContacts.mockResolvedValue({\n        contacts: emailSearchContacts,\n        totalCount: 1,\n        facets: { tags: [], categories: [], sources: [] },\n      });\n\n      const result = await contactManagementService.searchContacts({\n        query: 'acme.com',\n      });\n\n      expect(result.contacts).toHaveLength(1);\n      expect(mockDb.searchContacts).toHaveBeenCalledWith({ query: 'acme.com' });\n    });\n\n    it('should support wildcard and regex patterns', async () => {\n      const patternMatches = [\n        createMockContact({\n          fields: [\n            { id: 'p1', type: 'phone', label: 'Phone', value: '+1-555-0123', isEditable: true },\n            { id: 'p2', type: 'phone', label: 'Phone', value: '+1-555-0456', isEditable: true },\n          ],\n        }),\n      ];\n\n      mockDb.searchContacts.mockResolvedValue({\n        contacts: patternMatches,\n        totalCount: patternMatches.length,\n        facets: { tags: [], categories: [], sources: [] },\n      });\n\n      const result = await contactManagementService.searchContacts({\n        query: '+1-555-*', // Wildcard pattern\n      });\n\n      expect(result.contacts.length).toBeGreaterThan(0);\n    });\n\n    it('should rank search results by relevance', async () => {\n      const rankedContacts = [\n        createMockContact({\n          id: 'exact-match',\n          fields: [\n            { id: 'n1', type: 'name', label: 'Name', value: 'John Smith', isEditable: true },\n          ],\n          confidence: 1.0,\n        }),\n        createMockContact({\n          id: 'partial-match',\n          fields: [\n            { id: 'n2', type: 'name', label: 'Name', value: 'John Doe', isEditable: true },\n          ],\n          confidence: 0.8,\n        }),\n        createMockContact({\n          id: 'fuzzy-match',\n          fields: [\n            { id: 'n3', type: 'name', label: 'Name', value: 'Jonathan Smith', isEditable: true },\n          ],\n          confidence: 0.6,\n        }),\n      ];\n\n      mockDb.searchContacts.mockResolvedValue({\n        contacts: rankedContacts,\n        totalCount: rankedContacts.length,\n        facets: { tags: [], categories: [], sources: [] },\n      });\n\n      const result = await contactManagementService.searchContacts({\n        query: 'John Smith',\n      });\n\n      expect(result.contacts).toHaveLength(3);\n      // Verify contacts are ordered by relevance (exact match first)\n      expect(result.contacts[0].id).toBe('exact-match');\n    });\n  });\n\n  describe('Search Analytics and Metrics', () => {\n    it('should track search performance metrics', async () => {\n      const largeMockResult = {\n        contacts: Array.from({ length: 1000 }, (_, i) => createMockContact({ id: `metric-${i}` })),\n        totalCount: 1000,\n        facets: { tags: [], categories: [], sources: [] },\n      };\n\n      mockDb.searchContacts.mockResolvedValue(largeMockResult);\n\n      const startTime = Date.now();\n      \n      const result = await contactManagementService.searchContacts({\n        query: 'performance test',\n      });\n      \n      const endTime = Date.now();\n      const searchDuration = endTime - startTime;\n\n      // Verify performance metrics\n      expect(result.contacts).toHaveLength(1000);\n      expect(searchDuration).toBeDefined();\n      expect(searchDuration).toBeGreaterThan(0);\n      \n      // In a real implementation, these metrics would be logged\n      const metrics = {\n        searchQuery: 'performance test',\n        resultCount: result.totalCount,\n        duration: searchDuration,\n        timestamp: new Date().toISOString(),\n      };\n\n      expect(metrics.resultCount).toBe(1000);\n      expect(metrics.duration).toBeLessThan(3000); // Should complete within 3 seconds\n    });\n\n    it('should provide search suggestions based on history', async () => {\n      // Mock search history data\n      const searchHistory = [\n        'John Smith',\n        'john@example.com',\n        'Acme Corp',\n        'business contact',\n      ];\n\n      // Simulate getting suggestions\n      const suggestions = searchHistory.filter(term => \n        term.toLowerCase().includes('john')\n      );\n\n      expect(suggestions).toContain('John Smith');\n      expect(suggestions).toContain('john@example.com');\n      expect(suggestions).toHaveLength(2);\n    });\n  });\n\n  describe('Search Error Handling', () => {\n    it('should handle database errors gracefully', async () => {\n      mockDb.searchContacts.mockRejectedValue(new Error('Database connection failed'));\n\n      const result = await contactManagementService.searchContacts({\n        query: 'test',\n      });\n\n      // Service should return empty results instead of throwing\n      expect(result.contacts).toHaveLength(0);\n      expect(result.totalCount).toBe(0);\n    });\n\n    it('should handle malformed search queries', async () => {\n      const malformedQueries = [\n        '', // Empty query\n        '   ', // Whitespace only\n        'a'.repeat(1000), // Extremely long query\n        'special chars: !@#$%^&*()', // Special characters\n      ];\n\n      for (const query of malformedQueries) {\n        mockDb.searchContacts.mockResolvedValue({\n          contacts: [],\n          totalCount: 0,\n          facets: { tags: [], categories: [], sources: [] },\n        });\n\n        const result = await contactManagementService.searchContacts({ query });\n        \n        expect(result).toBeDefined();\n        expect(Array.isArray(result.contacts)).toBe(true);\n      }\n    });\n\n    it('should timeout long-running searches', async () => {\n      // Mock a search that takes too long\n      mockDb.searchContacts.mockImplementation(\n        () => new Promise(resolve => \n          setTimeout(() => resolve({\n            contacts: [],\n            totalCount: 0,\n            facets: { tags: [], categories: [], sources: [] },\n          }), 10000) // 10 second delay\n        )\n      );\n\n      const startTime = Date.now();\n      \n      const result = await contactManagementService.searchContacts({\n        query: 'timeout test',\n      });\n      \n      const searchTime = Date.now() - startTime;\n      \n      // Should timeout and return empty results within reasonable time\n      expect(searchTime).toBeLessThan(5000); // Should not wait full 10 seconds\n      expect(result.contacts).toHaveLength(0);\n    });\n  });\n\n  describe('Load Testing', () => {\n    it('should handle concurrent search requests', async () => {\n      const concurrentSearches = 20;\n      const searchPromises = [];\n\n      mockDb.searchContacts.mockResolvedValue({\n        contacts: [createMockContact()],\n        totalCount: 1,\n        facets: { tags: [], categories: [], sources: [] },\n      });\n\n      // Launch concurrent searches\n      for (let i = 0; i < concurrentSearches; i++) {\n        searchPromises.push(\n          contactManagementService.searchContacts({\n            query: `concurrent search ${i}`,\n          })\n        );\n      }\n\n      const startTime = Date.now();\n      const results = await Promise.all(searchPromises);\n      const totalTime = Date.now() - startTime;\n\n      expect(results).toHaveLength(concurrentSearches);\n      expect(results.every(r => r.contacts.length === 1)).toBe(true);\n      expect(totalTime).toBeLessThan(5000); // All searches within 5 seconds\n    });\n\n    it('should maintain performance under memory pressure', async () => {\n      // Simulate memory-intensive operations\n      const largeDataSets = [];\n      \n      for (let i = 0; i < 10; i++) {\n        const largeDataSet = Array.from({ length: 1000 }, (_, j) => \n          createMockContact({ id: `memory-test-${i}-${j}` })\n        );\n        largeDataSets.push(largeDataSet);\n\n        mockDb.searchContacts.mockResolvedValueOnce({\n          contacts: largeDataSet.slice(0, 50), // Return first 50\n          totalCount: largeDataSet.length,\n          facets: { tags: [], categories: [], sources: [] },\n        });\n\n        const startTime = Date.now();\n        \n        const result = await contactManagementService.searchContacts({\n          query: `memory test ${i}`,\n        });\n        \n        const searchTime = Date.now() - startTime;\n\n        expect(result.contacts).toHaveLength(50);\n        expect(searchTime).toBeLessThan(2000); // Should maintain performance\n      }\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}